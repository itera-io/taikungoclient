/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the ServerActionButtonVisibilityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerActionButtonVisibilityDto{}

// ServerActionButtonVisibilityDto struct for ServerActionButtonVisibilityDto
type ServerActionButtonVisibilityDto struct {
	Status  *bool `json:"status,omitempty"`
	Reboot  *bool `json:"reboot,omitempty"`
	Console *bool `json:"console,omitempty"`
}

// NewServerActionButtonVisibilityDto instantiates a new ServerActionButtonVisibilityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerActionButtonVisibilityDto() *ServerActionButtonVisibilityDto {
	this := ServerActionButtonVisibilityDto{}
	return &this
}

// NewServerActionButtonVisibilityDtoWithDefaults instantiates a new ServerActionButtonVisibilityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerActionButtonVisibilityDtoWithDefaults() *ServerActionButtonVisibilityDto {
	this := ServerActionButtonVisibilityDto{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ServerActionButtonVisibilityDto) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ServerActionButtonVisibilityDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *ServerActionButtonVisibilityDto) SetStatus(v bool) {
	o.Status = &v
}

// GetReboot returns the Reboot field value if set, zero value otherwise.
func (o *ServerActionButtonVisibilityDto) GetReboot() bool {
	if o == nil || IsNil(o.Reboot) {
		var ret bool
		return ret
	}
	return *o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetRebootOk() (*bool, bool) {
	if o == nil || IsNil(o.Reboot) {
		return nil, false
	}
	return o.Reboot, true
}

// HasReboot returns a boolean if a field has been set.
func (o *ServerActionButtonVisibilityDto) HasReboot() bool {
	if o != nil && !IsNil(o.Reboot) {
		return true
	}

	return false
}

// SetReboot gets a reference to the given bool and assigns it to the Reboot field.
func (o *ServerActionButtonVisibilityDto) SetReboot(v bool) {
	o.Reboot = &v
}

// GetConsole returns the Console field value if set, zero value otherwise.
func (o *ServerActionButtonVisibilityDto) GetConsole() bool {
	if o == nil || IsNil(o.Console) {
		var ret bool
		return ret
	}
	return *o.Console
}

// GetConsoleOk returns a tuple with the Console field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetConsoleOk() (*bool, bool) {
	if o == nil || IsNil(o.Console) {
		return nil, false
	}
	return o.Console, true
}

// HasConsole returns a boolean if a field has been set.
func (o *ServerActionButtonVisibilityDto) HasConsole() bool {
	if o != nil && !IsNil(o.Console) {
		return true
	}

	return false
}

// SetConsole gets a reference to the given bool and assigns it to the Console field.
func (o *ServerActionButtonVisibilityDto) SetConsole(v bool) {
	o.Console = &v
}

func (o ServerActionButtonVisibilityDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerActionButtonVisibilityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Reboot) {
		toSerialize["reboot"] = o.Reboot
	}
	if !IsNil(o.Console) {
		toSerialize["console"] = o.Console
	}
	return toSerialize, nil
}

type NullableServerActionButtonVisibilityDto struct {
	value *ServerActionButtonVisibilityDto
	isSet bool
}

func (v NullableServerActionButtonVisibilityDto) Get() *ServerActionButtonVisibilityDto {
	return v.value
}

func (v *NullableServerActionButtonVisibilityDto) Set(val *ServerActionButtonVisibilityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerActionButtonVisibilityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerActionButtonVisibilityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerActionButtonVisibilityDto(val *ServerActionButtonVisibilityDto) *NullableServerActionButtonVisibilityDto {
	return &NullableServerActionButtonVisibilityDto{value: val, isSet: true}
}

func (v NullableServerActionButtonVisibilityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerActionButtonVisibilityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
