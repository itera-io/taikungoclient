/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the BindUserGroupsToProjectGroupCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindUserGroupsToProjectGroupCommand{}

// BindUserGroupsToProjectGroupCommand struct for BindUserGroupsToProjectGroupCommand
type BindUserGroupsToProjectGroupCommand struct {
	UserGroups       []UpdateProjectUserGroupDto `json:"userGroups,omitempty"`
	ProjectGroupId   *int32                      `json:"projectGroupId,omitempty"`
	ProjectGroupName NullableString              `json:"projectGroupName,omitempty"`
}

// NewBindUserGroupsToProjectGroupCommand instantiates a new BindUserGroupsToProjectGroupCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindUserGroupsToProjectGroupCommand() *BindUserGroupsToProjectGroupCommand {
	this := BindUserGroupsToProjectGroupCommand{}
	return &this
}

// NewBindUserGroupsToProjectGroupCommandWithDefaults instantiates a new BindUserGroupsToProjectGroupCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindUserGroupsToProjectGroupCommandWithDefaults() *BindUserGroupsToProjectGroupCommand {
	this := BindUserGroupsToProjectGroupCommand{}
	return &this
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindUserGroupsToProjectGroupCommand) GetUserGroups() []UpdateProjectUserGroupDto {
	if o == nil {
		var ret []UpdateProjectUserGroupDto
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindUserGroupsToProjectGroupCommand) GetUserGroupsOk() ([]UpdateProjectUserGroupDto, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *BindUserGroupsToProjectGroupCommand) HasUserGroups() bool {
	if o != nil && IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []UpdateProjectUserGroupDto and assigns it to the UserGroups field.
func (o *BindUserGroupsToProjectGroupCommand) SetUserGroups(v []UpdateProjectUserGroupDto) {
	o.UserGroups = v
}

// GetProjectGroupId returns the ProjectGroupId field value if set, zero value otherwise.
func (o *BindUserGroupsToProjectGroupCommand) GetProjectGroupId() int32 {
	if o == nil || IsNil(o.ProjectGroupId) {
		var ret int32
		return ret
	}
	return *o.ProjectGroupId
}

// GetProjectGroupIdOk returns a tuple with the ProjectGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindUserGroupsToProjectGroupCommand) GetProjectGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectGroupId) {
		return nil, false
	}
	return o.ProjectGroupId, true
}

// HasProjectGroupId returns a boolean if a field has been set.
func (o *BindUserGroupsToProjectGroupCommand) HasProjectGroupId() bool {
	if o != nil && !IsNil(o.ProjectGroupId) {
		return true
	}

	return false
}

// SetProjectGroupId gets a reference to the given int32 and assigns it to the ProjectGroupId field.
func (o *BindUserGroupsToProjectGroupCommand) SetProjectGroupId(v int32) {
	o.ProjectGroupId = &v
}

// GetProjectGroupName returns the ProjectGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindUserGroupsToProjectGroupCommand) GetProjectGroupName() string {
	if o == nil || IsNil(o.ProjectGroupName.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectGroupName.Get()
}

// GetProjectGroupNameOk returns a tuple with the ProjectGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindUserGroupsToProjectGroupCommand) GetProjectGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectGroupName.Get(), o.ProjectGroupName.IsSet()
}

// HasProjectGroupName returns a boolean if a field has been set.
func (o *BindUserGroupsToProjectGroupCommand) HasProjectGroupName() bool {
	if o != nil && o.ProjectGroupName.IsSet() {
		return true
	}

	return false
}

// SetProjectGroupName gets a reference to the given NullableString and assigns it to the ProjectGroupName field.
func (o *BindUserGroupsToProjectGroupCommand) SetProjectGroupName(v string) {
	o.ProjectGroupName.Set(&v)
}

// SetProjectGroupNameNil sets the value for ProjectGroupName to be an explicit nil
func (o *BindUserGroupsToProjectGroupCommand) SetProjectGroupNameNil() {
	o.ProjectGroupName.Set(nil)
}

// UnsetProjectGroupName ensures that no value is present for ProjectGroupName, not even an explicit nil
func (o *BindUserGroupsToProjectGroupCommand) UnsetProjectGroupName() {
	o.ProjectGroupName.Unset()
}

func (o BindUserGroupsToProjectGroupCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindUserGroupsToProjectGroupCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserGroups != nil {
		toSerialize["userGroups"] = o.UserGroups
	}
	if !IsNil(o.ProjectGroupId) {
		toSerialize["projectGroupId"] = o.ProjectGroupId
	}
	if o.ProjectGroupName.IsSet() {
		toSerialize["projectGroupName"] = o.ProjectGroupName.Get()
	}
	return toSerialize, nil
}

type NullableBindUserGroupsToProjectGroupCommand struct {
	value *BindUserGroupsToProjectGroupCommand
	isSet bool
}

func (v NullableBindUserGroupsToProjectGroupCommand) Get() *BindUserGroupsToProjectGroupCommand {
	return v.value
}

func (v *NullableBindUserGroupsToProjectGroupCommand) Set(val *BindUserGroupsToProjectGroupCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableBindUserGroupsToProjectGroupCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableBindUserGroupsToProjectGroupCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindUserGroupsToProjectGroupCommand(val *BindUserGroupsToProjectGroupCommand) *NullableBindUserGroupsToProjectGroupCommand {
	return &NullableBindUserGroupsToProjectGroupCommand{value: val, isSet: true}
}

func (v NullableBindUserGroupsToProjectGroupCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindUserGroupsToProjectGroupCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
