/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the ChangePasswordCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordCommand{}

// ChangePasswordCommand struct for ChangePasswordCommand
type ChangePasswordCommand struct {
	Password    NullableString `json:"password,omitempty"`
	NewPassword NullableString `json:"newPassword,omitempty"`
}

// NewChangePasswordCommand instantiates a new ChangePasswordCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordCommand() *ChangePasswordCommand {
	this := ChangePasswordCommand{}
	return &this
}

// NewChangePasswordCommandWithDefaults instantiates a new ChangePasswordCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordCommandWithDefaults() *ChangePasswordCommand {
	this := ChangePasswordCommand{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangePasswordCommand) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangePasswordCommand) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *ChangePasswordCommand) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *ChangePasswordCommand) SetPassword(v string) {
	o.Password.Set(&v)
}

// SetPasswordNil sets the value for Password to be an explicit nil
func (o *ChangePasswordCommand) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *ChangePasswordCommand) UnsetPassword() {
	o.Password.Unset()
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangePasswordCommand) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword.Get()) {
		var ret string
		return ret
	}
	return *o.NewPassword.Get()
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangePasswordCommand) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPassword.Get(), o.NewPassword.IsSet()
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ChangePasswordCommand) HasNewPassword() bool {
	if o != nil && o.NewPassword.IsSet() {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given NullableString and assigns it to the NewPassword field.
func (o *ChangePasswordCommand) SetNewPassword(v string) {
	o.NewPassword.Set(&v)
}

// SetNewPasswordNil sets the value for NewPassword to be an explicit nil
func (o *ChangePasswordCommand) SetNewPasswordNil() {
	o.NewPassword.Set(nil)
}

// UnsetNewPassword ensures that no value is present for NewPassword, not even an explicit nil
func (o *ChangePasswordCommand) UnsetNewPassword() {
	o.NewPassword.Unset()
}

func (o ChangePasswordCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.NewPassword.IsSet() {
		toSerialize["newPassword"] = o.NewPassword.Get()
	}
	return toSerialize, nil
}

type NullableChangePasswordCommand struct {
	value *ChangePasswordCommand
	isSet bool
}

func (v NullableChangePasswordCommand) Get() *ChangePasswordCommand {
	return v.value
}

func (v *NullableChangePasswordCommand) Set(val *ChangePasswordCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordCommand(val *ChangePasswordCommand) *NullableChangePasswordCommand {
	return &NullableChangePasswordCommand{value: val, isSet: true}
}

func (v NullableChangePasswordCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
