/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the ServerChartDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerChartDto{}

// ServerChartDto struct for ServerChartDto
type ServerChartDto struct {
	Aws                 []ServerCommonRecordDto `json:"aws,omitempty"`
	Azure               []ServerCommonRecordDto `json:"azure,omitempty"`
	Openstack           []ServerCommonRecordDto `json:"openstack,omitempty"`
	Google              []ServerCommonRecordDto `json:"google,omitempty"`
	Tanzu               []ServerCommonRecordDto `json:"tanzu,omitempty"`
	Proxmox             []ServerCommonRecordDto `json:"proxmox,omitempty"`
	Openshift           []ServerCommonRecordDto `json:"openshift,omitempty"`
	Failed              []ServerCommonRecordDto `json:"failed,omitempty"`
	Succeeded           []ServerCommonRecordDto `json:"succeeded,omitempty"`
	Waiting             []ServerCommonRecordDto `json:"waiting,omitempty"`
	Updating            []ServerCommonRecordDto `json:"updating,omitempty"`
	Deleting            []ServerCommonRecordDto `json:"deleting,omitempty"`
	Purging             []ServerCommonRecordDto `json:"purging,omitempty"`
	TotalCount          *int32                  `json:"totalCount,omitempty"`
	TotalCpu            *int32                  `json:"totalCpu,omitempty"`
	TotalRam            *int64                  `json:"totalRam,omitempty"`
	TotalDiskSize       *int64                  `json:"totalDiskSize,omitempty"`
	TotalFailedCount    *int32                  `json:"totalFailedCount,omitempty"`
	TotalSucceededCount *int32                  `json:"totalSucceededCount,omitempty"`
	TotalUpdatingCount  *int32                  `json:"totalUpdatingCount,omitempty"`
	TotalPendingCount   *int32                  `json:"totalPendingCount,omitempty"`
	TotalAwsCount       *int32                  `json:"totalAwsCount,omitempty"`
	TotalAzureCount     *int32                  `json:"totalAzureCount,omitempty"`
	TotalOpenstackCount *int32                  `json:"totalOpenstackCount,omitempty"`
	TotalGoogleCount    *int32                  `json:"totalGoogleCount,omitempty"`
	TotalTanzuCount     *int32                  `json:"totalTanzuCount,omitempty"`
	TotalOpenshiftCount *int32                  `json:"totalOpenshiftCount,omitempty"`
	TotalProxmoxCount   *int32                  `json:"totalProxmoxCount,omitempty"`
	UsedResources       []UserResourceChartDto  `json:"usedResources,omitempty"`
}

// NewServerChartDto instantiates a new ServerChartDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerChartDto() *ServerChartDto {
	this := ServerChartDto{}
	return &this
}

// NewServerChartDtoWithDefaults instantiates a new ServerChartDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerChartDtoWithDefaults() *ServerChartDto {
	this := ServerChartDto{}
	return &this
}

// GetAws returns the Aws field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetAws() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Aws
}

// GetAwsOk returns a tuple with the Aws field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetAwsOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Aws) {
		return nil, false
	}
	return o.Aws, true
}

// HasAws returns a boolean if a field has been set.
func (o *ServerChartDto) HasAws() bool {
	if o != nil && IsNil(o.Aws) {
		return true
	}

	return false
}

// SetAws gets a reference to the given []ServerCommonRecordDto and assigns it to the Aws field.
func (o *ServerChartDto) SetAws(v []ServerCommonRecordDto) {
	o.Aws = v
}

// GetAzure returns the Azure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetAzure() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetAzureOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Azure) {
		return nil, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *ServerChartDto) HasAzure() bool {
	if o != nil && IsNil(o.Azure) {
		return true
	}

	return false
}

// SetAzure gets a reference to the given []ServerCommonRecordDto and assigns it to the Azure field.
func (o *ServerChartDto) SetAzure(v []ServerCommonRecordDto) {
	o.Azure = v
}

// GetOpenstack returns the Openstack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetOpenstack() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Openstack
}

// GetOpenstackOk returns a tuple with the Openstack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetOpenstackOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Openstack) {
		return nil, false
	}
	return o.Openstack, true
}

// HasOpenstack returns a boolean if a field has been set.
func (o *ServerChartDto) HasOpenstack() bool {
	if o != nil && IsNil(o.Openstack) {
		return true
	}

	return false
}

// SetOpenstack gets a reference to the given []ServerCommonRecordDto and assigns it to the Openstack field.
func (o *ServerChartDto) SetOpenstack(v []ServerCommonRecordDto) {
	o.Openstack = v
}

// GetGoogle returns the Google field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetGoogle() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Google
}

// GetGoogleOk returns a tuple with the Google field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetGoogleOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Google) {
		return nil, false
	}
	return o.Google, true
}

// HasGoogle returns a boolean if a field has been set.
func (o *ServerChartDto) HasGoogle() bool {
	if o != nil && IsNil(o.Google) {
		return true
	}

	return false
}

// SetGoogle gets a reference to the given []ServerCommonRecordDto and assigns it to the Google field.
func (o *ServerChartDto) SetGoogle(v []ServerCommonRecordDto) {
	o.Google = v
}

// GetTanzu returns the Tanzu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetTanzu() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Tanzu
}

// GetTanzuOk returns a tuple with the Tanzu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetTanzuOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Tanzu) {
		return nil, false
	}
	return o.Tanzu, true
}

// HasTanzu returns a boolean if a field has been set.
func (o *ServerChartDto) HasTanzu() bool {
	if o != nil && IsNil(o.Tanzu) {
		return true
	}

	return false
}

// SetTanzu gets a reference to the given []ServerCommonRecordDto and assigns it to the Tanzu field.
func (o *ServerChartDto) SetTanzu(v []ServerCommonRecordDto) {
	o.Tanzu = v
}

// GetProxmox returns the Proxmox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetProxmox() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Proxmox
}

// GetProxmoxOk returns a tuple with the Proxmox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetProxmoxOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Proxmox) {
		return nil, false
	}
	return o.Proxmox, true
}

// HasProxmox returns a boolean if a field has been set.
func (o *ServerChartDto) HasProxmox() bool {
	if o != nil && IsNil(o.Proxmox) {
		return true
	}

	return false
}

// SetProxmox gets a reference to the given []ServerCommonRecordDto and assigns it to the Proxmox field.
func (o *ServerChartDto) SetProxmox(v []ServerCommonRecordDto) {
	o.Proxmox = v
}

// GetOpenshift returns the Openshift field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetOpenshift() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Openshift
}

// GetOpenshiftOk returns a tuple with the Openshift field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetOpenshiftOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Openshift) {
		return nil, false
	}
	return o.Openshift, true
}

// HasOpenshift returns a boolean if a field has been set.
func (o *ServerChartDto) HasOpenshift() bool {
	if o != nil && IsNil(o.Openshift) {
		return true
	}

	return false
}

// SetOpenshift gets a reference to the given []ServerCommonRecordDto and assigns it to the Openshift field.
func (o *ServerChartDto) SetOpenshift(v []ServerCommonRecordDto) {
	o.Openshift = v
}

// GetFailed returns the Failed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetFailed() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetFailedOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *ServerChartDto) HasFailed() bool {
	if o != nil && IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given []ServerCommonRecordDto and assigns it to the Failed field.
func (o *ServerChartDto) SetFailed(v []ServerCommonRecordDto) {
	o.Failed = v
}

// GetSucceeded returns the Succeeded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetSucceeded() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetSucceededOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Succeeded) {
		return nil, false
	}
	return o.Succeeded, true
}

// HasSucceeded returns a boolean if a field has been set.
func (o *ServerChartDto) HasSucceeded() bool {
	if o != nil && IsNil(o.Succeeded) {
		return true
	}

	return false
}

// SetSucceeded gets a reference to the given []ServerCommonRecordDto and assigns it to the Succeeded field.
func (o *ServerChartDto) SetSucceeded(v []ServerCommonRecordDto) {
	o.Succeeded = v
}

// GetWaiting returns the Waiting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetWaiting() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Waiting
}

// GetWaitingOk returns a tuple with the Waiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetWaitingOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Waiting) {
		return nil, false
	}
	return o.Waiting, true
}

// HasWaiting returns a boolean if a field has been set.
func (o *ServerChartDto) HasWaiting() bool {
	if o != nil && IsNil(o.Waiting) {
		return true
	}

	return false
}

// SetWaiting gets a reference to the given []ServerCommonRecordDto and assigns it to the Waiting field.
func (o *ServerChartDto) SetWaiting(v []ServerCommonRecordDto) {
	o.Waiting = v
}

// GetUpdating returns the Updating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetUpdating() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Updating
}

// GetUpdatingOk returns a tuple with the Updating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetUpdatingOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Updating) {
		return nil, false
	}
	return o.Updating, true
}

// HasUpdating returns a boolean if a field has been set.
func (o *ServerChartDto) HasUpdating() bool {
	if o != nil && IsNil(o.Updating) {
		return true
	}

	return false
}

// SetUpdating gets a reference to the given []ServerCommonRecordDto and assigns it to the Updating field.
func (o *ServerChartDto) SetUpdating(v []ServerCommonRecordDto) {
	o.Updating = v
}

// GetDeleting returns the Deleting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetDeleting() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Deleting
}

// GetDeletingOk returns a tuple with the Deleting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetDeletingOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Deleting) {
		return nil, false
	}
	return o.Deleting, true
}

// HasDeleting returns a boolean if a field has been set.
func (o *ServerChartDto) HasDeleting() bool {
	if o != nil && IsNil(o.Deleting) {
		return true
	}

	return false
}

// SetDeleting gets a reference to the given []ServerCommonRecordDto and assigns it to the Deleting field.
func (o *ServerChartDto) SetDeleting(v []ServerCommonRecordDto) {
	o.Deleting = v
}

// GetPurging returns the Purging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetPurging() []ServerCommonRecordDto {
	if o == nil {
		var ret []ServerCommonRecordDto
		return ret
	}
	return o.Purging
}

// GetPurgingOk returns a tuple with the Purging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetPurgingOk() ([]ServerCommonRecordDto, bool) {
	if o == nil || IsNil(o.Purging) {
		return nil, false
	}
	return o.Purging, true
}

// HasPurging returns a boolean if a field has been set.
func (o *ServerChartDto) HasPurging() bool {
	if o != nil && IsNil(o.Purging) {
		return true
	}

	return false
}

// SetPurging gets a reference to the given []ServerCommonRecordDto and assigns it to the Purging field.
func (o *ServerChartDto) SetPurging(v []ServerCommonRecordDto) {
	o.Purging = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ServerChartDto) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetTotalCpu returns the TotalCpu field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalCpu() int32 {
	if o == nil || IsNil(o.TotalCpu) {
		var ret int32
		return ret
	}
	return *o.TotalCpu
}

// GetTotalCpuOk returns a tuple with the TotalCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCpu) {
		return nil, false
	}
	return o.TotalCpu, true
}

// HasTotalCpu returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalCpu() bool {
	if o != nil && !IsNil(o.TotalCpu) {
		return true
	}

	return false
}

// SetTotalCpu gets a reference to the given int32 and assigns it to the TotalCpu field.
func (o *ServerChartDto) SetTotalCpu(v int32) {
	o.TotalCpu = &v
}

// GetTotalRam returns the TotalRam field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalRam() int64 {
	if o == nil || IsNil(o.TotalRam) {
		var ret int64
		return ret
	}
	return *o.TotalRam
}

// GetTotalRamOk returns a tuple with the TotalRam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalRamOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalRam) {
		return nil, false
	}
	return o.TotalRam, true
}

// HasTotalRam returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalRam() bool {
	if o != nil && !IsNil(o.TotalRam) {
		return true
	}

	return false
}

// SetTotalRam gets a reference to the given int64 and assigns it to the TotalRam field.
func (o *ServerChartDto) SetTotalRam(v int64) {
	o.TotalRam = &v
}

// GetTotalDiskSize returns the TotalDiskSize field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalDiskSize() int64 {
	if o == nil || IsNil(o.TotalDiskSize) {
		var ret int64
		return ret
	}
	return *o.TotalDiskSize
}

// GetTotalDiskSizeOk returns a tuple with the TotalDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalDiskSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalDiskSize) {
		return nil, false
	}
	return o.TotalDiskSize, true
}

// HasTotalDiskSize returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalDiskSize() bool {
	if o != nil && !IsNil(o.TotalDiskSize) {
		return true
	}

	return false
}

// SetTotalDiskSize gets a reference to the given int64 and assigns it to the TotalDiskSize field.
func (o *ServerChartDto) SetTotalDiskSize(v int64) {
	o.TotalDiskSize = &v
}

// GetTotalFailedCount returns the TotalFailedCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalFailedCount() int32 {
	if o == nil || IsNil(o.TotalFailedCount) {
		var ret int32
		return ret
	}
	return *o.TotalFailedCount
}

// GetTotalFailedCountOk returns a tuple with the TotalFailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalFailedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalFailedCount) {
		return nil, false
	}
	return o.TotalFailedCount, true
}

// HasTotalFailedCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalFailedCount() bool {
	if o != nil && !IsNil(o.TotalFailedCount) {
		return true
	}

	return false
}

// SetTotalFailedCount gets a reference to the given int32 and assigns it to the TotalFailedCount field.
func (o *ServerChartDto) SetTotalFailedCount(v int32) {
	o.TotalFailedCount = &v
}

// GetTotalSucceededCount returns the TotalSucceededCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalSucceededCount() int32 {
	if o == nil || IsNil(o.TotalSucceededCount) {
		var ret int32
		return ret
	}
	return *o.TotalSucceededCount
}

// GetTotalSucceededCountOk returns a tuple with the TotalSucceededCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalSucceededCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalSucceededCount) {
		return nil, false
	}
	return o.TotalSucceededCount, true
}

// HasTotalSucceededCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalSucceededCount() bool {
	if o != nil && !IsNil(o.TotalSucceededCount) {
		return true
	}

	return false
}

// SetTotalSucceededCount gets a reference to the given int32 and assigns it to the TotalSucceededCount field.
func (o *ServerChartDto) SetTotalSucceededCount(v int32) {
	o.TotalSucceededCount = &v
}

// GetTotalUpdatingCount returns the TotalUpdatingCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalUpdatingCount() int32 {
	if o == nil || IsNil(o.TotalUpdatingCount) {
		var ret int32
		return ret
	}
	return *o.TotalUpdatingCount
}

// GetTotalUpdatingCountOk returns a tuple with the TotalUpdatingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalUpdatingCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalUpdatingCount) {
		return nil, false
	}
	return o.TotalUpdatingCount, true
}

// HasTotalUpdatingCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalUpdatingCount() bool {
	if o != nil && !IsNil(o.TotalUpdatingCount) {
		return true
	}

	return false
}

// SetTotalUpdatingCount gets a reference to the given int32 and assigns it to the TotalUpdatingCount field.
func (o *ServerChartDto) SetTotalUpdatingCount(v int32) {
	o.TotalUpdatingCount = &v
}

// GetTotalPendingCount returns the TotalPendingCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalPendingCount() int32 {
	if o == nil || IsNil(o.TotalPendingCount) {
		var ret int32
		return ret
	}
	return *o.TotalPendingCount
}

// GetTotalPendingCountOk returns a tuple with the TotalPendingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalPendingCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPendingCount) {
		return nil, false
	}
	return o.TotalPendingCount, true
}

// HasTotalPendingCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalPendingCount() bool {
	if o != nil && !IsNil(o.TotalPendingCount) {
		return true
	}

	return false
}

// SetTotalPendingCount gets a reference to the given int32 and assigns it to the TotalPendingCount field.
func (o *ServerChartDto) SetTotalPendingCount(v int32) {
	o.TotalPendingCount = &v
}

// GetTotalAwsCount returns the TotalAwsCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalAwsCount() int32 {
	if o == nil || IsNil(o.TotalAwsCount) {
		var ret int32
		return ret
	}
	return *o.TotalAwsCount
}

// GetTotalAwsCountOk returns a tuple with the TotalAwsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalAwsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalAwsCount) {
		return nil, false
	}
	return o.TotalAwsCount, true
}

// HasTotalAwsCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalAwsCount() bool {
	if o != nil && !IsNil(o.TotalAwsCount) {
		return true
	}

	return false
}

// SetTotalAwsCount gets a reference to the given int32 and assigns it to the TotalAwsCount field.
func (o *ServerChartDto) SetTotalAwsCount(v int32) {
	o.TotalAwsCount = &v
}

// GetTotalAzureCount returns the TotalAzureCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalAzureCount() int32 {
	if o == nil || IsNil(o.TotalAzureCount) {
		var ret int32
		return ret
	}
	return *o.TotalAzureCount
}

// GetTotalAzureCountOk returns a tuple with the TotalAzureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalAzureCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalAzureCount) {
		return nil, false
	}
	return o.TotalAzureCount, true
}

// HasTotalAzureCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalAzureCount() bool {
	if o != nil && !IsNil(o.TotalAzureCount) {
		return true
	}

	return false
}

// SetTotalAzureCount gets a reference to the given int32 and assigns it to the TotalAzureCount field.
func (o *ServerChartDto) SetTotalAzureCount(v int32) {
	o.TotalAzureCount = &v
}

// GetTotalOpenstackCount returns the TotalOpenstackCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalOpenstackCount() int32 {
	if o == nil || IsNil(o.TotalOpenstackCount) {
		var ret int32
		return ret
	}
	return *o.TotalOpenstackCount
}

// GetTotalOpenstackCountOk returns a tuple with the TotalOpenstackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalOpenstackCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOpenstackCount) {
		return nil, false
	}
	return o.TotalOpenstackCount, true
}

// HasTotalOpenstackCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalOpenstackCount() bool {
	if o != nil && !IsNil(o.TotalOpenstackCount) {
		return true
	}

	return false
}

// SetTotalOpenstackCount gets a reference to the given int32 and assigns it to the TotalOpenstackCount field.
func (o *ServerChartDto) SetTotalOpenstackCount(v int32) {
	o.TotalOpenstackCount = &v
}

// GetTotalGoogleCount returns the TotalGoogleCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalGoogleCount() int32 {
	if o == nil || IsNil(o.TotalGoogleCount) {
		var ret int32
		return ret
	}
	return *o.TotalGoogleCount
}

// GetTotalGoogleCountOk returns a tuple with the TotalGoogleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalGoogleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalGoogleCount) {
		return nil, false
	}
	return o.TotalGoogleCount, true
}

// HasTotalGoogleCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalGoogleCount() bool {
	if o != nil && !IsNil(o.TotalGoogleCount) {
		return true
	}

	return false
}

// SetTotalGoogleCount gets a reference to the given int32 and assigns it to the TotalGoogleCount field.
func (o *ServerChartDto) SetTotalGoogleCount(v int32) {
	o.TotalGoogleCount = &v
}

// GetTotalTanzuCount returns the TotalTanzuCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalTanzuCount() int32 {
	if o == nil || IsNil(o.TotalTanzuCount) {
		var ret int32
		return ret
	}
	return *o.TotalTanzuCount
}

// GetTotalTanzuCountOk returns a tuple with the TotalTanzuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalTanzuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalTanzuCount) {
		return nil, false
	}
	return o.TotalTanzuCount, true
}

// HasTotalTanzuCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalTanzuCount() bool {
	if o != nil && !IsNil(o.TotalTanzuCount) {
		return true
	}

	return false
}

// SetTotalTanzuCount gets a reference to the given int32 and assigns it to the TotalTanzuCount field.
func (o *ServerChartDto) SetTotalTanzuCount(v int32) {
	o.TotalTanzuCount = &v
}

// GetTotalOpenshiftCount returns the TotalOpenshiftCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalOpenshiftCount() int32 {
	if o == nil || IsNil(o.TotalOpenshiftCount) {
		var ret int32
		return ret
	}
	return *o.TotalOpenshiftCount
}

// GetTotalOpenshiftCountOk returns a tuple with the TotalOpenshiftCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalOpenshiftCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOpenshiftCount) {
		return nil, false
	}
	return o.TotalOpenshiftCount, true
}

// HasTotalOpenshiftCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalOpenshiftCount() bool {
	if o != nil && !IsNil(o.TotalOpenshiftCount) {
		return true
	}

	return false
}

// SetTotalOpenshiftCount gets a reference to the given int32 and assigns it to the TotalOpenshiftCount field.
func (o *ServerChartDto) SetTotalOpenshiftCount(v int32) {
	o.TotalOpenshiftCount = &v
}

// GetTotalProxmoxCount returns the TotalProxmoxCount field value if set, zero value otherwise.
func (o *ServerChartDto) GetTotalProxmoxCount() int32 {
	if o == nil || IsNil(o.TotalProxmoxCount) {
		var ret int32
		return ret
	}
	return *o.TotalProxmoxCount
}

// GetTotalProxmoxCountOk returns a tuple with the TotalProxmoxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerChartDto) GetTotalProxmoxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalProxmoxCount) {
		return nil, false
	}
	return o.TotalProxmoxCount, true
}

// HasTotalProxmoxCount returns a boolean if a field has been set.
func (o *ServerChartDto) HasTotalProxmoxCount() bool {
	if o != nil && !IsNil(o.TotalProxmoxCount) {
		return true
	}

	return false
}

// SetTotalProxmoxCount gets a reference to the given int32 and assigns it to the TotalProxmoxCount field.
func (o *ServerChartDto) SetTotalProxmoxCount(v int32) {
	o.TotalProxmoxCount = &v
}

// GetUsedResources returns the UsedResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerChartDto) GetUsedResources() []UserResourceChartDto {
	if o == nil {
		var ret []UserResourceChartDto
		return ret
	}
	return o.UsedResources
}

// GetUsedResourcesOk returns a tuple with the UsedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerChartDto) GetUsedResourcesOk() ([]UserResourceChartDto, bool) {
	if o == nil || IsNil(o.UsedResources) {
		return nil, false
	}
	return o.UsedResources, true
}

// HasUsedResources returns a boolean if a field has been set.
func (o *ServerChartDto) HasUsedResources() bool {
	if o != nil && IsNil(o.UsedResources) {
		return true
	}

	return false
}

// SetUsedResources gets a reference to the given []UserResourceChartDto and assigns it to the UsedResources field.
func (o *ServerChartDto) SetUsedResources(v []UserResourceChartDto) {
	o.UsedResources = v
}

func (o ServerChartDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerChartDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Aws != nil {
		toSerialize["aws"] = o.Aws
	}
	if o.Azure != nil {
		toSerialize["azure"] = o.Azure
	}
	if o.Openstack != nil {
		toSerialize["openstack"] = o.Openstack
	}
	if o.Google != nil {
		toSerialize["google"] = o.Google
	}
	if o.Tanzu != nil {
		toSerialize["tanzu"] = o.Tanzu
	}
	if o.Proxmox != nil {
		toSerialize["proxmox"] = o.Proxmox
	}
	if o.Openshift != nil {
		toSerialize["openshift"] = o.Openshift
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.Succeeded != nil {
		toSerialize["succeeded"] = o.Succeeded
	}
	if o.Waiting != nil {
		toSerialize["waiting"] = o.Waiting
	}
	if o.Updating != nil {
		toSerialize["updating"] = o.Updating
	}
	if o.Deleting != nil {
		toSerialize["deleting"] = o.Deleting
	}
	if o.Purging != nil {
		toSerialize["purging"] = o.Purging
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.TotalCpu) {
		toSerialize["totalCpu"] = o.TotalCpu
	}
	if !IsNil(o.TotalRam) {
		toSerialize["totalRam"] = o.TotalRam
	}
	if !IsNil(o.TotalDiskSize) {
		toSerialize["totalDiskSize"] = o.TotalDiskSize
	}
	if !IsNil(o.TotalFailedCount) {
		toSerialize["totalFailedCount"] = o.TotalFailedCount
	}
	if !IsNil(o.TotalSucceededCount) {
		toSerialize["totalSucceededCount"] = o.TotalSucceededCount
	}
	if !IsNil(o.TotalUpdatingCount) {
		toSerialize["totalUpdatingCount"] = o.TotalUpdatingCount
	}
	if !IsNil(o.TotalPendingCount) {
		toSerialize["totalPendingCount"] = o.TotalPendingCount
	}
	if !IsNil(o.TotalAwsCount) {
		toSerialize["totalAwsCount"] = o.TotalAwsCount
	}
	if !IsNil(o.TotalAzureCount) {
		toSerialize["totalAzureCount"] = o.TotalAzureCount
	}
	if !IsNil(o.TotalOpenstackCount) {
		toSerialize["totalOpenstackCount"] = o.TotalOpenstackCount
	}
	if !IsNil(o.TotalGoogleCount) {
		toSerialize["totalGoogleCount"] = o.TotalGoogleCount
	}
	if !IsNil(o.TotalTanzuCount) {
		toSerialize["totalTanzuCount"] = o.TotalTanzuCount
	}
	if !IsNil(o.TotalOpenshiftCount) {
		toSerialize["totalOpenshiftCount"] = o.TotalOpenshiftCount
	}
	if !IsNil(o.TotalProxmoxCount) {
		toSerialize["totalProxmoxCount"] = o.TotalProxmoxCount
	}
	if o.UsedResources != nil {
		toSerialize["usedResources"] = o.UsedResources
	}
	return toSerialize, nil
}

type NullableServerChartDto struct {
	value *ServerChartDto
	isSet bool
}

func (v NullableServerChartDto) Get() *ServerChartDto {
	return v.value
}

func (v *NullableServerChartDto) Set(val *ServerChartDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerChartDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerChartDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerChartDto(val *ServerChartDto) *NullableServerChartDto {
	return &NullableServerChartDto{value: val, isSet: true}
}

func (v NullableServerChartDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerChartDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
