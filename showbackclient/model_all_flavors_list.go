/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the AllFlavorsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllFlavorsList{}

// AllFlavorsList struct for AllFlavorsList
type AllFlavorsList struct {
	Data       []FlavorsListDto `json:"data,omitempty"`
	TotalCount *int32           `json:"totalCount,omitempty"`
	CloudType  NullableString   `json:"cloudType,omitempty"`
}

// NewAllFlavorsList instantiates a new AllFlavorsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllFlavorsList() *AllFlavorsList {
	this := AllFlavorsList{}
	return &this
}

// NewAllFlavorsListWithDefaults instantiates a new AllFlavorsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllFlavorsListWithDefaults() *AllFlavorsList {
	this := AllFlavorsList{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllFlavorsList) GetData() []FlavorsListDto {
	if o == nil {
		var ret []FlavorsListDto
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllFlavorsList) GetDataOk() ([]FlavorsListDto, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AllFlavorsList) HasData() bool {
	if o != nil && IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []FlavorsListDto and assigns it to the Data field.
func (o *AllFlavorsList) SetData(v []FlavorsListDto) {
	o.Data = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *AllFlavorsList) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllFlavorsList) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *AllFlavorsList) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *AllFlavorsList) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetCloudType returns the CloudType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllFlavorsList) GetCloudType() string {
	if o == nil || IsNil(o.CloudType.Get()) {
		var ret string
		return ret
	}
	return *o.CloudType.Get()
}

// GetCloudTypeOk returns a tuple with the CloudType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllFlavorsList) GetCloudTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudType.Get(), o.CloudType.IsSet()
}

// HasCloudType returns a boolean if a field has been set.
func (o *AllFlavorsList) HasCloudType() bool {
	if o != nil && o.CloudType.IsSet() {
		return true
	}

	return false
}

// SetCloudType gets a reference to the given NullableString and assigns it to the CloudType field.
func (o *AllFlavorsList) SetCloudType(v string) {
	o.CloudType.Set(&v)
}

// SetCloudTypeNil sets the value for CloudType to be an explicit nil
func (o *AllFlavorsList) SetCloudTypeNil() {
	o.CloudType.Set(nil)
}

// UnsetCloudType ensures that no value is present for CloudType, not even an explicit nil
func (o *AllFlavorsList) UnsetCloudType() {
	o.CloudType.Unset()
}

func (o AllFlavorsList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllFlavorsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.CloudType.IsSet() {
		toSerialize["cloudType"] = o.CloudType.Get()
	}
	return toSerialize, nil
}

type NullableAllFlavorsList struct {
	value *AllFlavorsList
	isSet bool
}

func (v NullableAllFlavorsList) Get() *AllFlavorsList {
	return v.value
}

func (v *NullableAllFlavorsList) Set(val *AllFlavorsList) {
	v.value = val
	v.isSet = true
}

func (v NullableAllFlavorsList) IsSet() bool {
	return v.isSet
}

func (v *NullableAllFlavorsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllFlavorsList(val *AllFlavorsList) *NullableAllFlavorsList {
	return &NullableAllFlavorsList{value: val, isSet: true}
}

func (v NullableAllFlavorsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllFlavorsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
