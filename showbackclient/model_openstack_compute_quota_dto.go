/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the OpenstackComputeQuotaDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenstackComputeQuotaDto{}

// OpenstackComputeQuotaDto struct for OpenstackComputeQuotaDto
type OpenstackComputeQuotaDto struct {
	MaxTotalRamSize   *int64 `json:"maxTotalRamSize,omitempty"`
	MaxServerGroups   *int64 `json:"maxServerGroups,omitempty"`
	MaxTotalInstances *int64 `json:"maxTotalInstances,omitempty"`
	MaxTotalCores     *int64 `json:"maxTotalCores,omitempty"`
	UsedRamSize       *int64 `json:"usedRamSize,omitempty"`
	UsedCpuSize       *int64 `json:"usedCpuSize,omitempty"`
	UsedInstanceSize  *int64 `json:"usedInstanceSize,omitempty"`
	UsedServerGroups  *int64 `json:"usedServerGroups,omitempty"`
}

// NewOpenstackComputeQuotaDto instantiates a new OpenstackComputeQuotaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenstackComputeQuotaDto() *OpenstackComputeQuotaDto {
	this := OpenstackComputeQuotaDto{}
	return &this
}

// NewOpenstackComputeQuotaDtoWithDefaults instantiates a new OpenstackComputeQuotaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenstackComputeQuotaDtoWithDefaults() *OpenstackComputeQuotaDto {
	this := OpenstackComputeQuotaDto{}
	return &this
}

// GetMaxTotalRamSize returns the MaxTotalRamSize field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetMaxTotalRamSize() int64 {
	if o == nil || IsNil(o.MaxTotalRamSize) {
		var ret int64
		return ret
	}
	return *o.MaxTotalRamSize
}

// GetMaxTotalRamSizeOk returns a tuple with the MaxTotalRamSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetMaxTotalRamSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTotalRamSize) {
		return nil, false
	}
	return o.MaxTotalRamSize, true
}

// HasMaxTotalRamSize returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasMaxTotalRamSize() bool {
	if o != nil && !IsNil(o.MaxTotalRamSize) {
		return true
	}

	return false
}

// SetMaxTotalRamSize gets a reference to the given int64 and assigns it to the MaxTotalRamSize field.
func (o *OpenstackComputeQuotaDto) SetMaxTotalRamSize(v int64) {
	o.MaxTotalRamSize = &v
}

// GetMaxServerGroups returns the MaxServerGroups field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetMaxServerGroups() int64 {
	if o == nil || IsNil(o.MaxServerGroups) {
		var ret int64
		return ret
	}
	return *o.MaxServerGroups
}

// GetMaxServerGroupsOk returns a tuple with the MaxServerGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetMaxServerGroupsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxServerGroups) {
		return nil, false
	}
	return o.MaxServerGroups, true
}

// HasMaxServerGroups returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasMaxServerGroups() bool {
	if o != nil && !IsNil(o.MaxServerGroups) {
		return true
	}

	return false
}

// SetMaxServerGroups gets a reference to the given int64 and assigns it to the MaxServerGroups field.
func (o *OpenstackComputeQuotaDto) SetMaxServerGroups(v int64) {
	o.MaxServerGroups = &v
}

// GetMaxTotalInstances returns the MaxTotalInstances field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetMaxTotalInstances() int64 {
	if o == nil || IsNil(o.MaxTotalInstances) {
		var ret int64
		return ret
	}
	return *o.MaxTotalInstances
}

// GetMaxTotalInstancesOk returns a tuple with the MaxTotalInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetMaxTotalInstancesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTotalInstances) {
		return nil, false
	}
	return o.MaxTotalInstances, true
}

// HasMaxTotalInstances returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasMaxTotalInstances() bool {
	if o != nil && !IsNil(o.MaxTotalInstances) {
		return true
	}

	return false
}

// SetMaxTotalInstances gets a reference to the given int64 and assigns it to the MaxTotalInstances field.
func (o *OpenstackComputeQuotaDto) SetMaxTotalInstances(v int64) {
	o.MaxTotalInstances = &v
}

// GetMaxTotalCores returns the MaxTotalCores field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetMaxTotalCores() int64 {
	if o == nil || IsNil(o.MaxTotalCores) {
		var ret int64
		return ret
	}
	return *o.MaxTotalCores
}

// GetMaxTotalCoresOk returns a tuple with the MaxTotalCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetMaxTotalCoresOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTotalCores) {
		return nil, false
	}
	return o.MaxTotalCores, true
}

// HasMaxTotalCores returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasMaxTotalCores() bool {
	if o != nil && !IsNil(o.MaxTotalCores) {
		return true
	}

	return false
}

// SetMaxTotalCores gets a reference to the given int64 and assigns it to the MaxTotalCores field.
func (o *OpenstackComputeQuotaDto) SetMaxTotalCores(v int64) {
	o.MaxTotalCores = &v
}

// GetUsedRamSize returns the UsedRamSize field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetUsedRamSize() int64 {
	if o == nil || IsNil(o.UsedRamSize) {
		var ret int64
		return ret
	}
	return *o.UsedRamSize
}

// GetUsedRamSizeOk returns a tuple with the UsedRamSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetUsedRamSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedRamSize) {
		return nil, false
	}
	return o.UsedRamSize, true
}

// HasUsedRamSize returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasUsedRamSize() bool {
	if o != nil && !IsNil(o.UsedRamSize) {
		return true
	}

	return false
}

// SetUsedRamSize gets a reference to the given int64 and assigns it to the UsedRamSize field.
func (o *OpenstackComputeQuotaDto) SetUsedRamSize(v int64) {
	o.UsedRamSize = &v
}

// GetUsedCpuSize returns the UsedCpuSize field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetUsedCpuSize() int64 {
	if o == nil || IsNil(o.UsedCpuSize) {
		var ret int64
		return ret
	}
	return *o.UsedCpuSize
}

// GetUsedCpuSizeOk returns a tuple with the UsedCpuSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetUsedCpuSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedCpuSize) {
		return nil, false
	}
	return o.UsedCpuSize, true
}

// HasUsedCpuSize returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasUsedCpuSize() bool {
	if o != nil && !IsNil(o.UsedCpuSize) {
		return true
	}

	return false
}

// SetUsedCpuSize gets a reference to the given int64 and assigns it to the UsedCpuSize field.
func (o *OpenstackComputeQuotaDto) SetUsedCpuSize(v int64) {
	o.UsedCpuSize = &v
}

// GetUsedInstanceSize returns the UsedInstanceSize field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetUsedInstanceSize() int64 {
	if o == nil || IsNil(o.UsedInstanceSize) {
		var ret int64
		return ret
	}
	return *o.UsedInstanceSize
}

// GetUsedInstanceSizeOk returns a tuple with the UsedInstanceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetUsedInstanceSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedInstanceSize) {
		return nil, false
	}
	return o.UsedInstanceSize, true
}

// HasUsedInstanceSize returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasUsedInstanceSize() bool {
	if o != nil && !IsNil(o.UsedInstanceSize) {
		return true
	}

	return false
}

// SetUsedInstanceSize gets a reference to the given int64 and assigns it to the UsedInstanceSize field.
func (o *OpenstackComputeQuotaDto) SetUsedInstanceSize(v int64) {
	o.UsedInstanceSize = &v
}

// GetUsedServerGroups returns the UsedServerGroups field value if set, zero value otherwise.
func (o *OpenstackComputeQuotaDto) GetUsedServerGroups() int64 {
	if o == nil || IsNil(o.UsedServerGroups) {
		var ret int64
		return ret
	}
	return *o.UsedServerGroups
}

// GetUsedServerGroupsOk returns a tuple with the UsedServerGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackComputeQuotaDto) GetUsedServerGroupsOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedServerGroups) {
		return nil, false
	}
	return o.UsedServerGroups, true
}

// HasUsedServerGroups returns a boolean if a field has been set.
func (o *OpenstackComputeQuotaDto) HasUsedServerGroups() bool {
	if o != nil && !IsNil(o.UsedServerGroups) {
		return true
	}

	return false
}

// SetUsedServerGroups gets a reference to the given int64 and assigns it to the UsedServerGroups field.
func (o *OpenstackComputeQuotaDto) SetUsedServerGroups(v int64) {
	o.UsedServerGroups = &v
}

func (o OpenstackComputeQuotaDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenstackComputeQuotaDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxTotalRamSize) {
		toSerialize["maxTotalRamSize"] = o.MaxTotalRamSize
	}
	if !IsNil(o.MaxServerGroups) {
		toSerialize["maxServerGroups"] = o.MaxServerGroups
	}
	if !IsNil(o.MaxTotalInstances) {
		toSerialize["maxTotalInstances"] = o.MaxTotalInstances
	}
	if !IsNil(o.MaxTotalCores) {
		toSerialize["maxTotalCores"] = o.MaxTotalCores
	}
	if !IsNil(o.UsedRamSize) {
		toSerialize["usedRamSize"] = o.UsedRamSize
	}
	if !IsNil(o.UsedCpuSize) {
		toSerialize["usedCpuSize"] = o.UsedCpuSize
	}
	if !IsNil(o.UsedInstanceSize) {
		toSerialize["usedInstanceSize"] = o.UsedInstanceSize
	}
	if !IsNil(o.UsedServerGroups) {
		toSerialize["usedServerGroups"] = o.UsedServerGroups
	}
	return toSerialize, nil
}

type NullableOpenstackComputeQuotaDto struct {
	value *OpenstackComputeQuotaDto
	isSet bool
}

func (v NullableOpenstackComputeQuotaDto) Get() *OpenstackComputeQuotaDto {
	return v.value
}

func (v *NullableOpenstackComputeQuotaDto) Set(val *OpenstackComputeQuotaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenstackComputeQuotaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenstackComputeQuotaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenstackComputeQuotaDto(val *OpenstackComputeQuotaDto) *NullableOpenstackComputeQuotaDto {
	return &NullableOpenstackComputeQuotaDto{value: val, isSet: true}
}

func (v NullableOpenstackComputeQuotaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenstackComputeQuotaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
