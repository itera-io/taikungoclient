/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the ProjectAppDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectAppDetailsDto{}

// ProjectAppDetailsDto struct for ProjectAppDetailsDto
type ProjectAppDetailsDto struct {
	Id               *int32               `json:"id,omitempty"`
	Name             NullableString       `json:"name,omitempty"`
	Namespace        NullableString       `json:"namespace,omitempty"`
	Status           NullableString       `json:"status,omitempty"`
	Version          NullableString       `json:"version,omitempty"`
	CatalogId        *int32               `json:"catalogId,omitempty"`
	CatalogName      NullableString       `json:"catalogName,omitempty"`
	CatalogAppName   NullableString       `json:"catalogAppName,omitempty"`
	AppRepoName      NullableString       `json:"appRepoName,omitempty"`
	Logo             NullableString       `json:"logo,omitempty"`
	Values           NullableString       `json:"values,omitempty"`
	AutoSync         *bool                `json:"autoSync,omitempty"`
	ReleaseNotes     NullableString       `json:"releaseNotes,omitempty"`
	ProjectName      NullableString       `json:"projectName,omitempty"`
	HelmResult       NullableString       `json:"helmResult,omitempty"`
	ProjectId        *int32               `json:"projectId,omitempty"`
	HasJsonSchema    *bool                `json:"hasJsonSchema,omitempty"`
	ProjectAppParams []ProjectAppParamDto `json:"projectAppParams,omitempty"`
}

// NewProjectAppDetailsDto instantiates a new ProjectAppDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectAppDetailsDto() *ProjectAppDetailsDto {
	this := ProjectAppDetailsDto{}
	return &this
}

// NewProjectAppDetailsDtoWithDefaults instantiates a new ProjectAppDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectAppDetailsDtoWithDefaults() *ProjectAppDetailsDto {
	this := ProjectAppDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectAppDetailsDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProjectAppDetailsDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ProjectAppDetailsDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetName() {
	o.Name.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *ProjectAppDetailsDto) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *ProjectAppDetailsDto) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ProjectAppDetailsDto) SetStatus(v string) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *ProjectAppDetailsDto) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetStatus() {
	o.Status.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *ProjectAppDetailsDto) SetVersion(v string) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *ProjectAppDetailsDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetVersion() {
	o.Version.Unset()
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetCatalogId() int32 {
	if o == nil || IsNil(o.CatalogId) {
		var ret int32
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetCatalogIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given int32 and assigns it to the CatalogId field.
func (o *ProjectAppDetailsDto) SetCatalogId(v int32) {
	o.CatalogId = &v
}

// GetCatalogName returns the CatalogName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetCatalogName() string {
	if o == nil || IsNil(o.CatalogName.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogName.Get()
}

// GetCatalogNameOk returns a tuple with the CatalogName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetCatalogNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogName.Get(), o.CatalogName.IsSet()
}

// HasCatalogName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogName() bool {
	if o != nil && o.CatalogName.IsSet() {
		return true
	}

	return false
}

// SetCatalogName gets a reference to the given NullableString and assigns it to the CatalogName field.
func (o *ProjectAppDetailsDto) SetCatalogName(v string) {
	o.CatalogName.Set(&v)
}

// SetCatalogNameNil sets the value for CatalogName to be an explicit nil
func (o *ProjectAppDetailsDto) SetCatalogNameNil() {
	o.CatalogName.Set(nil)
}

// UnsetCatalogName ensures that no value is present for CatalogName, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetCatalogName() {
	o.CatalogName.Unset()
}

// GetCatalogAppName returns the CatalogAppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetCatalogAppName() string {
	if o == nil || IsNil(o.CatalogAppName.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogAppName.Get()
}

// GetCatalogAppNameOk returns a tuple with the CatalogAppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetCatalogAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogAppName.Get(), o.CatalogAppName.IsSet()
}

// HasCatalogAppName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogAppName() bool {
	if o != nil && o.CatalogAppName.IsSet() {
		return true
	}

	return false
}

// SetCatalogAppName gets a reference to the given NullableString and assigns it to the CatalogAppName field.
func (o *ProjectAppDetailsDto) SetCatalogAppName(v string) {
	o.CatalogAppName.Set(&v)
}

// SetCatalogAppNameNil sets the value for CatalogAppName to be an explicit nil
func (o *ProjectAppDetailsDto) SetCatalogAppNameNil() {
	o.CatalogAppName.Set(nil)
}

// UnsetCatalogAppName ensures that no value is present for CatalogAppName, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetCatalogAppName() {
	o.CatalogAppName.Unset()
}

// GetAppRepoName returns the AppRepoName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetAppRepoName() string {
	if o == nil || IsNil(o.AppRepoName.Get()) {
		var ret string
		return ret
	}
	return *o.AppRepoName.Get()
}

// GetAppRepoNameOk returns a tuple with the AppRepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetAppRepoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppRepoName.Get(), o.AppRepoName.IsSet()
}

// HasAppRepoName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasAppRepoName() bool {
	if o != nil && o.AppRepoName.IsSet() {
		return true
	}

	return false
}

// SetAppRepoName gets a reference to the given NullableString and assigns it to the AppRepoName field.
func (o *ProjectAppDetailsDto) SetAppRepoName(v string) {
	o.AppRepoName.Set(&v)
}

// SetAppRepoNameNil sets the value for AppRepoName to be an explicit nil
func (o *ProjectAppDetailsDto) SetAppRepoNameNil() {
	o.AppRepoName.Set(nil)
}

// UnsetAppRepoName ensures that no value is present for AppRepoName, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetAppRepoName() {
	o.AppRepoName.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *ProjectAppDetailsDto) SetLogo(v string) {
	o.Logo.Set(&v)
}

// SetLogoNil sets the value for Logo to be an explicit nil
func (o *ProjectAppDetailsDto) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetLogo() {
	o.Logo.Unset()
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetValues() string {
	if o == nil || IsNil(o.Values.Get()) {
		var ret string
		return ret
	}
	return *o.Values.Get()
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetValuesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values.Get(), o.Values.IsSet()
}

// HasValues returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasValues() bool {
	if o != nil && o.Values.IsSet() {
		return true
	}

	return false
}

// SetValues gets a reference to the given NullableString and assigns it to the Values field.
func (o *ProjectAppDetailsDto) SetValues(v string) {
	o.Values.Set(&v)
}

// SetValuesNil sets the value for Values to be an explicit nil
func (o *ProjectAppDetailsDto) SetValuesNil() {
	o.Values.Set(nil)
}

// UnsetValues ensures that no value is present for Values, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetValues() {
	o.Values.Unset()
}

// GetAutoSync returns the AutoSync field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetAutoSync() bool {
	if o == nil || IsNil(o.AutoSync) {
		var ret bool
		return ret
	}
	return *o.AutoSync
}

// GetAutoSyncOk returns a tuple with the AutoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetAutoSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoSync) {
		return nil, false
	}
	return o.AutoSync, true
}

// HasAutoSync returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasAutoSync() bool {
	if o != nil && !IsNil(o.AutoSync) {
		return true
	}

	return false
}

// SetAutoSync gets a reference to the given bool and assigns it to the AutoSync field.
func (o *ProjectAppDetailsDto) SetAutoSync(v bool) {
	o.AutoSync = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes.Get()
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetReleaseNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseNotes.Get(), o.ReleaseNotes.IsSet()
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes.IsSet() {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given NullableString and assigns it to the ReleaseNotes field.
func (o *ProjectAppDetailsDto) SetReleaseNotes(v string) {
	o.ReleaseNotes.Set(&v)
}

// SetReleaseNotesNil sets the value for ReleaseNotes to be an explicit nil
func (o *ProjectAppDetailsDto) SetReleaseNotesNil() {
	o.ReleaseNotes.Set(nil)
}

// UnsetReleaseNotes ensures that no value is present for ReleaseNotes, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetReleaseNotes() {
	o.ReleaseNotes.Unset()
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectName.Get()
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectName.Get(), o.ProjectName.IsSet()
}

// HasProjectName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectName() bool {
	if o != nil && o.ProjectName.IsSet() {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given NullableString and assigns it to the ProjectName field.
func (o *ProjectAppDetailsDto) SetProjectName(v string) {
	o.ProjectName.Set(&v)
}

// SetProjectNameNil sets the value for ProjectName to be an explicit nil
func (o *ProjectAppDetailsDto) SetProjectNameNil() {
	o.ProjectName.Set(nil)
}

// UnsetProjectName ensures that no value is present for ProjectName, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetProjectName() {
	o.ProjectName.Unset()
}

// GetHelmResult returns the HelmResult field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetHelmResult() string {
	if o == nil || IsNil(o.HelmResult.Get()) {
		var ret string
		return ret
	}
	return *o.HelmResult.Get()
}

// GetHelmResultOk returns a tuple with the HelmResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetHelmResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HelmResult.Get(), o.HelmResult.IsSet()
}

// HasHelmResult returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasHelmResult() bool {
	if o != nil && o.HelmResult.IsSet() {
		return true
	}

	return false
}

// SetHelmResult gets a reference to the given NullableString and assigns it to the HelmResult field.
func (o *ProjectAppDetailsDto) SetHelmResult(v string) {
	o.HelmResult.Set(&v)
}

// SetHelmResultNil sets the value for HelmResult to be an explicit nil
func (o *ProjectAppDetailsDto) SetHelmResultNil() {
	o.HelmResult.Set(nil)
}

// UnsetHelmResult ensures that no value is present for HelmResult, not even an explicit nil
func (o *ProjectAppDetailsDto) UnsetHelmResult() {
	o.HelmResult.Unset()
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ProjectAppDetailsDto) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetHasJsonSchema returns the HasJsonSchema field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetHasJsonSchema() bool {
	if o == nil || IsNil(o.HasJsonSchema) {
		var ret bool
		return ret
	}
	return *o.HasJsonSchema
}

// GetHasJsonSchemaOk returns a tuple with the HasJsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetHasJsonSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasJsonSchema) {
		return nil, false
	}
	return o.HasJsonSchema, true
}

// HasHasJsonSchema returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasHasJsonSchema() bool {
	if o != nil && !IsNil(o.HasJsonSchema) {
		return true
	}

	return false
}

// SetHasJsonSchema gets a reference to the given bool and assigns it to the HasJsonSchema field.
func (o *ProjectAppDetailsDto) SetHasJsonSchema(v bool) {
	o.HasJsonSchema = &v
}

// GetProjectAppParams returns the ProjectAppParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectAppDetailsDto) GetProjectAppParams() []ProjectAppParamDto {
	if o == nil {
		var ret []ProjectAppParamDto
		return ret
	}
	return o.ProjectAppParams
}

// GetProjectAppParamsOk returns a tuple with the ProjectAppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppDetailsDto) GetProjectAppParamsOk() ([]ProjectAppParamDto, bool) {
	if o == nil || IsNil(o.ProjectAppParams) {
		return nil, false
	}
	return o.ProjectAppParams, true
}

// HasProjectAppParams returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectAppParams() bool {
	if o != nil && IsNil(o.ProjectAppParams) {
		return true
	}

	return false
}

// SetProjectAppParams gets a reference to the given []ProjectAppParamDto and assigns it to the ProjectAppParams field.
func (o *ProjectAppDetailsDto) SetProjectAppParams(v []ProjectAppParamDto) {
	o.ProjectAppParams = v
}

func (o ProjectAppDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectAppDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.CatalogId) {
		toSerialize["catalogId"] = o.CatalogId
	}
	if o.CatalogName.IsSet() {
		toSerialize["catalogName"] = o.CatalogName.Get()
	}
	if o.CatalogAppName.IsSet() {
		toSerialize["catalogAppName"] = o.CatalogAppName.Get()
	}
	if o.AppRepoName.IsSet() {
		toSerialize["appRepoName"] = o.AppRepoName.Get()
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.Values.IsSet() {
		toSerialize["values"] = o.Values.Get()
	}
	if !IsNil(o.AutoSync) {
		toSerialize["autoSync"] = o.AutoSync
	}
	if o.ReleaseNotes.IsSet() {
		toSerialize["releaseNotes"] = o.ReleaseNotes.Get()
	}
	if o.ProjectName.IsSet() {
		toSerialize["projectName"] = o.ProjectName.Get()
	}
	if o.HelmResult.IsSet() {
		toSerialize["helmResult"] = o.HelmResult.Get()
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.HasJsonSchema) {
		toSerialize["hasJsonSchema"] = o.HasJsonSchema
	}
	if o.ProjectAppParams != nil {
		toSerialize["projectAppParams"] = o.ProjectAppParams
	}
	return toSerialize, nil
}

type NullableProjectAppDetailsDto struct {
	value *ProjectAppDetailsDto
	isSet bool
}

func (v NullableProjectAppDetailsDto) Get() *ProjectAppDetailsDto {
	return v.value
}

func (v *NullableProjectAppDetailsDto) Set(val *ProjectAppDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAppDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAppDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAppDetailsDto(val *ProjectAppDetailsDto) *NullableProjectAppDetailsDto {
	return &NullableProjectAppDetailsDto{value: val, isSet: true}
}

func (v NullableProjectAppDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAppDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
