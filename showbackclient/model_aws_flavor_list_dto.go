/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the AwsFlavorListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsFlavorListDto{}

// AwsFlavorListDto struct for AwsFlavorListDto
type AwsFlavorListDto struct {
	Ram              *int64         `json:"ram,omitempty"`
	Cpu              *int32         `json:"cpu,omitempty"`
	Name             NullableString `json:"name,omitempty"`
	Description      interface{}    `json:"description,omitempty"`
	LinuxPrice       NullableString `json:"linuxPrice,omitempty"`
	WindowsPrice     NullableString `json:"windowsPrice,omitempty"`
	WindowsSpotPrice NullableString `json:"windowsSpotPrice,omitempty"`
	LinuxSpotPrice   NullableString `json:"linuxSpotPrice,omitempty"`
}

// NewAwsFlavorListDto instantiates a new AwsFlavorListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsFlavorListDto() *AwsFlavorListDto {
	this := AwsFlavorListDto{}
	return &this
}

// NewAwsFlavorListDtoWithDefaults instantiates a new AwsFlavorListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsFlavorListDtoWithDefaults() *AwsFlavorListDto {
	this := AwsFlavorListDto{}
	return &this
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *AwsFlavorListDto) GetRam() int64 {
	if o == nil || IsNil(o.Ram) {
		var ret int64
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsFlavorListDto) GetRamOk() (*int64, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given int64 and assigns it to the Ram field.
func (o *AwsFlavorListDto) SetRam(v int64) {
	o.Ram = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *AwsFlavorListDto) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsFlavorListDto) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *AwsFlavorListDto) SetCpu(v int32) {
	o.Cpu = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AwsFlavorListDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *AwsFlavorListDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AwsFlavorListDto) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasDescription() bool {
	if o != nil && IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given interface{} and assigns it to the Description field.
func (o *AwsFlavorListDto) SetDescription(v interface{}) {
	o.Description = v
}

// GetLinuxPrice returns the LinuxPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetLinuxPrice() string {
	if o == nil || IsNil(o.LinuxPrice.Get()) {
		var ret string
		return ret
	}
	return *o.LinuxPrice.Get()
}

// GetLinuxPriceOk returns a tuple with the LinuxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetLinuxPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxPrice.Get(), o.LinuxPrice.IsSet()
}

// HasLinuxPrice returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasLinuxPrice() bool {
	if o != nil && o.LinuxPrice.IsSet() {
		return true
	}

	return false
}

// SetLinuxPrice gets a reference to the given NullableString and assigns it to the LinuxPrice field.
func (o *AwsFlavorListDto) SetLinuxPrice(v string) {
	o.LinuxPrice.Set(&v)
}

// SetLinuxPriceNil sets the value for LinuxPrice to be an explicit nil
func (o *AwsFlavorListDto) SetLinuxPriceNil() {
	o.LinuxPrice.Set(nil)
}

// UnsetLinuxPrice ensures that no value is present for LinuxPrice, not even an explicit nil
func (o *AwsFlavorListDto) UnsetLinuxPrice() {
	o.LinuxPrice.Unset()
}

// GetWindowsPrice returns the WindowsPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetWindowsPrice() string {
	if o == nil || IsNil(o.WindowsPrice.Get()) {
		var ret string
		return ret
	}
	return *o.WindowsPrice.Get()
}

// GetWindowsPriceOk returns a tuple with the WindowsPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetWindowsPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsPrice.Get(), o.WindowsPrice.IsSet()
}

// HasWindowsPrice returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasWindowsPrice() bool {
	if o != nil && o.WindowsPrice.IsSet() {
		return true
	}

	return false
}

// SetWindowsPrice gets a reference to the given NullableString and assigns it to the WindowsPrice field.
func (o *AwsFlavorListDto) SetWindowsPrice(v string) {
	o.WindowsPrice.Set(&v)
}

// SetWindowsPriceNil sets the value for WindowsPrice to be an explicit nil
func (o *AwsFlavorListDto) SetWindowsPriceNil() {
	o.WindowsPrice.Set(nil)
}

// UnsetWindowsPrice ensures that no value is present for WindowsPrice, not even an explicit nil
func (o *AwsFlavorListDto) UnsetWindowsPrice() {
	o.WindowsPrice.Unset()
}

// GetWindowsSpotPrice returns the WindowsSpotPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetWindowsSpotPrice() string {
	if o == nil || IsNil(o.WindowsSpotPrice.Get()) {
		var ret string
		return ret
	}
	return *o.WindowsSpotPrice.Get()
}

// GetWindowsSpotPriceOk returns a tuple with the WindowsSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetWindowsSpotPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsSpotPrice.Get(), o.WindowsSpotPrice.IsSet()
}

// HasWindowsSpotPrice returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasWindowsSpotPrice() bool {
	if o != nil && o.WindowsSpotPrice.IsSet() {
		return true
	}

	return false
}

// SetWindowsSpotPrice gets a reference to the given NullableString and assigns it to the WindowsSpotPrice field.
func (o *AwsFlavorListDto) SetWindowsSpotPrice(v string) {
	o.WindowsSpotPrice.Set(&v)
}

// SetWindowsSpotPriceNil sets the value for WindowsSpotPrice to be an explicit nil
func (o *AwsFlavorListDto) SetWindowsSpotPriceNil() {
	o.WindowsSpotPrice.Set(nil)
}

// UnsetWindowsSpotPrice ensures that no value is present for WindowsSpotPrice, not even an explicit nil
func (o *AwsFlavorListDto) UnsetWindowsSpotPrice() {
	o.WindowsSpotPrice.Unset()
}

// GetLinuxSpotPrice returns the LinuxSpotPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsFlavorListDto) GetLinuxSpotPrice() string {
	if o == nil || IsNil(o.LinuxSpotPrice.Get()) {
		var ret string
		return ret
	}
	return *o.LinuxSpotPrice.Get()
}

// GetLinuxSpotPriceOk returns a tuple with the LinuxSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsFlavorListDto) GetLinuxSpotPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxSpotPrice.Get(), o.LinuxSpotPrice.IsSet()
}

// HasLinuxSpotPrice returns a boolean if a field has been set.
func (o *AwsFlavorListDto) HasLinuxSpotPrice() bool {
	if o != nil && o.LinuxSpotPrice.IsSet() {
		return true
	}

	return false
}

// SetLinuxSpotPrice gets a reference to the given NullableString and assigns it to the LinuxSpotPrice field.
func (o *AwsFlavorListDto) SetLinuxSpotPrice(v string) {
	o.LinuxSpotPrice.Set(&v)
}

// SetLinuxSpotPriceNil sets the value for LinuxSpotPrice to be an explicit nil
func (o *AwsFlavorListDto) SetLinuxSpotPriceNil() {
	o.LinuxSpotPrice.Set(nil)
}

// UnsetLinuxSpotPrice ensures that no value is present for LinuxSpotPrice, not even an explicit nil
func (o *AwsFlavorListDto) UnsetLinuxSpotPrice() {
	o.LinuxSpotPrice.Unset()
}

func (o AwsFlavorListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsFlavorListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.LinuxPrice.IsSet() {
		toSerialize["linuxPrice"] = o.LinuxPrice.Get()
	}
	if o.WindowsPrice.IsSet() {
		toSerialize["windowsPrice"] = o.WindowsPrice.Get()
	}
	if o.WindowsSpotPrice.IsSet() {
		toSerialize["windowsSpotPrice"] = o.WindowsSpotPrice.Get()
	}
	if o.LinuxSpotPrice.IsSet() {
		toSerialize["linuxSpotPrice"] = o.LinuxSpotPrice.Get()
	}
	return toSerialize, nil
}

type NullableAwsFlavorListDto struct {
	value *AwsFlavorListDto
	isSet bool
}

func (v NullableAwsFlavorListDto) Get() *AwsFlavorListDto {
	return v.value
}

func (v *NullableAwsFlavorListDto) Set(val *AwsFlavorListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsFlavorListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsFlavorListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsFlavorListDto(val *AwsFlavorListDto) *NullableAwsFlavorListDto {
	return &NullableAwsFlavorListDto{value: val, isSet: true}
}

func (v NullableAwsFlavorListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsFlavorListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
