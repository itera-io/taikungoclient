/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the FinalPriceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinalPriceDto{}

// FinalPriceDto struct for FinalPriceDto
type FinalPriceDto struct {
	YearlyFinalPrice  *float64 `json:"yearlyFinalPrice,omitempty"`
	MonthlyFinalPrice *float64 `json:"monthlyFinalPrice,omitempty"`
}

// NewFinalPriceDto instantiates a new FinalPriceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinalPriceDto() *FinalPriceDto {
	this := FinalPriceDto{}
	return &this
}

// NewFinalPriceDtoWithDefaults instantiates a new FinalPriceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinalPriceDtoWithDefaults() *FinalPriceDto {
	this := FinalPriceDto{}
	return &this
}

// GetYearlyFinalPrice returns the YearlyFinalPrice field value if set, zero value otherwise.
func (o *FinalPriceDto) GetYearlyFinalPrice() float64 {
	if o == nil || IsNil(o.YearlyFinalPrice) {
		var ret float64
		return ret
	}
	return *o.YearlyFinalPrice
}

// GetYearlyFinalPriceOk returns a tuple with the YearlyFinalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinalPriceDto) GetYearlyFinalPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.YearlyFinalPrice) {
		return nil, false
	}
	return o.YearlyFinalPrice, true
}

// HasYearlyFinalPrice returns a boolean if a field has been set.
func (o *FinalPriceDto) HasYearlyFinalPrice() bool {
	if o != nil && !IsNil(o.YearlyFinalPrice) {
		return true
	}

	return false
}

// SetYearlyFinalPrice gets a reference to the given float64 and assigns it to the YearlyFinalPrice field.
func (o *FinalPriceDto) SetYearlyFinalPrice(v float64) {
	o.YearlyFinalPrice = &v
}

// GetMonthlyFinalPrice returns the MonthlyFinalPrice field value if set, zero value otherwise.
func (o *FinalPriceDto) GetMonthlyFinalPrice() float64 {
	if o == nil || IsNil(o.MonthlyFinalPrice) {
		var ret float64
		return ret
	}
	return *o.MonthlyFinalPrice
}

// GetMonthlyFinalPriceOk returns a tuple with the MonthlyFinalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinalPriceDto) GetMonthlyFinalPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.MonthlyFinalPrice) {
		return nil, false
	}
	return o.MonthlyFinalPrice, true
}

// HasMonthlyFinalPrice returns a boolean if a field has been set.
func (o *FinalPriceDto) HasMonthlyFinalPrice() bool {
	if o != nil && !IsNil(o.MonthlyFinalPrice) {
		return true
	}

	return false
}

// SetMonthlyFinalPrice gets a reference to the given float64 and assigns it to the MonthlyFinalPrice field.
func (o *FinalPriceDto) SetMonthlyFinalPrice(v float64) {
	o.MonthlyFinalPrice = &v
}

func (o FinalPriceDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinalPriceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.YearlyFinalPrice) {
		toSerialize["yearlyFinalPrice"] = o.YearlyFinalPrice
	}
	if !IsNil(o.MonthlyFinalPrice) {
		toSerialize["monthlyFinalPrice"] = o.MonthlyFinalPrice
	}
	return toSerialize, nil
}

type NullableFinalPriceDto struct {
	value *FinalPriceDto
	isSet bool
}

func (v NullableFinalPriceDto) Get() *FinalPriceDto {
	return v.value
}

func (v *NullableFinalPriceDto) Set(val *FinalPriceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFinalPriceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFinalPriceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinalPriceDto(val *FinalPriceDto) *NullableFinalPriceDto {
	return &NullableFinalPriceDto{value: val, isSet: true}
}

func (v NullableFinalPriceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinalPriceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
