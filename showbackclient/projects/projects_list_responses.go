// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectsListReader is a Reader for the ProjectsList structure.
type ProjectsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsListOK creates a ProjectsListOK with default headers values
func NewProjectsListOK() *ProjectsListOK {
	return &ProjectsListOK{}
}

/*
ProjectsListOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsListOK struct {
	Payload *ProjectsListOKBody
}

// IsSuccess returns true when this projects list o k response has a 2xx status code
func (o *ProjectsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects list o k response has a 3xx status code
func (o *ProjectsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list o k response has a 4xx status code
func (o *ProjectsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list o k response has a 5xx status code
func (o *ProjectsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list o k response a status code equal to that given
func (o *ProjectsListOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsListOK) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListOK  %+v", 200, o.Payload)
}

func (o *ProjectsListOK) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListOK  %+v", 200, o.Payload)
}

func (o *ProjectsListOK) GetPayload() *ProjectsListOKBody {
	return o.Payload
}

func (o *ProjectsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListBadRequest creates a ProjectsListBadRequest with default headers values
func NewProjectsListBadRequest() *ProjectsListBadRequest {
	return &ProjectsListBadRequest{}
}

/*
ProjectsListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsListBadRequest struct {
	Payload *ProjectsListBadRequestBody
}

// IsSuccess returns true when this projects list bad request response has a 2xx status code
func (o *ProjectsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list bad request response has a 3xx status code
func (o *ProjectsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list bad request response has a 4xx status code
func (o *ProjectsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list bad request response has a 5xx status code
func (o *ProjectsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list bad request response a status code equal to that given
func (o *ProjectsListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsListBadRequest) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListBadRequest) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListBadRequest) GetPayload() *ProjectsListBadRequestBody {
	return o.Payload
}

func (o *ProjectsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListUnauthorized creates a ProjectsListUnauthorized with default headers values
func NewProjectsListUnauthorized() *ProjectsListUnauthorized {
	return &ProjectsListUnauthorized{}
}

/*
ProjectsListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsListUnauthorized struct {
	Payload *ProjectsListUnauthorizedBody
}

// IsSuccess returns true when this projects list unauthorized response has a 2xx status code
func (o *ProjectsListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list unauthorized response has a 3xx status code
func (o *ProjectsListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list unauthorized response has a 4xx status code
func (o *ProjectsListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list unauthorized response has a 5xx status code
func (o *ProjectsListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list unauthorized response a status code equal to that given
func (o *ProjectsListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListUnauthorized) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListUnauthorized) GetPayload() *ProjectsListUnauthorizedBody {
	return o.Payload
}

func (o *ProjectsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForbidden creates a ProjectsListForbidden with default headers values
func NewProjectsListForbidden() *ProjectsListForbidden {
	return &ProjectsListForbidden{}
}

/*
ProjectsListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsListForbidden struct {
	Payload *ProjectsListForbiddenBody
}

// IsSuccess returns true when this projects list forbidden response has a 2xx status code
func (o *ProjectsListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list forbidden response has a 3xx status code
func (o *ProjectsListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list forbidden response has a 4xx status code
func (o *ProjectsListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list forbidden response has a 5xx status code
func (o *ProjectsListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list forbidden response a status code equal to that given
func (o *ProjectsListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsListForbidden) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForbidden) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForbidden) GetPayload() *ProjectsListForbiddenBody {
	return o.Payload
}

func (o *ProjectsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListNotFound creates a ProjectsListNotFound with default headers values
func NewProjectsListNotFound() *ProjectsListNotFound {
	return &ProjectsListNotFound{}
}

/*
ProjectsListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsListNotFound struct {
	Payload *ProjectsListNotFoundBody
}

// IsSuccess returns true when this projects list not found response has a 2xx status code
func (o *ProjectsListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list not found response has a 3xx status code
func (o *ProjectsListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list not found response has a 4xx status code
func (o *ProjectsListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list not found response has a 5xx status code
func (o *ProjectsListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list not found response a status code equal to that given
func (o *ProjectsListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsListNotFound) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListNotFound) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListNotFound) GetPayload() *ProjectsListNotFoundBody {
	return o.Payload
}

func (o *ProjectsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListInternalServerError creates a ProjectsListInternalServerError with default headers values
func NewProjectsListInternalServerError() *ProjectsListInternalServerError {
	return &ProjectsListInternalServerError{}
}

/*
ProjectsListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsListInternalServerError struct {
}

// IsSuccess returns true when this projects list internal server error response has a 2xx status code
func (o *ProjectsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list internal server error response has a 3xx status code
func (o *ProjectsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list internal server error response has a 4xx status code
func (o *ProjectsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list internal server error response has a 5xx status code
func (o *ProjectsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects list internal server error response a status code equal to that given
func (o *ProjectsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListInternalServerError ", 500)
}

func (o *ProjectsListInternalServerError) String() string {
	return fmt.Sprintf("[GET /showback/v{v}/Projects][%d] projectsListInternalServerError ", 500)
}

func (o *ProjectsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectsListBadRequestBody projects list bad request body
swagger:model ProjectsListBadRequestBody
*/
type ProjectsListBadRequestBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// errors
	// Read Only: true
	Errors map[string][]string `json:"errors,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list bad request body
func (o *ProjectsListBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this projects list bad request body based on the context it is used
func (o *ProjectsListBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForbiddenBody projects list forbidden body
swagger:model ProjectsListForbiddenBody
*/
type ProjectsListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list forbidden body
func (o *ProjectsListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list forbidden body based on context it is used
func (o *ProjectsListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListNotFoundBody projects list not found body
swagger:model ProjectsListNotFoundBody
*/
type ProjectsListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list not found body
func (o *ProjectsListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list not found body based on context it is used
func (o *ProjectsListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListOKBody projects list o k body
swagger:model ProjectsListOKBody
*/
type ProjectsListOKBody struct {

	// data
	Data []*ProjectsListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this projects list o k body
func (o *ProjectsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list o k body based on the context it is used
func (o *ProjectsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListOKBodyDataItems0 projects list o k body data items0
swagger:model ProjectsListOKBodyDataItems0
*/
type ProjectsListOKBodyDataItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// monitoring password
	MonitoringPassword string `json:"monitoringPassword,omitempty"`

	// monitoring Url
	MonitoringURL string `json:"monitoringUrl,omitempty"`

	// monitoring username
	MonitoringUsername string `json:"monitoringUsername,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this projects list o k body data items0
func (o *ProjectsListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list o k body data items0 based on context it is used
func (o *ProjectsListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListUnauthorizedBody projects list unauthorized body
swagger:model ProjectsListUnauthorizedBody
*/
type ProjectsListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list unauthorized body
func (o *ProjectsListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list unauthorized body based on context it is used
func (o *ProjectsListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
