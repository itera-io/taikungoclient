/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
	"fmt"
)

// CloudRole the model 'CloudRole'
type CloudRole string

// List of CloudRole
const (
	CLOUDROLE_BASTION    CloudRole = "Bastion"
	CLOUDROLE_KUBEMASTER CloudRole = "Kubemaster"
	CLOUDROLE_KUBEWORKER CloudRole = "Kubeworker"
	CLOUDROLE_ALL_IN_ONE CloudRole = "AllInOne"
)

// All allowed values of CloudRole enum
var AllowedCloudRoleEnumValues = []CloudRole{
	"Bastion",
	"Kubemaster",
	"Kubeworker",
	"AllInOne",
}

func (v *CloudRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudRole(value)
	for _, existing := range AllowedCloudRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudRole", value)
}

// NewCloudRoleFromValue returns a pointer to a valid CloudRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudRoleFromValue(v string) (*CloudRole, error) {
	ev := CloudRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudRole: valid values are %v", v, AllowedCloudRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudRole) IsValid() bool {
	for _, existing := range AllowedCloudRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudRole value
func (v CloudRole) Ptr() *CloudRole {
	return &v
}

type NullableCloudRole struct {
	value *CloudRole
	isSet bool
}

func (v NullableCloudRole) Get() *CloudRole {
	return v.value
}

func (v *NullableCloudRole) Set(val *CloudRole) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudRole) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudRole(val *CloudRole) *NullableCloudRole {
	return &NullableCloudRole{value: val, isSet: true}
}

func (v NullableCloudRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
