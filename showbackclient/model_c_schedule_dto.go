/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
	"time"
)

// checks if the CScheduleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CScheduleDto{}

// CScheduleDto struct for CScheduleDto
type CScheduleDto struct {
	Status             *Status        `json:"status,omitempty"`
	MetadataName       NullableString `json:"metadataName,omitempty"`
	Namespace          NullableString `json:"namespace,omitempty"`
	CreatedAt          NullableTime   `json:"createdAt,omitempty"`
	Schedule           NullableString `json:"schedule,omitempty"`
	Ttl                NullableString `json:"ttl,omitempty"`
	LastBackup         NullableTime   `json:"lastBackup,omitempty"`
	Phase              NullableString `json:"phase,omitempty"`
	ExcludedNamespaces []string       `json:"excludedNamespaces,omitempty"`
	IncludedNamespaces []string       `json:"includedNamespaces,omitempty"`
}

// NewCScheduleDto instantiates a new CScheduleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCScheduleDto() *CScheduleDto {
	this := CScheduleDto{}
	return &this
}

// NewCScheduleDtoWithDefaults instantiates a new CScheduleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCScheduleDtoWithDefaults() *CScheduleDto {
	this := CScheduleDto{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CScheduleDto) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CScheduleDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *CScheduleDto) SetStatus(v Status) {
	o.Status = &v
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetMetadataName() string {
	if o == nil || IsNil(o.MetadataName.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataName.Get()
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataName.Get(), o.MetadataName.IsSet()
}

// HasMetadataName returns a boolean if a field has been set.
func (o *CScheduleDto) HasMetadataName() bool {
	if o != nil && o.MetadataName.IsSet() {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given NullableString and assigns it to the MetadataName field.
func (o *CScheduleDto) SetMetadataName(v string) {
	o.MetadataName.Set(&v)
}

// SetMetadataNameNil sets the value for MetadataName to be an explicit nil
func (o *CScheduleDto) SetMetadataNameNil() {
	o.MetadataName.Set(nil)
}

// UnsetMetadataName ensures that no value is present for MetadataName, not even an explicit nil
func (o *CScheduleDto) UnsetMetadataName() {
	o.MetadataName.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *CScheduleDto) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *CScheduleDto) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *CScheduleDto) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *CScheduleDto) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CScheduleDto) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *CScheduleDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *CScheduleDto) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *CScheduleDto) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetSchedule() string {
	if o == nil || IsNil(o.Schedule.Get()) {
		var ret string
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *CScheduleDto) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableString and assigns it to the Schedule field.
func (o *CScheduleDto) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *CScheduleDto) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *CScheduleDto) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetTtl returns the Ttl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetTtl() string {
	if o == nil || IsNil(o.Ttl.Get()) {
		var ret string
		return ret
	}
	return *o.Ttl.Get()
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetTtlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ttl.Get(), o.Ttl.IsSet()
}

// HasTtl returns a boolean if a field has been set.
func (o *CScheduleDto) HasTtl() bool {
	if o != nil && o.Ttl.IsSet() {
		return true
	}

	return false
}

// SetTtl gets a reference to the given NullableString and assigns it to the Ttl field.
func (o *CScheduleDto) SetTtl(v string) {
	o.Ttl.Set(&v)
}

// SetTtlNil sets the value for Ttl to be an explicit nil
func (o *CScheduleDto) SetTtlNil() {
	o.Ttl.Set(nil)
}

// UnsetTtl ensures that no value is present for Ttl, not even an explicit nil
func (o *CScheduleDto) UnsetTtl() {
	o.Ttl.Unset()
}

// GetLastBackup returns the LastBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetLastBackup() time.Time {
	if o == nil || IsNil(o.LastBackup.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastBackup.Get()
}

// GetLastBackupOk returns a tuple with the LastBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetLastBackupOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastBackup.Get(), o.LastBackup.IsSet()
}

// HasLastBackup returns a boolean if a field has been set.
func (o *CScheduleDto) HasLastBackup() bool {
	if o != nil && o.LastBackup.IsSet() {
		return true
	}

	return false
}

// SetLastBackup gets a reference to the given NullableTime and assigns it to the LastBackup field.
func (o *CScheduleDto) SetLastBackup(v time.Time) {
	o.LastBackup.Set(&v)
}

// SetLastBackupNil sets the value for LastBackup to be an explicit nil
func (o *CScheduleDto) SetLastBackupNil() {
	o.LastBackup.Set(nil)
}

// UnsetLastBackup ensures that no value is present for LastBackup, not even an explicit nil
func (o *CScheduleDto) UnsetLastBackup() {
	o.LastBackup.Unset()
}

// GetPhase returns the Phase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetPhase() string {
	if o == nil || IsNil(o.Phase.Get()) {
		var ret string
		return ret
	}
	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// HasPhase returns a boolean if a field has been set.
func (o *CScheduleDto) HasPhase() bool {
	if o != nil && o.Phase.IsSet() {
		return true
	}

	return false
}

// SetPhase gets a reference to the given NullableString and assigns it to the Phase field.
func (o *CScheduleDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

// SetPhaseNil sets the value for Phase to be an explicit nil
func (o *CScheduleDto) SetPhaseNil() {
	o.Phase.Set(nil)
}

// UnsetPhase ensures that no value is present for Phase, not even an explicit nil
func (o *CScheduleDto) UnsetPhase() {
	o.Phase.Unset()
}

// GetExcludedNamespaces returns the ExcludedNamespaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetExcludedNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedNamespaces
}

// GetExcludedNamespacesOk returns a tuple with the ExcludedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetExcludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedNamespaces) {
		return nil, false
	}
	return o.ExcludedNamespaces, true
}

// HasExcludedNamespaces returns a boolean if a field has been set.
func (o *CScheduleDto) HasExcludedNamespaces() bool {
	if o != nil && IsNil(o.ExcludedNamespaces) {
		return true
	}

	return false
}

// SetExcludedNamespaces gets a reference to the given []string and assigns it to the ExcludedNamespaces field.
func (o *CScheduleDto) SetExcludedNamespaces(v []string) {
	o.ExcludedNamespaces = v
}

// GetIncludedNamespaces returns the IncludedNamespaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CScheduleDto) GetIncludedNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludedNamespaces
}

// GetIncludedNamespacesOk returns a tuple with the IncludedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetIncludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedNamespaces) {
		return nil, false
	}
	return o.IncludedNamespaces, true
}

// HasIncludedNamespaces returns a boolean if a field has been set.
func (o *CScheduleDto) HasIncludedNamespaces() bool {
	if o != nil && IsNil(o.IncludedNamespaces) {
		return true
	}

	return false
}

// SetIncludedNamespaces gets a reference to the given []string and assigns it to the IncludedNamespaces field.
func (o *CScheduleDto) SetIncludedNamespaces(v []string) {
	o.IncludedNamespaces = v
}

func (o CScheduleDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CScheduleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.MetadataName.IsSet() {
		toSerialize["metadataName"] = o.MetadataName.Get()
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	if o.Ttl.IsSet() {
		toSerialize["ttl"] = o.Ttl.Get()
	}
	if o.LastBackup.IsSet() {
		toSerialize["lastBackup"] = o.LastBackup.Get()
	}
	if o.Phase.IsSet() {
		toSerialize["phase"] = o.Phase.Get()
	}
	if o.ExcludedNamespaces != nil {
		toSerialize["excludedNamespaces"] = o.ExcludedNamespaces
	}
	if o.IncludedNamespaces != nil {
		toSerialize["includedNamespaces"] = o.IncludedNamespaces
	}
	return toSerialize, nil
}

type NullableCScheduleDto struct {
	value *CScheduleDto
	isSet bool
}

func (v NullableCScheduleDto) Get() *CScheduleDto {
	return v.value
}

func (v *NullableCScheduleDto) Set(val *CScheduleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCScheduleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCScheduleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCScheduleDto(val *CScheduleDto) *NullableCScheduleDto {
	return &NullableCScheduleDto{value: val, isSet: true}
}

func (v NullableCScheduleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCScheduleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
