/*
Taikun - Showback API

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the GroupedShowbackSummaryListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupedShowbackSummaryListDto{}

// GroupedShowbackSummaryListDto struct for GroupedShowbackSummaryListDto
type GroupedShowbackSummaryListDto struct {
	RuleId     *int32                               `json:"ruleId,omitempty"`
	RuleName   NullableString                       `json:"ruleName,omitempty"`
	TotalPrice *float64                             `json:"totalPrice,omitempty"`
	Projects   []GroupedProjectForShowbackSummary   `json:"projects,omitempty"`
	Credential *GroupedCredentialForShowbackSummary `json:"credential,omitempty"`
}

// NewGroupedShowbackSummaryListDto instantiates a new GroupedShowbackSummaryListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupedShowbackSummaryListDto() *GroupedShowbackSummaryListDto {
	this := GroupedShowbackSummaryListDto{}
	return &this
}

// NewGroupedShowbackSummaryListDtoWithDefaults instantiates a new GroupedShowbackSummaryListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupedShowbackSummaryListDtoWithDefaults() *GroupedShowbackSummaryListDto {
	this := GroupedShowbackSummaryListDto{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *GroupedShowbackSummaryListDto) GetRuleId() int32 {
	if o == nil || IsNil(o.RuleId) {
		var ret int32
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupedShowbackSummaryListDto) GetRuleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *GroupedShowbackSummaryListDto) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given int32 and assigns it to the RuleId field.
func (o *GroupedShowbackSummaryListDto) SetRuleId(v int32) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupedShowbackSummaryListDto) GetRuleName() string {
	if o == nil || IsNil(o.RuleName.Get()) {
		var ret string
		return ret
	}
	return *o.RuleName.Get()
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupedShowbackSummaryListDto) GetRuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleName.Get(), o.RuleName.IsSet()
}

// HasRuleName returns a boolean if a field has been set.
func (o *GroupedShowbackSummaryListDto) HasRuleName() bool {
	if o != nil && o.RuleName.IsSet() {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given NullableString and assigns it to the RuleName field.
func (o *GroupedShowbackSummaryListDto) SetRuleName(v string) {
	o.RuleName.Set(&v)
}

// SetRuleNameNil sets the value for RuleName to be an explicit nil
func (o *GroupedShowbackSummaryListDto) SetRuleNameNil() {
	o.RuleName.Set(nil)
}

// UnsetRuleName ensures that no value is present for RuleName, not even an explicit nil
func (o *GroupedShowbackSummaryListDto) UnsetRuleName() {
	o.RuleName.Unset()
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *GroupedShowbackSummaryListDto) GetTotalPrice() float64 {
	if o == nil || IsNil(o.TotalPrice) {
		var ret float64
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupedShowbackSummaryListDto) GetTotalPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalPrice) {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *GroupedShowbackSummaryListDto) HasTotalPrice() bool {
	if o != nil && !IsNil(o.TotalPrice) {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float64 and assigns it to the TotalPrice field.
func (o *GroupedShowbackSummaryListDto) SetTotalPrice(v float64) {
	o.TotalPrice = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupedShowbackSummaryListDto) GetProjects() []GroupedProjectForShowbackSummary {
	if o == nil {
		var ret []GroupedProjectForShowbackSummary
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupedShowbackSummaryListDto) GetProjectsOk() ([]GroupedProjectForShowbackSummary, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *GroupedShowbackSummaryListDto) HasProjects() bool {
	if o != nil && IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []GroupedProjectForShowbackSummary and assigns it to the Projects field.
func (o *GroupedShowbackSummaryListDto) SetProjects(v []GroupedProjectForShowbackSummary) {
	o.Projects = v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *GroupedShowbackSummaryListDto) GetCredential() GroupedCredentialForShowbackSummary {
	if o == nil || IsNil(o.Credential) {
		var ret GroupedCredentialForShowbackSummary
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupedShowbackSummaryListDto) GetCredentialOk() (*GroupedCredentialForShowbackSummary, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *GroupedShowbackSummaryListDto) HasCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given GroupedCredentialForShowbackSummary and assigns it to the Credential field.
func (o *GroupedShowbackSummaryListDto) SetCredential(v GroupedCredentialForShowbackSummary) {
	o.Credential = &v
}

func (o GroupedShowbackSummaryListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupedShowbackSummaryListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if o.RuleName.IsSet() {
		toSerialize["ruleName"] = o.RuleName.Get()
	}
	if !IsNil(o.TotalPrice) {
		toSerialize["totalPrice"] = o.TotalPrice
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	return toSerialize, nil
}

type NullableGroupedShowbackSummaryListDto struct {
	value *GroupedShowbackSummaryListDto
	isSet bool
}

func (v NullableGroupedShowbackSummaryListDto) Get() *GroupedShowbackSummaryListDto {
	return v.value
}

func (v *NullableGroupedShowbackSummaryListDto) Set(val *GroupedShowbackSummaryListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupedShowbackSummaryListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupedShowbackSummaryListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupedShowbackSummaryListDto(val *GroupedShowbackSummaryListDto) *NullableGroupedShowbackSummaryListDto {
	return &NullableGroupedShowbackSummaryListDto{value: val, isSet: true}
}

func (v NullableGroupedShowbackSummaryListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupedShowbackSummaryListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
