/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the ProjectWithFlavorsAndImagesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectWithFlavorsAndImagesDto{}

// ProjectWithFlavorsAndImagesDto struct for ProjectWithFlavorsAndImagesDto
type ProjectWithFlavorsAndImagesDto struct {
	Id         *int32         `json:"id,omitempty"`
	Name       NullableString `json:"name,omitempty"`
	Flavors    []string       `json:"flavors,omitempty"`
	Images     []string       `json:"images,omitempty"`
	ImageNames []string       `json:"imageNames,omitempty"`
	IsReady    *bool          `json:"isReady,omitempty"`
}

// NewProjectWithFlavorsAndImagesDto instantiates a new ProjectWithFlavorsAndImagesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectWithFlavorsAndImagesDto() *ProjectWithFlavorsAndImagesDto {
	this := ProjectWithFlavorsAndImagesDto{}
	return &this
}

// NewProjectWithFlavorsAndImagesDtoWithDefaults instantiates a new ProjectWithFlavorsAndImagesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithFlavorsAndImagesDtoWithDefaults() *ProjectWithFlavorsAndImagesDto {
	this := ProjectWithFlavorsAndImagesDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectWithFlavorsAndImagesDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWithFlavorsAndImagesDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectWithFlavorsAndImagesDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWithFlavorsAndImagesDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProjectWithFlavorsAndImagesDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ProjectWithFlavorsAndImagesDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProjectWithFlavorsAndImagesDto) UnsetName() {
	o.Name.Unset()
}

// GetFlavors returns the Flavors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWithFlavorsAndImagesDto) GetFlavors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetFlavorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flavors) {
		return nil, false
	}
	return o.Flavors, true
}

// HasFlavors returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasFlavors() bool {
	if o != nil && IsNil(o.Flavors) {
		return true
	}

	return false
}

// SetFlavors gets a reference to the given []string and assigns it to the Flavors field.
func (o *ProjectWithFlavorsAndImagesDto) SetFlavors(v []string) {
	o.Flavors = v
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWithFlavorsAndImagesDto) GetImages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasImages() bool {
	if o != nil && IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *ProjectWithFlavorsAndImagesDto) SetImages(v []string) {
	o.Images = v
}

// GetImageNames returns the ImageNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWithFlavorsAndImagesDto) GetImageNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ImageNames
}

// GetImageNamesOk returns a tuple with the ImageNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImageNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ImageNames) {
		return nil, false
	}
	return o.ImageNames, true
}

// HasImageNames returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasImageNames() bool {
	if o != nil && IsNil(o.ImageNames) {
		return true
	}

	return false
}

// SetImageNames gets a reference to the given []string and assigns it to the ImageNames field.
func (o *ProjectWithFlavorsAndImagesDto) SetImageNames(v []string) {
	o.ImageNames = v
}

// GetIsReady returns the IsReady field value if set, zero value otherwise.
func (o *ProjectWithFlavorsAndImagesDto) GetIsReady() bool {
	if o == nil || IsNil(o.IsReady) {
		var ret bool
		return ret
	}
	return *o.IsReady
}

// GetIsReadyOk returns a tuple with the IsReady field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWithFlavorsAndImagesDto) GetIsReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReady) {
		return nil, false
	}
	return o.IsReady, true
}

// HasIsReady returns a boolean if a field has been set.
func (o *ProjectWithFlavorsAndImagesDto) HasIsReady() bool {
	if o != nil && !IsNil(o.IsReady) {
		return true
	}

	return false
}

// SetIsReady gets a reference to the given bool and assigns it to the IsReady field.
func (o *ProjectWithFlavorsAndImagesDto) SetIsReady(v bool) {
	o.IsReady = &v
}

func (o ProjectWithFlavorsAndImagesDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectWithFlavorsAndImagesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Flavors != nil {
		toSerialize["flavors"] = o.Flavors
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.ImageNames != nil {
		toSerialize["imageNames"] = o.ImageNames
	}
	if !IsNil(o.IsReady) {
		toSerialize["isReady"] = o.IsReady
	}
	return toSerialize, nil
}

type NullableProjectWithFlavorsAndImagesDto struct {
	value *ProjectWithFlavorsAndImagesDto
	isSet bool
}

func (v NullableProjectWithFlavorsAndImagesDto) Get() *ProjectWithFlavorsAndImagesDto {
	return v.value
}

func (v *NullableProjectWithFlavorsAndImagesDto) Set(val *ProjectWithFlavorsAndImagesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectWithFlavorsAndImagesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectWithFlavorsAndImagesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectWithFlavorsAndImagesDto(val *ProjectWithFlavorsAndImagesDto) *NullableProjectWithFlavorsAndImagesDto {
	return &NullableProjectWithFlavorsAndImagesDto{value: val, isSet: true}
}

func (v NullableProjectWithFlavorsAndImagesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectWithFlavorsAndImagesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
