// Code generated by go-swagger; DO NOT EDIT.

package showback_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new showback credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for showback credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShowbackCredentialsCreate(params *ShowbackCredentialsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsCreateOK, error)

	ShowbackCredentialsDelete(params *ShowbackCredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsDeleteOK, *ShowbackCredentialsDeleteNoContent, error)

	ShowbackCredentialsDropdown(params *ShowbackCredentialsDropdownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsDropdownOK, error)

	ShowbackCredentialsList(params *ShowbackCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsListOK, error)

	ShowbackCredentialsLockManager(params *ShowbackCredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsLockManagerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShowbackCredentialsCreate creates showback credential
*/
func (a *Client) ShowbackCredentialsCreate(params *ShowbackCredentialsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackCredentials_Create",
		Method:             "POST",
		PathPattern:        "/showback/v{v}/ShowbackCredentials/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackCredentialsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCredentialsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackCredentials_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCredentialsDelete deletes showback credential
*/
func (a *Client) ShowbackCredentialsDelete(params *ShowbackCredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsDeleteOK, *ShowbackCredentialsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackCredentials_Delete",
		Method:             "DELETE",
		PathPattern:        "/showback/v{v}/ShowbackCredentials/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackCredentialsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShowbackCredentialsDeleteOK:
		return value, nil, nil
	case *ShowbackCredentialsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showback_credentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCredentialsDropdown retrieves showback credentials by organization Id
*/
func (a *Client) ShowbackCredentialsDropdown(params *ShowbackCredentialsDropdownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsDropdownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsDropdownParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackCredentials_Dropdown",
		Method:             "GET",
		PathPattern:        "/showback/v{v}/ShowbackCredentials/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackCredentialsDropdownReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCredentialsDropdownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackCredentials_Dropdown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCredentialsList retrieves all showback credentials
*/
func (a *Client) ShowbackCredentialsList(params *ShowbackCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackCredentials_List",
		Method:             "GET",
		PathPattern:        "/showback/v{v}/ShowbackCredentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackCredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackCredentials_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCredentialsLockManager locks unlock showback credential
*/
func (a *Client) ShowbackCredentialsLockManager(params *ShowbackCredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackCredentials_LockManager",
		Method:             "POST",
		PathPattern:        "/showback/v{v}/ShowbackCredentials/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackCredentialsLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCredentialsLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackCredentials_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
