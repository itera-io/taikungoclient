/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the AvailablePackageDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailablePackageDetailsDto{}

// AvailablePackageDetailsDto struct for AvailablePackageDetailsDto
type AvailablePackageDetailsDto struct {
	Name                    NullableString            `json:"name,omitempty"`
	AppRepoName             NullableString            `json:"appRepoName,omitempty"`
	AppRepoOrganizationName NullableString            `json:"appRepoOrganizationName,omitempty"`
	AppRepoId               NullableString            `json:"appRepoId,omitempty"`
	PackageId               NullableString            `json:"packageId,omitempty"`
	LogoId                  NullableString            `json:"logoId,omitempty"`
	Description             NullableString            `json:"description,omitempty"`
	Readme                  NullableString            `json:"readme,omitempty"`
	Version                 NullableString            `json:"version,omitempty"`
	SecurityReport          *SecurityReportSummaryDto `json:"securityReport,omitempty"`
	AppVersion              NullableString            `json:"appVersion,omitempty"`
	Stars                   *int32                    `json:"stars,omitempty"`
	VerifiedPublisher       *bool                     `json:"verifiedPublisher,omitempty"`
	Official                *bool                     `json:"official,omitempty"`
	BoundCatalogs           []CommonDropdownDto       `json:"boundCatalogs,omitempty"`
	HasJsonSchema           *bool                     `json:"hasJsonSchema,omitempty"`
}

// NewAvailablePackageDetailsDto instantiates a new AvailablePackageDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailablePackageDetailsDto() *AvailablePackageDetailsDto {
	this := AvailablePackageDetailsDto{}
	return &this
}

// NewAvailablePackageDetailsDtoWithDefaults instantiates a new AvailablePackageDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailablePackageDetailsDtoWithDefaults() *AvailablePackageDetailsDto {
	this := AvailablePackageDetailsDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AvailablePackageDetailsDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *AvailablePackageDetailsDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetName() {
	o.Name.Unset()
}

// GetAppRepoName returns the AppRepoName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetAppRepoName() string {
	if o == nil || IsNil(o.AppRepoName.Get()) {
		var ret string
		return ret
	}
	return *o.AppRepoName.Get()
}

// GetAppRepoNameOk returns a tuple with the AppRepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetAppRepoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppRepoName.Get(), o.AppRepoName.IsSet()
}

// HasAppRepoName returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasAppRepoName() bool {
	if o != nil && o.AppRepoName.IsSet() {
		return true
	}

	return false
}

// SetAppRepoName gets a reference to the given NullableString and assigns it to the AppRepoName field.
func (o *AvailablePackageDetailsDto) SetAppRepoName(v string) {
	o.AppRepoName.Set(&v)
}

// SetAppRepoNameNil sets the value for AppRepoName to be an explicit nil
func (o *AvailablePackageDetailsDto) SetAppRepoNameNil() {
	o.AppRepoName.Set(nil)
}

// UnsetAppRepoName ensures that no value is present for AppRepoName, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetAppRepoName() {
	o.AppRepoName.Unset()
}

// GetAppRepoOrganizationName returns the AppRepoOrganizationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetAppRepoOrganizationName() string {
	if o == nil || IsNil(o.AppRepoOrganizationName.Get()) {
		var ret string
		return ret
	}
	return *o.AppRepoOrganizationName.Get()
}

// GetAppRepoOrganizationNameOk returns a tuple with the AppRepoOrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetAppRepoOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppRepoOrganizationName.Get(), o.AppRepoOrganizationName.IsSet()
}

// HasAppRepoOrganizationName returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasAppRepoOrganizationName() bool {
	if o != nil && o.AppRepoOrganizationName.IsSet() {
		return true
	}

	return false
}

// SetAppRepoOrganizationName gets a reference to the given NullableString and assigns it to the AppRepoOrganizationName field.
func (o *AvailablePackageDetailsDto) SetAppRepoOrganizationName(v string) {
	o.AppRepoOrganizationName.Set(&v)
}

// SetAppRepoOrganizationNameNil sets the value for AppRepoOrganizationName to be an explicit nil
func (o *AvailablePackageDetailsDto) SetAppRepoOrganizationNameNil() {
	o.AppRepoOrganizationName.Set(nil)
}

// UnsetAppRepoOrganizationName ensures that no value is present for AppRepoOrganizationName, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetAppRepoOrganizationName() {
	o.AppRepoOrganizationName.Unset()
}

// GetAppRepoId returns the AppRepoId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetAppRepoId() string {
	if o == nil || IsNil(o.AppRepoId.Get()) {
		var ret string
		return ret
	}
	return *o.AppRepoId.Get()
}

// GetAppRepoIdOk returns a tuple with the AppRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetAppRepoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppRepoId.Get(), o.AppRepoId.IsSet()
}

// HasAppRepoId returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasAppRepoId() bool {
	if o != nil && o.AppRepoId.IsSet() {
		return true
	}

	return false
}

// SetAppRepoId gets a reference to the given NullableString and assigns it to the AppRepoId field.
func (o *AvailablePackageDetailsDto) SetAppRepoId(v string) {
	o.AppRepoId.Set(&v)
}

// SetAppRepoIdNil sets the value for AppRepoId to be an explicit nil
func (o *AvailablePackageDetailsDto) SetAppRepoIdNil() {
	o.AppRepoId.Set(nil)
}

// UnsetAppRepoId ensures that no value is present for AppRepoId, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetAppRepoId() {
	o.AppRepoId.Unset()
}

// GetPackageId returns the PackageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetPackageId() string {
	if o == nil || IsNil(o.PackageId.Get()) {
		var ret string
		return ret
	}
	return *o.PackageId.Get()
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageId.Get(), o.PackageId.IsSet()
}

// HasPackageId returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasPackageId() bool {
	if o != nil && o.PackageId.IsSet() {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given NullableString and assigns it to the PackageId field.
func (o *AvailablePackageDetailsDto) SetPackageId(v string) {
	o.PackageId.Set(&v)
}

// SetPackageIdNil sets the value for PackageId to be an explicit nil
func (o *AvailablePackageDetailsDto) SetPackageIdNil() {
	o.PackageId.Set(nil)
}

// UnsetPackageId ensures that no value is present for PackageId, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetPackageId() {
	o.PackageId.Unset()
}

// GetLogoId returns the LogoId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetLogoId() string {
	if o == nil || IsNil(o.LogoId.Get()) {
		var ret string
		return ret
	}
	return *o.LogoId.Get()
}

// GetLogoIdOk returns a tuple with the LogoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetLogoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogoId.Get(), o.LogoId.IsSet()
}

// HasLogoId returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasLogoId() bool {
	if o != nil && o.LogoId.IsSet() {
		return true
	}

	return false
}

// SetLogoId gets a reference to the given NullableString and assigns it to the LogoId field.
func (o *AvailablePackageDetailsDto) SetLogoId(v string) {
	o.LogoId.Set(&v)
}

// SetLogoIdNil sets the value for LogoId to be an explicit nil
func (o *AvailablePackageDetailsDto) SetLogoIdNil() {
	o.LogoId.Set(nil)
}

// UnsetLogoId ensures that no value is present for LogoId, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetLogoId() {
	o.LogoId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AvailablePackageDetailsDto) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AvailablePackageDetailsDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetDescription() {
	o.Description.Unset()
}

// GetReadme returns the Readme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetReadme() string {
	if o == nil || IsNil(o.Readme.Get()) {
		var ret string
		return ret
	}
	return *o.Readme.Get()
}

// GetReadmeOk returns a tuple with the Readme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetReadmeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Readme.Get(), o.Readme.IsSet()
}

// HasReadme returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasReadme() bool {
	if o != nil && o.Readme.IsSet() {
		return true
	}

	return false
}

// SetReadme gets a reference to the given NullableString and assigns it to the Readme field.
func (o *AvailablePackageDetailsDto) SetReadme(v string) {
	o.Readme.Set(&v)
}

// SetReadmeNil sets the value for Readme to be an explicit nil
func (o *AvailablePackageDetailsDto) SetReadmeNil() {
	o.Readme.Set(nil)
}

// UnsetReadme ensures that no value is present for Readme, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetReadme() {
	o.Readme.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *AvailablePackageDetailsDto) SetVersion(v string) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *AvailablePackageDetailsDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetVersion() {
	o.Version.Unset()
}

// GetSecurityReport returns the SecurityReport field value if set, zero value otherwise.
func (o *AvailablePackageDetailsDto) GetSecurityReport() SecurityReportSummaryDto {
	if o == nil || IsNil(o.SecurityReport) {
		var ret SecurityReportSummaryDto
		return ret
	}
	return *o.SecurityReport
}

// GetSecurityReportOk returns a tuple with the SecurityReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackageDetailsDto) GetSecurityReportOk() (*SecurityReportSummaryDto, bool) {
	if o == nil || IsNil(o.SecurityReport) {
		return nil, false
	}
	return o.SecurityReport, true
}

// HasSecurityReport returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasSecurityReport() bool {
	if o != nil && !IsNil(o.SecurityReport) {
		return true
	}

	return false
}

// SetSecurityReport gets a reference to the given SecurityReportSummaryDto and assigns it to the SecurityReport field.
func (o *AvailablePackageDetailsDto) SetSecurityReport(v SecurityReportSummaryDto) {
	o.SecurityReport = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AppVersion.Get()
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppVersion.Get(), o.AppVersion.IsSet()
}

// HasAppVersion returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasAppVersion() bool {
	if o != nil && o.AppVersion.IsSet() {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given NullableString and assigns it to the AppVersion field.
func (o *AvailablePackageDetailsDto) SetAppVersion(v string) {
	o.AppVersion.Set(&v)
}

// SetAppVersionNil sets the value for AppVersion to be an explicit nil
func (o *AvailablePackageDetailsDto) SetAppVersionNil() {
	o.AppVersion.Set(nil)
}

// UnsetAppVersion ensures that no value is present for AppVersion, not even an explicit nil
func (o *AvailablePackageDetailsDto) UnsetAppVersion() {
	o.AppVersion.Unset()
}

// GetStars returns the Stars field value if set, zero value otherwise.
func (o *AvailablePackageDetailsDto) GetStars() int32 {
	if o == nil || IsNil(o.Stars) {
		var ret int32
		return ret
	}
	return *o.Stars
}

// GetStarsOk returns a tuple with the Stars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackageDetailsDto) GetStarsOk() (*int32, bool) {
	if o == nil || IsNil(o.Stars) {
		return nil, false
	}
	return o.Stars, true
}

// HasStars returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasStars() bool {
	if o != nil && !IsNil(o.Stars) {
		return true
	}

	return false
}

// SetStars gets a reference to the given int32 and assigns it to the Stars field.
func (o *AvailablePackageDetailsDto) SetStars(v int32) {
	o.Stars = &v
}

// GetVerifiedPublisher returns the VerifiedPublisher field value if set, zero value otherwise.
func (o *AvailablePackageDetailsDto) GetVerifiedPublisher() bool {
	if o == nil || IsNil(o.VerifiedPublisher) {
		var ret bool
		return ret
	}
	return *o.VerifiedPublisher
}

// GetVerifiedPublisherOk returns a tuple with the VerifiedPublisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackageDetailsDto) GetVerifiedPublisherOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifiedPublisher) {
		return nil, false
	}
	return o.VerifiedPublisher, true
}

// HasVerifiedPublisher returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasVerifiedPublisher() bool {
	if o != nil && !IsNil(o.VerifiedPublisher) {
		return true
	}

	return false
}

// SetVerifiedPublisher gets a reference to the given bool and assigns it to the VerifiedPublisher field.
func (o *AvailablePackageDetailsDto) SetVerifiedPublisher(v bool) {
	o.VerifiedPublisher = &v
}

// GetOfficial returns the Official field value if set, zero value otherwise.
func (o *AvailablePackageDetailsDto) GetOfficial() bool {
	if o == nil || IsNil(o.Official) {
		var ret bool
		return ret
	}
	return *o.Official
}

// GetOfficialOk returns a tuple with the Official field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackageDetailsDto) GetOfficialOk() (*bool, bool) {
	if o == nil || IsNil(o.Official) {
		return nil, false
	}
	return o.Official, true
}

// HasOfficial returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasOfficial() bool {
	if o != nil && !IsNil(o.Official) {
		return true
	}

	return false
}

// SetOfficial gets a reference to the given bool and assigns it to the Official field.
func (o *AvailablePackageDetailsDto) SetOfficial(v bool) {
	o.Official = &v
}

// GetBoundCatalogs returns the BoundCatalogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AvailablePackageDetailsDto) GetBoundCatalogs() []CommonDropdownDto {
	if o == nil {
		var ret []CommonDropdownDto
		return ret
	}
	return o.BoundCatalogs
}

// GetBoundCatalogsOk returns a tuple with the BoundCatalogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AvailablePackageDetailsDto) GetBoundCatalogsOk() ([]CommonDropdownDto, bool) {
	if o == nil || IsNil(o.BoundCatalogs) {
		return nil, false
	}
	return o.BoundCatalogs, true
}

// HasBoundCatalogs returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasBoundCatalogs() bool {
	if o != nil && IsNil(o.BoundCatalogs) {
		return true
	}

	return false
}

// SetBoundCatalogs gets a reference to the given []CommonDropdownDto and assigns it to the BoundCatalogs field.
func (o *AvailablePackageDetailsDto) SetBoundCatalogs(v []CommonDropdownDto) {
	o.BoundCatalogs = v
}

// GetHasJsonSchema returns the HasJsonSchema field value if set, zero value otherwise.
func (o *AvailablePackageDetailsDto) GetHasJsonSchema() bool {
	if o == nil || IsNil(o.HasJsonSchema) {
		var ret bool
		return ret
	}
	return *o.HasJsonSchema
}

// GetHasJsonSchemaOk returns a tuple with the HasJsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackageDetailsDto) GetHasJsonSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasJsonSchema) {
		return nil, false
	}
	return o.HasJsonSchema, true
}

// HasHasJsonSchema returns a boolean if a field has been set.
func (o *AvailablePackageDetailsDto) HasHasJsonSchema() bool {
	if o != nil && !IsNil(o.HasJsonSchema) {
		return true
	}

	return false
}

// SetHasJsonSchema gets a reference to the given bool and assigns it to the HasJsonSchema field.
func (o *AvailablePackageDetailsDto) SetHasJsonSchema(v bool) {
	o.HasJsonSchema = &v
}

func (o AvailablePackageDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailablePackageDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.AppRepoName.IsSet() {
		toSerialize["appRepoName"] = o.AppRepoName.Get()
	}
	if o.AppRepoOrganizationName.IsSet() {
		toSerialize["appRepoOrganizationName"] = o.AppRepoOrganizationName.Get()
	}
	if o.AppRepoId.IsSet() {
		toSerialize["appRepoId"] = o.AppRepoId.Get()
	}
	if o.PackageId.IsSet() {
		toSerialize["packageId"] = o.PackageId.Get()
	}
	if o.LogoId.IsSet() {
		toSerialize["logoId"] = o.LogoId.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Readme.IsSet() {
		toSerialize["readme"] = o.Readme.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.SecurityReport) {
		toSerialize["securityReport"] = o.SecurityReport
	}
	if o.AppVersion.IsSet() {
		toSerialize["appVersion"] = o.AppVersion.Get()
	}
	if !IsNil(o.Stars) {
		toSerialize["stars"] = o.Stars
	}
	if !IsNil(o.VerifiedPublisher) {
		toSerialize["verifiedPublisher"] = o.VerifiedPublisher
	}
	if !IsNil(o.Official) {
		toSerialize["official"] = o.Official
	}
	if o.BoundCatalogs != nil {
		toSerialize["boundCatalogs"] = o.BoundCatalogs
	}
	if !IsNil(o.HasJsonSchema) {
		toSerialize["hasJsonSchema"] = o.HasJsonSchema
	}
	return toSerialize, nil
}

type NullableAvailablePackageDetailsDto struct {
	value *AvailablePackageDetailsDto
	isSet bool
}

func (v NullableAvailablePackageDetailsDto) Get() *AvailablePackageDetailsDto {
	return v.value
}

func (v *NullableAvailablePackageDetailsDto) Set(val *AvailablePackageDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailablePackageDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailablePackageDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailablePackageDetailsDto(val *AvailablePackageDetailsDto) *NullableAvailablePackageDetailsDto {
	return &NullableAvailablePackageDetailsDto{value: val, isSet: true}
}

func (v NullableAvailablePackageDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailablePackageDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
