/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the HelmReleaseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmReleaseDto{}

// HelmReleaseDto struct for HelmReleaseDto
type HelmReleaseDto struct {
	ApiVersion NullableString `json:"apiVersion,omitempty"`
	Kind       NullableString `json:"kind,omitempty"`
	Metadata   *HelmMetadata  `json:"metadata,omitempty"`
	Spec       *HelmSpec      `json:"spec,omitempty"`
	Status     *HelmStatus    `json:"status,omitempty"`
}

// NewHelmReleaseDto instantiates a new HelmReleaseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmReleaseDto() *HelmReleaseDto {
	this := HelmReleaseDto{}
	return &this
}

// NewHelmReleaseDtoWithDefaults instantiates a new HelmReleaseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmReleaseDtoWithDefaults() *HelmReleaseDto {
	this := HelmReleaseDto{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmReleaseDto) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ApiVersion.Get()
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmReleaseDto) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiVersion.Get(), o.ApiVersion.IsSet()
}

// HasApiVersion returns a boolean if a field has been set.
func (o *HelmReleaseDto) HasApiVersion() bool {
	if o != nil && o.ApiVersion.IsSet() {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given NullableString and assigns it to the ApiVersion field.
func (o *HelmReleaseDto) SetApiVersion(v string) {
	o.ApiVersion.Set(&v)
}

// SetApiVersionNil sets the value for ApiVersion to be an explicit nil
func (o *HelmReleaseDto) SetApiVersionNil() {
	o.ApiVersion.Set(nil)
}

// UnsetApiVersion ensures that no value is present for ApiVersion, not even an explicit nil
func (o *HelmReleaseDto) UnsetApiVersion() {
	o.ApiVersion.Unset()
}

// GetKind returns the Kind field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmReleaseDto) GetKind() string {
	if o == nil || IsNil(o.Kind.Get()) {
		var ret string
		return ret
	}
	return *o.Kind.Get()
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmReleaseDto) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind.Get(), o.Kind.IsSet()
}

// HasKind returns a boolean if a field has been set.
func (o *HelmReleaseDto) HasKind() bool {
	if o != nil && o.Kind.IsSet() {
		return true
	}

	return false
}

// SetKind gets a reference to the given NullableString and assigns it to the Kind field.
func (o *HelmReleaseDto) SetKind(v string) {
	o.Kind.Set(&v)
}

// SetKindNil sets the value for Kind to be an explicit nil
func (o *HelmReleaseDto) SetKindNil() {
	o.Kind.Set(nil)
}

// UnsetKind ensures that no value is present for Kind, not even an explicit nil
func (o *HelmReleaseDto) UnsetKind() {
	o.Kind.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *HelmReleaseDto) GetMetadata() HelmMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret HelmMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmReleaseDto) GetMetadataOk() (*HelmMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *HelmReleaseDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given HelmMetadata and assigns it to the Metadata field.
func (o *HelmReleaseDto) SetMetadata(v HelmMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *HelmReleaseDto) GetSpec() HelmSpec {
	if o == nil || IsNil(o.Spec) {
		var ret HelmSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmReleaseDto) GetSpecOk() (*HelmSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *HelmReleaseDto) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given HelmSpec and assigns it to the Spec field.
func (o *HelmReleaseDto) SetSpec(v HelmSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HelmReleaseDto) GetStatus() HelmStatus {
	if o == nil || IsNil(o.Status) {
		var ret HelmStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmReleaseDto) GetStatusOk() (*HelmStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HelmReleaseDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given HelmStatus and assigns it to the Status field.
func (o *HelmReleaseDto) SetStatus(v HelmStatus) {
	o.Status = &v
}

func (o HelmReleaseDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmReleaseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion.IsSet() {
		toSerialize["apiVersion"] = o.ApiVersion.Get()
	}
	if o.Kind.IsSet() {
		toSerialize["kind"] = o.Kind.Get()
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableHelmReleaseDto struct {
	value *HelmReleaseDto
	isSet bool
}

func (v NullableHelmReleaseDto) Get() *HelmReleaseDto {
	return v.value
}

func (v *NullableHelmReleaseDto) Set(val *HelmReleaseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmReleaseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmReleaseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmReleaseDto(val *HelmReleaseDto) *NullableHelmReleaseDto {
	return &NullableHelmReleaseDto{value: val, isSet: true}
}

func (v NullableHelmReleaseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmReleaseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
