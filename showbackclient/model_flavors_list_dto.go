/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the FlavorsListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorsListDto{}

// FlavorsListDto struct for FlavorsListDto
type FlavorsListDto struct {
	Ram              *int64          `json:"ram,omitempty"`
	Cpu              *int32          `json:"cpu,omitempty"`
	Name             NullableString  `json:"name,omitempty"`
	Description      interface{}     `json:"description,omitempty"`
	MaxDataDiskCount NullableFloat64 `json:"maxDataDiskCount,omitempty"`
}

// NewFlavorsListDto instantiates a new FlavorsListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorsListDto() *FlavorsListDto {
	this := FlavorsListDto{}
	return &this
}

// NewFlavorsListDtoWithDefaults instantiates a new FlavorsListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorsListDtoWithDefaults() *FlavorsListDto {
	this := FlavorsListDto{}
	return &this
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *FlavorsListDto) GetRam() int64 {
	if o == nil || IsNil(o.Ram) {
		var ret int64
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorsListDto) GetRamOk() (*int64, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *FlavorsListDto) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given int64 and assigns it to the Ram field.
func (o *FlavorsListDto) SetRam(v int64) {
	o.Ram = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *FlavorsListDto) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorsListDto) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *FlavorsListDto) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *FlavorsListDto) SetCpu(v int32) {
	o.Cpu = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlavorsListDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlavorsListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FlavorsListDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FlavorsListDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *FlavorsListDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FlavorsListDto) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlavorsListDto) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlavorsListDto) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FlavorsListDto) HasDescription() bool {
	if o != nil && IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given interface{} and assigns it to the Description field.
func (o *FlavorsListDto) SetDescription(v interface{}) {
	o.Description = v
}

// GetMaxDataDiskCount returns the MaxDataDiskCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlavorsListDto) GetMaxDataDiskCount() float64 {
	if o == nil || IsNil(o.MaxDataDiskCount.Get()) {
		var ret float64
		return ret
	}
	return *o.MaxDataDiskCount.Get()
}

// GetMaxDataDiskCountOk returns a tuple with the MaxDataDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlavorsListDto) GetMaxDataDiskCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDataDiskCount.Get(), o.MaxDataDiskCount.IsSet()
}

// HasMaxDataDiskCount returns a boolean if a field has been set.
func (o *FlavorsListDto) HasMaxDataDiskCount() bool {
	if o != nil && o.MaxDataDiskCount.IsSet() {
		return true
	}

	return false
}

// SetMaxDataDiskCount gets a reference to the given NullableFloat64 and assigns it to the MaxDataDiskCount field.
func (o *FlavorsListDto) SetMaxDataDiskCount(v float64) {
	o.MaxDataDiskCount.Set(&v)
}

// SetMaxDataDiskCountNil sets the value for MaxDataDiskCount to be an explicit nil
func (o *FlavorsListDto) SetMaxDataDiskCountNil() {
	o.MaxDataDiskCount.Set(nil)
}

// UnsetMaxDataDiskCount ensures that no value is present for MaxDataDiskCount, not even an explicit nil
func (o *FlavorsListDto) UnsetMaxDataDiskCount() {
	o.MaxDataDiskCount.Unset()
}

func (o FlavorsListDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorsListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.MaxDataDiskCount.IsSet() {
		toSerialize["maxDataDiskCount"] = o.MaxDataDiskCount.Get()
	}
	return toSerialize, nil
}

type NullableFlavorsListDto struct {
	value *FlavorsListDto
	isSet bool
}

func (v NullableFlavorsListDto) Get() *FlavorsListDto {
	return v.value
}

func (v *NullableFlavorsListDto) Set(val *FlavorsListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorsListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorsListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorsListDto(val *FlavorsListDto) *NullableFlavorsListDto {
	return &NullableFlavorsListDto{value: val, isSet: true}
}

func (v NullableFlavorsListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorsListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
