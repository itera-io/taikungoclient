/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
	"fmt"
)

// StandAloneVmDiskStatus the model 'StandAloneVmDiskStatus'
type StandAloneVmDiskStatus string

// List of StandAloneVmDiskStatus
const (
	STANDALONEVMDISKSTATUS_DELETING       StandAloneVmDiskStatus = "Deleting"
	STANDALONEVMDISKSTATUS_FAILURE        StandAloneVmDiskStatus = "Failure"
	STANDALONEVMDISKSTATUS_WAITING        StandAloneVmDiskStatus = "Waiting"
	STANDALONEVMDISKSTATUS_PENDING_DELETE StandAloneVmDiskStatus = "PendingDelete"
	STANDALONEVMDISKSTATUS_READY          StandAloneVmDiskStatus = "Ready"
	STANDALONEVMDISKSTATUS_UPDATING       StandAloneVmDiskStatus = "Updating"
)

// All allowed values of StandAloneVmDiskStatus enum
var AllowedStandAloneVmDiskStatusEnumValues = []StandAloneVmDiskStatus{
	"Deleting",
	"Failure",
	"Waiting",
	"PendingDelete",
	"Ready",
	"Updating",
}

func (v *StandAloneVmDiskStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StandAloneVmDiskStatus(value)
	for _, existing := range AllowedStandAloneVmDiskStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StandAloneVmDiskStatus", value)
}

// NewStandAloneVmDiskStatusFromValue returns a pointer to a valid StandAloneVmDiskStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStandAloneVmDiskStatusFromValue(v string) (*StandAloneVmDiskStatus, error) {
	ev := StandAloneVmDiskStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StandAloneVmDiskStatus: valid values are %v", v, AllowedStandAloneVmDiskStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StandAloneVmDiskStatus) IsValid() bool {
	for _, existing := range AllowedStandAloneVmDiskStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StandAloneVmDiskStatus value
func (v StandAloneVmDiskStatus) Ptr() *StandAloneVmDiskStatus {
	return &v
}

type NullableStandAloneVmDiskStatus struct {
	value *StandAloneVmDiskStatus
	isSet bool
}

func (v NullableStandAloneVmDiskStatus) Get() *StandAloneVmDiskStatus {
	return v.value
}

func (v *NullableStandAloneVmDiskStatus) Set(val *StandAloneVmDiskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStandAloneVmDiskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStandAloneVmDiskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandAloneVmDiskStatus(val *StandAloneVmDiskStatus) *NullableStandAloneVmDiskStatus {
	return &NullableStandAloneVmDiskStatus{value: val, isSet: true}
}

func (v NullableStandAloneVmDiskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandAloneVmDiskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
