/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
)

// checks if the PartnerDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerDetailsDto{}

// PartnerDetailsDto struct for PartnerDetailsDto
type PartnerDetailsDto struct {
	Id                   *int32               `json:"id,omitempty"`
	Name                 NullableString       `json:"name,omitempty"`
	Link                 NullableString       `json:"link,omitempty"`
	Domain               NullableString       `json:"domain,omitempty"`
	Country              NullableString       `json:"country,omitempty"`
	City                 NullableString       `json:"city,omitempty"`
	VatNumber            NullableString       `json:"vatNumber,omitempty"`
	Address              NullableString       `json:"address,omitempty"`
	Logo                 NullableString       `json:"logo,omitempty"`
	Phone                NullableString       `json:"phone,omitempty"`
	Email                NullableString       `json:"email,omitempty"`
	PaymentEnabled       *bool                `json:"paymentEnabled,omitempty"`
	AllowRegistration    *bool                `json:"allowRegistration,omitempty"`
	RequiredUserApproval *bool                `json:"requiredUserApproval,omitempty"`
	Organizations        []CommonDropdownDto  `json:"organizations,omitempty"`
	WhiteListDomains     []WhiteListDomainDto `json:"whiteListDomains,omitempty"`
}

// NewPartnerDetailsDto instantiates a new PartnerDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerDetailsDto() *PartnerDetailsDto {
	this := PartnerDetailsDto{}
	return &this
}

// NewPartnerDetailsDtoWithDefaults instantiates a new PartnerDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerDetailsDtoWithDefaults() *PartnerDetailsDto {
	this := PartnerDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartnerDetailsDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerDetailsDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PartnerDetailsDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PartnerDetailsDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *PartnerDetailsDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PartnerDetailsDto) UnsetName() {
	o.Name.Unset()
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetLink() string {
	if o == nil || IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given NullableString and assigns it to the Link field.
func (o *PartnerDetailsDto) SetLink(v string) {
	o.Link.Set(&v)
}

// SetLinkNil sets the value for Link to be an explicit nil
func (o *PartnerDetailsDto) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *PartnerDetailsDto) UnsetLink() {
	o.Link.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *PartnerDetailsDto) SetDomain(v string) {
	o.Domain.Set(&v)
}

// SetDomainNil sets the value for Domain to be an explicit nil
func (o *PartnerDetailsDto) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *PartnerDetailsDto) UnsetDomain() {
	o.Domain.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *PartnerDetailsDto) SetCountry(v string) {
	o.Country.Set(&v)
}

// SetCountryNil sets the value for Country to be an explicit nil
func (o *PartnerDetailsDto) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *PartnerDetailsDto) UnsetCountry() {
	o.Country.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *PartnerDetailsDto) SetCity(v string) {
	o.City.Set(&v)
}

// SetCityNil sets the value for City to be an explicit nil
func (o *PartnerDetailsDto) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *PartnerDetailsDto) UnsetCity() {
	o.City.Unset()
}

// GetVatNumber returns the VatNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetVatNumber() string {
	if o == nil || IsNil(o.VatNumber.Get()) {
		var ret string
		return ret
	}
	return *o.VatNumber.Get()
}

// GetVatNumberOk returns a tuple with the VatNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetVatNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VatNumber.Get(), o.VatNumber.IsSet()
}

// HasVatNumber returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasVatNumber() bool {
	if o != nil && o.VatNumber.IsSet() {
		return true
	}

	return false
}

// SetVatNumber gets a reference to the given NullableString and assigns it to the VatNumber field.
func (o *PartnerDetailsDto) SetVatNumber(v string) {
	o.VatNumber.Set(&v)
}

// SetVatNumberNil sets the value for VatNumber to be an explicit nil
func (o *PartnerDetailsDto) SetVatNumberNil() {
	o.VatNumber.Set(nil)
}

// UnsetVatNumber ensures that no value is present for VatNumber, not even an explicit nil
func (o *PartnerDetailsDto) UnsetVatNumber() {
	o.VatNumber.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *PartnerDetailsDto) SetAddress(v string) {
	o.Address.Set(&v)
}

// SetAddressNil sets the value for Address to be an explicit nil
func (o *PartnerDetailsDto) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *PartnerDetailsDto) UnsetAddress() {
	o.Address.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *PartnerDetailsDto) SetLogo(v string) {
	o.Logo.Set(&v)
}

// SetLogoNil sets the value for Logo to be an explicit nil
func (o *PartnerDetailsDto) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *PartnerDetailsDto) UnsetLogo() {
	o.Logo.Unset()
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetPhone() string {
	if o == nil || IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *PartnerDetailsDto) SetPhone(v string) {
	o.Phone.Set(&v)
}

// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *PartnerDetailsDto) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *PartnerDetailsDto) UnsetPhone() {
	o.Phone.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *PartnerDetailsDto) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *PartnerDetailsDto) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *PartnerDetailsDto) UnsetEmail() {
	o.Email.Unset()
}

// GetPaymentEnabled returns the PaymentEnabled field value if set, zero value otherwise.
func (o *PartnerDetailsDto) GetPaymentEnabled() bool {
	if o == nil || IsNil(o.PaymentEnabled) {
		var ret bool
		return ret
	}
	return *o.PaymentEnabled
}

// GetPaymentEnabledOk returns a tuple with the PaymentEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerDetailsDto) GetPaymentEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PaymentEnabled) {
		return nil, false
	}
	return o.PaymentEnabled, true
}

// HasPaymentEnabled returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasPaymentEnabled() bool {
	if o != nil && !IsNil(o.PaymentEnabled) {
		return true
	}

	return false
}

// SetPaymentEnabled gets a reference to the given bool and assigns it to the PaymentEnabled field.
func (o *PartnerDetailsDto) SetPaymentEnabled(v bool) {
	o.PaymentEnabled = &v
}

// GetAllowRegistration returns the AllowRegistration field value if set, zero value otherwise.
func (o *PartnerDetailsDto) GetAllowRegistration() bool {
	if o == nil || IsNil(o.AllowRegistration) {
		var ret bool
		return ret
	}
	return *o.AllowRegistration
}

// GetAllowRegistrationOk returns a tuple with the AllowRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerDetailsDto) GetAllowRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRegistration) {
		return nil, false
	}
	return o.AllowRegistration, true
}

// HasAllowRegistration returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasAllowRegistration() bool {
	if o != nil && !IsNil(o.AllowRegistration) {
		return true
	}

	return false
}

// SetAllowRegistration gets a reference to the given bool and assigns it to the AllowRegistration field.
func (o *PartnerDetailsDto) SetAllowRegistration(v bool) {
	o.AllowRegistration = &v
}

// GetRequiredUserApproval returns the RequiredUserApproval field value if set, zero value otherwise.
func (o *PartnerDetailsDto) GetRequiredUserApproval() bool {
	if o == nil || IsNil(o.RequiredUserApproval) {
		var ret bool
		return ret
	}
	return *o.RequiredUserApproval
}

// GetRequiredUserApprovalOk returns a tuple with the RequiredUserApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerDetailsDto) GetRequiredUserApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiredUserApproval) {
		return nil, false
	}
	return o.RequiredUserApproval, true
}

// HasRequiredUserApproval returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasRequiredUserApproval() bool {
	if o != nil && !IsNil(o.RequiredUserApproval) {
		return true
	}

	return false
}

// SetRequiredUserApproval gets a reference to the given bool and assigns it to the RequiredUserApproval field.
func (o *PartnerDetailsDto) SetRequiredUserApproval(v bool) {
	o.RequiredUserApproval = &v
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetOrganizations() []CommonDropdownDto {
	if o == nil {
		var ret []CommonDropdownDto
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetOrganizationsOk() ([]CommonDropdownDto, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasOrganizations() bool {
	if o != nil && IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []CommonDropdownDto and assigns it to the Organizations field.
func (o *PartnerDetailsDto) SetOrganizations(v []CommonDropdownDto) {
	o.Organizations = v
}

// GetWhiteListDomains returns the WhiteListDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerDetailsDto) GetWhiteListDomains() []WhiteListDomainDto {
	if o == nil {
		var ret []WhiteListDomainDto
		return ret
	}
	return o.WhiteListDomains
}

// GetWhiteListDomainsOk returns a tuple with the WhiteListDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerDetailsDto) GetWhiteListDomainsOk() ([]WhiteListDomainDto, bool) {
	if o == nil || IsNil(o.WhiteListDomains) {
		return nil, false
	}
	return o.WhiteListDomains, true
}

// HasWhiteListDomains returns a boolean if a field has been set.
func (o *PartnerDetailsDto) HasWhiteListDomains() bool {
	if o != nil && IsNil(o.WhiteListDomains) {
		return true
	}

	return false
}

// SetWhiteListDomains gets a reference to the given []WhiteListDomainDto and assigns it to the WhiteListDomains field.
func (o *PartnerDetailsDto) SetWhiteListDomains(v []WhiteListDomainDto) {
	o.WhiteListDomains = v
}

func (o PartnerDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Link.IsSet() {
		toSerialize["link"] = o.Link.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.VatNumber.IsSet() {
		toSerialize["vatNumber"] = o.VatNumber.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.PaymentEnabled) {
		toSerialize["paymentEnabled"] = o.PaymentEnabled
	}
	if !IsNil(o.AllowRegistration) {
		toSerialize["allowRegistration"] = o.AllowRegistration
	}
	if !IsNil(o.RequiredUserApproval) {
		toSerialize["requiredUserApproval"] = o.RequiredUserApproval
	}
	if o.Organizations != nil {
		toSerialize["organizations"] = o.Organizations
	}
	if o.WhiteListDomains != nil {
		toSerialize["whiteListDomains"] = o.WhiteListDomains
	}
	return toSerialize, nil
}

type NullablePartnerDetailsDto struct {
	value *PartnerDetailsDto
	isSet bool
}

func (v NullablePartnerDetailsDto) Get() *PartnerDetailsDto {
	return v.value
}

func (v *NullablePartnerDetailsDto) Set(val *PartnerDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerDetailsDto(val *PartnerDetailsDto) *NullablePartnerDetailsDto {
	return &NullablePartnerDetailsDto{value: val, isSet: true}
}

func (v NullablePartnerDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
