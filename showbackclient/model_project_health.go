/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikunshowback

import (
	"encoding/json"
	"fmt"
)

// ProjectHealth the model 'ProjectHealth'
type ProjectHealth string

// List of ProjectHealth
const (
	PROJECTHEALTH_NULL      ProjectHealth = "Null"
	PROJECTHEALTH_HEALTHY   ProjectHealth = "Healthy"
	PROJECTHEALTH_NONE      ProjectHealth = "None"
	PROJECTHEALTH_UNHEALTHY ProjectHealth = "Unhealthy"
	PROJECTHEALTH_UNKNOWN   ProjectHealth = "Unknown"
	PROJECTHEALTH_WARNING   ProjectHealth = "Warning"
)

// All allowed values of ProjectHealth enum
var AllowedProjectHealthEnumValues = []ProjectHealth{
	"Null",
	"Healthy",
	"None",
	"Unhealthy",
	"Unknown",
	"Warning",
}

func (v *ProjectHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProjectHealth(value)
	for _, existing := range AllowedProjectHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProjectHealth", value)
}

// NewProjectHealthFromValue returns a pointer to a valid ProjectHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProjectHealthFromValue(v string) (*ProjectHealth, error) {
	ev := ProjectHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProjectHealth: valid values are %v", v, AllowedProjectHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProjectHealth) IsValid() bool {
	for _, existing := range AllowedProjectHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProjectHealth value
func (v ProjectHealth) Ptr() *ProjectHealth {
	return &v
}

type NullableProjectHealth struct {
	value *ProjectHealth
	isSet bool
}

func (v NullableProjectHealth) Get() *ProjectHealth {
	return v.value
}

func (v *NullableProjectHealth) Set(val *ProjectHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectHealth(val *ProjectHealth) *NullableProjectHealth {
	return &NullableProjectHealth{value: val, isSet: true}
}

func (v NullableProjectHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
