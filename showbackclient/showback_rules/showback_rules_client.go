// Code generated by go-swagger; DO NOT EDIT.

package showback_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new showback rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for showback rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShowbackRulesCreate(params *ShowbackRulesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesCreateOK, error)

	ShowbackRulesDelete(params *ShowbackRulesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesDeleteOK, *ShowbackRulesDeleteNoContent, error)

	ShowbackRulesDeleteAll(params *ShowbackRulesDeleteAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesDeleteAllOK, error)

	ShowbackRulesList(params *ShowbackRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesListOK, error)

	ShowbackRulesUpdate(params *ShowbackRulesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ShowbackRulesCreate creates showback rule
*/
func (a *Client) ShowbackRulesCreate(params *ShowbackRulesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackRules_Create",
		Method:             "POST",
		PathPattern:        "/showback/v{v}/ShowbackRules/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackRulesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackRulesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackRules_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShowbackRulesDelete deletes showback rule
*/
func (a *Client) ShowbackRulesDelete(params *ShowbackRulesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesDeleteOK, *ShowbackRulesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackRules_Delete",
		Method:             "DELETE",
		PathPattern:        "/showback/v{v}/ShowbackRules/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackRulesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShowbackRulesDeleteOK:
		return value, nil, nil
	case *ShowbackRulesDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showback_rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShowbackRulesDeleteAll deletes multiple showback rule
*/
func (a *Client) ShowbackRulesDeleteAll(params *ShowbackRulesDeleteAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesDeleteAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesDeleteAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackRules_DeleteAll",
		Method:             "POST",
		PathPattern:        "/showback/v{v}/ShowbackRules/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackRulesDeleteAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackRulesDeleteAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackRules_DeleteAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShowbackRulesList retrieves all showback rules
*/
func (a *Client) ShowbackRulesList(params *ShowbackRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackRules_List",
		Method:             "GET",
		PathPattern:        "/showback/v{v}/ShowbackRules",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackRulesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackRulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackRules_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShowbackRulesUpdate updates showback rule
*/
func (a *Client) ShowbackRulesUpdate(params *ShowbackRulesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowbackRules_Update",
		Method:             "POST",
		PathPattern:        "/showback/v{v}/ShowbackRules/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowbackRulesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackRulesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShowbackRules_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
