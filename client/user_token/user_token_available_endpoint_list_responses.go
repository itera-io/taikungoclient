// Code generated by go-swagger; DO NOT EDIT.

package user_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserTokenAvailableEndpointListReader is a Reader for the UserTokenAvailableEndpointList structure.
type UserTokenAvailableEndpointListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserTokenAvailableEndpointListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserTokenAvailableEndpointListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserTokenAvailableEndpointListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserTokenAvailableEndpointListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserTokenAvailableEndpointListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserTokenAvailableEndpointListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserTokenAvailableEndpointListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserTokenAvailableEndpointListOK creates a UserTokenAvailableEndpointListOK with default headers values
func NewUserTokenAvailableEndpointListOK() *UserTokenAvailableEndpointListOK {
	return &UserTokenAvailableEndpointListOK{}
}

/*
UserTokenAvailableEndpointListOK describes a response with status code 200, with default header values.

Success
*/
type UserTokenAvailableEndpointListOK struct {
	Payload *UserTokenAvailableEndpointListOKBody
}

// IsSuccess returns true when this user token available endpoint list o k response has a 2xx status code
func (o *UserTokenAvailableEndpointListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user token available endpoint list o k response has a 3xx status code
func (o *UserTokenAvailableEndpointListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list o k response has a 4xx status code
func (o *UserTokenAvailableEndpointListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user token available endpoint list o k response has a 5xx status code
func (o *UserTokenAvailableEndpointListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user token available endpoint list o k response a status code equal to that given
func (o *UserTokenAvailableEndpointListOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserTokenAvailableEndpointListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListOK  %+v", 200, o.Payload)
}

func (o *UserTokenAvailableEndpointListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListOK  %+v", 200, o.Payload)
}

func (o *UserTokenAvailableEndpointListOK) GetPayload() *UserTokenAvailableEndpointListOKBody {
	return o.Payload
}

func (o *UserTokenAvailableEndpointListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserTokenAvailableEndpointListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserTokenAvailableEndpointListBadRequest creates a UserTokenAvailableEndpointListBadRequest with default headers values
func NewUserTokenAvailableEndpointListBadRequest() *UserTokenAvailableEndpointListBadRequest {
	return &UserTokenAvailableEndpointListBadRequest{}
}

/*
UserTokenAvailableEndpointListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserTokenAvailableEndpointListBadRequest struct {
	Payload []*UserTokenAvailableEndpointListBadRequestBodyItems0
}

// IsSuccess returns true when this user token available endpoint list bad request response has a 2xx status code
func (o *UserTokenAvailableEndpointListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user token available endpoint list bad request response has a 3xx status code
func (o *UserTokenAvailableEndpointListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list bad request response has a 4xx status code
func (o *UserTokenAvailableEndpointListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user token available endpoint list bad request response has a 5xx status code
func (o *UserTokenAvailableEndpointListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user token available endpoint list bad request response a status code equal to that given
func (o *UserTokenAvailableEndpointListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserTokenAvailableEndpointListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListBadRequest  %+v", 400, o.Payload)
}

func (o *UserTokenAvailableEndpointListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListBadRequest  %+v", 400, o.Payload)
}

func (o *UserTokenAvailableEndpointListBadRequest) GetPayload() []*UserTokenAvailableEndpointListBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserTokenAvailableEndpointListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserTokenAvailableEndpointListUnauthorized creates a UserTokenAvailableEndpointListUnauthorized with default headers values
func NewUserTokenAvailableEndpointListUnauthorized() *UserTokenAvailableEndpointListUnauthorized {
	return &UserTokenAvailableEndpointListUnauthorized{}
}

/*
UserTokenAvailableEndpointListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserTokenAvailableEndpointListUnauthorized struct {
	Payload *UserTokenAvailableEndpointListUnauthorizedBody
}

// IsSuccess returns true when this user token available endpoint list unauthorized response has a 2xx status code
func (o *UserTokenAvailableEndpointListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user token available endpoint list unauthorized response has a 3xx status code
func (o *UserTokenAvailableEndpointListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list unauthorized response has a 4xx status code
func (o *UserTokenAvailableEndpointListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user token available endpoint list unauthorized response has a 5xx status code
func (o *UserTokenAvailableEndpointListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user token available endpoint list unauthorized response a status code equal to that given
func (o *UserTokenAvailableEndpointListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserTokenAvailableEndpointListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListUnauthorized  %+v", 401, o.Payload)
}

func (o *UserTokenAvailableEndpointListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListUnauthorized  %+v", 401, o.Payload)
}

func (o *UserTokenAvailableEndpointListUnauthorized) GetPayload() *UserTokenAvailableEndpointListUnauthorizedBody {
	return o.Payload
}

func (o *UserTokenAvailableEndpointListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserTokenAvailableEndpointListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserTokenAvailableEndpointListForbidden creates a UserTokenAvailableEndpointListForbidden with default headers values
func NewUserTokenAvailableEndpointListForbidden() *UserTokenAvailableEndpointListForbidden {
	return &UserTokenAvailableEndpointListForbidden{}
}

/*
UserTokenAvailableEndpointListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserTokenAvailableEndpointListForbidden struct {
	Payload *UserTokenAvailableEndpointListForbiddenBody
}

// IsSuccess returns true when this user token available endpoint list forbidden response has a 2xx status code
func (o *UserTokenAvailableEndpointListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user token available endpoint list forbidden response has a 3xx status code
func (o *UserTokenAvailableEndpointListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list forbidden response has a 4xx status code
func (o *UserTokenAvailableEndpointListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user token available endpoint list forbidden response has a 5xx status code
func (o *UserTokenAvailableEndpointListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user token available endpoint list forbidden response a status code equal to that given
func (o *UserTokenAvailableEndpointListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserTokenAvailableEndpointListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListForbidden  %+v", 403, o.Payload)
}

func (o *UserTokenAvailableEndpointListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListForbidden  %+v", 403, o.Payload)
}

func (o *UserTokenAvailableEndpointListForbidden) GetPayload() *UserTokenAvailableEndpointListForbiddenBody {
	return o.Payload
}

func (o *UserTokenAvailableEndpointListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserTokenAvailableEndpointListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserTokenAvailableEndpointListNotFound creates a UserTokenAvailableEndpointListNotFound with default headers values
func NewUserTokenAvailableEndpointListNotFound() *UserTokenAvailableEndpointListNotFound {
	return &UserTokenAvailableEndpointListNotFound{}
}

/*
UserTokenAvailableEndpointListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserTokenAvailableEndpointListNotFound struct {
	Payload *UserTokenAvailableEndpointListNotFoundBody
}

// IsSuccess returns true when this user token available endpoint list not found response has a 2xx status code
func (o *UserTokenAvailableEndpointListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user token available endpoint list not found response has a 3xx status code
func (o *UserTokenAvailableEndpointListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list not found response has a 4xx status code
func (o *UserTokenAvailableEndpointListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user token available endpoint list not found response has a 5xx status code
func (o *UserTokenAvailableEndpointListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user token available endpoint list not found response a status code equal to that given
func (o *UserTokenAvailableEndpointListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserTokenAvailableEndpointListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListNotFound  %+v", 404, o.Payload)
}

func (o *UserTokenAvailableEndpointListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListNotFound  %+v", 404, o.Payload)
}

func (o *UserTokenAvailableEndpointListNotFound) GetPayload() *UserTokenAvailableEndpointListNotFoundBody {
	return o.Payload
}

func (o *UserTokenAvailableEndpointListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserTokenAvailableEndpointListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserTokenAvailableEndpointListInternalServerError creates a UserTokenAvailableEndpointListInternalServerError with default headers values
func NewUserTokenAvailableEndpointListInternalServerError() *UserTokenAvailableEndpointListInternalServerError {
	return &UserTokenAvailableEndpointListInternalServerError{}
}

/*
UserTokenAvailableEndpointListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserTokenAvailableEndpointListInternalServerError struct {
}

// IsSuccess returns true when this user token available endpoint list internal server error response has a 2xx status code
func (o *UserTokenAvailableEndpointListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user token available endpoint list internal server error response has a 3xx status code
func (o *UserTokenAvailableEndpointListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user token available endpoint list internal server error response has a 4xx status code
func (o *UserTokenAvailableEndpointListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user token available endpoint list internal server error response has a 5xx status code
func (o *UserTokenAvailableEndpointListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user token available endpoint list internal server error response a status code equal to that given
func (o *UserTokenAvailableEndpointListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserTokenAvailableEndpointListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListInternalServerError ", 500)
}

func (o *UserTokenAvailableEndpointListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserToken/available-endpoints][%d] userTokenAvailableEndpointListInternalServerError ", 500)
}

func (o *UserTokenAvailableEndpointListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserTokenAvailableEndpointListBadRequestBodyItems0 user token available endpoint list bad request body items0
swagger:model UserTokenAvailableEndpointListBadRequestBodyItems0
*/
type UserTokenAvailableEndpointListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user token available endpoint list bad request body items0
func (o *UserTokenAvailableEndpointListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user token available endpoint list bad request body items0 based on context it is used
func (o *UserTokenAvailableEndpointListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserTokenAvailableEndpointListForbiddenBody user token available endpoint list forbidden body
swagger:model UserTokenAvailableEndpointListForbiddenBody
*/
type UserTokenAvailableEndpointListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user token available endpoint list forbidden body
func (o *UserTokenAvailableEndpointListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user token available endpoint list forbidden body based on context it is used
func (o *UserTokenAvailableEndpointListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserTokenAvailableEndpointListNotFoundBody user token available endpoint list not found body
swagger:model UserTokenAvailableEndpointListNotFoundBody
*/
type UserTokenAvailableEndpointListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user token available endpoint list not found body
func (o *UserTokenAvailableEndpointListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user token available endpoint list not found body based on context it is used
func (o *UserTokenAvailableEndpointListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserTokenAvailableEndpointListOKBody user token available endpoint list o k body
swagger:model UserTokenAvailableEndpointListOKBody
*/
type UserTokenAvailableEndpointListOKBody struct {

	// data
	Data []*UserTokenAvailableEndpointListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this user token available endpoint list o k body
func (o *UserTokenAvailableEndpointListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserTokenAvailableEndpointListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userTokenAvailableEndpointListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userTokenAvailableEndpointListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user token available endpoint list o k body based on the context it is used
func (o *UserTokenAvailableEndpointListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserTokenAvailableEndpointListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userTokenAvailableEndpointListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userTokenAvailableEndpointListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListOKBody) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserTokenAvailableEndpointListOKBodyDataItems0 user token available endpoint list o k body data items0
swagger:model UserTokenAvailableEndpointListOKBodyDataItems0
*/
type UserTokenAvailableEndpointListOKBodyDataItems0 struct {

	// controller
	Controller string `json:"controller,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// method
	Method string `json:"method,omitempty"`

	// path
	Path string `json:"path,omitempty"`
}

// Validate validates this user token available endpoint list o k body data items0
func (o *UserTokenAvailableEndpointListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user token available endpoint list o k body data items0 based on context it is used
func (o *UserTokenAvailableEndpointListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserTokenAvailableEndpointListUnauthorizedBody user token available endpoint list unauthorized body
swagger:model UserTokenAvailableEndpointListUnauthorizedBody
*/
type UserTokenAvailableEndpointListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user token available endpoint list unauthorized body
func (o *UserTokenAvailableEndpointListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user token available endpoint list unauthorized body based on context it is used
func (o *UserTokenAvailableEndpointListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserTokenAvailableEndpointListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserTokenAvailableEndpointListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
