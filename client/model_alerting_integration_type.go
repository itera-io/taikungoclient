/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// AlertingIntegrationType the model 'AlertingIntegrationType'
type AlertingIntegrationType string

// List of AlertingIntegrationType
const (
	ALERTINGINTEGRATIONTYPE_OPSGENIE        AlertingIntegrationType = "Opsgenie"
	ALERTINGINTEGRATIONTYPE_PAGERDUTY       AlertingIntegrationType = "Pagerduty"
	ALERTINGINTEGRATIONTYPE_SPLUNK          AlertingIntegrationType = "Splunk"
	ALERTINGINTEGRATIONTYPE_MICROSOFT_TEAMS AlertingIntegrationType = "MicrosoftTeams"
)

// All allowed values of AlertingIntegrationType enum
var AllowedAlertingIntegrationTypeEnumValues = []AlertingIntegrationType{
	"Opsgenie",
	"Pagerduty",
	"Splunk",
	"MicrosoftTeams",
}

func (v *AlertingIntegrationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertingIntegrationType(value)
	for _, existing := range AllowedAlertingIntegrationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertingIntegrationType", value)
}

// NewAlertingIntegrationTypeFromValue returns a pointer to a valid AlertingIntegrationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertingIntegrationTypeFromValue(v string) (*AlertingIntegrationType, error) {
	ev := AlertingIntegrationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertingIntegrationType: valid values are %v", v, AllowedAlertingIntegrationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertingIntegrationType) IsValid() bool {
	for _, existing := range AllowedAlertingIntegrationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertingIntegrationType value
func (v AlertingIntegrationType) Ptr() *AlertingIntegrationType {
	return &v
}

type NullableAlertingIntegrationType struct {
	value *AlertingIntegrationType
	isSet bool
}

func (v NullableAlertingIntegrationType) Get() *AlertingIntegrationType {
	return v.value
}

func (v *NullableAlertingIntegrationType) Set(val *AlertingIntegrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingIntegrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingIntegrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingIntegrationType(val *AlertingIntegrationType) *NullableAlertingIntegrationType {
	return &NullableAlertingIntegrationType{value: val, isSet: true}
}

func (v NullableAlertingIntegrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingIntegrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
