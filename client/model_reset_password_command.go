/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ResetPasswordCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResetPasswordCommand{}

// ResetPasswordCommand struct for ResetPasswordCommand
type ResetPasswordCommand struct {
	Token       NullableString `json:"token,omitempty"`
	Email       NullableString `json:"email,omitempty"`
	NewPassword NullableString `json:"newPassword,omitempty"`
}

// NewResetPasswordCommand instantiates a new ResetPasswordCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetPasswordCommand() *ResetPasswordCommand {
	this := ResetPasswordCommand{}
	return &this
}

// NewResetPasswordCommandWithDefaults instantiates a new ResetPasswordCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetPasswordCommandWithDefaults() *ResetPasswordCommand {
	this := ResetPasswordCommand{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetPasswordCommand) GetToken() string {
	if o == nil || IsNil(o.Token.Get()) {
		var ret string
		return ret
	}
	return *o.Token.Get()
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetPasswordCommand) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token.Get(), o.Token.IsSet()
}

// HasToken returns a boolean if a field has been set.
func (o *ResetPasswordCommand) HasToken() bool {
	if o != nil && o.Token.IsSet() {
		return true
	}

	return false
}

// SetToken gets a reference to the given NullableString and assigns it to the Token field.
func (o *ResetPasswordCommand) SetToken(v string) {
	o.Token.Set(&v)
}

// SetTokenNil sets the value for Token to be an explicit nil
func (o *ResetPasswordCommand) SetTokenNil() {
	o.Token.Set(nil)
}

// UnsetToken ensures that no value is present for Token, not even an explicit nil
func (o *ResetPasswordCommand) UnsetToken() {
	o.Token.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetPasswordCommand) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetPasswordCommand) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *ResetPasswordCommand) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *ResetPasswordCommand) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *ResetPasswordCommand) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *ResetPasswordCommand) UnsetEmail() {
	o.Email.Unset()
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetPasswordCommand) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword.Get()) {
		var ret string
		return ret
	}
	return *o.NewPassword.Get()
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetPasswordCommand) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPassword.Get(), o.NewPassword.IsSet()
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ResetPasswordCommand) HasNewPassword() bool {
	if o != nil && o.NewPassword.IsSet() {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given NullableString and assigns it to the NewPassword field.
func (o *ResetPasswordCommand) SetNewPassword(v string) {
	o.NewPassword.Set(&v)
}

// SetNewPasswordNil sets the value for NewPassword to be an explicit nil
func (o *ResetPasswordCommand) SetNewPasswordNil() {
	o.NewPassword.Set(nil)
}

// UnsetNewPassword ensures that no value is present for NewPassword, not even an explicit nil
func (o *ResetPasswordCommand) UnsetNewPassword() {
	o.NewPassword.Unset()
}

func (o ResetPasswordCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResetPasswordCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Token.IsSet() {
		toSerialize["token"] = o.Token.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.NewPassword.IsSet() {
		toSerialize["newPassword"] = o.NewPassword.Get()
	}
	return toSerialize, nil
}

type NullableResetPasswordCommand struct {
	value *ResetPasswordCommand
	isSet bool
}

func (v NullableResetPasswordCommand) Get() *ResetPasswordCommand {
	return v.value
}

func (v *NullableResetPasswordCommand) Set(val *ResetPasswordCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableResetPasswordCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableResetPasswordCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetPasswordCommand(val *ResetPasswordCommand) *NullableResetPasswordCommand {
	return &NullableResetPasswordCommand{value: val, isSet: true}
}

func (v NullableResetPasswordCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetPasswordCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
