// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SearchServersListReader is a Reader for the SearchServersList structure.
type SearchServersListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchServersListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchServersListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchServersListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchServersListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchServersListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchServersListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchServersListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchServersListOK creates a SearchServersListOK with default headers values
func NewSearchServersListOK() *SearchServersListOK {
	return &SearchServersListOK{}
}

/*
SearchServersListOK describes a response with status code 200, with default header values.

Success
*/
type SearchServersListOK struct {
	Payload *models.ServersSearchList
}

// IsSuccess returns true when this search servers list o k response has a 2xx status code
func (o *SearchServersListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search servers list o k response has a 3xx status code
func (o *SearchServersListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list o k response has a 4xx status code
func (o *SearchServersListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search servers list o k response has a 5xx status code
func (o *SearchServersListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list o k response a status code equal to that given
func (o *SearchServersListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search servers list o k response
func (o *SearchServersListOK) Code() int {
	return 200
}

func (o *SearchServersListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListOK  %+v", 200, o.Payload)
}

func (o *SearchServersListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListOK  %+v", 200, o.Payload)
}

func (o *SearchServersListOK) GetPayload() *models.ServersSearchList {
	return o.Payload
}

func (o *SearchServersListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServersSearchList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListBadRequest creates a SearchServersListBadRequest with default headers values
func NewSearchServersListBadRequest() *SearchServersListBadRequest {
	return &SearchServersListBadRequest{}
}

/*
SearchServersListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchServersListBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this search servers list bad request response has a 2xx status code
func (o *SearchServersListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list bad request response has a 3xx status code
func (o *SearchServersListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list bad request response has a 4xx status code
func (o *SearchServersListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list bad request response has a 5xx status code
func (o *SearchServersListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list bad request response a status code equal to that given
func (o *SearchServersListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search servers list bad request response
func (o *SearchServersListBadRequest) Code() int {
	return 400
}

func (o *SearchServersListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServersListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServersListBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *SearchServersListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListUnauthorized creates a SearchServersListUnauthorized with default headers values
func NewSearchServersListUnauthorized() *SearchServersListUnauthorized {
	return &SearchServersListUnauthorized{}
}

/*
SearchServersListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchServersListUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this search servers list unauthorized response has a 2xx status code
func (o *SearchServersListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list unauthorized response has a 3xx status code
func (o *SearchServersListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list unauthorized response has a 4xx status code
func (o *SearchServersListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list unauthorized response has a 5xx status code
func (o *SearchServersListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list unauthorized response a status code equal to that given
func (o *SearchServersListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the search servers list unauthorized response
func (o *SearchServersListUnauthorized) Code() int {
	return 401
}

func (o *SearchServersListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServersListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServersListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SearchServersListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListForbidden creates a SearchServersListForbidden with default headers values
func NewSearchServersListForbidden() *SearchServersListForbidden {
	return &SearchServersListForbidden{}
}

/*
SearchServersListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchServersListForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this search servers list forbidden response has a 2xx status code
func (o *SearchServersListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list forbidden response has a 3xx status code
func (o *SearchServersListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list forbidden response has a 4xx status code
func (o *SearchServersListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list forbidden response has a 5xx status code
func (o *SearchServersListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list forbidden response a status code equal to that given
func (o *SearchServersListForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search servers list forbidden response
func (o *SearchServersListForbidden) Code() int {
	return 403
}

func (o *SearchServersListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServersListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServersListForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SearchServersListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListNotFound creates a SearchServersListNotFound with default headers values
func NewSearchServersListNotFound() *SearchServersListNotFound {
	return &SearchServersListNotFound{}
}

/*
SearchServersListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchServersListNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this search servers list not found response has a 2xx status code
func (o *SearchServersListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list not found response has a 3xx status code
func (o *SearchServersListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list not found response has a 4xx status code
func (o *SearchServersListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list not found response has a 5xx status code
func (o *SearchServersListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list not found response a status code equal to that given
func (o *SearchServersListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search servers list not found response
func (o *SearchServersListNotFound) Code() int {
	return 404
}

func (o *SearchServersListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServersListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServersListNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *SearchServersListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListInternalServerError creates a SearchServersListInternalServerError with default headers values
func NewSearchServersListInternalServerError() *SearchServersListInternalServerError {
	return &SearchServersListInternalServerError{}
}

/*
SearchServersListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchServersListInternalServerError struct {
}

// IsSuccess returns true when this search servers list internal server error response has a 2xx status code
func (o *SearchServersListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list internal server error response has a 3xx status code
func (o *SearchServersListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list internal server error response has a 4xx status code
func (o *SearchServersListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search servers list internal server error response has a 5xx status code
func (o *SearchServersListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search servers list internal server error response a status code equal to that given
func (o *SearchServersListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search servers list internal server error response
func (o *SearchServersListInternalServerError) Code() int {
	return 500
}

func (o *SearchServersListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListInternalServerError ", 500)
}

func (o *SearchServersListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListInternalServerError ", 500)
}

func (o *SearchServersListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
