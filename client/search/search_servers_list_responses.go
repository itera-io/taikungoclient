// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchServersListReader is a Reader for the SearchServersList structure.
type SearchServersListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchServersListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchServersListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchServersListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchServersListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchServersListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchServersListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchServersListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchServersListOK creates a SearchServersListOK with default headers values
func NewSearchServersListOK() *SearchServersListOK {
	return &SearchServersListOK{}
}

/*
SearchServersListOK describes a response with status code 200, with default header values.

Success
*/
type SearchServersListOK struct {
	Payload *SearchServersListOKBody
}

// IsSuccess returns true when this search servers list o k response has a 2xx status code
func (o *SearchServersListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search servers list o k response has a 3xx status code
func (o *SearchServersListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list o k response has a 4xx status code
func (o *SearchServersListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search servers list o k response has a 5xx status code
func (o *SearchServersListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list o k response a status code equal to that given
func (o *SearchServersListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchServersListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListOK  %+v", 200, o.Payload)
}

func (o *SearchServersListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListOK  %+v", 200, o.Payload)
}

func (o *SearchServersListOK) GetPayload() *SearchServersListOKBody {
	return o.Payload
}

func (o *SearchServersListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServersListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListBadRequest creates a SearchServersListBadRequest with default headers values
func NewSearchServersListBadRequest() *SearchServersListBadRequest {
	return &SearchServersListBadRequest{}
}

/*
SearchServersListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchServersListBadRequest struct {
	Payload []*SearchServersListBadRequestBodyItems0
}

// IsSuccess returns true when this search servers list bad request response has a 2xx status code
func (o *SearchServersListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list bad request response has a 3xx status code
func (o *SearchServersListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list bad request response has a 4xx status code
func (o *SearchServersListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list bad request response has a 5xx status code
func (o *SearchServersListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list bad request response a status code equal to that given
func (o *SearchServersListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchServersListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServersListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServersListBadRequest) GetPayload() []*SearchServersListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SearchServersListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListUnauthorized creates a SearchServersListUnauthorized with default headers values
func NewSearchServersListUnauthorized() *SearchServersListUnauthorized {
	return &SearchServersListUnauthorized{}
}

/*
SearchServersListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchServersListUnauthorized struct {
	Payload *SearchServersListUnauthorizedBody
}

// IsSuccess returns true when this search servers list unauthorized response has a 2xx status code
func (o *SearchServersListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list unauthorized response has a 3xx status code
func (o *SearchServersListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list unauthorized response has a 4xx status code
func (o *SearchServersListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list unauthorized response has a 5xx status code
func (o *SearchServersListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list unauthorized response a status code equal to that given
func (o *SearchServersListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchServersListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServersListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServersListUnauthorized) GetPayload() *SearchServersListUnauthorizedBody {
	return o.Payload
}

func (o *SearchServersListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServersListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListForbidden creates a SearchServersListForbidden with default headers values
func NewSearchServersListForbidden() *SearchServersListForbidden {
	return &SearchServersListForbidden{}
}

/*
SearchServersListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchServersListForbidden struct {
	Payload *SearchServersListForbiddenBody
}

// IsSuccess returns true when this search servers list forbidden response has a 2xx status code
func (o *SearchServersListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list forbidden response has a 3xx status code
func (o *SearchServersListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list forbidden response has a 4xx status code
func (o *SearchServersListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list forbidden response has a 5xx status code
func (o *SearchServersListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list forbidden response a status code equal to that given
func (o *SearchServersListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchServersListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServersListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServersListForbidden) GetPayload() *SearchServersListForbiddenBody {
	return o.Payload
}

func (o *SearchServersListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServersListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListNotFound creates a SearchServersListNotFound with default headers values
func NewSearchServersListNotFound() *SearchServersListNotFound {
	return &SearchServersListNotFound{}
}

/*
SearchServersListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchServersListNotFound struct {
	Payload *SearchServersListNotFoundBody
}

// IsSuccess returns true when this search servers list not found response has a 2xx status code
func (o *SearchServersListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list not found response has a 3xx status code
func (o *SearchServersListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list not found response has a 4xx status code
func (o *SearchServersListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search servers list not found response has a 5xx status code
func (o *SearchServersListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search servers list not found response a status code equal to that given
func (o *SearchServersListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchServersListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServersListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServersListNotFound) GetPayload() *SearchServersListNotFoundBody {
	return o.Payload
}

func (o *SearchServersListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServersListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServersListInternalServerError creates a SearchServersListInternalServerError with default headers values
func NewSearchServersListInternalServerError() *SearchServersListInternalServerError {
	return &SearchServersListInternalServerError{}
}

/*
SearchServersListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchServersListInternalServerError struct {
}

// IsSuccess returns true when this search servers list internal server error response has a 2xx status code
func (o *SearchServersListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search servers list internal server error response has a 3xx status code
func (o *SearchServersListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search servers list internal server error response has a 4xx status code
func (o *SearchServersListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search servers list internal server error response has a 5xx status code
func (o *SearchServersListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search servers list internal server error response a status code equal to that given
func (o *SearchServersListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchServersListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListInternalServerError ", 500)
}

func (o *SearchServersListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/servers][%d] searchServersListInternalServerError ", 500)
}

func (o *SearchServersListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchServersListBadRequestBodyItems0 search servers list bad request body items0
swagger:model SearchServersListBadRequestBodyItems0
*/
type SearchServersListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this search servers list bad request body items0
func (o *SearchServersListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list bad request body items0 based on context it is used
func (o *SearchServersListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SearchServersListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListBody search servers list body
swagger:model SearchServersListBody
*/
type SearchServersListBody struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// search term
	SearchTerm string `json:"searchTerm,omitempty"`
}

// Validate validates this search servers list body
func (o *SearchServersListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list body based on context it is used
func (o *SearchServersListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListBody) UnmarshalBinary(b []byte) error {
	var res SearchServersListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListForbiddenBody search servers list forbidden body
swagger:model SearchServersListForbiddenBody
*/
type SearchServersListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search servers list forbidden body
func (o *SearchServersListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list forbidden body based on context it is used
func (o *SearchServersListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SearchServersListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListNotFoundBody search servers list not found body
swagger:model SearchServersListNotFoundBody
*/
type SearchServersListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search servers list not found body
func (o *SearchServersListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list not found body based on context it is used
func (o *SearchServersListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchServersListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListOKBody search servers list o k body
swagger:model SearchServersListOKBody
*/
type SearchServersListOKBody struct {

	// data
	Data []*SearchServersListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this search servers list o k body
func (o *SearchServersListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchServersListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchServersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchServersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search servers list o k body based on the context it is used
func (o *SearchServersListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchServersListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchServersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchServersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListOKBody) UnmarshalBinary(b []byte) error {
	var res SearchServersListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListOKBodyDataItems0 search servers list o k body data items0
swagger:model SearchServersListOKBodyDataItems0
*/
type SearchServersListOKBodyDataItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this search servers list o k body data items0
func (o *SearchServersListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list o k body data items0 based on context it is used
func (o *SearchServersListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SearchServersListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServersListUnauthorizedBody search servers list unauthorized body
swagger:model SearchServersListUnauthorizedBody
*/
type SearchServersListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search servers list unauthorized body
func (o *SearchServersListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search servers list unauthorized body based on context it is used
func (o *SearchServersListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServersListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServersListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchServersListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
