// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchStsListReader is a Reader for the SearchStsList structure.
type SearchStsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchStsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchStsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchStsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchStsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchStsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchStsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchStsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchStsListOK creates a SearchStsListOK with default headers values
func NewSearchStsListOK() *SearchStsListOK {
	return &SearchStsListOK{}
}

/*
SearchStsListOK describes a response with status code 200, with default header values.

Success
*/
type SearchStsListOK struct {
	Payload *SearchStsListOKBody
}

// IsSuccess returns true when this search sts list o k response has a 2xx status code
func (o *SearchStsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search sts list o k response has a 3xx status code
func (o *SearchStsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list o k response has a 4xx status code
func (o *SearchStsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search sts list o k response has a 5xx status code
func (o *SearchStsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search sts list o k response a status code equal to that given
func (o *SearchStsListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchStsListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListOK  %+v", 200, o.Payload)
}

func (o *SearchStsListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListOK  %+v", 200, o.Payload)
}

func (o *SearchStsListOK) GetPayload() *SearchStsListOKBody {
	return o.Payload
}

func (o *SearchStsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchStsListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchStsListBadRequest creates a SearchStsListBadRequest with default headers values
func NewSearchStsListBadRequest() *SearchStsListBadRequest {
	return &SearchStsListBadRequest{}
}

/*
SearchStsListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchStsListBadRequest struct {
	Payload []*SearchStsListBadRequestBodyItems0
}

// IsSuccess returns true when this search sts list bad request response has a 2xx status code
func (o *SearchStsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search sts list bad request response has a 3xx status code
func (o *SearchStsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list bad request response has a 4xx status code
func (o *SearchStsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search sts list bad request response has a 5xx status code
func (o *SearchStsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search sts list bad request response a status code equal to that given
func (o *SearchStsListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchStsListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchStsListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchStsListBadRequest) GetPayload() []*SearchStsListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SearchStsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchStsListUnauthorized creates a SearchStsListUnauthorized with default headers values
func NewSearchStsListUnauthorized() *SearchStsListUnauthorized {
	return &SearchStsListUnauthorized{}
}

/*
SearchStsListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchStsListUnauthorized struct {
	Payload *SearchStsListUnauthorizedBody
}

// IsSuccess returns true when this search sts list unauthorized response has a 2xx status code
func (o *SearchStsListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search sts list unauthorized response has a 3xx status code
func (o *SearchStsListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list unauthorized response has a 4xx status code
func (o *SearchStsListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search sts list unauthorized response has a 5xx status code
func (o *SearchStsListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search sts list unauthorized response a status code equal to that given
func (o *SearchStsListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchStsListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchStsListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchStsListUnauthorized) GetPayload() *SearchStsListUnauthorizedBody {
	return o.Payload
}

func (o *SearchStsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchStsListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchStsListForbidden creates a SearchStsListForbidden with default headers values
func NewSearchStsListForbidden() *SearchStsListForbidden {
	return &SearchStsListForbidden{}
}

/*
SearchStsListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchStsListForbidden struct {
	Payload *SearchStsListForbiddenBody
}

// IsSuccess returns true when this search sts list forbidden response has a 2xx status code
func (o *SearchStsListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search sts list forbidden response has a 3xx status code
func (o *SearchStsListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list forbidden response has a 4xx status code
func (o *SearchStsListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search sts list forbidden response has a 5xx status code
func (o *SearchStsListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search sts list forbidden response a status code equal to that given
func (o *SearchStsListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchStsListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListForbidden  %+v", 403, o.Payload)
}

func (o *SearchStsListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListForbidden  %+v", 403, o.Payload)
}

func (o *SearchStsListForbidden) GetPayload() *SearchStsListForbiddenBody {
	return o.Payload
}

func (o *SearchStsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchStsListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchStsListNotFound creates a SearchStsListNotFound with default headers values
func NewSearchStsListNotFound() *SearchStsListNotFound {
	return &SearchStsListNotFound{}
}

/*
SearchStsListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchStsListNotFound struct {
	Payload *SearchStsListNotFoundBody
}

// IsSuccess returns true when this search sts list not found response has a 2xx status code
func (o *SearchStsListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search sts list not found response has a 3xx status code
func (o *SearchStsListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list not found response has a 4xx status code
func (o *SearchStsListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search sts list not found response has a 5xx status code
func (o *SearchStsListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search sts list not found response a status code equal to that given
func (o *SearchStsListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchStsListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListNotFound  %+v", 404, o.Payload)
}

func (o *SearchStsListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListNotFound  %+v", 404, o.Payload)
}

func (o *SearchStsListNotFound) GetPayload() *SearchStsListNotFoundBody {
	return o.Payload
}

func (o *SearchStsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchStsListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchStsListInternalServerError creates a SearchStsListInternalServerError with default headers values
func NewSearchStsListInternalServerError() *SearchStsListInternalServerError {
	return &SearchStsListInternalServerError{}
}

/*
SearchStsListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchStsListInternalServerError struct {
}

// IsSuccess returns true when this search sts list internal server error response has a 2xx status code
func (o *SearchStsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search sts list internal server error response has a 3xx status code
func (o *SearchStsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search sts list internal server error response has a 4xx status code
func (o *SearchStsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search sts list internal server error response has a 5xx status code
func (o *SearchStsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search sts list internal server error response a status code equal to that given
func (o *SearchStsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchStsListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListInternalServerError ", 500)
}

func (o *SearchStsListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/sts][%d] searchStsListInternalServerError ", 500)
}

func (o *SearchStsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchStsListBadRequestBodyItems0 search sts list bad request body items0
swagger:model SearchStsListBadRequestBodyItems0
*/
type SearchStsListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this search sts list bad request body items0
func (o *SearchStsListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list bad request body items0 based on context it is used
func (o *SearchStsListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SearchStsListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListBody search sts list body
swagger:model SearchStsListBody
*/
type SearchStsListBody struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// search term
	SearchTerm string `json:"searchTerm,omitempty"`
}

// Validate validates this search sts list body
func (o *SearchStsListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list body based on context it is used
func (o *SearchStsListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListBody) UnmarshalBinary(b []byte) error {
	var res SearchStsListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListForbiddenBody search sts list forbidden body
swagger:model SearchStsListForbiddenBody
*/
type SearchStsListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search sts list forbidden body
func (o *SearchStsListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list forbidden body based on context it is used
func (o *SearchStsListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SearchStsListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListNotFoundBody search sts list not found body
swagger:model SearchStsListNotFoundBody
*/
type SearchStsListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search sts list not found body
func (o *SearchStsListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list not found body based on context it is used
func (o *SearchStsListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchStsListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListOKBody search sts list o k body
swagger:model SearchStsListOKBody
*/
type SearchStsListOKBody struct {

	// data
	Data []*SearchStsListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this search sts list o k body
func (o *SearchStsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchStsListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchStsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchStsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search sts list o k body based on the context it is used
func (o *SearchStsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchStsListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchStsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchStsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListOKBody) UnmarshalBinary(b []byte) error {
	var res SearchStsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListOKBodyDataItems0 search sts list o k body data items0
swagger:model SearchStsListOKBodyDataItems0
*/
type SearchStsListOKBodyDataItems0 struct {

	// metadata name
	MetadataName string `json:"metadataName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this search sts list o k body data items0
func (o *SearchStsListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list o k body data items0 based on context it is used
func (o *SearchStsListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SearchStsListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchStsListUnauthorizedBody search sts list unauthorized body
swagger:model SearchStsListUnauthorizedBody
*/
type SearchStsListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search sts list unauthorized body
func (o *SearchStsListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search sts list unauthorized body based on context it is used
func (o *SearchStsListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchStsListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchStsListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchStsListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
