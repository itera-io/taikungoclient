// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SearchAccessProfilesList(params *SearchAccessProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccessProfilesListOK, error)

	SearchBackupCredentialsList(params *SearchBackupCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBackupCredentialsListOK, error)

	SearchBillingCredentialsList(params *SearchBillingCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBillingCredentialsListOK, error)

	SearchCloudCredentialsList(params *SearchCloudCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudCredentialsListOK, error)

	SearchConfigMapList(params *SearchConfigMapListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchConfigMapListOK, error)

	SearchDaemonSetList(params *SearchDaemonSetListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDaemonSetListOK, error)

	SearchDeploymentList(params *SearchDeploymentListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentListOK, error)

	SearchIngressList(params *SearchIngressListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngressListOK, error)

	SearchKubernetesProfilesList(params *SearchKubernetesProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchKubernetesProfilesListOK, error)

	SearchNodesList(params *SearchNodesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNodesListOK, error)

	SearchOrganizationsList(params *SearchOrganizationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOrganizationsListOK, error)

	SearchPartnersList(params *SearchPartnersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPartnersListOK, error)

	SearchPersistenceVolumeClaimList(params *SearchPersistenceVolumeClaimListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPersistenceVolumeClaimListOK, error)

	SearchPodsList(params *SearchPodsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPodsListOK, error)

	SearchProjectsList(params *SearchProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProjectsListOK, error)

	SearchPrometheusRulesList(params *SearchPrometheusRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrometheusRulesListOK, error)

	SearchSecretList(params *SearchSecretListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSecretListOK, error)

	SearchServersList(params *SearchServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServersListOK, error)

	SearchServiceList(params *SearchServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceListOK, error)

	SearchStandAloneProfilesList(params *SearchStandAloneProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStandAloneProfilesListOK, error)

	SearchStsList(params *SearchStsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStsListOK, error)

	SearchUsersList(params *SearchUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUsersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SearchAccessProfilesList globals search for access profiles
*/
func (a *Client) SearchAccessProfilesList(params *SearchAccessProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccessProfilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAccessProfilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_AccessProfilesList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/access-profiles",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAccessProfilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAccessProfilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_AccessProfilesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchBackupCredentialsList globals search for backup credentials
*/
func (a *Client) SearchBackupCredentialsList(params *SearchBackupCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBackupCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchBackupCredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_BackupCredentialsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/backup-credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchBackupCredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchBackupCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_BackupCredentialsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchBillingCredentialsList globals search for billing credentials
*/
func (a *Client) SearchBillingCredentialsList(params *SearchBillingCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBillingCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchBillingCredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_BillingCredentialsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/billing-credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchBillingCredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchBillingCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_BillingCredentialsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudCredentialsList globals search for cloud credentials
*/
func (a *Client) SearchCloudCredentialsList(params *SearchCloudCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudCredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_CloudCredentialsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/cloud-credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudCredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_CloudCredentialsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchConfigMapList globals search for kubernetes config maps
*/
func (a *Client) SearchConfigMapList(params *SearchConfigMapListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchConfigMapListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchConfigMapListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_ConfigMapList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/config-maps",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchConfigMapListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchConfigMapListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_ConfigMapList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDaemonSetList globals search for kubernetes daemon sets
*/
func (a *Client) SearchDaemonSetList(params *SearchDaemonSetListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDaemonSetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDaemonSetListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_DaemonSetList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/daemon-sets",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDaemonSetListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDaemonSetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_DaemonSetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDeploymentList globals search for kubernetes deployments
*/
func (a *Client) SearchDeploymentList(params *SearchDeploymentListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDeploymentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDeploymentListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_DeploymentList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/deployments",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDeploymentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDeploymentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_DeploymentList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIngressList globals search for kubernetes ingress
*/
func (a *Client) SearchIngressList(params *SearchIngressListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngressListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngressListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_IngressList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/ingress",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchIngressListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIngressListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_IngressList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchKubernetesProfilesList globals search for kubernetes profiles
*/
func (a *Client) SearchKubernetesProfilesList(params *SearchKubernetesProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchKubernetesProfilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchKubernetesProfilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_KubernetesProfilesList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/kubernetes-profiles",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchKubernetesProfilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchKubernetesProfilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_KubernetesProfilesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchNodesList globals search for kubernetes nodes
*/
func (a *Client) SearchNodesList(params *SearchNodesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNodesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNodesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_NodesList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/nodes",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchNodesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchNodesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_NodesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchOrganizationsList globals search for organizations
*/
func (a *Client) SearchOrganizationsList(params *SearchOrganizationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOrganizationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchOrganizationsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_OrganizationsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/organizations",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchOrganizationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOrganizationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_OrganizationsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPartnersList globals search for partners
*/
func (a *Client) SearchPartnersList(params *SearchPartnersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPartnersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPartnersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_PartnersList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/partners",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPartnersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPartnersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_PartnersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPersistenceVolumeClaimList globals search for kubernetes persistent volume claims
*/
func (a *Client) SearchPersistenceVolumeClaimList(params *SearchPersistenceVolumeClaimListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPersistenceVolumeClaimListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPersistenceVolumeClaimListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_PersistenceVolumeClaimList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/pvcs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPersistenceVolumeClaimListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPersistenceVolumeClaimListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_PersistenceVolumeClaimList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPodsList globals search for kubernetes pods
*/
func (a *Client) SearchPodsList(params *SearchPodsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPodsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPodsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_PodsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/pods",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPodsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPodsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_PodsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProjectsList globals search for projects
*/
func (a *Client) SearchProjectsList(params *SearchProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProjectsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_ProjectsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/projects",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProjectsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_ProjectsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPrometheusRulesList globals search for prometheus rules
*/
func (a *Client) SearchPrometheusRulesList(params *SearchPrometheusRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPrometheusRulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPrometheusRulesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_PrometheusRulesList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/prometheus-rules",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPrometheusRulesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPrometheusRulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_PrometheusRulesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSecretList globals search for kubernetes secrets
*/
func (a *Client) SearchSecretList(params *SearchSecretListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSecretListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSecretListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_SecretList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/secrets",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSecretListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSecretListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_SecretList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchServersList globals search for servers
*/
func (a *Client) SearchServersList(params *SearchServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchServersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_ServersList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/servers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchServersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchServersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_ServersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchServiceList globals search for kubernetes services
*/
func (a *Client) SearchServiceList(params *SearchServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_ServiceList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/services",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_ServiceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchStandAloneProfilesList globals search for stand alone profiles
*/
func (a *Client) SearchStandAloneProfilesList(params *SearchStandAloneProfilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStandAloneProfilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchStandAloneProfilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_StandAloneProfilesList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/stand-alone-profiles",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchStandAloneProfilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchStandAloneProfilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_StandAloneProfilesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchStsList globals search for kubernetes stateful sets
*/
func (a *Client) SearchStsList(params *SearchStsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchStsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchStsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_StsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/sts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchStsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchStsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_StsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUsersList globals search for users
*/
func (a *Client) SearchUsersList(params *SearchUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Search_UsersList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Search/users",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_UsersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
