// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchPartnersListReader is a Reader for the SearchPartnersList structure.
type SearchPartnersListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchPartnersListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchPartnersListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchPartnersListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchPartnersListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchPartnersListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchPartnersListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchPartnersListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchPartnersListOK creates a SearchPartnersListOK with default headers values
func NewSearchPartnersListOK() *SearchPartnersListOK {
	return &SearchPartnersListOK{}
}

/*
SearchPartnersListOK describes a response with status code 200, with default header values.

Success
*/
type SearchPartnersListOK struct {
	Payload *SearchPartnersListOKBody
}

// IsSuccess returns true when this search partners list o k response has a 2xx status code
func (o *SearchPartnersListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search partners list o k response has a 3xx status code
func (o *SearchPartnersListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list o k response has a 4xx status code
func (o *SearchPartnersListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search partners list o k response has a 5xx status code
func (o *SearchPartnersListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search partners list o k response a status code equal to that given
func (o *SearchPartnersListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchPartnersListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListOK  %+v", 200, o.Payload)
}

func (o *SearchPartnersListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListOK  %+v", 200, o.Payload)
}

func (o *SearchPartnersListOK) GetPayload() *SearchPartnersListOKBody {
	return o.Payload
}

func (o *SearchPartnersListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchPartnersListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPartnersListBadRequest creates a SearchPartnersListBadRequest with default headers values
func NewSearchPartnersListBadRequest() *SearchPartnersListBadRequest {
	return &SearchPartnersListBadRequest{}
}

/*
SearchPartnersListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchPartnersListBadRequest struct {
	Payload []*SearchPartnersListBadRequestBodyItems0
}

// IsSuccess returns true when this search partners list bad request response has a 2xx status code
func (o *SearchPartnersListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search partners list bad request response has a 3xx status code
func (o *SearchPartnersListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list bad request response has a 4xx status code
func (o *SearchPartnersListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search partners list bad request response has a 5xx status code
func (o *SearchPartnersListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search partners list bad request response a status code equal to that given
func (o *SearchPartnersListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchPartnersListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchPartnersListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchPartnersListBadRequest) GetPayload() []*SearchPartnersListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SearchPartnersListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPartnersListUnauthorized creates a SearchPartnersListUnauthorized with default headers values
func NewSearchPartnersListUnauthorized() *SearchPartnersListUnauthorized {
	return &SearchPartnersListUnauthorized{}
}

/*
SearchPartnersListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchPartnersListUnauthorized struct {
	Payload *SearchPartnersListUnauthorizedBody
}

// IsSuccess returns true when this search partners list unauthorized response has a 2xx status code
func (o *SearchPartnersListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search partners list unauthorized response has a 3xx status code
func (o *SearchPartnersListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list unauthorized response has a 4xx status code
func (o *SearchPartnersListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search partners list unauthorized response has a 5xx status code
func (o *SearchPartnersListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search partners list unauthorized response a status code equal to that given
func (o *SearchPartnersListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchPartnersListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchPartnersListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchPartnersListUnauthorized) GetPayload() *SearchPartnersListUnauthorizedBody {
	return o.Payload
}

func (o *SearchPartnersListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchPartnersListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPartnersListForbidden creates a SearchPartnersListForbidden with default headers values
func NewSearchPartnersListForbidden() *SearchPartnersListForbidden {
	return &SearchPartnersListForbidden{}
}

/*
SearchPartnersListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchPartnersListForbidden struct {
	Payload *SearchPartnersListForbiddenBody
}

// IsSuccess returns true when this search partners list forbidden response has a 2xx status code
func (o *SearchPartnersListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search partners list forbidden response has a 3xx status code
func (o *SearchPartnersListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list forbidden response has a 4xx status code
func (o *SearchPartnersListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search partners list forbidden response has a 5xx status code
func (o *SearchPartnersListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search partners list forbidden response a status code equal to that given
func (o *SearchPartnersListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchPartnersListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchPartnersListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListForbidden  %+v", 403, o.Payload)
}

func (o *SearchPartnersListForbidden) GetPayload() *SearchPartnersListForbiddenBody {
	return o.Payload
}

func (o *SearchPartnersListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchPartnersListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPartnersListNotFound creates a SearchPartnersListNotFound with default headers values
func NewSearchPartnersListNotFound() *SearchPartnersListNotFound {
	return &SearchPartnersListNotFound{}
}

/*
SearchPartnersListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchPartnersListNotFound struct {
	Payload *SearchPartnersListNotFoundBody
}

// IsSuccess returns true when this search partners list not found response has a 2xx status code
func (o *SearchPartnersListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search partners list not found response has a 3xx status code
func (o *SearchPartnersListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list not found response has a 4xx status code
func (o *SearchPartnersListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search partners list not found response has a 5xx status code
func (o *SearchPartnersListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search partners list not found response a status code equal to that given
func (o *SearchPartnersListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchPartnersListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchPartnersListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListNotFound  %+v", 404, o.Payload)
}

func (o *SearchPartnersListNotFound) GetPayload() *SearchPartnersListNotFoundBody {
	return o.Payload
}

func (o *SearchPartnersListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchPartnersListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPartnersListInternalServerError creates a SearchPartnersListInternalServerError with default headers values
func NewSearchPartnersListInternalServerError() *SearchPartnersListInternalServerError {
	return &SearchPartnersListInternalServerError{}
}

/*
SearchPartnersListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchPartnersListInternalServerError struct {
}

// IsSuccess returns true when this search partners list internal server error response has a 2xx status code
func (o *SearchPartnersListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search partners list internal server error response has a 3xx status code
func (o *SearchPartnersListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search partners list internal server error response has a 4xx status code
func (o *SearchPartnersListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search partners list internal server error response has a 5xx status code
func (o *SearchPartnersListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search partners list internal server error response a status code equal to that given
func (o *SearchPartnersListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchPartnersListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListInternalServerError ", 500)
}

func (o *SearchPartnersListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/partners][%d] searchPartnersListInternalServerError ", 500)
}

func (o *SearchPartnersListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchPartnersListBadRequestBodyItems0 search partners list bad request body items0
swagger:model SearchPartnersListBadRequestBodyItems0
*/
type SearchPartnersListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this search partners list bad request body items0
func (o *SearchPartnersListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list bad request body items0 based on context it is used
func (o *SearchPartnersListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListBody search partners list body
swagger:model SearchPartnersListBody
*/
type SearchPartnersListBody struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// search term
	SearchTerm string `json:"searchTerm,omitempty"`
}

// Validate validates this search partners list body
func (o *SearchPartnersListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list body based on context it is used
func (o *SearchPartnersListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListBody) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListForbiddenBody search partners list forbidden body
swagger:model SearchPartnersListForbiddenBody
*/
type SearchPartnersListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search partners list forbidden body
func (o *SearchPartnersListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list forbidden body based on context it is used
func (o *SearchPartnersListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListNotFoundBody search partners list not found body
swagger:model SearchPartnersListNotFoundBody
*/
type SearchPartnersListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search partners list not found body
func (o *SearchPartnersListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list not found body based on context it is used
func (o *SearchPartnersListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListOKBody search partners list o k body
swagger:model SearchPartnersListOKBody
*/
type SearchPartnersListOKBody struct {

	// data
	Data []*SearchPartnersListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this search partners list o k body
func (o *SearchPartnersListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPartnersListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPartnersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPartnersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search partners list o k body based on the context it is used
func (o *SearchPartnersListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPartnersListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPartnersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPartnersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListOKBody) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListOKBodyDataItems0 search partners list o k body data items0
swagger:model SearchPartnersListOKBodyDataItems0
*/
type SearchPartnersListOKBodyDataItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this search partners list o k body data items0
func (o *SearchPartnersListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list o k body data items0 based on context it is used
func (o *SearchPartnersListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchPartnersListUnauthorizedBody search partners list unauthorized body
swagger:model SearchPartnersListUnauthorizedBody
*/
type SearchPartnersListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search partners list unauthorized body
func (o *SearchPartnersListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search partners list unauthorized body based on context it is used
func (o *SearchPartnersListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPartnersListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPartnersListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchPartnersListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
