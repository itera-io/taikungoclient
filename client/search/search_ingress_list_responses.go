// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchIngressListReader is a Reader for the SearchIngressList structure.
type SearchIngressListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchIngressListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchIngressListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchIngressListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchIngressListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchIngressListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchIngressListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchIngressListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchIngressListOK creates a SearchIngressListOK with default headers values
func NewSearchIngressListOK() *SearchIngressListOK {
	return &SearchIngressListOK{}
}

/*
SearchIngressListOK describes a response with status code 200, with default header values.

Success
*/
type SearchIngressListOK struct {
	Payload *SearchIngressListOKBody
}

// IsSuccess returns true when this search ingress list o k response has a 2xx status code
func (o *SearchIngressListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search ingress list o k response has a 3xx status code
func (o *SearchIngressListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list o k response has a 4xx status code
func (o *SearchIngressListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search ingress list o k response has a 5xx status code
func (o *SearchIngressListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search ingress list o k response a status code equal to that given
func (o *SearchIngressListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchIngressListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListOK  %+v", 200, o.Payload)
}

func (o *SearchIngressListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListOK  %+v", 200, o.Payload)
}

func (o *SearchIngressListOK) GetPayload() *SearchIngressListOKBody {
	return o.Payload
}

func (o *SearchIngressListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchIngressListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIngressListBadRequest creates a SearchIngressListBadRequest with default headers values
func NewSearchIngressListBadRequest() *SearchIngressListBadRequest {
	return &SearchIngressListBadRequest{}
}

/*
SearchIngressListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchIngressListBadRequest struct {
	Payload []*SearchIngressListBadRequestBodyItems0
}

// IsSuccess returns true when this search ingress list bad request response has a 2xx status code
func (o *SearchIngressListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search ingress list bad request response has a 3xx status code
func (o *SearchIngressListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list bad request response has a 4xx status code
func (o *SearchIngressListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search ingress list bad request response has a 5xx status code
func (o *SearchIngressListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search ingress list bad request response a status code equal to that given
func (o *SearchIngressListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchIngressListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchIngressListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchIngressListBadRequest) GetPayload() []*SearchIngressListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SearchIngressListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIngressListUnauthorized creates a SearchIngressListUnauthorized with default headers values
func NewSearchIngressListUnauthorized() *SearchIngressListUnauthorized {
	return &SearchIngressListUnauthorized{}
}

/*
SearchIngressListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchIngressListUnauthorized struct {
	Payload *SearchIngressListUnauthorizedBody
}

// IsSuccess returns true when this search ingress list unauthorized response has a 2xx status code
func (o *SearchIngressListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search ingress list unauthorized response has a 3xx status code
func (o *SearchIngressListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list unauthorized response has a 4xx status code
func (o *SearchIngressListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search ingress list unauthorized response has a 5xx status code
func (o *SearchIngressListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search ingress list unauthorized response a status code equal to that given
func (o *SearchIngressListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchIngressListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchIngressListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchIngressListUnauthorized) GetPayload() *SearchIngressListUnauthorizedBody {
	return o.Payload
}

func (o *SearchIngressListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchIngressListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIngressListForbidden creates a SearchIngressListForbidden with default headers values
func NewSearchIngressListForbidden() *SearchIngressListForbidden {
	return &SearchIngressListForbidden{}
}

/*
SearchIngressListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchIngressListForbidden struct {
	Payload *SearchIngressListForbiddenBody
}

// IsSuccess returns true when this search ingress list forbidden response has a 2xx status code
func (o *SearchIngressListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search ingress list forbidden response has a 3xx status code
func (o *SearchIngressListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list forbidden response has a 4xx status code
func (o *SearchIngressListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search ingress list forbidden response has a 5xx status code
func (o *SearchIngressListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search ingress list forbidden response a status code equal to that given
func (o *SearchIngressListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchIngressListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListForbidden  %+v", 403, o.Payload)
}

func (o *SearchIngressListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListForbidden  %+v", 403, o.Payload)
}

func (o *SearchIngressListForbidden) GetPayload() *SearchIngressListForbiddenBody {
	return o.Payload
}

func (o *SearchIngressListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchIngressListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIngressListNotFound creates a SearchIngressListNotFound with default headers values
func NewSearchIngressListNotFound() *SearchIngressListNotFound {
	return &SearchIngressListNotFound{}
}

/*
SearchIngressListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchIngressListNotFound struct {
	Payload *SearchIngressListNotFoundBody
}

// IsSuccess returns true when this search ingress list not found response has a 2xx status code
func (o *SearchIngressListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search ingress list not found response has a 3xx status code
func (o *SearchIngressListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list not found response has a 4xx status code
func (o *SearchIngressListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search ingress list not found response has a 5xx status code
func (o *SearchIngressListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search ingress list not found response a status code equal to that given
func (o *SearchIngressListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchIngressListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListNotFound  %+v", 404, o.Payload)
}

func (o *SearchIngressListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListNotFound  %+v", 404, o.Payload)
}

func (o *SearchIngressListNotFound) GetPayload() *SearchIngressListNotFoundBody {
	return o.Payload
}

func (o *SearchIngressListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchIngressListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIngressListInternalServerError creates a SearchIngressListInternalServerError with default headers values
func NewSearchIngressListInternalServerError() *SearchIngressListInternalServerError {
	return &SearchIngressListInternalServerError{}
}

/*
SearchIngressListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchIngressListInternalServerError struct {
}

// IsSuccess returns true when this search ingress list internal server error response has a 2xx status code
func (o *SearchIngressListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search ingress list internal server error response has a 3xx status code
func (o *SearchIngressListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search ingress list internal server error response has a 4xx status code
func (o *SearchIngressListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search ingress list internal server error response has a 5xx status code
func (o *SearchIngressListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search ingress list internal server error response a status code equal to that given
func (o *SearchIngressListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchIngressListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListInternalServerError ", 500)
}

func (o *SearchIngressListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/ingress][%d] searchIngressListInternalServerError ", 500)
}

func (o *SearchIngressListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchIngressListBadRequestBodyItems0 search ingress list bad request body items0
swagger:model SearchIngressListBadRequestBodyItems0
*/
type SearchIngressListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this search ingress list bad request body items0
func (o *SearchIngressListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list bad request body items0 based on context it is used
func (o *SearchIngressListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SearchIngressListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListBody search ingress list body
swagger:model SearchIngressListBody
*/
type SearchIngressListBody struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// search term
	SearchTerm string `json:"searchTerm,omitempty"`
}

// Validate validates this search ingress list body
func (o *SearchIngressListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list body based on context it is used
func (o *SearchIngressListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListBody) UnmarshalBinary(b []byte) error {
	var res SearchIngressListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListForbiddenBody search ingress list forbidden body
swagger:model SearchIngressListForbiddenBody
*/
type SearchIngressListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search ingress list forbidden body
func (o *SearchIngressListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list forbidden body based on context it is used
func (o *SearchIngressListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SearchIngressListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListNotFoundBody search ingress list not found body
swagger:model SearchIngressListNotFoundBody
*/
type SearchIngressListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search ingress list not found body
func (o *SearchIngressListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list not found body based on context it is used
func (o *SearchIngressListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchIngressListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListOKBody search ingress list o k body
swagger:model SearchIngressListOKBody
*/
type SearchIngressListOKBody struct {

	// data
	Data []*SearchIngressListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this search ingress list o k body
func (o *SearchIngressListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchIngressListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchIngressListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchIngressListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search ingress list o k body based on the context it is used
func (o *SearchIngressListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchIngressListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchIngressListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchIngressListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListOKBody) UnmarshalBinary(b []byte) error {
	var res SearchIngressListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListOKBodyDataItems0 search ingress list o k body data items0
swagger:model SearchIngressListOKBodyDataItems0
*/
type SearchIngressListOKBodyDataItems0 struct {

	// metadata name
	MetadataName string `json:"metadataName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this search ingress list o k body data items0
func (o *SearchIngressListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list o k body data items0 based on context it is used
func (o *SearchIngressListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SearchIngressListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchIngressListUnauthorizedBody search ingress list unauthorized body
swagger:model SearchIngressListUnauthorizedBody
*/
type SearchIngressListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search ingress list unauthorized body
func (o *SearchIngressListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search ingress list unauthorized body based on context it is used
func (o *SearchIngressListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchIngressListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchIngressListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchIngressListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
