// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchServiceListReader is a Reader for the SearchServiceList structure.
type SearchServiceListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchServiceListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchServiceListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchServiceListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchServiceListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchServiceListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchServiceListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchServiceListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchServiceListOK creates a SearchServiceListOK with default headers values
func NewSearchServiceListOK() *SearchServiceListOK {
	return &SearchServiceListOK{}
}

/*
SearchServiceListOK describes a response with status code 200, with default header values.

Success
*/
type SearchServiceListOK struct {
	Payload *SearchServiceListOKBody
}

// IsSuccess returns true when this search service list o k response has a 2xx status code
func (o *SearchServiceListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search service list o k response has a 3xx status code
func (o *SearchServiceListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list o k response has a 4xx status code
func (o *SearchServiceListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search service list o k response has a 5xx status code
func (o *SearchServiceListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search service list o k response a status code equal to that given
func (o *SearchServiceListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchServiceListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListOK  %+v", 200, o.Payload)
}

func (o *SearchServiceListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListOK  %+v", 200, o.Payload)
}

func (o *SearchServiceListOK) GetPayload() *SearchServiceListOKBody {
	return o.Payload
}

func (o *SearchServiceListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServiceListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServiceListBadRequest creates a SearchServiceListBadRequest with default headers values
func NewSearchServiceListBadRequest() *SearchServiceListBadRequest {
	return &SearchServiceListBadRequest{}
}

/*
SearchServiceListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchServiceListBadRequest struct {
	Payload []*SearchServiceListBadRequestBodyItems0
}

// IsSuccess returns true when this search service list bad request response has a 2xx status code
func (o *SearchServiceListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search service list bad request response has a 3xx status code
func (o *SearchServiceListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list bad request response has a 4xx status code
func (o *SearchServiceListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search service list bad request response has a 5xx status code
func (o *SearchServiceListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search service list bad request response a status code equal to that given
func (o *SearchServiceListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchServiceListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServiceListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListBadRequest  %+v", 400, o.Payload)
}

func (o *SearchServiceListBadRequest) GetPayload() []*SearchServiceListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SearchServiceListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServiceListUnauthorized creates a SearchServiceListUnauthorized with default headers values
func NewSearchServiceListUnauthorized() *SearchServiceListUnauthorized {
	return &SearchServiceListUnauthorized{}
}

/*
SearchServiceListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchServiceListUnauthorized struct {
	Payload *SearchServiceListUnauthorizedBody
}

// IsSuccess returns true when this search service list unauthorized response has a 2xx status code
func (o *SearchServiceListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search service list unauthorized response has a 3xx status code
func (o *SearchServiceListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list unauthorized response has a 4xx status code
func (o *SearchServiceListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search service list unauthorized response has a 5xx status code
func (o *SearchServiceListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search service list unauthorized response a status code equal to that given
func (o *SearchServiceListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchServiceListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServiceListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchServiceListUnauthorized) GetPayload() *SearchServiceListUnauthorizedBody {
	return o.Payload
}

func (o *SearchServiceListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServiceListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServiceListForbidden creates a SearchServiceListForbidden with default headers values
func NewSearchServiceListForbidden() *SearchServiceListForbidden {
	return &SearchServiceListForbidden{}
}

/*
SearchServiceListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchServiceListForbidden struct {
	Payload *SearchServiceListForbiddenBody
}

// IsSuccess returns true when this search service list forbidden response has a 2xx status code
func (o *SearchServiceListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search service list forbidden response has a 3xx status code
func (o *SearchServiceListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list forbidden response has a 4xx status code
func (o *SearchServiceListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search service list forbidden response has a 5xx status code
func (o *SearchServiceListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search service list forbidden response a status code equal to that given
func (o *SearchServiceListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchServiceListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServiceListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListForbidden  %+v", 403, o.Payload)
}

func (o *SearchServiceListForbidden) GetPayload() *SearchServiceListForbiddenBody {
	return o.Payload
}

func (o *SearchServiceListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServiceListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServiceListNotFound creates a SearchServiceListNotFound with default headers values
func NewSearchServiceListNotFound() *SearchServiceListNotFound {
	return &SearchServiceListNotFound{}
}

/*
SearchServiceListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchServiceListNotFound struct {
	Payload *SearchServiceListNotFoundBody
}

// IsSuccess returns true when this search service list not found response has a 2xx status code
func (o *SearchServiceListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search service list not found response has a 3xx status code
func (o *SearchServiceListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list not found response has a 4xx status code
func (o *SearchServiceListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search service list not found response has a 5xx status code
func (o *SearchServiceListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search service list not found response a status code equal to that given
func (o *SearchServiceListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchServiceListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServiceListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListNotFound  %+v", 404, o.Payload)
}

func (o *SearchServiceListNotFound) GetPayload() *SearchServiceListNotFoundBody {
	return o.Payload
}

func (o *SearchServiceListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchServiceListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchServiceListInternalServerError creates a SearchServiceListInternalServerError with default headers values
func NewSearchServiceListInternalServerError() *SearchServiceListInternalServerError {
	return &SearchServiceListInternalServerError{}
}

/*
SearchServiceListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchServiceListInternalServerError struct {
}

// IsSuccess returns true when this search service list internal server error response has a 2xx status code
func (o *SearchServiceListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search service list internal server error response has a 3xx status code
func (o *SearchServiceListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search service list internal server error response has a 4xx status code
func (o *SearchServiceListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search service list internal server error response has a 5xx status code
func (o *SearchServiceListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search service list internal server error response a status code equal to that given
func (o *SearchServiceListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchServiceListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListInternalServerError ", 500)
}

func (o *SearchServiceListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Search/services][%d] searchServiceListInternalServerError ", 500)
}

func (o *SearchServiceListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchServiceListBadRequestBodyItems0 search service list bad request body items0
swagger:model SearchServiceListBadRequestBodyItems0
*/
type SearchServiceListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this search service list bad request body items0
func (o *SearchServiceListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list bad request body items0 based on context it is used
func (o *SearchServiceListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SearchServiceListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListBody search service list body
swagger:model SearchServiceListBody
*/
type SearchServiceListBody struct {

	// limit
	Limit int32 `json:"limit,omitempty"`

	// offset
	Offset int32 `json:"offset,omitempty"`

	// search term
	SearchTerm string `json:"searchTerm,omitempty"`
}

// Validate validates this search service list body
func (o *SearchServiceListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list body based on context it is used
func (o *SearchServiceListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListBody) UnmarshalBinary(b []byte) error {
	var res SearchServiceListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListForbiddenBody search service list forbidden body
swagger:model SearchServiceListForbiddenBody
*/
type SearchServiceListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search service list forbidden body
func (o *SearchServiceListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list forbidden body based on context it is used
func (o *SearchServiceListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SearchServiceListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListNotFoundBody search service list not found body
swagger:model SearchServiceListNotFoundBody
*/
type SearchServiceListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search service list not found body
func (o *SearchServiceListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list not found body based on context it is used
func (o *SearchServiceListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchServiceListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListOKBody search service list o k body
swagger:model SearchServiceListOKBody
*/
type SearchServiceListOKBody struct {

	// data
	Data []*SearchServiceListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this search service list o k body
func (o *SearchServiceListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchServiceListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchServiceListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchServiceListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search service list o k body based on the context it is used
func (o *SearchServiceListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchServiceListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchServiceListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchServiceListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListOKBody) UnmarshalBinary(b []byte) error {
	var res SearchServiceListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListOKBodyDataItems0 search service list o k body data items0
swagger:model SearchServiceListOKBodyDataItems0
*/
type SearchServiceListOKBodyDataItems0 struct {

	// metadata name
	MetadataName string `json:"metadataName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this search service list o k body data items0
func (o *SearchServiceListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list o k body data items0 based on context it is used
func (o *SearchServiceListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SearchServiceListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchServiceListUnauthorizedBody search service list unauthorized body
swagger:model SearchServiceListUnauthorizedBody
*/
type SearchServiceListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this search service list unauthorized body
func (o *SearchServiceListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search service list unauthorized body based on context it is used
func (o *SearchServiceListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchServiceListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchServiceListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchServiceListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
