/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// BillingPeriod the model 'BillingPeriod'
type BillingPeriod string

// List of BillingPeriod
const (
	BILLINGPERIOD_NONE BillingPeriod = "none"
	BILLINGPERIOD_DAILY BillingPeriod = "daily"
	BILLINGPERIOD_MOTHLY BillingPeriod = "mothly"
	BILLINGPERIOD_YEARLY BillingPeriod = "yearly"
)

// All allowed values of BillingPeriod enum
var AllowedBillingPeriodEnumValues = []BillingPeriod{
	"none",
	"daily",
	"mothly",
	"yearly",
}

func (v *BillingPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingPeriod(value)
	for _, existing := range AllowedBillingPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingPeriod", value)
}

// NewBillingPeriodFromValue returns a pointer to a valid BillingPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingPeriodFromValue(v string) (*BillingPeriod, error) {
	ev := BillingPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingPeriod: valid values are %v", v, AllowedBillingPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingPeriod) IsValid() bool {
	for _, existing := range AllowedBillingPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingPeriod value
func (v BillingPeriod) Ptr() *BillingPeriod {
	return &v
}

type NullableBillingPeriod struct {
	value *BillingPeriod
	isSet bool
}

func (v NullableBillingPeriod) Get() *BillingPeriod {
	return v.value
}

func (v *NullableBillingPeriod) Set(val *BillingPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPeriod(val *BillingPeriod) *NullableBillingPeriod {
	return &NullableBillingPeriod{value: val, isSet: true}
}

func (v NullableBillingPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

