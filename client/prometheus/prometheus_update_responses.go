// Code generated by go-swagger; DO NOT EDIT.

package prometheus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrometheusUpdateReader is a Reader for the PrometheusUpdate structure.
type PrometheusUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PrometheusUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPrometheusUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPrometheusUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPrometheusUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPrometheusUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPrometheusUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPrometheusUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPrometheusUpdateOK creates a PrometheusUpdateOK with default headers values
func NewPrometheusUpdateOK() *PrometheusUpdateOK {
	return &PrometheusUpdateOK{}
}

/*
PrometheusUpdateOK describes a response with status code 200, with default header values.

Success
*/
type PrometheusUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this prometheus update o k response has a 2xx status code
func (o *PrometheusUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this prometheus update o k response has a 3xx status code
func (o *PrometheusUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update o k response has a 4xx status code
func (o *PrometheusUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this prometheus update o k response has a 5xx status code
func (o *PrometheusUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this prometheus update o k response a status code equal to that given
func (o *PrometheusUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *PrometheusUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateOK  %+v", 200, o.Payload)
}

func (o *PrometheusUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateOK  %+v", 200, o.Payload)
}

func (o *PrometheusUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PrometheusUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPrometheusUpdateBadRequest creates a PrometheusUpdateBadRequest with default headers values
func NewPrometheusUpdateBadRequest() *PrometheusUpdateBadRequest {
	return &PrometheusUpdateBadRequest{}
}

/*
PrometheusUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PrometheusUpdateBadRequest struct {
	Payload []*PrometheusUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this prometheus update bad request response has a 2xx status code
func (o *PrometheusUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this prometheus update bad request response has a 3xx status code
func (o *PrometheusUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update bad request response has a 4xx status code
func (o *PrometheusUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this prometheus update bad request response has a 5xx status code
func (o *PrometheusUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this prometheus update bad request response a status code equal to that given
func (o *PrometheusUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PrometheusUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *PrometheusUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *PrometheusUpdateBadRequest) GetPayload() []*PrometheusUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *PrometheusUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPrometheusUpdateUnauthorized creates a PrometheusUpdateUnauthorized with default headers values
func NewPrometheusUpdateUnauthorized() *PrometheusUpdateUnauthorized {
	return &PrometheusUpdateUnauthorized{}
}

/*
PrometheusUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PrometheusUpdateUnauthorized struct {
	Payload *PrometheusUpdateUnauthorizedBody
}

// IsSuccess returns true when this prometheus update unauthorized response has a 2xx status code
func (o *PrometheusUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this prometheus update unauthorized response has a 3xx status code
func (o *PrometheusUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update unauthorized response has a 4xx status code
func (o *PrometheusUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this prometheus update unauthorized response has a 5xx status code
func (o *PrometheusUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this prometheus update unauthorized response a status code equal to that given
func (o *PrometheusUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PrometheusUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *PrometheusUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *PrometheusUpdateUnauthorized) GetPayload() *PrometheusUpdateUnauthorizedBody {
	return o.Payload
}

func (o *PrometheusUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PrometheusUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPrometheusUpdateForbidden creates a PrometheusUpdateForbidden with default headers values
func NewPrometheusUpdateForbidden() *PrometheusUpdateForbidden {
	return &PrometheusUpdateForbidden{}
}

/*
PrometheusUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PrometheusUpdateForbidden struct {
	Payload *PrometheusUpdateForbiddenBody
}

// IsSuccess returns true when this prometheus update forbidden response has a 2xx status code
func (o *PrometheusUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this prometheus update forbidden response has a 3xx status code
func (o *PrometheusUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update forbidden response has a 4xx status code
func (o *PrometheusUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this prometheus update forbidden response has a 5xx status code
func (o *PrometheusUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this prometheus update forbidden response a status code equal to that given
func (o *PrometheusUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PrometheusUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateForbidden  %+v", 403, o.Payload)
}

func (o *PrometheusUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateForbidden  %+v", 403, o.Payload)
}

func (o *PrometheusUpdateForbidden) GetPayload() *PrometheusUpdateForbiddenBody {
	return o.Payload
}

func (o *PrometheusUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PrometheusUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPrometheusUpdateNotFound creates a PrometheusUpdateNotFound with default headers values
func NewPrometheusUpdateNotFound() *PrometheusUpdateNotFound {
	return &PrometheusUpdateNotFound{}
}

/*
PrometheusUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PrometheusUpdateNotFound struct {
	Payload *PrometheusUpdateNotFoundBody
}

// IsSuccess returns true when this prometheus update not found response has a 2xx status code
func (o *PrometheusUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this prometheus update not found response has a 3xx status code
func (o *PrometheusUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update not found response has a 4xx status code
func (o *PrometheusUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this prometheus update not found response has a 5xx status code
func (o *PrometheusUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this prometheus update not found response a status code equal to that given
func (o *PrometheusUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PrometheusUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateNotFound  %+v", 404, o.Payload)
}

func (o *PrometheusUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateNotFound  %+v", 404, o.Payload)
}

func (o *PrometheusUpdateNotFound) GetPayload() *PrometheusUpdateNotFoundBody {
	return o.Payload
}

func (o *PrometheusUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PrometheusUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPrometheusUpdateInternalServerError creates a PrometheusUpdateInternalServerError with default headers values
func NewPrometheusUpdateInternalServerError() *PrometheusUpdateInternalServerError {
	return &PrometheusUpdateInternalServerError{}
}

/*
PrometheusUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PrometheusUpdateInternalServerError struct {
}

// IsSuccess returns true when this prometheus update internal server error response has a 2xx status code
func (o *PrometheusUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this prometheus update internal server error response has a 3xx status code
func (o *PrometheusUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this prometheus update internal server error response has a 4xx status code
func (o *PrometheusUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this prometheus update internal server error response has a 5xx status code
func (o *PrometheusUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this prometheus update internal server error response a status code equal to that given
func (o *PrometheusUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PrometheusUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateInternalServerError ", 500)
}

func (o *PrometheusUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Prometheus/update/{id}][%d] prometheusUpdateInternalServerError ", 500)
}

func (o *PrometheusUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PrometheusUpdateBadRequestBodyItems0 prometheus update bad request body items0
swagger:model PrometheusUpdateBadRequestBodyItems0
*/
type PrometheusUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this prometheus update bad request body items0
func (o *PrometheusUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update bad request body items0 based on context it is used
func (o *PrometheusUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateBody prometheus update body
swagger:model PrometheusUpdateBody
*/
type PrometheusUpdateBody struct {

	// labels to add
	LabelsToAdd []*PrometheusUpdateParamsBodyLabelsToAddItems0 `json:"labelsToAdd"`

	// labels to delete
	LabelsToDelete []*PrometheusUpdateParamsBodyLabelsToDeleteItems0 `json:"labelsToDelete"`

	// labels to update
	LabelsToUpdate []*PrometheusUpdateParamsBodyLabelsToUpdateItems0 `json:"labelsToUpdate"`

	// metric name
	MetricName string `json:"metricName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operation credential Id
	OperationCredentialID int32 `json:"operationCredentialId,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// rule discount rate
	RuleDiscountRate int32 `json:"ruleDiscountRate"`

	// type
	// Enum: [100 200]
	Type int32 `json:"type,omitempty"`
}

// Validate validates this prometheus update body
func (o *PrometheusUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLabelsToAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabelsToDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabelsToUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PrometheusUpdateBody) validateLabelsToAdd(formats strfmt.Registry) error {
	if swag.IsZero(o.LabelsToAdd) { // not required
		return nil
	}

	for i := 0; i < len(o.LabelsToAdd); i++ {
		if swag.IsZero(o.LabelsToAdd[i]) { // not required
			continue
		}

		if o.LabelsToAdd[i] != nil {
			if err := o.LabelsToAdd[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToAdd" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToAdd" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PrometheusUpdateBody) validateLabelsToDelete(formats strfmt.Registry) error {
	if swag.IsZero(o.LabelsToDelete) { // not required
		return nil
	}

	for i := 0; i < len(o.LabelsToDelete); i++ {
		if swag.IsZero(o.LabelsToDelete[i]) { // not required
			continue
		}

		if o.LabelsToDelete[i] != nil {
			if err := o.LabelsToDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToDelete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PrometheusUpdateBody) validateLabelsToUpdate(formats strfmt.Registry) error {
	if swag.IsZero(o.LabelsToUpdate) { // not required
		return nil
	}

	for i := 0; i < len(o.LabelsToUpdate); i++ {
		if swag.IsZero(o.LabelsToUpdate[i]) { // not required
			continue
		}

		if o.LabelsToUpdate[i] != nil {
			if err := o.LabelsToUpdate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToUpdate" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToUpdate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var prometheusUpdateBodyTypeTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		prometheusUpdateBodyTypeTypePropEnum = append(prometheusUpdateBodyTypeTypePropEnum, v)
	}
}

// prop value enum
func (o *PrometheusUpdateBody) validateTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, prometheusUpdateBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PrometheusUpdateBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prometheus update body based on the context it is used
func (o *PrometheusUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLabelsToAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLabelsToDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLabelsToUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PrometheusUpdateBody) contextValidateLabelsToAdd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LabelsToAdd); i++ {

		if o.LabelsToAdd[i] != nil {
			if err := o.LabelsToAdd[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToAdd" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToAdd" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PrometheusUpdateBody) contextValidateLabelsToDelete(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LabelsToDelete); i++ {

		if o.LabelsToDelete[i] != nil {
			if err := o.LabelsToDelete[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToDelete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PrometheusUpdateBody) contextValidateLabelsToUpdate(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.LabelsToUpdate); i++ {

		if o.LabelsToUpdate[i] != nil {
			if err := o.LabelsToUpdate[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "labelsToUpdate" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "labelsToUpdate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateBody) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateForbiddenBody prometheus update forbidden body
swagger:model PrometheusUpdateForbiddenBody
*/
type PrometheusUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this prometheus update forbidden body
func (o *PrometheusUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update forbidden body based on context it is used
func (o *PrometheusUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateNotFoundBody prometheus update not found body
swagger:model PrometheusUpdateNotFoundBody
*/
type PrometheusUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this prometheus update not found body
func (o *PrometheusUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update not found body based on context it is used
func (o *PrometheusUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateParamsBodyLabelsToAddItems0 prometheus update params body labels to add items0
swagger:model PrometheusUpdateParamsBodyLabelsToAddItems0
*/
type PrometheusUpdateParamsBodyLabelsToAddItems0 struct {

	// label
	Label string `json:"label,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this prometheus update params body labels to add items0
func (o *PrometheusUpdateParamsBodyLabelsToAddItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update params body labels to add items0 based on context it is used
func (o *PrometheusUpdateParamsBodyLabelsToAddItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToAddItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToAddItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateParamsBodyLabelsToAddItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateParamsBodyLabelsToDeleteItems0 prometheus update params body labels to delete items0
swagger:model PrometheusUpdateParamsBodyLabelsToDeleteItems0
*/
type PrometheusUpdateParamsBodyLabelsToDeleteItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this prometheus update params body labels to delete items0
func (o *PrometheusUpdateParamsBodyLabelsToDeleteItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update params body labels to delete items0 based on context it is used
func (o *PrometheusUpdateParamsBodyLabelsToDeleteItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToDeleteItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToDeleteItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateParamsBodyLabelsToDeleteItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateParamsBodyLabelsToUpdateItems0 prometheus update params body labels to update items0
swagger:model PrometheusUpdateParamsBodyLabelsToUpdateItems0
*/
type PrometheusUpdateParamsBodyLabelsToUpdateItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this prometheus update params body labels to update items0
func (o *PrometheusUpdateParamsBodyLabelsToUpdateItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update params body labels to update items0 based on context it is used
func (o *PrometheusUpdateParamsBodyLabelsToUpdateItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToUpdateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateParamsBodyLabelsToUpdateItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateParamsBodyLabelsToUpdateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PrometheusUpdateUnauthorizedBody prometheus update unauthorized body
swagger:model PrometheusUpdateUnauthorizedBody
*/
type PrometheusUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this prometheus update unauthorized body
func (o *PrometheusUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this prometheus update unauthorized body based on context it is used
func (o *PrometheusUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PrometheusUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PrometheusUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PrometheusUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
