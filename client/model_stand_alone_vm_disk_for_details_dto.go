/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandAloneVmDiskForDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandAloneVmDiskForDetailsDto{}

// StandAloneVmDiskForDetailsDto struct for StandAloneVmDiskForDetailsDto
type StandAloneVmDiskForDetailsDto struct {
	Id int32 `json:"id"`
	Name NullableString `json:"name"`
	CurrentSize int64 `json:"currentSize"`
	TargetSize int64 `json:"targetSize"`
	VolumeType NullableString `json:"volumeType"`
	DeviceName NullableString `json:"deviceName"`
	LunId NullableString `json:"lunId"`
	Status StandAloneVmDiskStatus `json:"status"`
}

type _StandAloneVmDiskForDetailsDto StandAloneVmDiskForDetailsDto

// NewStandAloneVmDiskForDetailsDto instantiates a new StandAloneVmDiskForDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandAloneVmDiskForDetailsDto(id int32, name NullableString, currentSize int64, targetSize int64, volumeType NullableString, deviceName NullableString, lunId NullableString, status StandAloneVmDiskStatus) *StandAloneVmDiskForDetailsDto {
	this := StandAloneVmDiskForDetailsDto{}
	this.Id = id
	this.Name = name
	this.CurrentSize = currentSize
	this.TargetSize = targetSize
	this.VolumeType = volumeType
	this.DeviceName = deviceName
	this.LunId = lunId
	this.Status = status
	return &this
}

// NewStandAloneVmDiskForDetailsDtoWithDefaults instantiates a new StandAloneVmDiskForDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandAloneVmDiskForDetailsDtoWithDefaults() *StandAloneVmDiskForDetailsDto {
	this := StandAloneVmDiskForDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *StandAloneVmDiskForDetailsDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StandAloneVmDiskForDetailsDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StandAloneVmDiskForDetailsDto) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StandAloneVmDiskForDetailsDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandAloneVmDiskForDetailsDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *StandAloneVmDiskForDetailsDto) SetName(v string) {
	o.Name.Set(&v)
}

// GetCurrentSize returns the CurrentSize field value
func (o *StandAloneVmDiskForDetailsDto) GetCurrentSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentSize
}

// GetCurrentSizeOk returns a tuple with the CurrentSize field value
// and a boolean to check if the value has been set.
func (o *StandAloneVmDiskForDetailsDto) GetCurrentSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentSize, true
}

// SetCurrentSize sets field value
func (o *StandAloneVmDiskForDetailsDto) SetCurrentSize(v int64) {
	o.CurrentSize = v
}

// GetTargetSize returns the TargetSize field value
func (o *StandAloneVmDiskForDetailsDto) GetTargetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TargetSize
}

// GetTargetSizeOk returns a tuple with the TargetSize field value
// and a boolean to check if the value has been set.
func (o *StandAloneVmDiskForDetailsDto) GetTargetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetSize, true
}

// SetTargetSize sets field value
func (o *StandAloneVmDiskForDetailsDto) SetTargetSize(v int64) {
	o.TargetSize = v
}

// GetVolumeType returns the VolumeType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StandAloneVmDiskForDetailsDto) GetVolumeType() string {
	if o == nil || o.VolumeType.Get() == nil {
		var ret string
		return ret
	}

	return *o.VolumeType.Get()
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandAloneVmDiskForDetailsDto) GetVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeType.Get(), o.VolumeType.IsSet()
}

// SetVolumeType sets field value
func (o *StandAloneVmDiskForDetailsDto) SetVolumeType(v string) {
	o.VolumeType.Set(&v)
}

// GetDeviceName returns the DeviceName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StandAloneVmDiskForDetailsDto) GetDeviceName() string {
	if o == nil || o.DeviceName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DeviceName.Get()
}

// GetDeviceNameOk returns a tuple with the DeviceName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandAloneVmDiskForDetailsDto) GetDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceName.Get(), o.DeviceName.IsSet()
}

// SetDeviceName sets field value
func (o *StandAloneVmDiskForDetailsDto) SetDeviceName(v string) {
	o.DeviceName.Set(&v)
}

// GetLunId returns the LunId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StandAloneVmDiskForDetailsDto) GetLunId() string {
	if o == nil || o.LunId.Get() == nil {
		var ret string
		return ret
	}

	return *o.LunId.Get()
}

// GetLunIdOk returns a tuple with the LunId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandAloneVmDiskForDetailsDto) GetLunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LunId.Get(), o.LunId.IsSet()
}

// SetLunId sets field value
func (o *StandAloneVmDiskForDetailsDto) SetLunId(v string) {
	o.LunId.Set(&v)
}

// GetStatus returns the Status field value
func (o *StandAloneVmDiskForDetailsDto) GetStatus() StandAloneVmDiskStatus {
	if o == nil {
		var ret StandAloneVmDiskStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *StandAloneVmDiskForDetailsDto) GetStatusOk() (*StandAloneVmDiskStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *StandAloneVmDiskForDetailsDto) SetStatus(v StandAloneVmDiskStatus) {
	o.Status = v
}

func (o StandAloneVmDiskForDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandAloneVmDiskForDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name.Get()
	toSerialize["currentSize"] = o.CurrentSize
	toSerialize["targetSize"] = o.TargetSize
	toSerialize["volumeType"] = o.VolumeType.Get()
	toSerialize["deviceName"] = o.DeviceName.Get()
	toSerialize["lunId"] = o.LunId.Get()
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *StandAloneVmDiskForDetailsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"currentSize",
		"targetSize",
		"volumeType",
		"deviceName",
		"lunId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandAloneVmDiskForDetailsDto := _StandAloneVmDiskForDetailsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandAloneVmDiskForDetailsDto)

	if err != nil {
		return err
	}

	*o = StandAloneVmDiskForDetailsDto(varStandAloneVmDiskForDetailsDto)

	return err
}

type NullableStandAloneVmDiskForDetailsDto struct {
	value *StandAloneVmDiskForDetailsDto
	isSet bool
}

func (v NullableStandAloneVmDiskForDetailsDto) Get() *StandAloneVmDiskForDetailsDto {
	return v.value
}

func (v *NullableStandAloneVmDiskForDetailsDto) Set(val *StandAloneVmDiskForDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStandAloneVmDiskForDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStandAloneVmDiskForDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandAloneVmDiskForDetailsDto(val *StandAloneVmDiskForDetailsDto) *NullableStandAloneVmDiskForDetailsDto {
	return &NullableStandAloneVmDiskForDetailsDto{value: val, isSet: true}
}

func (v NullableStandAloneVmDiskForDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandAloneVmDiskForDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


