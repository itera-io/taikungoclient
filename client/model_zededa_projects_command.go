/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ZededaProjectsCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZededaProjectsCommand{}

// ZededaProjectsCommand struct for ZededaProjectsCommand
type ZededaProjectsCommand struct {
	ApiUrl *string `json:"apiUrl,omitempty"`
	ApiToken *string `json:"apiToken,omitempty"`
}

// NewZededaProjectsCommand instantiates a new ZededaProjectsCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZededaProjectsCommand() *ZededaProjectsCommand {
	this := ZededaProjectsCommand{}
	return &this
}

// NewZededaProjectsCommandWithDefaults instantiates a new ZededaProjectsCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZededaProjectsCommandWithDefaults() *ZededaProjectsCommand {
	this := ZededaProjectsCommand{}
	return &this
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *ZededaProjectsCommand) GetApiUrl() string {
	if o == nil || IsNil(o.ApiUrl) {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZededaProjectsCommand) GetApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ApiUrl) {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *ZededaProjectsCommand) HasApiUrl() bool {
	if o != nil && !IsNil(o.ApiUrl) {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *ZededaProjectsCommand) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetApiToken returns the ApiToken field value if set, zero value otherwise.
func (o *ZededaProjectsCommand) GetApiToken() string {
	if o == nil || IsNil(o.ApiToken) {
		var ret string
		return ret
	}
	return *o.ApiToken
}

// GetApiTokenOk returns a tuple with the ApiToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZededaProjectsCommand) GetApiTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ApiToken) {
		return nil, false
	}
	return o.ApiToken, true
}

// HasApiToken returns a boolean if a field has been set.
func (o *ZededaProjectsCommand) HasApiToken() bool {
	if o != nil && !IsNil(o.ApiToken) {
		return true
	}

	return false
}

// SetApiToken gets a reference to the given string and assigns it to the ApiToken field.
func (o *ZededaProjectsCommand) SetApiToken(v string) {
	o.ApiToken = &v
}

func (o ZededaProjectsCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZededaProjectsCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiUrl) {
		toSerialize["apiUrl"] = o.ApiUrl
	}
	if !IsNil(o.ApiToken) {
		toSerialize["apiToken"] = o.ApiToken
	}
	return toSerialize, nil
}

type NullableZededaProjectsCommand struct {
	value *ZededaProjectsCommand
	isSet bool
}

func (v NullableZededaProjectsCommand) Get() *ZededaProjectsCommand {
	return v.value
}

func (v *NullableZededaProjectsCommand) Set(val *ZededaProjectsCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableZededaProjectsCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableZededaProjectsCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZededaProjectsCommand(val *ZededaProjectsCommand) *NullableZededaProjectsCommand {
	return &NullableZededaProjectsCommand{value: val, isSet: true}
}

func (v NullableZededaProjectsCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZededaProjectsCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


