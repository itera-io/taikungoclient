/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the BindUnbindEndpointToTokenCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindUnbindEndpointToTokenCommand{}

// BindUnbindEndpointToTokenCommand struct for BindUnbindEndpointToTokenCommand
type BindUnbindEndpointToTokenCommand struct {
	TokenId   NullableString          `json:"tokenId,omitempty"`
	Endpoints []AvailableEndpointData `json:"endpoints,omitempty"`
	BindAll   *bool                   `json:"bindAll,omitempty"`
}

// NewBindUnbindEndpointToTokenCommand instantiates a new BindUnbindEndpointToTokenCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindUnbindEndpointToTokenCommand() *BindUnbindEndpointToTokenCommand {
	this := BindUnbindEndpointToTokenCommand{}
	return &this
}

// NewBindUnbindEndpointToTokenCommandWithDefaults instantiates a new BindUnbindEndpointToTokenCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindUnbindEndpointToTokenCommandWithDefaults() *BindUnbindEndpointToTokenCommand {
	this := BindUnbindEndpointToTokenCommand{}
	return &this
}

// GetTokenId returns the TokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindUnbindEndpointToTokenCommand) GetTokenId() string {
	if o == nil || IsNil(o.TokenId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindUnbindEndpointToTokenCommand) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// HasTokenId returns a boolean if a field has been set.
func (o *BindUnbindEndpointToTokenCommand) HasTokenId() bool {
	if o != nil && o.TokenId.IsSet() {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given NullableString and assigns it to the TokenId field.
func (o *BindUnbindEndpointToTokenCommand) SetTokenId(v string) {
	o.TokenId.Set(&v)
}

// SetTokenIdNil sets the value for TokenId to be an explicit nil
func (o *BindUnbindEndpointToTokenCommand) SetTokenIdNil() {
	o.TokenId.Set(nil)
}

// UnsetTokenId ensures that no value is present for TokenId, not even an explicit nil
func (o *BindUnbindEndpointToTokenCommand) UnsetTokenId() {
	o.TokenId.Unset()
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindUnbindEndpointToTokenCommand) GetEndpoints() []AvailableEndpointData {
	if o == nil {
		var ret []AvailableEndpointData
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindUnbindEndpointToTokenCommand) GetEndpointsOk() ([]AvailableEndpointData, bool) {
	if o == nil || IsNil(o.Endpoints) {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *BindUnbindEndpointToTokenCommand) HasEndpoints() bool {
	if o != nil && IsNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []AvailableEndpointData and assigns it to the Endpoints field.
func (o *BindUnbindEndpointToTokenCommand) SetEndpoints(v []AvailableEndpointData) {
	o.Endpoints = v
}

// GetBindAll returns the BindAll field value if set, zero value otherwise.
func (o *BindUnbindEndpointToTokenCommand) GetBindAll() bool {
	if o == nil || IsNil(o.BindAll) {
		var ret bool
		return ret
	}
	return *o.BindAll
}

// GetBindAllOk returns a tuple with the BindAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindUnbindEndpointToTokenCommand) GetBindAllOk() (*bool, bool) {
	if o == nil || IsNil(o.BindAll) {
		return nil, false
	}
	return o.BindAll, true
}

// HasBindAll returns a boolean if a field has been set.
func (o *BindUnbindEndpointToTokenCommand) HasBindAll() bool {
	if o != nil && !IsNil(o.BindAll) {
		return true
	}

	return false
}

// SetBindAll gets a reference to the given bool and assigns it to the BindAll field.
func (o *BindUnbindEndpointToTokenCommand) SetBindAll(v bool) {
	o.BindAll = &v
}

func (o BindUnbindEndpointToTokenCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindUnbindEndpointToTokenCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenId.IsSet() {
		toSerialize["tokenId"] = o.TokenId.Get()
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if !IsNil(o.BindAll) {
		toSerialize["bindAll"] = o.BindAll
	}
	return toSerialize, nil
}

type NullableBindUnbindEndpointToTokenCommand struct {
	value *BindUnbindEndpointToTokenCommand
	isSet bool
}

func (v NullableBindUnbindEndpointToTokenCommand) Get() *BindUnbindEndpointToTokenCommand {
	return v.value
}

func (v *NullableBindUnbindEndpointToTokenCommand) Set(val *BindUnbindEndpointToTokenCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableBindUnbindEndpointToTokenCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableBindUnbindEndpointToTokenCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindUnbindEndpointToTokenCommand(val *BindUnbindEndpointToTokenCommand) *NullableBindUnbindEndpointToTokenCommand {
	return &NullableBindUnbindEndpointToTokenCommand{value: val, isSet: true}
}

func (v NullableBindUnbindEndpointToTokenCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindUnbindEndpointToTokenCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
