/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DeprecationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeprecationStatus{}

// DeprecationStatus struct for DeprecationStatus
type DeprecationStatus struct {
	Deleted NullableString `json:"deleted,omitempty"`
	Deprecated NullableString `json:"deprecated,omitempty"`
	Obsolete NullableString `json:"obsolete,omitempty"`
	Replacement NullableString `json:"replacement,omitempty"`
	State NullableString `json:"state,omitempty"`
	ETag NullableString `json:"eTag,omitempty"`
}

// NewDeprecationStatus instantiates a new DeprecationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeprecationStatus() *DeprecationStatus {
	this := DeprecationStatus{}
	return &this
}

// NewDeprecationStatusWithDefaults instantiates a new DeprecationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeprecationStatusWithDefaults() *DeprecationStatus {
	this := DeprecationStatus{}
	return &this
}

// GetDeleted returns the Deleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetDeleted() string {
	if o == nil || IsNil(o.Deleted.Get()) {
		var ret string
		return ret
	}
	return *o.Deleted.Get()
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetDeletedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deleted.Get(), o.Deleted.IsSet()
}

// HasDeleted returns a boolean if a field has been set.
func (o *DeprecationStatus) HasDeleted() bool {
	if o != nil && o.Deleted.IsSet() {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given NullableString and assigns it to the Deleted field.
func (o *DeprecationStatus) SetDeleted(v string) {
	o.Deleted.Set(&v)
}
// SetDeletedNil sets the value for Deleted to be an explicit nil
func (o *DeprecationStatus) SetDeletedNil() {
	o.Deleted.Set(nil)
}

// UnsetDeleted ensures that no value is present for Deleted, not even an explicit nil
func (o *DeprecationStatus) UnsetDeleted() {
	o.Deleted.Unset()
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetDeprecated() string {
	if o == nil || IsNil(o.Deprecated.Get()) {
		var ret string
		return ret
	}
	return *o.Deprecated.Get()
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetDeprecatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deprecated.Get(), o.Deprecated.IsSet()
}

// HasDeprecated returns a boolean if a field has been set.
func (o *DeprecationStatus) HasDeprecated() bool {
	if o != nil && o.Deprecated.IsSet() {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given NullableString and assigns it to the Deprecated field.
func (o *DeprecationStatus) SetDeprecated(v string) {
	o.Deprecated.Set(&v)
}
// SetDeprecatedNil sets the value for Deprecated to be an explicit nil
func (o *DeprecationStatus) SetDeprecatedNil() {
	o.Deprecated.Set(nil)
}

// UnsetDeprecated ensures that no value is present for Deprecated, not even an explicit nil
func (o *DeprecationStatus) UnsetDeprecated() {
	o.Deprecated.Unset()
}

// GetObsolete returns the Obsolete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetObsolete() string {
	if o == nil || IsNil(o.Obsolete.Get()) {
		var ret string
		return ret
	}
	return *o.Obsolete.Get()
}

// GetObsoleteOk returns a tuple with the Obsolete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetObsoleteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Obsolete.Get(), o.Obsolete.IsSet()
}

// HasObsolete returns a boolean if a field has been set.
func (o *DeprecationStatus) HasObsolete() bool {
	if o != nil && o.Obsolete.IsSet() {
		return true
	}

	return false
}

// SetObsolete gets a reference to the given NullableString and assigns it to the Obsolete field.
func (o *DeprecationStatus) SetObsolete(v string) {
	o.Obsolete.Set(&v)
}
// SetObsoleteNil sets the value for Obsolete to be an explicit nil
func (o *DeprecationStatus) SetObsoleteNil() {
	o.Obsolete.Set(nil)
}

// UnsetObsolete ensures that no value is present for Obsolete, not even an explicit nil
func (o *DeprecationStatus) UnsetObsolete() {
	o.Obsolete.Unset()
}

// GetReplacement returns the Replacement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetReplacement() string {
	if o == nil || IsNil(o.Replacement.Get()) {
		var ret string
		return ret
	}
	return *o.Replacement.Get()
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetReplacementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Replacement.Get(), o.Replacement.IsSet()
}

// HasReplacement returns a boolean if a field has been set.
func (o *DeprecationStatus) HasReplacement() bool {
	if o != nil && o.Replacement.IsSet() {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given NullableString and assigns it to the Replacement field.
func (o *DeprecationStatus) SetReplacement(v string) {
	o.Replacement.Set(&v)
}
// SetReplacementNil sets the value for Replacement to be an explicit nil
func (o *DeprecationStatus) SetReplacementNil() {
	o.Replacement.Set(nil)
}

// UnsetReplacement ensures that no value is present for Replacement, not even an explicit nil
func (o *DeprecationStatus) UnsetReplacement() {
	o.Replacement.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *DeprecationStatus) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *DeprecationStatus) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *DeprecationStatus) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *DeprecationStatus) UnsetState() {
	o.State.Unset()
}

// GetETag returns the ETag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecationStatus) GetETag() string {
	if o == nil || IsNil(o.ETag.Get()) {
		var ret string
		return ret
	}
	return *o.ETag.Get()
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecationStatus) GetETagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ETag.Get(), o.ETag.IsSet()
}

// HasETag returns a boolean if a field has been set.
func (o *DeprecationStatus) HasETag() bool {
	if o != nil && o.ETag.IsSet() {
		return true
	}

	return false
}

// SetETag gets a reference to the given NullableString and assigns it to the ETag field.
func (o *DeprecationStatus) SetETag(v string) {
	o.ETag.Set(&v)
}
// SetETagNil sets the value for ETag to be an explicit nil
func (o *DeprecationStatus) SetETagNil() {
	o.ETag.Set(nil)
}

// UnsetETag ensures that no value is present for ETag, not even an explicit nil
func (o *DeprecationStatus) UnsetETag() {
	o.ETag.Unset()
}

func (o DeprecationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeprecationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Deleted.IsSet() {
		toSerialize["deleted"] = o.Deleted.Get()
	}
	if o.Deprecated.IsSet() {
		toSerialize["deprecated"] = o.Deprecated.Get()
	}
	if o.Obsolete.IsSet() {
		toSerialize["obsolete"] = o.Obsolete.Get()
	}
	if o.Replacement.IsSet() {
		toSerialize["replacement"] = o.Replacement.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.ETag.IsSet() {
		toSerialize["eTag"] = o.ETag.Get()
	}
	return toSerialize, nil
}

type NullableDeprecationStatus struct {
	value *DeprecationStatus
	isSet bool
}

func (v NullableDeprecationStatus) Get() *DeprecationStatus {
	return v.value
}

func (v *NullableDeprecationStatus) Set(val *DeprecationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDeprecationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDeprecationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeprecationStatus(val *DeprecationStatus) *NullableDeprecationStatus {
	return &NullableDeprecationStatus{value: val, isSet: true}
}

func (v NullableDeprecationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeprecationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


