/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the ProjectExtendLifeTimeCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectExtendLifeTimeCommand{}

// ProjectExtendLifeTimeCommand struct for ProjectExtendLifeTimeCommand
type ProjectExtendLifeTimeCommand struct {
	ProjectId          *int32       `json:"projectId,omitempty"`
	ExpireAt           NullableTime `json:"expireAt,omitempty"`
	DeleteOnExpiration *bool        `json:"deleteOnExpiration,omitempty"`
}

// NewProjectExtendLifeTimeCommand instantiates a new ProjectExtendLifeTimeCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectExtendLifeTimeCommand() *ProjectExtendLifeTimeCommand {
	this := ProjectExtendLifeTimeCommand{}
	return &this
}

// NewProjectExtendLifeTimeCommandWithDefaults instantiates a new ProjectExtendLifeTimeCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectExtendLifeTimeCommandWithDefaults() *ProjectExtendLifeTimeCommand {
	this := ProjectExtendLifeTimeCommand{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectExtendLifeTimeCommand) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectExtendLifeTimeCommand) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectExtendLifeTimeCommand) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ProjectExtendLifeTimeCommand) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectExtendLifeTimeCommand) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt.Get()
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectExtendLifeTimeCommand) GetExpireAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireAt.Get(), o.ExpireAt.IsSet()
}

// HasExpireAt returns a boolean if a field has been set.
func (o *ProjectExtendLifeTimeCommand) HasExpireAt() bool {
	if o != nil && o.ExpireAt.IsSet() {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given NullableTime and assigns it to the ExpireAt field.
func (o *ProjectExtendLifeTimeCommand) SetExpireAt(v time.Time) {
	o.ExpireAt.Set(&v)
}

// SetExpireAtNil sets the value for ExpireAt to be an explicit nil
func (o *ProjectExtendLifeTimeCommand) SetExpireAtNil() {
	o.ExpireAt.Set(nil)
}

// UnsetExpireAt ensures that no value is present for ExpireAt, not even an explicit nil
func (o *ProjectExtendLifeTimeCommand) UnsetExpireAt() {
	o.ExpireAt.Unset()
}

// GetDeleteOnExpiration returns the DeleteOnExpiration field value if set, zero value otherwise.
func (o *ProjectExtendLifeTimeCommand) GetDeleteOnExpiration() bool {
	if o == nil || IsNil(o.DeleteOnExpiration) {
		var ret bool
		return ret
	}
	return *o.DeleteOnExpiration
}

// GetDeleteOnExpirationOk returns a tuple with the DeleteOnExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectExtendLifeTimeCommand) GetDeleteOnExpirationOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteOnExpiration) {
		return nil, false
	}
	return o.DeleteOnExpiration, true
}

// HasDeleteOnExpiration returns a boolean if a field has been set.
func (o *ProjectExtendLifeTimeCommand) HasDeleteOnExpiration() bool {
	if o != nil && !IsNil(o.DeleteOnExpiration) {
		return true
	}

	return false
}

// SetDeleteOnExpiration gets a reference to the given bool and assigns it to the DeleteOnExpiration field.
func (o *ProjectExtendLifeTimeCommand) SetDeleteOnExpiration(v bool) {
	o.DeleteOnExpiration = &v
}

func (o ProjectExtendLifeTimeCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectExtendLifeTimeCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.ExpireAt.IsSet() {
		toSerialize["expireAt"] = o.ExpireAt.Get()
	}
	if !IsNil(o.DeleteOnExpiration) {
		toSerialize["deleteOnExpiration"] = o.DeleteOnExpiration
	}
	return toSerialize, nil
}

type NullableProjectExtendLifeTimeCommand struct {
	value *ProjectExtendLifeTimeCommand
	isSet bool
}

func (v NullableProjectExtendLifeTimeCommand) Get() *ProjectExtendLifeTimeCommand {
	return v.value
}

func (v *NullableProjectExtendLifeTimeCommand) Set(val *ProjectExtendLifeTimeCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectExtendLifeTimeCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectExtendLifeTimeCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectExtendLifeTimeCommand(val *ProjectExtendLifeTimeCommand) *NullableProjectExtendLifeTimeCommand {
	return &NullableProjectExtendLifeTimeCommand{value: val, isSet: true}
}

func (v NullableProjectExtendLifeTimeCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectExtendLifeTimeCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
