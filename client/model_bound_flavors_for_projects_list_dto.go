/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the BoundFlavorsForProjectsListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoundFlavorsForProjectsListDto{}

// BoundFlavorsForProjectsListDto struct for BoundFlavorsForProjectsListDto
type BoundFlavorsForProjectsListDto struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Cpu *int32 `json:"cpu,omitempty"`
	Ram *float64 `json:"ram,omitempty"`
	ProjectId NullableInt32 `json:"projectId,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
	MaxDataDiskCount NullableInt32 `json:"maxDataDiskCount,omitempty"`
	ExistsLinuxSpotPrice *bool `json:"existsLinuxSpotPrice,omitempty"`
	ExistsWindowsSpotPrice *bool `json:"existsWindowsSpotPrice,omitempty"`
	LinuxSpotPrice *string `json:"linuxSpotPrice,omitempty"`
	LinuxPrice *string `json:"linuxPrice,omitempty"`
	WindowsSpotPrice *string `json:"windowsSpotPrice,omitempty"`
	WindowsPrice *string `json:"windowsPrice,omitempty"`
	CloudType *CloudType `json:"cloudType,omitempty"`
}

// NewBoundFlavorsForProjectsListDto instantiates a new BoundFlavorsForProjectsListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoundFlavorsForProjectsListDto() *BoundFlavorsForProjectsListDto {
	this := BoundFlavorsForProjectsListDto{}
	return &this
}

// NewBoundFlavorsForProjectsListDtoWithDefaults instantiates a new BoundFlavorsForProjectsListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoundFlavorsForProjectsListDtoWithDefaults() *BoundFlavorsForProjectsListDto {
	this := BoundFlavorsForProjectsListDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoundFlavorsForProjectsListDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BoundFlavorsForProjectsListDto) SetName(v string) {
	o.Name = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *BoundFlavorsForProjectsListDto) SetCpu(v int32) {
	o.Cpu = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetRam() float64 {
	if o == nil || IsNil(o.Ram) {
		var ret float64
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetRamOk() (*float64, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given float64 and assigns it to the Ram field.
func (o *BoundFlavorsForProjectsListDto) SetRam(v float64) {
	o.Ram = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoundFlavorsForProjectsListDto) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoundFlavorsForProjectsListDto) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt32 and assigns it to the ProjectId field.
func (o *BoundFlavorsForProjectsListDto) SetProjectId(v int32) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *BoundFlavorsForProjectsListDto) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *BoundFlavorsForProjectsListDto) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *BoundFlavorsForProjectsListDto) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetMaxDataDiskCount returns the MaxDataDiskCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoundFlavorsForProjectsListDto) GetMaxDataDiskCount() int32 {
	if o == nil || IsNil(o.MaxDataDiskCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDataDiskCount.Get()
}

// GetMaxDataDiskCountOk returns a tuple with the MaxDataDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoundFlavorsForProjectsListDto) GetMaxDataDiskCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDataDiskCount.Get(), o.MaxDataDiskCount.IsSet()
}

// HasMaxDataDiskCount returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasMaxDataDiskCount() bool {
	if o != nil && o.MaxDataDiskCount.IsSet() {
		return true
	}

	return false
}

// SetMaxDataDiskCount gets a reference to the given NullableInt32 and assigns it to the MaxDataDiskCount field.
func (o *BoundFlavorsForProjectsListDto) SetMaxDataDiskCount(v int32) {
	o.MaxDataDiskCount.Set(&v)
}
// SetMaxDataDiskCountNil sets the value for MaxDataDiskCount to be an explicit nil
func (o *BoundFlavorsForProjectsListDto) SetMaxDataDiskCountNil() {
	o.MaxDataDiskCount.Set(nil)
}

// UnsetMaxDataDiskCount ensures that no value is present for MaxDataDiskCount, not even an explicit nil
func (o *BoundFlavorsForProjectsListDto) UnsetMaxDataDiskCount() {
	o.MaxDataDiskCount.Unset()
}

// GetExistsLinuxSpotPrice returns the ExistsLinuxSpotPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetExistsLinuxSpotPrice() bool {
	if o == nil || IsNil(o.ExistsLinuxSpotPrice) {
		var ret bool
		return ret
	}
	return *o.ExistsLinuxSpotPrice
}

// GetExistsLinuxSpotPriceOk returns a tuple with the ExistsLinuxSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetExistsLinuxSpotPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.ExistsLinuxSpotPrice) {
		return nil, false
	}
	return o.ExistsLinuxSpotPrice, true
}

// HasExistsLinuxSpotPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasExistsLinuxSpotPrice() bool {
	if o != nil && !IsNil(o.ExistsLinuxSpotPrice) {
		return true
	}

	return false
}

// SetExistsLinuxSpotPrice gets a reference to the given bool and assigns it to the ExistsLinuxSpotPrice field.
func (o *BoundFlavorsForProjectsListDto) SetExistsLinuxSpotPrice(v bool) {
	o.ExistsLinuxSpotPrice = &v
}

// GetExistsWindowsSpotPrice returns the ExistsWindowsSpotPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetExistsWindowsSpotPrice() bool {
	if o == nil || IsNil(o.ExistsWindowsSpotPrice) {
		var ret bool
		return ret
	}
	return *o.ExistsWindowsSpotPrice
}

// GetExistsWindowsSpotPriceOk returns a tuple with the ExistsWindowsSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetExistsWindowsSpotPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.ExistsWindowsSpotPrice) {
		return nil, false
	}
	return o.ExistsWindowsSpotPrice, true
}

// HasExistsWindowsSpotPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasExistsWindowsSpotPrice() bool {
	if o != nil && !IsNil(o.ExistsWindowsSpotPrice) {
		return true
	}

	return false
}

// SetExistsWindowsSpotPrice gets a reference to the given bool and assigns it to the ExistsWindowsSpotPrice field.
func (o *BoundFlavorsForProjectsListDto) SetExistsWindowsSpotPrice(v bool) {
	o.ExistsWindowsSpotPrice = &v
}

// GetLinuxSpotPrice returns the LinuxSpotPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetLinuxSpotPrice() string {
	if o == nil || IsNil(o.LinuxSpotPrice) {
		var ret string
		return ret
	}
	return *o.LinuxSpotPrice
}

// GetLinuxSpotPriceOk returns a tuple with the LinuxSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetLinuxSpotPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LinuxSpotPrice) {
		return nil, false
	}
	return o.LinuxSpotPrice, true
}

// HasLinuxSpotPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasLinuxSpotPrice() bool {
	if o != nil && !IsNil(o.LinuxSpotPrice) {
		return true
	}

	return false
}

// SetLinuxSpotPrice gets a reference to the given string and assigns it to the LinuxSpotPrice field.
func (o *BoundFlavorsForProjectsListDto) SetLinuxSpotPrice(v string) {
	o.LinuxSpotPrice = &v
}

// GetLinuxPrice returns the LinuxPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetLinuxPrice() string {
	if o == nil || IsNil(o.LinuxPrice) {
		var ret string
		return ret
	}
	return *o.LinuxPrice
}

// GetLinuxPriceOk returns a tuple with the LinuxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetLinuxPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LinuxPrice) {
		return nil, false
	}
	return o.LinuxPrice, true
}

// HasLinuxPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasLinuxPrice() bool {
	if o != nil && !IsNil(o.LinuxPrice) {
		return true
	}

	return false
}

// SetLinuxPrice gets a reference to the given string and assigns it to the LinuxPrice field.
func (o *BoundFlavorsForProjectsListDto) SetLinuxPrice(v string) {
	o.LinuxPrice = &v
}

// GetWindowsSpotPrice returns the WindowsSpotPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetWindowsSpotPrice() string {
	if o == nil || IsNil(o.WindowsSpotPrice) {
		var ret string
		return ret
	}
	return *o.WindowsSpotPrice
}

// GetWindowsSpotPriceOk returns a tuple with the WindowsSpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetWindowsSpotPriceOk() (*string, bool) {
	if o == nil || IsNil(o.WindowsSpotPrice) {
		return nil, false
	}
	return o.WindowsSpotPrice, true
}

// HasWindowsSpotPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasWindowsSpotPrice() bool {
	if o != nil && !IsNil(o.WindowsSpotPrice) {
		return true
	}

	return false
}

// SetWindowsSpotPrice gets a reference to the given string and assigns it to the WindowsSpotPrice field.
func (o *BoundFlavorsForProjectsListDto) SetWindowsSpotPrice(v string) {
	o.WindowsSpotPrice = &v
}

// GetWindowsPrice returns the WindowsPrice field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetWindowsPrice() string {
	if o == nil || IsNil(o.WindowsPrice) {
		var ret string
		return ret
	}
	return *o.WindowsPrice
}

// GetWindowsPriceOk returns a tuple with the WindowsPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetWindowsPriceOk() (*string, bool) {
	if o == nil || IsNil(o.WindowsPrice) {
		return nil, false
	}
	return o.WindowsPrice, true
}

// HasWindowsPrice returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasWindowsPrice() bool {
	if o != nil && !IsNil(o.WindowsPrice) {
		return true
	}

	return false
}

// SetWindowsPrice gets a reference to the given string and assigns it to the WindowsPrice field.
func (o *BoundFlavorsForProjectsListDto) SetWindowsPrice(v string) {
	o.WindowsPrice = &v
}

// GetCloudType returns the CloudType field value if set, zero value otherwise.
func (o *BoundFlavorsForProjectsListDto) GetCloudType() CloudType {
	if o == nil || IsNil(o.CloudType) {
		var ret CloudType
		return ret
	}
	return *o.CloudType
}

// GetCloudTypeOk returns a tuple with the CloudType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundFlavorsForProjectsListDto) GetCloudTypeOk() (*CloudType, bool) {
	if o == nil || IsNil(o.CloudType) {
		return nil, false
	}
	return o.CloudType, true
}

// HasCloudType returns a boolean if a field has been set.
func (o *BoundFlavorsForProjectsListDto) HasCloudType() bool {
	if o != nil && !IsNil(o.CloudType) {
		return true
	}

	return false
}

// SetCloudType gets a reference to the given CloudType and assigns it to the CloudType field.
func (o *BoundFlavorsForProjectsListDto) SetCloudType(v CloudType) {
	o.CloudType = &v
}

func (o BoundFlavorsForProjectsListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoundFlavorsForProjectsListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if o.MaxDataDiskCount.IsSet() {
		toSerialize["maxDataDiskCount"] = o.MaxDataDiskCount.Get()
	}
	if !IsNil(o.ExistsLinuxSpotPrice) {
		toSerialize["existsLinuxSpotPrice"] = o.ExistsLinuxSpotPrice
	}
	if !IsNil(o.ExistsWindowsSpotPrice) {
		toSerialize["existsWindowsSpotPrice"] = o.ExistsWindowsSpotPrice
	}
	if !IsNil(o.LinuxSpotPrice) {
		toSerialize["linuxSpotPrice"] = o.LinuxSpotPrice
	}
	if !IsNil(o.LinuxPrice) {
		toSerialize["linuxPrice"] = o.LinuxPrice
	}
	if !IsNil(o.WindowsSpotPrice) {
		toSerialize["windowsSpotPrice"] = o.WindowsSpotPrice
	}
	if !IsNil(o.WindowsPrice) {
		toSerialize["windowsPrice"] = o.WindowsPrice
	}
	if !IsNil(o.CloudType) {
		toSerialize["cloudType"] = o.CloudType
	}
	return toSerialize, nil
}

type NullableBoundFlavorsForProjectsListDto struct {
	value *BoundFlavorsForProjectsListDto
	isSet bool
}

func (v NullableBoundFlavorsForProjectsListDto) Get() *BoundFlavorsForProjectsListDto {
	return v.value
}

func (v *NullableBoundFlavorsForProjectsListDto) Set(val *BoundFlavorsForProjectsListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBoundFlavorsForProjectsListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBoundFlavorsForProjectsListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoundFlavorsForProjectsListDto(val *BoundFlavorsForProjectsListDto) *NullableBoundFlavorsForProjectsListDto {
	return &NullableBoundFlavorsForProjectsListDto{value: val, isSet: true}
}

func (v NullableBoundFlavorsForProjectsListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoundFlavorsForProjectsListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


