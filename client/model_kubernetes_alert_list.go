/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesAlertList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesAlertList{}

// KubernetesAlertList struct for KubernetesAlertList
type KubernetesAlertList struct {
	Data []KubernetesAlertDto `json:"data"`
	TotalCount int32 `json:"totalCount"`
}

type _KubernetesAlertList KubernetesAlertList

// NewKubernetesAlertList instantiates a new KubernetesAlertList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesAlertList(data []KubernetesAlertDto, totalCount int32) *KubernetesAlertList {
	this := KubernetesAlertList{}
	this.Data = data
	this.TotalCount = totalCount
	return &this
}

// NewKubernetesAlertListWithDefaults instantiates a new KubernetesAlertList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesAlertListWithDefaults() *KubernetesAlertList {
	this := KubernetesAlertList{}
	return &this
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for []KubernetesAlertDto will be returned
func (o *KubernetesAlertList) GetData() []KubernetesAlertDto {
	if o == nil {
		var ret []KubernetesAlertDto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesAlertList) GetDataOk() ([]KubernetesAlertDto, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *KubernetesAlertList) SetData(v []KubernetesAlertDto) {
	o.Data = v
}

// GetTotalCount returns the TotalCount field value
func (o *KubernetesAlertList) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *KubernetesAlertList) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *KubernetesAlertList) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o KubernetesAlertList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesAlertList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *KubernetesAlertList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesAlertList := _KubernetesAlertList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesAlertList)

	if err != nil {
		return err
	}

	*o = KubernetesAlertList(varKubernetesAlertList)

	return err
}

type NullableKubernetesAlertList struct {
	value *KubernetesAlertList
	isSet bool
}

func (v NullableKubernetesAlertList) Get() *KubernetesAlertList {
	return v.value
}

func (v *NullableKubernetesAlertList) Set(val *KubernetesAlertList) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesAlertList) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesAlertList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesAlertList(val *KubernetesAlertList) *NullableKubernetesAlertList {
	return &NullableKubernetesAlertList{value: val, isSet: true}
}

func (v NullableKubernetesAlertList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesAlertList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


