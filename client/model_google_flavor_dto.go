/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GoogleFlavorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoogleFlavorDto{}

// GoogleFlavorDto struct for GoogleFlavorDto
type GoogleFlavorDto struct {
	Name string `json:"name"`
	Cpu NullableInt32 `json:"cpu"`
	Ram NullableFloat64 `json:"ram"`
	Description interface{} `json:"description"`
	LinuxPrice NullableFloat64 `json:"linuxPrice"`
	WindowsPrice NullableFloat64 `json:"windowsPrice"`
	LinuxSpotPrice NullableFloat64 `json:"linuxSpotPrice"`
	WindowsSpotPrice NullableFloat64 `json:"windowsSpotPrice"`
}

type _GoogleFlavorDto GoogleFlavorDto

// NewGoogleFlavorDto instantiates a new GoogleFlavorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoogleFlavorDto(name string, cpu NullableInt32, ram NullableFloat64, description interface{}, linuxPrice NullableFloat64, windowsPrice NullableFloat64, linuxSpotPrice NullableFloat64, windowsSpotPrice NullableFloat64) *GoogleFlavorDto {
	this := GoogleFlavorDto{}
	this.Name = name
	this.Cpu = cpu
	this.Ram = ram
	this.Description = description
	this.LinuxPrice = linuxPrice
	this.WindowsPrice = windowsPrice
	this.LinuxSpotPrice = linuxSpotPrice
	this.WindowsSpotPrice = windowsSpotPrice
	return &this
}

// NewGoogleFlavorDtoWithDefaults instantiates a new GoogleFlavorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoogleFlavorDtoWithDefaults() *GoogleFlavorDto {
	this := GoogleFlavorDto{}
	return &this
}

// GetName returns the Name field value
func (o *GoogleFlavorDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GoogleFlavorDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GoogleFlavorDto) SetName(v string) {
	o.Name = v
}

// GetCpu returns the Cpu field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *GoogleFlavorDto) GetCpu() int32 {
	if o == nil || o.Cpu.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Cpu.Get()
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cpu.Get(), o.Cpu.IsSet()
}

// SetCpu sets field value
func (o *GoogleFlavorDto) SetCpu(v int32) {
	o.Cpu.Set(&v)
}

// GetRam returns the Ram field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *GoogleFlavorDto) GetRam() float64 {
	if o == nil || o.Ram.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Ram.Get()
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetRamOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ram.Get(), o.Ram.IsSet()
}

// SetRam sets field value
func (o *GoogleFlavorDto) SetRam(v float64) {
	o.Ram.Set(&v)
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *GoogleFlavorDto) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *GoogleFlavorDto) SetDescription(v interface{}) {
	o.Description = v
}

// GetLinuxPrice returns the LinuxPrice field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *GoogleFlavorDto) GetLinuxPrice() float64 {
	if o == nil || o.LinuxPrice.Get() == nil {
		var ret float64
		return ret
	}

	return *o.LinuxPrice.Get()
}

// GetLinuxPriceOk returns a tuple with the LinuxPrice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetLinuxPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxPrice.Get(), o.LinuxPrice.IsSet()
}

// SetLinuxPrice sets field value
func (o *GoogleFlavorDto) SetLinuxPrice(v float64) {
	o.LinuxPrice.Set(&v)
}

// GetWindowsPrice returns the WindowsPrice field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *GoogleFlavorDto) GetWindowsPrice() float64 {
	if o == nil || o.WindowsPrice.Get() == nil {
		var ret float64
		return ret
	}

	return *o.WindowsPrice.Get()
}

// GetWindowsPriceOk returns a tuple with the WindowsPrice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetWindowsPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsPrice.Get(), o.WindowsPrice.IsSet()
}

// SetWindowsPrice sets field value
func (o *GoogleFlavorDto) SetWindowsPrice(v float64) {
	o.WindowsPrice.Set(&v)
}

// GetLinuxSpotPrice returns the LinuxSpotPrice field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *GoogleFlavorDto) GetLinuxSpotPrice() float64 {
	if o == nil || o.LinuxSpotPrice.Get() == nil {
		var ret float64
		return ret
	}

	return *o.LinuxSpotPrice.Get()
}

// GetLinuxSpotPriceOk returns a tuple with the LinuxSpotPrice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetLinuxSpotPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxSpotPrice.Get(), o.LinuxSpotPrice.IsSet()
}

// SetLinuxSpotPrice sets field value
func (o *GoogleFlavorDto) SetLinuxSpotPrice(v float64) {
	o.LinuxSpotPrice.Set(&v)
}

// GetWindowsSpotPrice returns the WindowsSpotPrice field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *GoogleFlavorDto) GetWindowsSpotPrice() float64 {
	if o == nil || o.WindowsSpotPrice.Get() == nil {
		var ret float64
		return ret
	}

	return *o.WindowsSpotPrice.Get()
}

// GetWindowsSpotPriceOk returns a tuple with the WindowsSpotPrice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleFlavorDto) GetWindowsSpotPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsSpotPrice.Get(), o.WindowsSpotPrice.IsSet()
}

// SetWindowsSpotPrice sets field value
func (o *GoogleFlavorDto) SetWindowsSpotPrice(v float64) {
	o.WindowsSpotPrice.Set(&v)
}

func (o GoogleFlavorDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoogleFlavorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cpu"] = o.Cpu.Get()
	toSerialize["ram"] = o.Ram.Get()
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	toSerialize["linuxPrice"] = o.LinuxPrice.Get()
	toSerialize["windowsPrice"] = o.WindowsPrice.Get()
	toSerialize["linuxSpotPrice"] = o.LinuxSpotPrice.Get()
	toSerialize["windowsSpotPrice"] = o.WindowsSpotPrice.Get()
	return toSerialize, nil
}

func (o *GoogleFlavorDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cpu",
		"ram",
		"description",
		"linuxPrice",
		"windowsPrice",
		"linuxSpotPrice",
		"windowsSpotPrice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoogleFlavorDto := _GoogleFlavorDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoogleFlavorDto)

	if err != nil {
		return err
	}

	*o = GoogleFlavorDto(varGoogleFlavorDto)

	return err
}

type NullableGoogleFlavorDto struct {
	value *GoogleFlavorDto
	isSet bool
}

func (v NullableGoogleFlavorDto) Get() *GoogleFlavorDto {
	return v.value
}

func (v *NullableGoogleFlavorDto) Set(val *GoogleFlavorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleFlavorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleFlavorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleFlavorDto(val *GoogleFlavorDto) *NullableGoogleFlavorDto {
	return &NullableGoogleFlavorDto{value: val, isSet: true}
}

func (v NullableGoogleFlavorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleFlavorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


