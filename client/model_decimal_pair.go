/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DecimalPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecimalPair{}

// DecimalPair struct for DecimalPair
type DecimalPair struct {
	X *float64 `json:"x,omitempty"`
	Y *float64 `json:"y,omitempty"`
}

// NewDecimalPair instantiates a new DecimalPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecimalPair() *DecimalPair {
	this := DecimalPair{}
	return &this
}

// NewDecimalPairWithDefaults instantiates a new DecimalPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecimalPairWithDefaults() *DecimalPair {
	this := DecimalPair{}
	return &this
}

// GetX returns the X field value if set, zero value otherwise.
func (o *DecimalPair) GetX() float64 {
	if o == nil || IsNil(o.X) {
		var ret float64
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecimalPair) GetXOk() (*float64, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *DecimalPair) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float64 and assigns it to the X field.
func (o *DecimalPair) SetX(v float64) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *DecimalPair) GetY() float64 {
	if o == nil || IsNil(o.Y) {
		var ret float64
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecimalPair) GetYOk() (*float64, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *DecimalPair) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float64 and assigns it to the Y field.
func (o *DecimalPair) SetY(v float64) {
	o.Y = &v
}

func (o DecimalPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecimalPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	return toSerialize, nil
}

type NullableDecimalPair struct {
	value *DecimalPair
	isSet bool
}

func (v NullableDecimalPair) Get() *DecimalPair {
	return v.value
}

func (v *NullableDecimalPair) Set(val *DecimalPair) {
	v.value = val
	v.isSet = true
}

func (v NullableDecimalPair) IsSet() bool {
	return v.isSet
}

func (v *NullableDecimalPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecimalPair(val *DecimalPair) *NullableDecimalPair {
	return &NullableDecimalPair{value: val, isSet: true}
}

func (v NullableDecimalPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecimalPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


