/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CBackupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CBackupDto{}

// CBackupDto struct for CBackupDto
type CBackupDto struct {
	MetadataName string `json:"metadataName"`
	CreatedAt NullableTime `json:"createdAt"`
	Expiration NullableTime `json:"expiration"`
	ScheduleName NullableString `json:"scheduleName"`
	Namespace string `json:"namespace"`
	Location NullableString `json:"location"`
	Phase NullableString `json:"phase"`
}

type _CBackupDto CBackupDto

// NewCBackupDto instantiates a new CBackupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCBackupDto(metadataName string, createdAt NullableTime, expiration NullableTime, scheduleName NullableString, namespace string, location NullableString, phase NullableString) *CBackupDto {
	this := CBackupDto{}
	this.MetadataName = metadataName
	this.CreatedAt = createdAt
	this.Expiration = expiration
	this.ScheduleName = scheduleName
	this.Namespace = namespace
	this.Location = location
	this.Phase = phase
	return &this
}

// NewCBackupDtoWithDefaults instantiates a new CBackupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCBackupDtoWithDefaults() *CBackupDto {
	this := CBackupDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *CBackupDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *CBackupDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *CBackupDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CBackupDto) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CBackupDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *CBackupDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetExpiration returns the Expiration field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CBackupDto) GetExpiration() time.Time {
	if o == nil || o.Expiration.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Expiration.Get()
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CBackupDto) GetExpirationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expiration.Get(), o.Expiration.IsSet()
}

// SetExpiration sets field value
func (o *CBackupDto) SetExpiration(v time.Time) {
	o.Expiration.Set(&v)
}

// GetScheduleName returns the ScheduleName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CBackupDto) GetScheduleName() string {
	if o == nil || o.ScheduleName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ScheduleName.Get()
}

// GetScheduleNameOk returns a tuple with the ScheduleName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CBackupDto) GetScheduleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleName.Get(), o.ScheduleName.IsSet()
}

// SetScheduleName sets field value
func (o *CBackupDto) SetScheduleName(v string) {
	o.ScheduleName.Set(&v)
}

// GetNamespace returns the Namespace field value
func (o *CBackupDto) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CBackupDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *CBackupDto) SetNamespace(v string) {
	o.Namespace = v
}

// GetLocation returns the Location field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CBackupDto) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}

	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CBackupDto) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// SetLocation sets field value
func (o *CBackupDto) SetLocation(v string) {
	o.Location.Set(&v)
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CBackupDto) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CBackupDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *CBackupDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

func (o CBackupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CBackupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["createdAt"] = o.CreatedAt.Get()
	toSerialize["expiration"] = o.Expiration.Get()
	toSerialize["scheduleName"] = o.ScheduleName.Get()
	toSerialize["namespace"] = o.Namespace
	toSerialize["location"] = o.Location.Get()
	toSerialize["phase"] = o.Phase.Get()
	return toSerialize, nil
}

func (o *CBackupDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"createdAt",
		"expiration",
		"scheduleName",
		"namespace",
		"location",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCBackupDto := _CBackupDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCBackupDto)

	if err != nil {
		return err
	}

	*o = CBackupDto(varCBackupDto)

	return err
}

type NullableCBackupDto struct {
	value *CBackupDto
	isSet bool
}

func (v NullableCBackupDto) Get() *CBackupDto {
	return v.value
}

func (v *NullableCBackupDto) Set(val *CBackupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCBackupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCBackupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCBackupDto(val *CBackupDto) *NullableCBackupDto {
	return &NullableCBackupDto{value: val, isSet: true}
}

func (v NullableCBackupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCBackupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


