/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// EProjectResourceType the model 'EProjectResourceType'
type EProjectResourceType string

// List of EProjectResourceType
const (
	EPROJECTRESOURCETYPE_CPU EProjectResourceType = "Cpu"
	EPROJECTRESOURCETYPE_RAM EProjectResourceType = "Ram"
	EPROJECTRESOURCETYPE_EPHEMERAL_STORAGE EProjectResourceType = "EphemeralStorage"
)

// All allowed values of EProjectResourceType enum
var AllowedEProjectResourceTypeEnumValues = []EProjectResourceType{
	"Cpu",
	"Ram",
	"EphemeralStorage",
}

func (v *EProjectResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EProjectResourceType(value)
	for _, existing := range AllowedEProjectResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EProjectResourceType", value)
}

// NewEProjectResourceTypeFromValue returns a pointer to a valid EProjectResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEProjectResourceTypeFromValue(v string) (*EProjectResourceType, error) {
	ev := EProjectResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EProjectResourceType: valid values are %v", v, AllowedEProjectResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EProjectResourceType) IsValid() bool {
	for _, existing := range AllowedEProjectResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EProjectResourceType value
func (v EProjectResourceType) Ptr() *EProjectResourceType {
	return &v
}

type NullableEProjectResourceType struct {
	value *EProjectResourceType
	isSet bool
}

func (v NullableEProjectResourceType) Get() *EProjectResourceType {
	return v.value
}

func (v *NullableEProjectResourceType) Set(val *EProjectResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableEProjectResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableEProjectResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEProjectResourceType(val *EProjectResourceType) *NullableEProjectResourceType {
	return &NullableEProjectResourceType{value: val, isSet: true}
}

func (v NullableEProjectResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEProjectResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

