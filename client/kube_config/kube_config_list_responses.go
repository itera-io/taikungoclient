// Code generated by go-swagger; DO NOT EDIT.

package kube_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeConfigListReader is a Reader for the KubeConfigList structure.
type KubeConfigListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KubeConfigListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKubeConfigListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKubeConfigListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewKubeConfigListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewKubeConfigListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewKubeConfigListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKubeConfigListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKubeConfigListOK creates a KubeConfigListOK with default headers values
func NewKubeConfigListOK() *KubeConfigListOK {
	return &KubeConfigListOK{}
}

/*
KubeConfigListOK describes a response with status code 200, with default header values.

Success
*/
type KubeConfigListOK struct {
	Payload *KubeConfigListOKBody
}

// IsSuccess returns true when this kube config list o k response has a 2xx status code
func (o *KubeConfigListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kube config list o k response has a 3xx status code
func (o *KubeConfigListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list o k response has a 4xx status code
func (o *KubeConfigListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kube config list o k response has a 5xx status code
func (o *KubeConfigListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kube config list o k response a status code equal to that given
func (o *KubeConfigListOK) IsCode(code int) bool {
	return code == 200
}

func (o *KubeConfigListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListOK  %+v", 200, o.Payload)
}

func (o *KubeConfigListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListOK  %+v", 200, o.Payload)
}

func (o *KubeConfigListOK) GetPayload() *KubeConfigListOKBody {
	return o.Payload
}

func (o *KubeConfigListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubeConfigListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubeConfigListBadRequest creates a KubeConfigListBadRequest with default headers values
func NewKubeConfigListBadRequest() *KubeConfigListBadRequest {
	return &KubeConfigListBadRequest{}
}

/*
KubeConfigListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type KubeConfigListBadRequest struct {
	Payload []*KubeConfigListBadRequestBodyItems0
}

// IsSuccess returns true when this kube config list bad request response has a 2xx status code
func (o *KubeConfigListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kube config list bad request response has a 3xx status code
func (o *KubeConfigListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list bad request response has a 4xx status code
func (o *KubeConfigListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this kube config list bad request response has a 5xx status code
func (o *KubeConfigListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this kube config list bad request response a status code equal to that given
func (o *KubeConfigListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KubeConfigListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListBadRequest  %+v", 400, o.Payload)
}

func (o *KubeConfigListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListBadRequest  %+v", 400, o.Payload)
}

func (o *KubeConfigListBadRequest) GetPayload() []*KubeConfigListBadRequestBodyItems0 {
	return o.Payload
}

func (o *KubeConfigListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubeConfigListUnauthorized creates a KubeConfigListUnauthorized with default headers values
func NewKubeConfigListUnauthorized() *KubeConfigListUnauthorized {
	return &KubeConfigListUnauthorized{}
}

/*
KubeConfigListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type KubeConfigListUnauthorized struct {
	Payload *KubeConfigListUnauthorizedBody
}

// IsSuccess returns true when this kube config list unauthorized response has a 2xx status code
func (o *KubeConfigListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kube config list unauthorized response has a 3xx status code
func (o *KubeConfigListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list unauthorized response has a 4xx status code
func (o *KubeConfigListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this kube config list unauthorized response has a 5xx status code
func (o *KubeConfigListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this kube config list unauthorized response a status code equal to that given
func (o *KubeConfigListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *KubeConfigListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListUnauthorized  %+v", 401, o.Payload)
}

func (o *KubeConfigListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListUnauthorized  %+v", 401, o.Payload)
}

func (o *KubeConfigListUnauthorized) GetPayload() *KubeConfigListUnauthorizedBody {
	return o.Payload
}

func (o *KubeConfigListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubeConfigListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubeConfigListForbidden creates a KubeConfigListForbidden with default headers values
func NewKubeConfigListForbidden() *KubeConfigListForbidden {
	return &KubeConfigListForbidden{}
}

/*
KubeConfigListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type KubeConfigListForbidden struct {
	Payload *KubeConfigListForbiddenBody
}

// IsSuccess returns true when this kube config list forbidden response has a 2xx status code
func (o *KubeConfigListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kube config list forbidden response has a 3xx status code
func (o *KubeConfigListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list forbidden response has a 4xx status code
func (o *KubeConfigListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this kube config list forbidden response has a 5xx status code
func (o *KubeConfigListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this kube config list forbidden response a status code equal to that given
func (o *KubeConfigListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *KubeConfigListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListForbidden  %+v", 403, o.Payload)
}

func (o *KubeConfigListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListForbidden  %+v", 403, o.Payload)
}

func (o *KubeConfigListForbidden) GetPayload() *KubeConfigListForbiddenBody {
	return o.Payload
}

func (o *KubeConfigListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubeConfigListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubeConfigListNotFound creates a KubeConfigListNotFound with default headers values
func NewKubeConfigListNotFound() *KubeConfigListNotFound {
	return &KubeConfigListNotFound{}
}

/*
KubeConfigListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type KubeConfigListNotFound struct {
	Payload *KubeConfigListNotFoundBody
}

// IsSuccess returns true when this kube config list not found response has a 2xx status code
func (o *KubeConfigListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kube config list not found response has a 3xx status code
func (o *KubeConfigListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list not found response has a 4xx status code
func (o *KubeConfigListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this kube config list not found response has a 5xx status code
func (o *KubeConfigListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this kube config list not found response a status code equal to that given
func (o *KubeConfigListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *KubeConfigListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListNotFound  %+v", 404, o.Payload)
}

func (o *KubeConfigListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListNotFound  %+v", 404, o.Payload)
}

func (o *KubeConfigListNotFound) GetPayload() *KubeConfigListNotFoundBody {
	return o.Payload
}

func (o *KubeConfigListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubeConfigListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubeConfigListInternalServerError creates a KubeConfigListInternalServerError with default headers values
func NewKubeConfigListInternalServerError() *KubeConfigListInternalServerError {
	return &KubeConfigListInternalServerError{}
}

/*
KubeConfigListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type KubeConfigListInternalServerError struct {
}

// IsSuccess returns true when this kube config list internal server error response has a 2xx status code
func (o *KubeConfigListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kube config list internal server error response has a 3xx status code
func (o *KubeConfigListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kube config list internal server error response has a 4xx status code
func (o *KubeConfigListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this kube config list internal server error response has a 5xx status code
func (o *KubeConfigListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this kube config list internal server error response a status code equal to that given
func (o *KubeConfigListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *KubeConfigListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListInternalServerError ", 500)
}

func (o *KubeConfigListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/KubeConfig][%d] kubeConfigListInternalServerError ", 500)
}

func (o *KubeConfigListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
KubeConfigListBadRequestBodyItems0 kube config list bad request body items0
swagger:model KubeConfigListBadRequestBodyItems0
*/
type KubeConfigListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this kube config list bad request body items0
func (o *KubeConfigListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kube config list bad request body items0 based on context it is used
func (o *KubeConfigListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res KubeConfigListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubeConfigListForbiddenBody kube config list forbidden body
swagger:model KubeConfigListForbiddenBody
*/
type KubeConfigListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kube config list forbidden body
func (o *KubeConfigListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kube config list forbidden body based on context it is used
func (o *KubeConfigListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res KubeConfigListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubeConfigListNotFoundBody kube config list not found body
swagger:model KubeConfigListNotFoundBody
*/
type KubeConfigListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kube config list not found body
func (o *KubeConfigListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kube config list not found body based on context it is used
func (o *KubeConfigListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res KubeConfigListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubeConfigListOKBody kube config list o k body
swagger:model KubeConfigListOKBody
*/
type KubeConfigListOKBody struct {

	// data
	Data []*KubeConfigListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this kube config list o k body
func (o *KubeConfigListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KubeConfigListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubeConfigListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubeConfigListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kube config list o k body based on the context it is used
func (o *KubeConfigListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KubeConfigListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubeConfigListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubeConfigListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListOKBody) UnmarshalBinary(b []byte) error {
	var res KubeConfigListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubeConfigListOKBodyDataItems0 kube config list o k body data items0
swagger:model KubeConfigListOKBodyDataItems0
*/
type KubeConfigListOKBodyDataItems0 struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// display name
	DisplayName string `json:"displayName"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is accessible for all
	IsAccessibleForAll bool `json:"isAccessibleForAll"`

	// is accessible for manager
	IsAccessibleForManager bool `json:"isAccessibleForManager"`

	// kube config role name
	KubeConfigRoleName string `json:"kubeConfigRoleName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this kube config list o k body data items0
func (o *KubeConfigListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kube config list o k body data items0 based on context it is used
func (o *KubeConfigListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res KubeConfigListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubeConfigListUnauthorizedBody kube config list unauthorized body
swagger:model KubeConfigListUnauthorizedBody
*/
type KubeConfigListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kube config list unauthorized body
func (o *KubeConfigListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kube config list unauthorized body based on context it is used
func (o *KubeConfigListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubeConfigListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubeConfigListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res KubeConfigListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
