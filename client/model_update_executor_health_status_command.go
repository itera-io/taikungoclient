/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateExecutorHealthStatusCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateExecutorHealthStatusCommand{}

// UpdateExecutorHealthStatusCommand struct for UpdateExecutorHealthStatusCommand
type UpdateExecutorHealthStatusCommand struct {
	ExecutorId int32 `json:"executorId"`
	Health ExecutorHealth `json:"health"`
}

type _UpdateExecutorHealthStatusCommand UpdateExecutorHealthStatusCommand

// NewUpdateExecutorHealthStatusCommand instantiates a new UpdateExecutorHealthStatusCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateExecutorHealthStatusCommand(executorId int32, health ExecutorHealth) *UpdateExecutorHealthStatusCommand {
	this := UpdateExecutorHealthStatusCommand{}
	this.ExecutorId = executorId
	this.Health = health
	return &this
}

// NewUpdateExecutorHealthStatusCommandWithDefaults instantiates a new UpdateExecutorHealthStatusCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateExecutorHealthStatusCommandWithDefaults() *UpdateExecutorHealthStatusCommand {
	this := UpdateExecutorHealthStatusCommand{}
	return &this
}

// GetExecutorId returns the ExecutorId field value
func (o *UpdateExecutorHealthStatusCommand) GetExecutorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExecutorId
}

// GetExecutorIdOk returns a tuple with the ExecutorId field value
// and a boolean to check if the value has been set.
func (o *UpdateExecutorHealthStatusCommand) GetExecutorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutorId, true
}

// SetExecutorId sets field value
func (o *UpdateExecutorHealthStatusCommand) SetExecutorId(v int32) {
	o.ExecutorId = v
}

// GetHealth returns the Health field value
func (o *UpdateExecutorHealthStatusCommand) GetHealth() ExecutorHealth {
	if o == nil {
		var ret ExecutorHealth
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *UpdateExecutorHealthStatusCommand) GetHealthOk() (*ExecutorHealth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *UpdateExecutorHealthStatusCommand) SetHealth(v ExecutorHealth) {
	o.Health = v
}

func (o UpdateExecutorHealthStatusCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateExecutorHealthStatusCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["executorId"] = o.ExecutorId
	toSerialize["health"] = o.Health
	return toSerialize, nil
}

func (o *UpdateExecutorHealthStatusCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"executorId",
		"health",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateExecutorHealthStatusCommand := _UpdateExecutorHealthStatusCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateExecutorHealthStatusCommand)

	if err != nil {
		return err
	}

	*o = UpdateExecutorHealthStatusCommand(varUpdateExecutorHealthStatusCommand)

	return err
}

type NullableUpdateExecutorHealthStatusCommand struct {
	value *UpdateExecutorHealthStatusCommand
	isSet bool
}

func (v NullableUpdateExecutorHealthStatusCommand) Get() *UpdateExecutorHealthStatusCommand {
	return v.value
}

func (v *NullableUpdateExecutorHealthStatusCommand) Set(val *UpdateExecutorHealthStatusCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateExecutorHealthStatusCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateExecutorHealthStatusCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateExecutorHealthStatusCommand(val *UpdateExecutorHealthStatusCommand) *NullableUpdateExecutorHealthStatusCommand {
	return &NullableUpdateExecutorHealthStatusCommand{value: val, isSet: true}
}

func (v NullableUpdateExecutorHealthStatusCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateExecutorHealthStatusCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


