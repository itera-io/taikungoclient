// Code generated by go-swagger; DO NOT EDIT.

package pre_defined_queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PreDefinedQueriesGetPrometheusDashboardListReader is a Reader for the PreDefinedQueriesGetPrometheusDashboardList structure.
type PreDefinedQueriesGetPrometheusDashboardListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PreDefinedQueriesGetPrometheusDashboardListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPreDefinedQueriesGetPrometheusDashboardListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPreDefinedQueriesGetPrometheusDashboardListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPreDefinedQueriesGetPrometheusDashboardListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPreDefinedQueriesGetPrometheusDashboardListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPreDefinedQueriesGetPrometheusDashboardListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPreDefinedQueriesGetPrometheusDashboardListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPreDefinedQueriesGetPrometheusDashboardListOK creates a PreDefinedQueriesGetPrometheusDashboardListOK with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListOK() *PreDefinedQueriesGetPrometheusDashboardListOK {
	return &PreDefinedQueriesGetPrometheusDashboardListOK{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListOK describes a response with status code 200, with default header values.

Success
*/
type PreDefinedQueriesGetPrometheusDashboardListOK struct {
	Payload []*PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list o k response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list o k response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list o k response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list o k response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pre defined queries get prometheus dashboard list o k response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListOK) IsCode(code int) bool {
	return code == 200
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListOK  %+v", 200, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListOK  %+v", 200, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOK) GetPayload() []*PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0 {
	return o.Payload
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreDefinedQueriesGetPrometheusDashboardListBadRequest creates a PreDefinedQueriesGetPrometheusDashboardListBadRequest with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListBadRequest() *PreDefinedQueriesGetPrometheusDashboardListBadRequest {
	return &PreDefinedQueriesGetPrometheusDashboardListBadRequest{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PreDefinedQueriesGetPrometheusDashboardListBadRequest struct {
	Payload []*PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list bad request response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list bad request response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list bad request response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list bad request response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pre defined queries get prometheus dashboard list bad request response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListBadRequest  %+v", 400, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListBadRequest  %+v", 400, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) GetPayload() []*PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0 {
	return o.Payload
}

func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreDefinedQueriesGetPrometheusDashboardListUnauthorized creates a PreDefinedQueriesGetPrometheusDashboardListUnauthorized with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListUnauthorized() *PreDefinedQueriesGetPrometheusDashboardListUnauthorized {
	return &PreDefinedQueriesGetPrometheusDashboardListUnauthorized{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PreDefinedQueriesGetPrometheusDashboardListUnauthorized struct {
	Payload *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list unauthorized response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list unauthorized response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list unauthorized response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list unauthorized response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pre defined queries get prometheus dashboard list unauthorized response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListUnauthorized  %+v", 401, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListUnauthorized  %+v", 401, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) GetPayload() *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody {
	return o.Payload
}

func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreDefinedQueriesGetPrometheusDashboardListForbidden creates a PreDefinedQueriesGetPrometheusDashboardListForbidden with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListForbidden() *PreDefinedQueriesGetPrometheusDashboardListForbidden {
	return &PreDefinedQueriesGetPrometheusDashboardListForbidden{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PreDefinedQueriesGetPrometheusDashboardListForbidden struct {
	Payload *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list forbidden response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list forbidden response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list forbidden response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list forbidden response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pre defined queries get prometheus dashboard list forbidden response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListForbidden  %+v", 403, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListForbidden  %+v", 403, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) GetPayload() *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody {
	return o.Payload
}

func (o *PreDefinedQueriesGetPrometheusDashboardListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PreDefinedQueriesGetPrometheusDashboardListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreDefinedQueriesGetPrometheusDashboardListNotFound creates a PreDefinedQueriesGetPrometheusDashboardListNotFound with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListNotFound() *PreDefinedQueriesGetPrometheusDashboardListNotFound {
	return &PreDefinedQueriesGetPrometheusDashboardListNotFound{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PreDefinedQueriesGetPrometheusDashboardListNotFound struct {
	Payload *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list not found response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list not found response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list not found response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list not found response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pre defined queries get prometheus dashboard list not found response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListNotFound  %+v", 404, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListNotFound  %+v", 404, o.Payload)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) GetPayload() *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody {
	return o.Payload
}

func (o *PreDefinedQueriesGetPrometheusDashboardListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PreDefinedQueriesGetPrometheusDashboardListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreDefinedQueriesGetPrometheusDashboardListInternalServerError creates a PreDefinedQueriesGetPrometheusDashboardListInternalServerError with default headers values
func NewPreDefinedQueriesGetPrometheusDashboardListInternalServerError() *PreDefinedQueriesGetPrometheusDashboardListInternalServerError {
	return &PreDefinedQueriesGetPrometheusDashboardListInternalServerError{}
}

/*
PreDefinedQueriesGetPrometheusDashboardListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PreDefinedQueriesGetPrometheusDashboardListInternalServerError struct {
}

// IsSuccess returns true when this pre defined queries get prometheus dashboard list internal server error response has a 2xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pre defined queries get prometheus dashboard list internal server error response has a 3xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pre defined queries get prometheus dashboard list internal server error response has a 4xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pre defined queries get prometheus dashboard list internal server error response has a 5xx status code
func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pre defined queries get prometheus dashboard list internal server error response a status code equal to that given
func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListInternalServerError ", 500)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/PreDefinedQueries/prometheus/dashboard/list][%d] preDefinedQueriesGetPrometheusDashboardListInternalServerError ", 500)
}

func (o *PreDefinedQueriesGetPrometheusDashboardListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0 pre defined queries get prometheus dashboard list bad request body items0
swagger:model PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0
*/
type PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this pre defined queries get prometheus dashboard list bad request body items0
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pre defined queries get prometheus dashboard list bad request body items0 based on context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListForbiddenBody pre defined queries get prometheus dashboard list forbidden body
swagger:model PreDefinedQueriesGetPrometheusDashboardListForbiddenBody
*/
type PreDefinedQueriesGetPrometheusDashboardListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this pre defined queries get prometheus dashboard list forbidden body
func (o *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pre defined queries get prometheus dashboard list forbidden body based on context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListNotFoundBody pre defined queries get prometheus dashboard list not found body
swagger:model PreDefinedQueriesGetPrometheusDashboardListNotFoundBody
*/
type PreDefinedQueriesGetPrometheusDashboardListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this pre defined queries get prometheus dashboard list not found body
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pre defined queries get prometheus dashboard list not found body based on context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0 pre defined queries get prometheus dashboard list o k body items0
swagger:model PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0
*/
type PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0 struct {

	// category name
	CategoryName string `json:"categoryName,omitempty"`

	// data
	Data []*PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0 `json:"data"`
}

// Validate validates this pre defined queries get prometheus dashboard list o k body items0
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pre defined queries get prometheus dashboard list o k body items0 based on the context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0 pre defined queries get prometheus dashboard list o k body items0 data items0
swagger:model PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0
*/
type PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// expression decoded
	ExpressionDecoded string `json:"expressionDecoded,omitempty"`

	// expression encoded
	ExpressionEncoded string `json:"expressionEncoded,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is readonly
	IsReadonly bool `json:"isReadonly"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this pre defined queries get prometheus dashboard list o k body items0 data items0
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pre defined queries get prometheus dashboard list o k body items0 data items0 based on context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListOKBodyItems0DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody pre defined queries get prometheus dashboard list unauthorized body
swagger:model PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody
*/
type PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this pre defined queries get prometheus dashboard list unauthorized body
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pre defined queries get prometheus dashboard list unauthorized body based on context it is used
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PreDefinedQueriesGetPrometheusDashboardListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
