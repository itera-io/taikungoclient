/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AlertData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertData{}

// AlertData struct for AlertData
type AlertData struct {
	Groups []Group `json:"groups,omitempty"`
}

// NewAlertData instantiates a new AlertData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertData() *AlertData {
	this := AlertData{}
	return &this
}

// NewAlertDataWithDefaults instantiates a new AlertData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDataWithDefaults() *AlertData {
	this := AlertData{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertData) GetGroups() []Group {
	if o == nil {
		var ret []Group
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertData) GetGroupsOk() ([]Group, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AlertData) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []Group and assigns it to the Groups field.
func (o *AlertData) SetGroups(v []Group) {
	o.Groups = v
}

func (o AlertData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

type NullableAlertData struct {
	value *AlertData
	isSet bool
}

func (v NullableAlertData) Get() *AlertData {
	return v.value
}

func (v *NullableAlertData) Set(val *AlertData) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertData) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertData(val *AlertData) *NullableAlertData {
	return &NullableAlertData{value: val, isSet: true}
}

func (v NullableAlertData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


