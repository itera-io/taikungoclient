// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TicketCreateReader is a Reader for the TicketCreate structure.
type TicketCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketCreateOK creates a TicketCreateOK with default headers values
func NewTicketCreateOK() *TicketCreateOK {
	return &TicketCreateOK{}
}

/*
TicketCreateOK describes a response with status code 200, with default header values.

Success
*/
type TicketCreateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket create o k response has a 2xx status code
func (o *TicketCreateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ticket create o k response has a 3xx status code
func (o *TicketCreateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create o k response has a 4xx status code
func (o *TicketCreateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket create o k response has a 5xx status code
func (o *TicketCreateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket create o k response a status code equal to that given
func (o *TicketCreateOK) IsCode(code int) bool {
	return code == 200
}

func (o *TicketCreateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateOK  %+v", 200, o.Payload)
}

func (o *TicketCreateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateOK  %+v", 200, o.Payload)
}

func (o *TicketCreateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketCreateBadRequest creates a TicketCreateBadRequest with default headers values
func NewTicketCreateBadRequest() *TicketCreateBadRequest {
	return &TicketCreateBadRequest{}
}

/*
TicketCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketCreateBadRequest struct {
	Payload []*TicketCreateBadRequestBodyItems0
}

// IsSuccess returns true when this ticket create bad request response has a 2xx status code
func (o *TicketCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket create bad request response has a 3xx status code
func (o *TicketCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create bad request response has a 4xx status code
func (o *TicketCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket create bad request response has a 5xx status code
func (o *TicketCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket create bad request response a status code equal to that given
func (o *TicketCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *TicketCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateBadRequest  %+v", 400, o.Payload)
}

func (o *TicketCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateBadRequest  %+v", 400, o.Payload)
}

func (o *TicketCreateBadRequest) GetPayload() []*TicketCreateBadRequestBodyItems0 {
	return o.Payload
}

func (o *TicketCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketCreateUnauthorized creates a TicketCreateUnauthorized with default headers values
func NewTicketCreateUnauthorized() *TicketCreateUnauthorized {
	return &TicketCreateUnauthorized{}
}

/*
TicketCreateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketCreateUnauthorized struct {
	Payload *TicketCreateUnauthorizedBody
}

// IsSuccess returns true when this ticket create unauthorized response has a 2xx status code
func (o *TicketCreateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket create unauthorized response has a 3xx status code
func (o *TicketCreateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create unauthorized response has a 4xx status code
func (o *TicketCreateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket create unauthorized response has a 5xx status code
func (o *TicketCreateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket create unauthorized response a status code equal to that given
func (o *TicketCreateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *TicketCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketCreateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketCreateUnauthorized) GetPayload() *TicketCreateUnauthorizedBody {
	return o.Payload
}

func (o *TicketCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketCreateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketCreateForbidden creates a TicketCreateForbidden with default headers values
func NewTicketCreateForbidden() *TicketCreateForbidden {
	return &TicketCreateForbidden{}
}

/*
TicketCreateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketCreateForbidden struct {
	Payload *TicketCreateForbiddenBody
}

// IsSuccess returns true when this ticket create forbidden response has a 2xx status code
func (o *TicketCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket create forbidden response has a 3xx status code
func (o *TicketCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create forbidden response has a 4xx status code
func (o *TicketCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket create forbidden response has a 5xx status code
func (o *TicketCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket create forbidden response a status code equal to that given
func (o *TicketCreateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *TicketCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateForbidden  %+v", 403, o.Payload)
}

func (o *TicketCreateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateForbidden  %+v", 403, o.Payload)
}

func (o *TicketCreateForbidden) GetPayload() *TicketCreateForbiddenBody {
	return o.Payload
}

func (o *TicketCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketCreateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketCreateNotFound creates a TicketCreateNotFound with default headers values
func NewTicketCreateNotFound() *TicketCreateNotFound {
	return &TicketCreateNotFound{}
}

/*
TicketCreateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketCreateNotFound struct {
	Payload *TicketCreateNotFoundBody
}

// IsSuccess returns true when this ticket create not found response has a 2xx status code
func (o *TicketCreateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket create not found response has a 3xx status code
func (o *TicketCreateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create not found response has a 4xx status code
func (o *TicketCreateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket create not found response has a 5xx status code
func (o *TicketCreateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket create not found response a status code equal to that given
func (o *TicketCreateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *TicketCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateNotFound  %+v", 404, o.Payload)
}

func (o *TicketCreateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateNotFound  %+v", 404, o.Payload)
}

func (o *TicketCreateNotFound) GetPayload() *TicketCreateNotFoundBody {
	return o.Payload
}

func (o *TicketCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketCreateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketCreateInternalServerError creates a TicketCreateInternalServerError with default headers values
func NewTicketCreateInternalServerError() *TicketCreateInternalServerError {
	return &TicketCreateInternalServerError{}
}

/*
TicketCreateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketCreateInternalServerError struct {
}

// IsSuccess returns true when this ticket create internal server error response has a 2xx status code
func (o *TicketCreateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket create internal server error response has a 3xx status code
func (o *TicketCreateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket create internal server error response has a 4xx status code
func (o *TicketCreateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket create internal server error response has a 5xx status code
func (o *TicketCreateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ticket create internal server error response a status code equal to that given
func (o *TicketCreateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TicketCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateInternalServerError ", 500)
}

func (o *TicketCreateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/create][%d] ticketCreateInternalServerError ", 500)
}

func (o *TicketCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
TicketCreateBadRequestBodyItems0 ticket create bad request body items0
swagger:model TicketCreateBadRequestBodyItems0
*/
type TicketCreateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this ticket create bad request body items0
func (o *TicketCreateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket create bad request body items0 based on context it is used
func (o *TicketCreateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketCreateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketCreateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res TicketCreateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketCreateBody ticket create body
swagger:model TicketCreateBody
*/
type TicketCreateBody struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`
}

// Validate validates this ticket create body
func (o *TicketCreateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket create body based on context it is used
func (o *TicketCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketCreateBody) UnmarshalBinary(b []byte) error {
	var res TicketCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketCreateForbiddenBody ticket create forbidden body
swagger:model TicketCreateForbiddenBody
*/
type TicketCreateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket create forbidden body
func (o *TicketCreateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket create forbidden body based on context it is used
func (o *TicketCreateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketCreateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketCreateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res TicketCreateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketCreateNotFoundBody ticket create not found body
swagger:model TicketCreateNotFoundBody
*/
type TicketCreateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket create not found body
func (o *TicketCreateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket create not found body based on context it is used
func (o *TicketCreateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketCreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketCreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res TicketCreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketCreateUnauthorizedBody ticket create unauthorized body
swagger:model TicketCreateUnauthorizedBody
*/
type TicketCreateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket create unauthorized body
func (o *TicketCreateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket create unauthorized body based on context it is used
func (o *TicketCreateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketCreateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketCreateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res TicketCreateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
