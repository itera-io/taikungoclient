// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ticket API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ticket API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TicketArchive(params *TicketArchiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketArchiveOK, error)

	TicketArticleList(params *TicketArticleListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketArticleListOK, error)

	TicketClose(params *TicketCloseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketCloseOK, error)

	TicketCreate(params *TicketCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketCreateOK, error)

	TicketDelete(params *TicketDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketDeleteOK, error)

	TicketDeleteMessage(params *TicketDeleteMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketDeleteMessageOK, error)

	TicketEdit(params *TicketEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketEditOK, error)

	TicketOpen(params *TicketOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketOpenOK, error)

	TicketReply(params *TicketReplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketReplyOK, error)

	TicketTicketList(params *TicketTicketListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTicketListOK, error)

	TicketTransfer(params *TicketTransferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTransferOK, error)

	TicketTransferList(params *TicketTransferListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTransferListOK, error)

	TicketUpdateMessage(params *TicketUpdateMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketUpdateMessageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TicketArchive archives ticket
*/
func (a *Client) TicketArchive(params *TicketArchiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Archive",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/archive",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Archive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketArticleList retrieves articles of ticket
*/
func (a *Client) TicketArticleList(params *TicketArticleListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketArticleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketArticleListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_ArticleList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Ticket/{ticketId}/messages",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketArticleListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketArticleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_ArticleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketClose closes ticket
*/
func (a *Client) TicketClose(params *TicketCloseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketCloseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketCloseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Close",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/close",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketCloseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketCloseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Close: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketCreate creates ticket
*/
func (a *Client) TicketCreate(params *TicketCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketDelete deletes ticket
*/
func (a *Client) TicketDelete(params *TicketDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/Ticket/delete/{ticketId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketDeleteMessage deletes ticket message
*/
func (a *Client) TicketDeleteMessage(params *TicketDeleteMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketDeleteMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketDeleteMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_DeleteMessage",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/Ticket/delete/message/{messageId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketDeleteMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketDeleteMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_DeleteMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketEdit edits ticket
*/
func (a *Client) TicketEdit(params *TicketEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Edit",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/edit",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketOpen opens ticket
*/
func (a *Client) TicketOpen(params *TicketOpenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketOpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketOpenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Open",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/open",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketOpenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketOpenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Open: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketReply replies message
*/
func (a *Client) TicketReply(params *TicketReplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketReplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketReplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Reply",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/reply",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketReplyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketReplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Reply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketTicketList retrieves a list of tickets
*/
func (a *Client) TicketTicketList(params *TicketTicketListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTicketListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketTicketListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_TicketList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Ticket/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketTicketListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketTicketListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_TicketList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketTransfer transfers ticket
*/
func (a *Client) TicketTransfer(params *TicketTransferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_Transfer",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/transfer",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketTransferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_Transfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketTransferList retrieves organization managers
*/
func (a *Client) TicketTransferList(params *TicketTransferListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketTransferListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketTransferListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_TransferList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Ticket/transfer/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketTransferListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketTransferListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_TransferList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TicketUpdateMessage edits ticket message
*/
func (a *Client) TicketUpdateMessage(params *TicketUpdateMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TicketUpdateMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTicketUpdateMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ticket_UpdateMessage",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Ticket/edit/message",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TicketUpdateMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TicketUpdateMessageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ticket_UpdateMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
