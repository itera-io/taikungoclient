// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// TicketTicketListReader is a Reader for the TicketTicketList structure.
type TicketTicketListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketTicketListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketTicketListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketTicketListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketTicketListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketTicketListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketTicketListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketTicketListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketTicketListOK creates a TicketTicketListOK with default headers values
func NewTicketTicketListOK() *TicketTicketListOK {
	return &TicketTicketListOK{}
}

/*
TicketTicketListOK describes a response with status code 200, with default header values.

Success
*/
type TicketTicketListOK struct {
	Payload *models.AllTicketsList
}

// IsSuccess returns true when this ticket ticket list o k response has a 2xx status code
func (o *TicketTicketListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ticket ticket list o k response has a 3xx status code
func (o *TicketTicketListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list o k response has a 4xx status code
func (o *TicketTicketListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket ticket list o k response has a 5xx status code
func (o *TicketTicketListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket ticket list o k response a status code equal to that given
func (o *TicketTicketListOK) IsCode(code int) bool {
	return code == 200
}

func (o *TicketTicketListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListOK  %+v", 200, o.Payload)
}

func (o *TicketTicketListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListOK  %+v", 200, o.Payload)
}

func (o *TicketTicketListOK) GetPayload() *models.AllTicketsList {
	return o.Payload
}

func (o *TicketTicketListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AllTicketsList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketTicketListBadRequest creates a TicketTicketListBadRequest with default headers values
func NewTicketTicketListBadRequest() *TicketTicketListBadRequest {
	return &TicketTicketListBadRequest{}
}

/*
TicketTicketListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketTicketListBadRequest struct {
	Payload []*models.Error
}

// IsSuccess returns true when this ticket ticket list bad request response has a 2xx status code
func (o *TicketTicketListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket ticket list bad request response has a 3xx status code
func (o *TicketTicketListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list bad request response has a 4xx status code
func (o *TicketTicketListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket ticket list bad request response has a 5xx status code
func (o *TicketTicketListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket ticket list bad request response a status code equal to that given
func (o *TicketTicketListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *TicketTicketListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListBadRequest  %+v", 400, o.Payload)
}

func (o *TicketTicketListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListBadRequest  %+v", 400, o.Payload)
}

func (o *TicketTicketListBadRequest) GetPayload() []*models.Error {
	return o.Payload
}

func (o *TicketTicketListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketTicketListUnauthorized creates a TicketTicketListUnauthorized with default headers values
func NewTicketTicketListUnauthorized() *TicketTicketListUnauthorized {
	return &TicketTicketListUnauthorized{}
}

/*
TicketTicketListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketTicketListUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this ticket ticket list unauthorized response has a 2xx status code
func (o *TicketTicketListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket ticket list unauthorized response has a 3xx status code
func (o *TicketTicketListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list unauthorized response has a 4xx status code
func (o *TicketTicketListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket ticket list unauthorized response has a 5xx status code
func (o *TicketTicketListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket ticket list unauthorized response a status code equal to that given
func (o *TicketTicketListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *TicketTicketListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketTicketListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketTicketListUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketTicketListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketTicketListForbidden creates a TicketTicketListForbidden with default headers values
func NewTicketTicketListForbidden() *TicketTicketListForbidden {
	return &TicketTicketListForbidden{}
}

/*
TicketTicketListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketTicketListForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this ticket ticket list forbidden response has a 2xx status code
func (o *TicketTicketListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket ticket list forbidden response has a 3xx status code
func (o *TicketTicketListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list forbidden response has a 4xx status code
func (o *TicketTicketListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket ticket list forbidden response has a 5xx status code
func (o *TicketTicketListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket ticket list forbidden response a status code equal to that given
func (o *TicketTicketListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *TicketTicketListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListForbidden  %+v", 403, o.Payload)
}

func (o *TicketTicketListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListForbidden  %+v", 403, o.Payload)
}

func (o *TicketTicketListForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketTicketListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketTicketListNotFound creates a TicketTicketListNotFound with default headers values
func NewTicketTicketListNotFound() *TicketTicketListNotFound {
	return &TicketTicketListNotFound{}
}

/*
TicketTicketListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketTicketListNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this ticket ticket list not found response has a 2xx status code
func (o *TicketTicketListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket ticket list not found response has a 3xx status code
func (o *TicketTicketListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list not found response has a 4xx status code
func (o *TicketTicketListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket ticket list not found response has a 5xx status code
func (o *TicketTicketListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket ticket list not found response a status code equal to that given
func (o *TicketTicketListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *TicketTicketListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListNotFound  %+v", 404, o.Payload)
}

func (o *TicketTicketListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListNotFound  %+v", 404, o.Payload)
}

func (o *TicketTicketListNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketTicketListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketTicketListInternalServerError creates a TicketTicketListInternalServerError with default headers values
func NewTicketTicketListInternalServerError() *TicketTicketListInternalServerError {
	return &TicketTicketListInternalServerError{}
}

/*
TicketTicketListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketTicketListInternalServerError struct {
}

// IsSuccess returns true when this ticket ticket list internal server error response has a 2xx status code
func (o *TicketTicketListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket ticket list internal server error response has a 3xx status code
func (o *TicketTicketListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket ticket list internal server error response has a 4xx status code
func (o *TicketTicketListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket ticket list internal server error response has a 5xx status code
func (o *TicketTicketListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ticket ticket list internal server error response a status code equal to that given
func (o *TicketTicketListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TicketTicketListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListInternalServerError ", 500)
}

func (o *TicketTicketListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Ticket/list][%d] ticketTicketListInternalServerError ", 500)
}

func (o *TicketTicketListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
