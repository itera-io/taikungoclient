// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// TicketReplyReader is a Reader for the TicketReply structure.
type TicketReplyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketReplyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketReplyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketReplyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketReplyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketReplyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketReplyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketReplyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketReplyOK creates a TicketReplyOK with default headers values
func NewTicketReplyOK() *TicketReplyOK {
	return &TicketReplyOK{}
}

/* TicketReplyOK describes a response with status code 200, with default header values.

Success
*/
type TicketReplyOK struct {
	Payload models.Unit
}

func (o *TicketReplyOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyOK  %+v", 200, o.Payload)
}
func (o *TicketReplyOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *TicketReplyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketReplyBadRequest creates a TicketReplyBadRequest with default headers values
func NewTicketReplyBadRequest() *TicketReplyBadRequest {
	return &TicketReplyBadRequest{}
}

/* TicketReplyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketReplyBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *TicketReplyBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyBadRequest  %+v", 400, o.Payload)
}
func (o *TicketReplyBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *TicketReplyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketReplyUnauthorized creates a TicketReplyUnauthorized with default headers values
func NewTicketReplyUnauthorized() *TicketReplyUnauthorized {
	return &TicketReplyUnauthorized{}
}

/* TicketReplyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketReplyUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *TicketReplyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyUnauthorized  %+v", 401, o.Payload)
}
func (o *TicketReplyUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketReplyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketReplyForbidden creates a TicketReplyForbidden with default headers values
func NewTicketReplyForbidden() *TicketReplyForbidden {
	return &TicketReplyForbidden{}
}

/* TicketReplyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketReplyForbidden struct {
	Payload *models.ProblemDetails
}

func (o *TicketReplyForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyForbidden  %+v", 403, o.Payload)
}
func (o *TicketReplyForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketReplyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketReplyNotFound creates a TicketReplyNotFound with default headers values
func NewTicketReplyNotFound() *TicketReplyNotFound {
	return &TicketReplyNotFound{}
}

/* TicketReplyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketReplyNotFound struct {
	Payload *models.ProblemDetails
}

func (o *TicketReplyNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyNotFound  %+v", 404, o.Payload)
}
func (o *TicketReplyNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketReplyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketReplyInternalServerError creates a TicketReplyInternalServerError with default headers values
func NewTicketReplyInternalServerError() *TicketReplyInternalServerError {
	return &TicketReplyInternalServerError{}
}

/* TicketReplyInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketReplyInternalServerError struct {
}

func (o *TicketReplyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/reply][%d] ticketReplyInternalServerError ", 500)
}

func (o *TicketReplyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
