// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// TicketDeleteReader is a Reader for the TicketDelete structure.
type TicketDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTicketDeleteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketDeleteOK creates a TicketDeleteOK with default headers values
func NewTicketDeleteOK() *TicketDeleteOK {
	return &TicketDeleteOK{}
}

/* TicketDeleteOK describes a response with status code 200, with default header values.

Success
*/
type TicketDeleteOK struct {
	Payload models.Unit
}

func (o *TicketDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteOK  %+v", 200, o.Payload)
}
func (o *TicketDeleteOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *TicketDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteBadRequest creates a TicketDeleteBadRequest with default headers values
func NewTicketDeleteBadRequest() *TicketDeleteBadRequest {
	return &TicketDeleteBadRequest{}
}

/* TicketDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketDeleteBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *TicketDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteBadRequest  %+v", 400, o.Payload)
}
func (o *TicketDeleteBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *TicketDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteUnauthorized creates a TicketDeleteUnauthorized with default headers values
func NewTicketDeleteUnauthorized() *TicketDeleteUnauthorized {
	return &TicketDeleteUnauthorized{}
}

/* TicketDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketDeleteUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *TicketDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteUnauthorized  %+v", 401, o.Payload)
}
func (o *TicketDeleteUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteForbidden creates a TicketDeleteForbidden with default headers values
func NewTicketDeleteForbidden() *TicketDeleteForbidden {
	return &TicketDeleteForbidden{}
}

/* TicketDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketDeleteForbidden struct {
	Payload *models.ProblemDetails
}

func (o *TicketDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteForbidden  %+v", 403, o.Payload)
}
func (o *TicketDeleteForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteNotFound creates a TicketDeleteNotFound with default headers values
func NewTicketDeleteNotFound() *TicketDeleteNotFound {
	return &TicketDeleteNotFound{}
}

/* TicketDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketDeleteNotFound struct {
	Payload *models.ProblemDetails
}

func (o *TicketDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteNotFound  %+v", 404, o.Payload)
}
func (o *TicketDeleteNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteTooManyRequests creates a TicketDeleteTooManyRequests with default headers values
func NewTicketDeleteTooManyRequests() *TicketDeleteTooManyRequests {
	return &TicketDeleteTooManyRequests{}
}

/* TicketDeleteTooManyRequests describes a response with status code 429, with default header values.

Client Error
*/
type TicketDeleteTooManyRequests struct {
	Payload *models.ProblemDetails
}

func (o *TicketDeleteTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteTooManyRequests  %+v", 429, o.Payload)
}
func (o *TicketDeleteTooManyRequests) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *TicketDeleteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteInternalServerError creates a TicketDeleteInternalServerError with default headers values
func NewTicketDeleteInternalServerError() *TicketDeleteInternalServerError {
	return &TicketDeleteInternalServerError{}
}

/* TicketDeleteInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketDeleteInternalServerError struct {
}

func (o *TicketDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteInternalServerError ", 500)
}

func (o *TicketDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
