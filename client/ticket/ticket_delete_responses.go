// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TicketDeleteReader is a Reader for the TicketDelete structure.
type TicketDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketDeleteOK creates a TicketDeleteOK with default headers values
func NewTicketDeleteOK() *TicketDeleteOK {
	return &TicketDeleteOK{}
}

/*
TicketDeleteOK describes a response with status code 200, with default header values.

Success
*/
type TicketDeleteOK struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket delete o k response has a 2xx status code
func (o *TicketDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ticket delete o k response has a 3xx status code
func (o *TicketDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete o k response has a 4xx status code
func (o *TicketDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket delete o k response has a 5xx status code
func (o *TicketDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket delete o k response a status code equal to that given
func (o *TicketDeleteOK) IsCode(code int) bool {
	return code == 200
}

func (o *TicketDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteOK  %+v", 200, o.Payload)
}

func (o *TicketDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteOK  %+v", 200, o.Payload)
}

func (o *TicketDeleteOK) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteBadRequest creates a TicketDeleteBadRequest with default headers values
func NewTicketDeleteBadRequest() *TicketDeleteBadRequest {
	return &TicketDeleteBadRequest{}
}

/*
TicketDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketDeleteBadRequest struct {
	Payload []*TicketDeleteBadRequestBodyItems0
}

// IsSuccess returns true when this ticket delete bad request response has a 2xx status code
func (o *TicketDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket delete bad request response has a 3xx status code
func (o *TicketDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete bad request response has a 4xx status code
func (o *TicketDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket delete bad request response has a 5xx status code
func (o *TicketDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket delete bad request response a status code equal to that given
func (o *TicketDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *TicketDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *TicketDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *TicketDeleteBadRequest) GetPayload() []*TicketDeleteBadRequestBodyItems0 {
	return o.Payload
}

func (o *TicketDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteUnauthorized creates a TicketDeleteUnauthorized with default headers values
func NewTicketDeleteUnauthorized() *TicketDeleteUnauthorized {
	return &TicketDeleteUnauthorized{}
}

/*
TicketDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketDeleteUnauthorized struct {
	Payload *TicketDeleteUnauthorizedBody
}

// IsSuccess returns true when this ticket delete unauthorized response has a 2xx status code
func (o *TicketDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket delete unauthorized response has a 3xx status code
func (o *TicketDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete unauthorized response has a 4xx status code
func (o *TicketDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket delete unauthorized response has a 5xx status code
func (o *TicketDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket delete unauthorized response a status code equal to that given
func (o *TicketDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *TicketDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketDeleteUnauthorized) GetPayload() *TicketDeleteUnauthorizedBody {
	return o.Payload
}

func (o *TicketDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketDeleteUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteForbidden creates a TicketDeleteForbidden with default headers values
func NewTicketDeleteForbidden() *TicketDeleteForbidden {
	return &TicketDeleteForbidden{}
}

/*
TicketDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketDeleteForbidden struct {
	Payload *TicketDeleteForbiddenBody
}

// IsSuccess returns true when this ticket delete forbidden response has a 2xx status code
func (o *TicketDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket delete forbidden response has a 3xx status code
func (o *TicketDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete forbidden response has a 4xx status code
func (o *TicketDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket delete forbidden response has a 5xx status code
func (o *TicketDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket delete forbidden response a status code equal to that given
func (o *TicketDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *TicketDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteForbidden  %+v", 403, o.Payload)
}

func (o *TicketDeleteForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteForbidden  %+v", 403, o.Payload)
}

func (o *TicketDeleteForbidden) GetPayload() *TicketDeleteForbiddenBody {
	return o.Payload
}

func (o *TicketDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketDeleteForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteNotFound creates a TicketDeleteNotFound with default headers values
func NewTicketDeleteNotFound() *TicketDeleteNotFound {
	return &TicketDeleteNotFound{}
}

/*
TicketDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketDeleteNotFound struct {
	Payload *TicketDeleteNotFoundBody
}

// IsSuccess returns true when this ticket delete not found response has a 2xx status code
func (o *TicketDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket delete not found response has a 3xx status code
func (o *TicketDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete not found response has a 4xx status code
func (o *TicketDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket delete not found response has a 5xx status code
func (o *TicketDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket delete not found response a status code equal to that given
func (o *TicketDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *TicketDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteNotFound  %+v", 404, o.Payload)
}

func (o *TicketDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteNotFound  %+v", 404, o.Payload)
}

func (o *TicketDeleteNotFound) GetPayload() *TicketDeleteNotFoundBody {
	return o.Payload
}

func (o *TicketDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TicketDeleteNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketDeleteInternalServerError creates a TicketDeleteInternalServerError with default headers values
func NewTicketDeleteInternalServerError() *TicketDeleteInternalServerError {
	return &TicketDeleteInternalServerError{}
}

/*
TicketDeleteInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketDeleteInternalServerError struct {
}

// IsSuccess returns true when this ticket delete internal server error response has a 2xx status code
func (o *TicketDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket delete internal server error response has a 3xx status code
func (o *TicketDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket delete internal server error response has a 4xx status code
func (o *TicketDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket delete internal server error response has a 5xx status code
func (o *TicketDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ticket delete internal server error response a status code equal to that given
func (o *TicketDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TicketDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteInternalServerError ", 500)
}

func (o *TicketDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v{v}/Ticket/delete/{ticketId}][%d] ticketDeleteInternalServerError ", 500)
}

func (o *TicketDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
TicketDeleteBadRequestBodyItems0 ticket delete bad request body items0
swagger:model TicketDeleteBadRequestBodyItems0
*/
type TicketDeleteBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this ticket delete bad request body items0
func (o *TicketDeleteBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket delete bad request body items0 based on context it is used
func (o *TicketDeleteBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketDeleteBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketDeleteBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res TicketDeleteBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketDeleteForbiddenBody ticket delete forbidden body
swagger:model TicketDeleteForbiddenBody
*/
type TicketDeleteForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket delete forbidden body
func (o *TicketDeleteForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket delete forbidden body based on context it is used
func (o *TicketDeleteForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketDeleteForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketDeleteForbiddenBody) UnmarshalBinary(b []byte) error {
	var res TicketDeleteForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketDeleteNotFoundBody ticket delete not found body
swagger:model TicketDeleteNotFoundBody
*/
type TicketDeleteNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket delete not found body
func (o *TicketDeleteNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket delete not found body based on context it is used
func (o *TicketDeleteNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketDeleteNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketDeleteNotFoundBody) UnmarshalBinary(b []byte) error {
	var res TicketDeleteNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
TicketDeleteUnauthorizedBody ticket delete unauthorized body
swagger:model TicketDeleteUnauthorizedBody
*/
type TicketDeleteUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this ticket delete unauthorized body
func (o *TicketDeleteUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ticket delete unauthorized body based on context it is used
func (o *TicketDeleteUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TicketDeleteUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TicketDeleteUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res TicketDeleteUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
