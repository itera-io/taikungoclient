// Code generated by go-swagger; DO NOT EDIT.

package ticket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// TicketSetPriorityReader is a Reader for the TicketSetPriority structure.
type TicketSetPriorityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TicketSetPriorityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTicketSetPriorityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTicketSetPriorityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTicketSetPriorityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTicketSetPriorityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTicketSetPriorityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTicketSetPriorityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTicketSetPriorityOK creates a TicketSetPriorityOK with default headers values
func NewTicketSetPriorityOK() *TicketSetPriorityOK {
	return &TicketSetPriorityOK{}
}

/*
TicketSetPriorityOK describes a response with status code 200, with default header values.

Success
*/
type TicketSetPriorityOK struct {
}

// IsSuccess returns true when this ticket set priority o k response has a 2xx status code
func (o *TicketSetPriorityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ticket set priority o k response has a 3xx status code
func (o *TicketSetPriorityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority o k response has a 4xx status code
func (o *TicketSetPriorityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket set priority o k response has a 5xx status code
func (o *TicketSetPriorityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket set priority o k response a status code equal to that given
func (o *TicketSetPriorityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ticket set priority o k response
func (o *TicketSetPriorityOK) Code() int {
	return 200
}

func (o *TicketSetPriorityOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityOK ", 200)
}

func (o *TicketSetPriorityOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityOK ", 200)
}

func (o *TicketSetPriorityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTicketSetPriorityBadRequest creates a TicketSetPriorityBadRequest with default headers values
func NewTicketSetPriorityBadRequest() *TicketSetPriorityBadRequest {
	return &TicketSetPriorityBadRequest{}
}

/*
TicketSetPriorityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TicketSetPriorityBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket set priority bad request response has a 2xx status code
func (o *TicketSetPriorityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket set priority bad request response has a 3xx status code
func (o *TicketSetPriorityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority bad request response has a 4xx status code
func (o *TicketSetPriorityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket set priority bad request response has a 5xx status code
func (o *TicketSetPriorityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket set priority bad request response a status code equal to that given
func (o *TicketSetPriorityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ticket set priority bad request response
func (o *TicketSetPriorityBadRequest) Code() int {
	return 400
}

func (o *TicketSetPriorityBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityBadRequest  %+v", 400, o.Payload)
}

func (o *TicketSetPriorityBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityBadRequest  %+v", 400, o.Payload)
}

func (o *TicketSetPriorityBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketSetPriorityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketSetPriorityUnauthorized creates a TicketSetPriorityUnauthorized with default headers values
func NewTicketSetPriorityUnauthorized() *TicketSetPriorityUnauthorized {
	return &TicketSetPriorityUnauthorized{}
}

/*
TicketSetPriorityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TicketSetPriorityUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket set priority unauthorized response has a 2xx status code
func (o *TicketSetPriorityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket set priority unauthorized response has a 3xx status code
func (o *TicketSetPriorityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority unauthorized response has a 4xx status code
func (o *TicketSetPriorityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket set priority unauthorized response has a 5xx status code
func (o *TicketSetPriorityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket set priority unauthorized response a status code equal to that given
func (o *TicketSetPriorityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ticket set priority unauthorized response
func (o *TicketSetPriorityUnauthorized) Code() int {
	return 401
}

func (o *TicketSetPriorityUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketSetPriorityUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityUnauthorized  %+v", 401, o.Payload)
}

func (o *TicketSetPriorityUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketSetPriorityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketSetPriorityForbidden creates a TicketSetPriorityForbidden with default headers values
func NewTicketSetPriorityForbidden() *TicketSetPriorityForbidden {
	return &TicketSetPriorityForbidden{}
}

/*
TicketSetPriorityForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TicketSetPriorityForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket set priority forbidden response has a 2xx status code
func (o *TicketSetPriorityForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket set priority forbidden response has a 3xx status code
func (o *TicketSetPriorityForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority forbidden response has a 4xx status code
func (o *TicketSetPriorityForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket set priority forbidden response has a 5xx status code
func (o *TicketSetPriorityForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket set priority forbidden response a status code equal to that given
func (o *TicketSetPriorityForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ticket set priority forbidden response
func (o *TicketSetPriorityForbidden) Code() int {
	return 403
}

func (o *TicketSetPriorityForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityForbidden  %+v", 403, o.Payload)
}

func (o *TicketSetPriorityForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityForbidden  %+v", 403, o.Payload)
}

func (o *TicketSetPriorityForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketSetPriorityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketSetPriorityNotFound creates a TicketSetPriorityNotFound with default headers values
func NewTicketSetPriorityNotFound() *TicketSetPriorityNotFound {
	return &TicketSetPriorityNotFound{}
}

/*
TicketSetPriorityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type TicketSetPriorityNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this ticket set priority not found response has a 2xx status code
func (o *TicketSetPriorityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket set priority not found response has a 3xx status code
func (o *TicketSetPriorityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority not found response has a 4xx status code
func (o *TicketSetPriorityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this ticket set priority not found response has a 5xx status code
func (o *TicketSetPriorityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this ticket set priority not found response a status code equal to that given
func (o *TicketSetPriorityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the ticket set priority not found response
func (o *TicketSetPriorityNotFound) Code() int {
	return 404
}

func (o *TicketSetPriorityNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityNotFound  %+v", 404, o.Payload)
}

func (o *TicketSetPriorityNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityNotFound  %+v", 404, o.Payload)
}

func (o *TicketSetPriorityNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *TicketSetPriorityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTicketSetPriorityInternalServerError creates a TicketSetPriorityInternalServerError with default headers values
func NewTicketSetPriorityInternalServerError() *TicketSetPriorityInternalServerError {
	return &TicketSetPriorityInternalServerError{}
}

/*
TicketSetPriorityInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type TicketSetPriorityInternalServerError struct {
}

// IsSuccess returns true when this ticket set priority internal server error response has a 2xx status code
func (o *TicketSetPriorityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ticket set priority internal server error response has a 3xx status code
func (o *TicketSetPriorityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ticket set priority internal server error response has a 4xx status code
func (o *TicketSetPriorityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ticket set priority internal server error response has a 5xx status code
func (o *TicketSetPriorityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ticket set priority internal server error response a status code equal to that given
func (o *TicketSetPriorityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ticket set priority internal server error response
func (o *TicketSetPriorityInternalServerError) Code() int {
	return 500
}

func (o *TicketSetPriorityInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityInternalServerError ", 500)
}

func (o *TicketSetPriorityInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Ticket/set-priority][%d] ticketSetPriorityInternalServerError ", 500)
}

func (o *TicketSetPriorityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
