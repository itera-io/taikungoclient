/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CheckS3Command type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckS3Command{}

// CheckS3Command struct for CheckS3Command
type CheckS3Command struct {
	S3AccessKeyId *string `json:"s3AccessKeyId,omitempty"`
	S3SecretKey *string `json:"s3SecretKey,omitempty"`
	S3Endpoint *string `json:"s3Endpoint,omitempty"`
	S3Region *string `json:"s3Region,omitempty"`
}

// NewCheckS3Command instantiates a new CheckS3Command object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckS3Command() *CheckS3Command {
	this := CheckS3Command{}
	return &this
}

// NewCheckS3CommandWithDefaults instantiates a new CheckS3Command object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckS3CommandWithDefaults() *CheckS3Command {
	this := CheckS3Command{}
	return &this
}

// GetS3AccessKeyId returns the S3AccessKeyId field value if set, zero value otherwise.
func (o *CheckS3Command) GetS3AccessKeyId() string {
	if o == nil || IsNil(o.S3AccessKeyId) {
		var ret string
		return ret
	}
	return *o.S3AccessKeyId
}

// GetS3AccessKeyIdOk returns a tuple with the S3AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckS3Command) GetS3AccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.S3AccessKeyId) {
		return nil, false
	}
	return o.S3AccessKeyId, true
}

// HasS3AccessKeyId returns a boolean if a field has been set.
func (o *CheckS3Command) HasS3AccessKeyId() bool {
	if o != nil && !IsNil(o.S3AccessKeyId) {
		return true
	}

	return false
}

// SetS3AccessKeyId gets a reference to the given string and assigns it to the S3AccessKeyId field.
func (o *CheckS3Command) SetS3AccessKeyId(v string) {
	o.S3AccessKeyId = &v
}

// GetS3SecretKey returns the S3SecretKey field value if set, zero value otherwise.
func (o *CheckS3Command) GetS3SecretKey() string {
	if o == nil || IsNil(o.S3SecretKey) {
		var ret string
		return ret
	}
	return *o.S3SecretKey
}

// GetS3SecretKeyOk returns a tuple with the S3SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckS3Command) GetS3SecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.S3SecretKey) {
		return nil, false
	}
	return o.S3SecretKey, true
}

// HasS3SecretKey returns a boolean if a field has been set.
func (o *CheckS3Command) HasS3SecretKey() bool {
	if o != nil && !IsNil(o.S3SecretKey) {
		return true
	}

	return false
}

// SetS3SecretKey gets a reference to the given string and assigns it to the S3SecretKey field.
func (o *CheckS3Command) SetS3SecretKey(v string) {
	o.S3SecretKey = &v
}

// GetS3Endpoint returns the S3Endpoint field value if set, zero value otherwise.
func (o *CheckS3Command) GetS3Endpoint() string {
	if o == nil || IsNil(o.S3Endpoint) {
		var ret string
		return ret
	}
	return *o.S3Endpoint
}

// GetS3EndpointOk returns a tuple with the S3Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckS3Command) GetS3EndpointOk() (*string, bool) {
	if o == nil || IsNil(o.S3Endpoint) {
		return nil, false
	}
	return o.S3Endpoint, true
}

// HasS3Endpoint returns a boolean if a field has been set.
func (o *CheckS3Command) HasS3Endpoint() bool {
	if o != nil && !IsNil(o.S3Endpoint) {
		return true
	}

	return false
}

// SetS3Endpoint gets a reference to the given string and assigns it to the S3Endpoint field.
func (o *CheckS3Command) SetS3Endpoint(v string) {
	o.S3Endpoint = &v
}

// GetS3Region returns the S3Region field value if set, zero value otherwise.
func (o *CheckS3Command) GetS3Region() string {
	if o == nil || IsNil(o.S3Region) {
		var ret string
		return ret
	}
	return *o.S3Region
}

// GetS3RegionOk returns a tuple with the S3Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckS3Command) GetS3RegionOk() (*string, bool) {
	if o == nil || IsNil(o.S3Region) {
		return nil, false
	}
	return o.S3Region, true
}

// HasS3Region returns a boolean if a field has been set.
func (o *CheckS3Command) HasS3Region() bool {
	if o != nil && !IsNil(o.S3Region) {
		return true
	}

	return false
}

// SetS3Region gets a reference to the given string and assigns it to the S3Region field.
func (o *CheckS3Command) SetS3Region(v string) {
	o.S3Region = &v
}

func (o CheckS3Command) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckS3Command) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3AccessKeyId) {
		toSerialize["s3AccessKeyId"] = o.S3AccessKeyId
	}
	if !IsNil(o.S3SecretKey) {
		toSerialize["s3SecretKey"] = o.S3SecretKey
	}
	if !IsNil(o.S3Endpoint) {
		toSerialize["s3Endpoint"] = o.S3Endpoint
	}
	if !IsNil(o.S3Region) {
		toSerialize["s3Region"] = o.S3Region
	}
	return toSerialize, nil
}

type NullableCheckS3Command struct {
	value *CheckS3Command
	isSet bool
}

func (v NullableCheckS3Command) Get() *CheckS3Command {
	return v.value
}

func (v *NullableCheckS3Command) Set(val *CheckS3Command) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckS3Command) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckS3Command) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckS3Command(val *CheckS3Command) *NullableCheckS3Command {
	return &NullableCheckS3Command{value: val, isSet: true}
}

func (v NullableCheckS3Command) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckS3Command) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


