// Code generated by go-swagger; DO NOT EDIT.

package stand_alone_actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stand alone actions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stand alone actions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	StandAloneActionsConsole(params *StandAloneActionsConsoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsConsoleOK, error)

	StandAloneActionsExportCsv(params *StandAloneActionsExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsExportCsvOK, error)

	StandAloneActionsInstancePassword(params *StandAloneActionsInstancePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsInstancePasswordOK, error)

	StandAloneActionsReboot(params *StandAloneActionsRebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsRebootOK, error)

	StandAloneActionsShelve(params *StandAloneActionsShelveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsShelveOK, error)

	StandAloneActionsShowStandaloneVMStatus(params *StandAloneActionsShowStandaloneVMStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsShowStandaloneVMStatusOK, error)

	StandAloneActionsStart(params *StandAloneActionsStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsStartOK, error)

	StandAloneActionsStop(params *StandAloneActionsStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsStopOK, error)

	StandAloneActionsUnshelve(params *StandAloneActionsUnshelveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsUnshelveOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
StandAloneActionsConsole consoles info standalone vm instance
*/
func (a *Client) StandAloneActionsConsole(params *StandAloneActionsConsoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsConsoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsConsoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Console",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/console",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsConsoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsConsoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Console: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsExportCsv downloads r d p file
*/
func (a *Client) StandAloneActionsExportCsv(params *StandAloneActionsExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsExportCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsExportCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_ExportCsv",
		Method:             "GET",
		PathPattern:        "/api/v{v}/StandAloneActions/download/rdp/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsExportCsvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsExportCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_ExportCsv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsInstancePassword retrieves aws windows admin instance password
*/
func (a *Client) StandAloneActionsInstancePassword(params *StandAloneActionsInstancePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsInstancePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsInstancePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_InstancePassword",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/password",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsInstancePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsInstancePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_InstancePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsReboot reboots standalone vm instance
*/
func (a *Client) StandAloneActionsReboot(params *StandAloneActionsRebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsRebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsRebootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Reboot",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/reboot",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsRebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsRebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Reboot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsShelve shelves standalone vm instance
*/
func (a *Client) StandAloneActionsShelve(params *StandAloneActionsShelveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsShelveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsShelveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Shelve",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/shelve",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsShelveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsShelveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Shelve: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsShowStandaloneVMStatus shows standalone vm status
*/
func (a *Client) StandAloneActionsShowStandaloneVMStatus(params *StandAloneActionsShowStandaloneVMStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsShowStandaloneVMStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsShowStandaloneVMStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_ShowStandaloneVmStatus",
		Method:             "GET",
		PathPattern:        "/api/v{v}/StandAloneActions/status/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsShowStandaloneVMStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsShowStandaloneVMStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_ShowStandaloneVmStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsStart starts standalone vm instance
*/
func (a *Client) StandAloneActionsStart(params *StandAloneActionsStartParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Start",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/start",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Start: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsStop stops standalone vm instance
*/
func (a *Client) StandAloneActionsStop(params *StandAloneActionsStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Stop",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/stop",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Stop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StandAloneActionsUnshelve unshelves standalone vm instance
*/
func (a *Client) StandAloneActionsUnshelve(params *StandAloneActionsUnshelveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StandAloneActionsUnshelveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStandAloneActionsUnshelveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StandAloneActions_Unshelve",
		Method:             "POST",
		PathPattern:        "/api/v{v}/StandAloneActions/unshelve",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StandAloneActionsUnshelveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StandAloneActionsUnshelveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StandAloneActions_Unshelve: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
