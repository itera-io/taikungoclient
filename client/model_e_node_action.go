/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ENodeAction the model 'ENodeAction'
type ENodeAction string

// List of ENodeAction
const (
	ENODEACTION_CORDON ENodeAction = "Cordon"
	ENODEACTION_UNCORDON ENodeAction = "Uncordon"
	ENODEACTION_DRAIN ENodeAction = "Drain"
)

// All allowed values of ENodeAction enum
var AllowedENodeActionEnumValues = []ENodeAction{
	"Cordon",
	"Uncordon",
	"Drain",
}

func (v *ENodeAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENodeAction(value)
	for _, existing := range AllowedENodeActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENodeAction", value)
}

// NewENodeActionFromValue returns a pointer to a valid ENodeAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENodeActionFromValue(v string) (*ENodeAction, error) {
	ev := ENodeAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENodeAction: valid values are %v", v, AllowedENodeActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENodeAction) IsValid() bool {
	for _, existing := range AllowedENodeActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENodeAction value
func (v ENodeAction) Ptr() *ENodeAction {
	return &v
}

type NullableENodeAction struct {
	value *ENodeAction
	isSet bool
}

func (v NullableENodeAction) Get() *ENodeAction {
	return v.value
}

func (v *NullableENodeAction) Set(val *ENodeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableENodeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableENodeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENodeAction(val *ENodeAction) *NullableENodeAction {
	return &NullableENodeAction{value: val, isSet: true}
}

func (v NullableENodeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENodeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

