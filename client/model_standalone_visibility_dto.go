/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the StandaloneVisibilityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandaloneVisibilityDto{}

// StandaloneVisibilityDto struct for StandaloneVisibilityDto
type StandaloneVisibilityDto struct {
	ShowStatus  *bool `json:"showStatus,omitempty"`
	ShowConsole *bool `json:"showConsole,omitempty"`
	Shelve      *bool `json:"shelve,omitempty"`
	Unshelve    *bool `json:"unshelve,omitempty"`
	Start       *bool `json:"start,omitempty"`
	Stop        *bool `json:"stop,omitempty"`
	Reboot      *bool `json:"reboot,omitempty"`
}

// NewStandaloneVisibilityDto instantiates a new StandaloneVisibilityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandaloneVisibilityDto() *StandaloneVisibilityDto {
	this := StandaloneVisibilityDto{}
	return &this
}

// NewStandaloneVisibilityDtoWithDefaults instantiates a new StandaloneVisibilityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandaloneVisibilityDtoWithDefaults() *StandaloneVisibilityDto {
	this := StandaloneVisibilityDto{}
	return &this
}

// GetShowStatus returns the ShowStatus field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetShowStatus() bool {
	if o == nil || IsNil(o.ShowStatus) {
		var ret bool
		return ret
	}
	return *o.ShowStatus
}

// GetShowStatusOk returns a tuple with the ShowStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShowStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowStatus) {
		return nil, false
	}
	return o.ShowStatus, true
}

// HasShowStatus returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasShowStatus() bool {
	if o != nil && !IsNil(o.ShowStatus) {
		return true
	}

	return false
}

// SetShowStatus gets a reference to the given bool and assigns it to the ShowStatus field.
func (o *StandaloneVisibilityDto) SetShowStatus(v bool) {
	o.ShowStatus = &v
}

// GetShowConsole returns the ShowConsole field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetShowConsole() bool {
	if o == nil || IsNil(o.ShowConsole) {
		var ret bool
		return ret
	}
	return *o.ShowConsole
}

// GetShowConsoleOk returns a tuple with the ShowConsole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShowConsoleOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowConsole) {
		return nil, false
	}
	return o.ShowConsole, true
}

// HasShowConsole returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasShowConsole() bool {
	if o != nil && !IsNil(o.ShowConsole) {
		return true
	}

	return false
}

// SetShowConsole gets a reference to the given bool and assigns it to the ShowConsole field.
func (o *StandaloneVisibilityDto) SetShowConsole(v bool) {
	o.ShowConsole = &v
}

// GetShelve returns the Shelve field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetShelve() bool {
	if o == nil || IsNil(o.Shelve) {
		var ret bool
		return ret
	}
	return *o.Shelve
}

// GetShelveOk returns a tuple with the Shelve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShelveOk() (*bool, bool) {
	if o == nil || IsNil(o.Shelve) {
		return nil, false
	}
	return o.Shelve, true
}

// HasShelve returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasShelve() bool {
	if o != nil && !IsNil(o.Shelve) {
		return true
	}

	return false
}

// SetShelve gets a reference to the given bool and assigns it to the Shelve field.
func (o *StandaloneVisibilityDto) SetShelve(v bool) {
	o.Shelve = &v
}

// GetUnshelve returns the Unshelve field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetUnshelve() bool {
	if o == nil || IsNil(o.Unshelve) {
		var ret bool
		return ret
	}
	return *o.Unshelve
}

// GetUnshelveOk returns a tuple with the Unshelve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetUnshelveOk() (*bool, bool) {
	if o == nil || IsNil(o.Unshelve) {
		return nil, false
	}
	return o.Unshelve, true
}

// HasUnshelve returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasUnshelve() bool {
	if o != nil && !IsNil(o.Unshelve) {
		return true
	}

	return false
}

// SetUnshelve gets a reference to the given bool and assigns it to the Unshelve field.
func (o *StandaloneVisibilityDto) SetUnshelve(v bool) {
	o.Unshelve = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetStart() bool {
	if o == nil || IsNil(o.Start) {
		var ret bool
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetStartOk() (*bool, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given bool and assigns it to the Start field.
func (o *StandaloneVisibilityDto) SetStart(v bool) {
	o.Start = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetStop() bool {
	if o == nil || IsNil(o.Stop) {
		var ret bool
		return ret
	}
	return *o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetStopOk() (*bool, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given bool and assigns it to the Stop field.
func (o *StandaloneVisibilityDto) SetStop(v bool) {
	o.Stop = &v
}

// GetReboot returns the Reboot field value if set, zero value otherwise.
func (o *StandaloneVisibilityDto) GetReboot() bool {
	if o == nil || IsNil(o.Reboot) {
		var ret bool
		return ret
	}
	return *o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetRebootOk() (*bool, bool) {
	if o == nil || IsNil(o.Reboot) {
		return nil, false
	}
	return o.Reboot, true
}

// HasReboot returns a boolean if a field has been set.
func (o *StandaloneVisibilityDto) HasReboot() bool {
	if o != nil && !IsNil(o.Reboot) {
		return true
	}

	return false
}

// SetReboot gets a reference to the given bool and assigns it to the Reboot field.
func (o *StandaloneVisibilityDto) SetReboot(v bool) {
	o.Reboot = &v
}

func (o StandaloneVisibilityDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandaloneVisibilityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShowStatus) {
		toSerialize["showStatus"] = o.ShowStatus
	}
	if !IsNil(o.ShowConsole) {
		toSerialize["showConsole"] = o.ShowConsole
	}
	if !IsNil(o.Shelve) {
		toSerialize["shelve"] = o.Shelve
	}
	if !IsNil(o.Unshelve) {
		toSerialize["unshelve"] = o.Unshelve
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.Reboot) {
		toSerialize["reboot"] = o.Reboot
	}
	return toSerialize, nil
}

type NullableStandaloneVisibilityDto struct {
	value *StandaloneVisibilityDto
	isSet bool
}

func (v NullableStandaloneVisibilityDto) Get() *StandaloneVisibilityDto {
	return v.value
}

func (v *NullableStandaloneVisibilityDto) Set(val *StandaloneVisibilityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStandaloneVisibilityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStandaloneVisibilityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandaloneVisibilityDto(val *StandaloneVisibilityDto) *NullableStandaloneVisibilityDto {
	return &NullableStandaloneVisibilityDto{value: val, isSet: true}
}

func (v NullableStandaloneVisibilityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandaloneVisibilityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
