/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandaloneVisibilityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandaloneVisibilityDto{}

// StandaloneVisibilityDto struct for StandaloneVisibilityDto
type StandaloneVisibilityDto struct {
	ShowStatus bool `json:"showStatus"`
	ShowConsole bool `json:"showConsole"`
	Shelve bool `json:"shelve"`
	Unshelve bool `json:"unshelve"`
	Start bool `json:"start"`
	Stop bool `json:"stop"`
	Reboot bool `json:"reboot"`
}

type _StandaloneVisibilityDto StandaloneVisibilityDto

// NewStandaloneVisibilityDto instantiates a new StandaloneVisibilityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandaloneVisibilityDto(showStatus bool, showConsole bool, shelve bool, unshelve bool, start bool, stop bool, reboot bool) *StandaloneVisibilityDto {
	this := StandaloneVisibilityDto{}
	this.ShowStatus = showStatus
	this.ShowConsole = showConsole
	this.Shelve = shelve
	this.Unshelve = unshelve
	this.Start = start
	this.Stop = stop
	this.Reboot = reboot
	return &this
}

// NewStandaloneVisibilityDtoWithDefaults instantiates a new StandaloneVisibilityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandaloneVisibilityDtoWithDefaults() *StandaloneVisibilityDto {
	this := StandaloneVisibilityDto{}
	return &this
}

// GetShowStatus returns the ShowStatus field value
func (o *StandaloneVisibilityDto) GetShowStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowStatus
}

// GetShowStatusOk returns a tuple with the ShowStatus field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShowStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShowStatus, true
}

// SetShowStatus sets field value
func (o *StandaloneVisibilityDto) SetShowStatus(v bool) {
	o.ShowStatus = v
}

// GetShowConsole returns the ShowConsole field value
func (o *StandaloneVisibilityDto) GetShowConsole() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowConsole
}

// GetShowConsoleOk returns a tuple with the ShowConsole field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShowConsoleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShowConsole, true
}

// SetShowConsole sets field value
func (o *StandaloneVisibilityDto) SetShowConsole(v bool) {
	o.ShowConsole = v
}

// GetShelve returns the Shelve field value
func (o *StandaloneVisibilityDto) GetShelve() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Shelve
}

// GetShelveOk returns a tuple with the Shelve field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetShelveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shelve, true
}

// SetShelve sets field value
func (o *StandaloneVisibilityDto) SetShelve(v bool) {
	o.Shelve = v
}

// GetUnshelve returns the Unshelve field value
func (o *StandaloneVisibilityDto) GetUnshelve() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Unshelve
}

// GetUnshelveOk returns a tuple with the Unshelve field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetUnshelveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unshelve, true
}

// SetUnshelve sets field value
func (o *StandaloneVisibilityDto) SetUnshelve(v bool) {
	o.Unshelve = v
}

// GetStart returns the Start field value
func (o *StandaloneVisibilityDto) GetStart() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetStartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *StandaloneVisibilityDto) SetStart(v bool) {
	o.Start = v
}

// GetStop returns the Stop field value
func (o *StandaloneVisibilityDto) GetStop() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Stop
}

// GetStopOk returns a tuple with the Stop field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetStopOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stop, true
}

// SetStop sets field value
func (o *StandaloneVisibilityDto) SetStop(v bool) {
	o.Stop = v
}

// GetReboot returns the Reboot field value
func (o *StandaloneVisibilityDto) GetReboot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value
// and a boolean to check if the value has been set.
func (o *StandaloneVisibilityDto) GetRebootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reboot, true
}

// SetReboot sets field value
func (o *StandaloneVisibilityDto) SetReboot(v bool) {
	o.Reboot = v
}

func (o StandaloneVisibilityDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandaloneVisibilityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["showStatus"] = o.ShowStatus
	toSerialize["showConsole"] = o.ShowConsole
	toSerialize["shelve"] = o.Shelve
	toSerialize["unshelve"] = o.Unshelve
	toSerialize["start"] = o.Start
	toSerialize["stop"] = o.Stop
	toSerialize["reboot"] = o.Reboot
	return toSerialize, nil
}

func (o *StandaloneVisibilityDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"showStatus",
		"showConsole",
		"shelve",
		"unshelve",
		"start",
		"stop",
		"reboot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandaloneVisibilityDto := _StandaloneVisibilityDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandaloneVisibilityDto)

	if err != nil {
		return err
	}

	*o = StandaloneVisibilityDto(varStandaloneVisibilityDto)

	return err
}

type NullableStandaloneVisibilityDto struct {
	value *StandaloneVisibilityDto
	isSet bool
}

func (v NullableStandaloneVisibilityDto) Get() *StandaloneVisibilityDto {
	return v.value
}

func (v *NullableStandaloneVisibilityDto) Set(val *StandaloneVisibilityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStandaloneVisibilityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStandaloneVisibilityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandaloneVisibilityDto(val *StandaloneVisibilityDto) *NullableStandaloneVisibilityDto {
	return &NullableStandaloneVisibilityDto{value: val, isSet: true}
}

func (v NullableStandaloneVisibilityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandaloneVisibilityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


