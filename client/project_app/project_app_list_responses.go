// Code generated by go-swagger; DO NOT EDIT.

package project_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectAppListReader is a Reader for the ProjectAppList structure.
type ProjectAppListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectAppListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectAppListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectAppListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectAppListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectAppListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectAppListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectAppListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectAppListOK creates a ProjectAppListOK with default headers values
func NewProjectAppListOK() *ProjectAppListOK {
	return &ProjectAppListOK{}
}

/*
ProjectAppListOK describes a response with status code 200, with default header values.

Success
*/
type ProjectAppListOK struct {
	Payload *ProjectAppListOKBody
}

// IsSuccess returns true when this project app list o k response has a 2xx status code
func (o *ProjectAppListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project app list o k response has a 3xx status code
func (o *ProjectAppListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list o k response has a 4xx status code
func (o *ProjectAppListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project app list o k response has a 5xx status code
func (o *ProjectAppListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project app list o k response a status code equal to that given
func (o *ProjectAppListOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectAppListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListOK  %+v", 200, o.Payload)
}

func (o *ProjectAppListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListOK  %+v", 200, o.Payload)
}

func (o *ProjectAppListOK) GetPayload() *ProjectAppListOKBody {
	return o.Payload
}

func (o *ProjectAppListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppListBadRequest creates a ProjectAppListBadRequest with default headers values
func NewProjectAppListBadRequest() *ProjectAppListBadRequest {
	return &ProjectAppListBadRequest{}
}

/*
ProjectAppListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectAppListBadRequest struct {
	Payload []*ProjectAppListBadRequestBodyItems0
}

// IsSuccess returns true when this project app list bad request response has a 2xx status code
func (o *ProjectAppListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app list bad request response has a 3xx status code
func (o *ProjectAppListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list bad request response has a 4xx status code
func (o *ProjectAppListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app list bad request response has a 5xx status code
func (o *ProjectAppListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project app list bad request response a status code equal to that given
func (o *ProjectAppListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectAppListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectAppListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectAppListBadRequest) GetPayload() []*ProjectAppListBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectAppListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppListUnauthorized creates a ProjectAppListUnauthorized with default headers values
func NewProjectAppListUnauthorized() *ProjectAppListUnauthorized {
	return &ProjectAppListUnauthorized{}
}

/*
ProjectAppListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectAppListUnauthorized struct {
	Payload *ProjectAppListUnauthorizedBody
}

// IsSuccess returns true when this project app list unauthorized response has a 2xx status code
func (o *ProjectAppListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app list unauthorized response has a 3xx status code
func (o *ProjectAppListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list unauthorized response has a 4xx status code
func (o *ProjectAppListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app list unauthorized response has a 5xx status code
func (o *ProjectAppListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project app list unauthorized response a status code equal to that given
func (o *ProjectAppListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectAppListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectAppListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectAppListUnauthorized) GetPayload() *ProjectAppListUnauthorizedBody {
	return o.Payload
}

func (o *ProjectAppListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppListForbidden creates a ProjectAppListForbidden with default headers values
func NewProjectAppListForbidden() *ProjectAppListForbidden {
	return &ProjectAppListForbidden{}
}

/*
ProjectAppListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectAppListForbidden struct {
	Payload *ProjectAppListForbiddenBody
}

// IsSuccess returns true when this project app list forbidden response has a 2xx status code
func (o *ProjectAppListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app list forbidden response has a 3xx status code
func (o *ProjectAppListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list forbidden response has a 4xx status code
func (o *ProjectAppListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app list forbidden response has a 5xx status code
func (o *ProjectAppListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project app list forbidden response a status code equal to that given
func (o *ProjectAppListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectAppListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectAppListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectAppListForbidden) GetPayload() *ProjectAppListForbiddenBody {
	return o.Payload
}

func (o *ProjectAppListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppListNotFound creates a ProjectAppListNotFound with default headers values
func NewProjectAppListNotFound() *ProjectAppListNotFound {
	return &ProjectAppListNotFound{}
}

/*
ProjectAppListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectAppListNotFound struct {
	Payload *ProjectAppListNotFoundBody
}

// IsSuccess returns true when this project app list not found response has a 2xx status code
func (o *ProjectAppListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app list not found response has a 3xx status code
func (o *ProjectAppListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list not found response has a 4xx status code
func (o *ProjectAppListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app list not found response has a 5xx status code
func (o *ProjectAppListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project app list not found response a status code equal to that given
func (o *ProjectAppListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectAppListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectAppListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectAppListNotFound) GetPayload() *ProjectAppListNotFoundBody {
	return o.Payload
}

func (o *ProjectAppListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppListInternalServerError creates a ProjectAppListInternalServerError with default headers values
func NewProjectAppListInternalServerError() *ProjectAppListInternalServerError {
	return &ProjectAppListInternalServerError{}
}

/*
ProjectAppListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectAppListInternalServerError struct {
}

// IsSuccess returns true when this project app list internal server error response has a 2xx status code
func (o *ProjectAppListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app list internal server error response has a 3xx status code
func (o *ProjectAppListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app list internal server error response has a 4xx status code
func (o *ProjectAppListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project app list internal server error response has a 5xx status code
func (o *ProjectAppListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project app list internal server error response a status code equal to that given
func (o *ProjectAppListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectAppListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListInternalServerError ", 500)
}

func (o *ProjectAppListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectApp/list][%d] projectAppListInternalServerError ", 500)
}

func (o *ProjectAppListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectAppListBadRequestBodyItems0 project app list bad request body items0
swagger:model ProjectAppListBadRequestBodyItems0
*/
type ProjectAppListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project app list bad request body items0
func (o *ProjectAppListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app list bad request body items0 based on context it is used
func (o *ProjectAppListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectAppListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppListForbiddenBody project app list forbidden body
swagger:model ProjectAppListForbiddenBody
*/
type ProjectAppListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app list forbidden body
func (o *ProjectAppListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app list forbidden body based on context it is used
func (o *ProjectAppListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppListNotFoundBody project app list not found body
swagger:model ProjectAppListNotFoundBody
*/
type ProjectAppListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app list not found body
func (o *ProjectAppListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app list not found body based on context it is used
func (o *ProjectAppListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppListOKBody project app list o k body
swagger:model ProjectAppListOKBody
*/
type ProjectAppListOKBody struct {

	// data
	Data []*ProjectAppListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this project app list o k body
func (o *ProjectAppListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectAppListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectAppListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectAppListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project app list o k body based on the context it is used
func (o *ProjectAppListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectAppListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectAppListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectAppListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppListOKBodyDataItems0 project app list o k body data items0
swagger:model ProjectAppListOKBodyDataItems0
*/
type ProjectAppListOKBodyDataItems0 struct {

	// app repo name
	AppRepoName string `json:"appRepoName,omitempty"`

	// auto sync
	AutoSync bool `json:"autoSync"`

	// catalog app name
	CatalogAppName string `json:"catalogAppName,omitempty"`

	// catalog Id
	CatalogID int32 `json:"catalogId,omitempty"`

	// catalog name
	CatalogName string `json:"catalogName,omitempty"`

	// created
	Created string `json:"created,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this project app list o k body data items0
func (o *ProjectAppListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app list o k body data items0 based on context it is used
func (o *ProjectAppListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectAppListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppListUnauthorizedBody project app list unauthorized body
swagger:model ProjectAppListUnauthorizedBody
*/
type ProjectAppListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app list unauthorized body
func (o *ProjectAppListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app list unauthorized body based on context it is used
func (o *ProjectAppListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
