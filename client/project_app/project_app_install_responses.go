// Code generated by go-swagger; DO NOT EDIT.

package project_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectAppInstallReader is a Reader for the ProjectAppInstall structure.
type ProjectAppInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectAppInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectAppInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectAppInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectAppInstallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectAppInstallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectAppInstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectAppInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectAppInstallOK creates a ProjectAppInstallOK with default headers values
func NewProjectAppInstallOK() *ProjectAppInstallOK {
	return &ProjectAppInstallOK{}
}

/*
ProjectAppInstallOK describes a response with status code 200, with default header values.

Success
*/
type ProjectAppInstallOK struct {
	Payload *ProjectAppInstallOKBody
}

// IsSuccess returns true when this project app install o k response has a 2xx status code
func (o *ProjectAppInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project app install o k response has a 3xx status code
func (o *ProjectAppInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install o k response has a 4xx status code
func (o *ProjectAppInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project app install o k response has a 5xx status code
func (o *ProjectAppInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project app install o k response a status code equal to that given
func (o *ProjectAppInstallOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectAppInstallOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallOK  %+v", 200, o.Payload)
}

func (o *ProjectAppInstallOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallOK  %+v", 200, o.Payload)
}

func (o *ProjectAppInstallOK) GetPayload() *ProjectAppInstallOKBody {
	return o.Payload
}

func (o *ProjectAppInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppInstallOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppInstallBadRequest creates a ProjectAppInstallBadRequest with default headers values
func NewProjectAppInstallBadRequest() *ProjectAppInstallBadRequest {
	return &ProjectAppInstallBadRequest{}
}

/*
ProjectAppInstallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectAppInstallBadRequest struct {
	Payload []*ProjectAppInstallBadRequestBodyItems0
}

// IsSuccess returns true when this project app install bad request response has a 2xx status code
func (o *ProjectAppInstallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app install bad request response has a 3xx status code
func (o *ProjectAppInstallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install bad request response has a 4xx status code
func (o *ProjectAppInstallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app install bad request response has a 5xx status code
func (o *ProjectAppInstallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project app install bad request response a status code equal to that given
func (o *ProjectAppInstallBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectAppInstallBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectAppInstallBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectAppInstallBadRequest) GetPayload() []*ProjectAppInstallBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectAppInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppInstallUnauthorized creates a ProjectAppInstallUnauthorized with default headers values
func NewProjectAppInstallUnauthorized() *ProjectAppInstallUnauthorized {
	return &ProjectAppInstallUnauthorized{}
}

/*
ProjectAppInstallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectAppInstallUnauthorized struct {
	Payload *ProjectAppInstallUnauthorizedBody
}

// IsSuccess returns true when this project app install unauthorized response has a 2xx status code
func (o *ProjectAppInstallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app install unauthorized response has a 3xx status code
func (o *ProjectAppInstallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install unauthorized response has a 4xx status code
func (o *ProjectAppInstallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app install unauthorized response has a 5xx status code
func (o *ProjectAppInstallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project app install unauthorized response a status code equal to that given
func (o *ProjectAppInstallUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectAppInstallUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectAppInstallUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectAppInstallUnauthorized) GetPayload() *ProjectAppInstallUnauthorizedBody {
	return o.Payload
}

func (o *ProjectAppInstallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppInstallUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppInstallForbidden creates a ProjectAppInstallForbidden with default headers values
func NewProjectAppInstallForbidden() *ProjectAppInstallForbidden {
	return &ProjectAppInstallForbidden{}
}

/*
ProjectAppInstallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectAppInstallForbidden struct {
	Payload *ProjectAppInstallForbiddenBody
}

// IsSuccess returns true when this project app install forbidden response has a 2xx status code
func (o *ProjectAppInstallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app install forbidden response has a 3xx status code
func (o *ProjectAppInstallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install forbidden response has a 4xx status code
func (o *ProjectAppInstallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app install forbidden response has a 5xx status code
func (o *ProjectAppInstallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project app install forbidden response a status code equal to that given
func (o *ProjectAppInstallForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectAppInstallForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallForbidden  %+v", 403, o.Payload)
}

func (o *ProjectAppInstallForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallForbidden  %+v", 403, o.Payload)
}

func (o *ProjectAppInstallForbidden) GetPayload() *ProjectAppInstallForbiddenBody {
	return o.Payload
}

func (o *ProjectAppInstallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppInstallForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppInstallNotFound creates a ProjectAppInstallNotFound with default headers values
func NewProjectAppInstallNotFound() *ProjectAppInstallNotFound {
	return &ProjectAppInstallNotFound{}
}

/*
ProjectAppInstallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectAppInstallNotFound struct {
	Payload *ProjectAppInstallNotFoundBody
}

// IsSuccess returns true when this project app install not found response has a 2xx status code
func (o *ProjectAppInstallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app install not found response has a 3xx status code
func (o *ProjectAppInstallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install not found response has a 4xx status code
func (o *ProjectAppInstallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project app install not found response has a 5xx status code
func (o *ProjectAppInstallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project app install not found response a status code equal to that given
func (o *ProjectAppInstallNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectAppInstallNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallNotFound  %+v", 404, o.Payload)
}

func (o *ProjectAppInstallNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallNotFound  %+v", 404, o.Payload)
}

func (o *ProjectAppInstallNotFound) GetPayload() *ProjectAppInstallNotFoundBody {
	return o.Payload
}

func (o *ProjectAppInstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectAppInstallNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectAppInstallInternalServerError creates a ProjectAppInstallInternalServerError with default headers values
func NewProjectAppInstallInternalServerError() *ProjectAppInstallInternalServerError {
	return &ProjectAppInstallInternalServerError{}
}

/*
ProjectAppInstallInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectAppInstallInternalServerError struct {
}

// IsSuccess returns true when this project app install internal server error response has a 2xx status code
func (o *ProjectAppInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project app install internal server error response has a 3xx status code
func (o *ProjectAppInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project app install internal server error response has a 4xx status code
func (o *ProjectAppInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project app install internal server error response has a 5xx status code
func (o *ProjectAppInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project app install internal server error response a status code equal to that given
func (o *ProjectAppInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectAppInstallInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallInternalServerError ", 500)
}

func (o *ProjectAppInstallInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectApp/install][%d] projectAppInstallInternalServerError ", 500)
}

func (o *ProjectAppInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectAppInstallBadRequestBodyItems0 project app install bad request body items0
swagger:model ProjectAppInstallBadRequestBodyItems0
*/
type ProjectAppInstallBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project app install bad request body items0
func (o *ProjectAppInstallBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install bad request body items0 based on context it is used
func (o *ProjectAppInstallBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallBody project app install body
swagger:model ProjectAppInstallBody
*/
type ProjectAppInstallBody struct {

	// auto sync
	AutoSync bool `json:"autoSync"`

	// catalog app Id
	CatalogAppID int32 `json:"catalogAppId,omitempty"`

	// extra values
	ExtraValues string `json:"extraValues,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// parameters
	Parameters []*ProjectAppInstallParamsBodyParametersItems0 `json:"parameters"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`
}

// Validate validates this project app install body
func (o *ProjectAppInstallBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectAppInstallBody) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(o.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(o.Parameters); i++ {
		if swag.IsZero(o.Parameters[i]) { // not required
			continue
		}

		if o.Parameters[i] != nil {
			if err := o.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project app install body based on the context it is used
func (o *ProjectAppInstallBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectAppInstallBody) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Parameters); i++ {

		if o.Parameters[i] != nil {
			if err := o.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallForbiddenBody project app install forbidden body
swagger:model ProjectAppInstallForbiddenBody
*/
type ProjectAppInstallForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app install forbidden body
func (o *ProjectAppInstallForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install forbidden body based on context it is used
func (o *ProjectAppInstallForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallNotFoundBody project app install not found body
swagger:model ProjectAppInstallNotFoundBody
*/
type ProjectAppInstallNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app install not found body
func (o *ProjectAppInstallNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install not found body based on context it is used
func (o *ProjectAppInstallNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallOKBody project app install o k body
swagger:model ProjectAppInstallOKBody
*/
type ProjectAppInstallOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// is error
	IsError bool `json:"isError"`

	// message
	Message string `json:"message,omitempty"`

	// result
	Result interface{} `json:"result,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this project app install o k body
func (o *ProjectAppInstallOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install o k body based on context it is used
func (o *ProjectAppInstallOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallParamsBodyParametersItems0 project app install params body parameters items0
swagger:model ProjectAppInstallParamsBodyParametersItems0
*/
type ProjectAppInstallParamsBodyParametersItems0 struct {

	// is changeable
	IsChangeable bool `json:"isChangeable"`

	// is readonly
	IsReadonly bool `json:"isReadonly"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this project app install params body parameters items0
func (o *ProjectAppInstallParamsBodyParametersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install params body parameters items0 based on context it is used
func (o *ProjectAppInstallParamsBodyParametersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallParamsBodyParametersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallParamsBodyParametersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallParamsBodyParametersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectAppInstallUnauthorizedBody project app install unauthorized body
swagger:model ProjectAppInstallUnauthorizedBody
*/
type ProjectAppInstallUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project app install unauthorized body
func (o *ProjectAppInstallUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project app install unauthorized body based on context it is used
func (o *ProjectAppInstallUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectAppInstallUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectAppInstallUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectAppInstallUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
