// Code generated by go-swagger; DO NOT EDIT.

package project_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project app API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project app API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectAppAutoSync(params *ProjectAppAutoSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppAutoSyncOK, error)

	ProjectAppDetails(params *ProjectAppDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppDetailsOK, error)

	ProjectAppEditParams(params *ProjectAppEditParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppEditParamsOK, error)

	ProjectAppInstall(params *ProjectAppInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppInstallOK, error)

	ProjectAppList(params *ProjectAppListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppListOK, error)

	ProjectAppLockManager(params *ProjectAppLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppLockManagerOK, error)

	ProjectAppSync(params *ProjectAppSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppSyncOK, error)

	ProjectAppUninstall(params *ProjectAppUninstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppUninstallOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProjectAppAutoSync autos sync management
*/
func (a *Client) ProjectAppAutoSync(params *ProjectAppAutoSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppAutoSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppAutoSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_AutoSync",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectApp/autosync",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppAutoSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppAutoSyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_AutoSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppDetails projects app details
*/
func (a *Client) ProjectAppDetails(params *ProjectAppDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_Details",
		Method:             "GET",
		PathPattern:        "/api/v{v}/ProjectApp/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_Details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppEditParams edits project app params
*/
func (a *Client) ProjectAppEditParams(params *ProjectAppEditParamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppEditParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppEditParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_EditParams",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectApp/edit-params",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppEditParamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppEditParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_EditParams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppInstall installs application
*/
func (a *Client) ProjectAppInstall(params *ProjectAppInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppInstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppInstallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_Install",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectApp/install",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppInstallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppInstallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_Install: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppList projects app list for organization
*/
func (a *Client) ProjectAppList(params *ProjectAppListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/ProjectApp/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppLockManager locks unlock project app
*/
func (a *Client) ProjectAppLockManager(params *ProjectAppLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_LockManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectApp/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppSync syncs application
*/
func (a *Client) ProjectAppSync(params *ProjectAppSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_Sync",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectApp/sync",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppSyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_Sync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectAppUninstall uninstalls application
*/
func (a *Client) ProjectAppUninstall(params *ProjectAppUninstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectAppUninstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectAppUninstallParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectApp_Uninstall",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/ProjectApp/uninstall/{projectAppId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectAppUninstallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectAppUninstallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectApp_Uninstall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
