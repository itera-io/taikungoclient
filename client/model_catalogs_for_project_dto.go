/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsForProjectDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsForProjectDto{}

// CatalogsForProjectDto struct for CatalogsForProjectDto
type CatalogsForProjectDto struct {
	CatalogId int32 `json:"catalogId"`
	CatalogName NullableString `json:"catalogName"`
	IsBound bool `json:"isBound"`
}

type _CatalogsForProjectDto CatalogsForProjectDto

// NewCatalogsForProjectDto instantiates a new CatalogsForProjectDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsForProjectDto(catalogId int32, catalogName NullableString, isBound bool) *CatalogsForProjectDto {
	this := CatalogsForProjectDto{}
	this.CatalogId = catalogId
	this.CatalogName = catalogName
	this.IsBound = isBound
	return &this
}

// NewCatalogsForProjectDtoWithDefaults instantiates a new CatalogsForProjectDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsForProjectDtoWithDefaults() *CatalogsForProjectDto {
	this := CatalogsForProjectDto{}
	return &this
}

// GetCatalogId returns the CatalogId field value
func (o *CatalogsForProjectDto) GetCatalogId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value
// and a boolean to check if the value has been set.
func (o *CatalogsForProjectDto) GetCatalogIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogId, true
}

// SetCatalogId sets field value
func (o *CatalogsForProjectDto) SetCatalogId(v int32) {
	o.CatalogId = v
}

// GetCatalogName returns the CatalogName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CatalogsForProjectDto) GetCatalogName() string {
	if o == nil || o.CatalogName.Get() == nil {
		var ret string
		return ret
	}

	return *o.CatalogName.Get()
}

// GetCatalogNameOk returns a tuple with the CatalogName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogsForProjectDto) GetCatalogNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogName.Get(), o.CatalogName.IsSet()
}

// SetCatalogName sets field value
func (o *CatalogsForProjectDto) SetCatalogName(v string) {
	o.CatalogName.Set(&v)
}

// GetIsBound returns the IsBound field value
func (o *CatalogsForProjectDto) GetIsBound() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBound
}

// GetIsBoundOk returns a tuple with the IsBound field value
// and a boolean to check if the value has been set.
func (o *CatalogsForProjectDto) GetIsBoundOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBound, true
}

// SetIsBound sets field value
func (o *CatalogsForProjectDto) SetIsBound(v bool) {
	o.IsBound = v
}

func (o CatalogsForProjectDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsForProjectDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalogId"] = o.CatalogId
	toSerialize["catalogName"] = o.CatalogName.Get()
	toSerialize["isBound"] = o.IsBound
	return toSerialize, nil
}

func (o *CatalogsForProjectDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalogId",
		"catalogName",
		"isBound",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsForProjectDto := _CatalogsForProjectDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsForProjectDto)

	if err != nil {
		return err
	}

	*o = CatalogsForProjectDto(varCatalogsForProjectDto)

	return err
}

type NullableCatalogsForProjectDto struct {
	value *CatalogsForProjectDto
	isSet bool
}

func (v NullableCatalogsForProjectDto) Get() *CatalogsForProjectDto {
	return v.value
}

func (v *NullableCatalogsForProjectDto) Set(val *CatalogsForProjectDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsForProjectDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsForProjectDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsForProjectDto(val *CatalogsForProjectDto) *NullableCatalogsForProjectDto {
	return &NullableCatalogsForProjectDto{value: val, isSet: true}
}

func (v NullableCatalogsForProjectDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsForProjectDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


