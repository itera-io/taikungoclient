/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the CDeleteBackupRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDeleteBackupRequestDto{}

// CDeleteBackupRequestDto struct for CDeleteBackupRequestDto
type CDeleteBackupRequestDto struct {
	MetadataName NullableString `json:"metadataName,omitempty"`
	CreatedAt    NullableTime   `json:"createdAt,omitempty"`
	BackupName   NullableString `json:"backupName,omitempty"`
	Namespace    NullableString `json:"namespace,omitempty"`
	Phase        NullableString `json:"phase,omitempty"`
}

// NewCDeleteBackupRequestDto instantiates a new CDeleteBackupRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDeleteBackupRequestDto() *CDeleteBackupRequestDto {
	this := CDeleteBackupRequestDto{}
	return &this
}

// NewCDeleteBackupRequestDtoWithDefaults instantiates a new CDeleteBackupRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDeleteBackupRequestDtoWithDefaults() *CDeleteBackupRequestDto {
	this := CDeleteBackupRequestDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDeleteBackupRequestDto) GetMetadataName() string {
	if o == nil || IsNil(o.MetadataName.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataName.Get()
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDeleteBackupRequestDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataName.Get(), o.MetadataName.IsSet()
}

// HasMetadataName returns a boolean if a field has been set.
func (o *CDeleteBackupRequestDto) HasMetadataName() bool {
	if o != nil && o.MetadataName.IsSet() {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given NullableString and assigns it to the MetadataName field.
func (o *CDeleteBackupRequestDto) SetMetadataName(v string) {
	o.MetadataName.Set(&v)
}

// SetMetadataNameNil sets the value for MetadataName to be an explicit nil
func (o *CDeleteBackupRequestDto) SetMetadataNameNil() {
	o.MetadataName.Set(nil)
}

// UnsetMetadataName ensures that no value is present for MetadataName, not even an explicit nil
func (o *CDeleteBackupRequestDto) UnsetMetadataName() {
	o.MetadataName.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDeleteBackupRequestDto) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDeleteBackupRequestDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CDeleteBackupRequestDto) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *CDeleteBackupRequestDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *CDeleteBackupRequestDto) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *CDeleteBackupRequestDto) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetBackupName returns the BackupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDeleteBackupRequestDto) GetBackupName() string {
	if o == nil || IsNil(o.BackupName.Get()) {
		var ret string
		return ret
	}
	return *o.BackupName.Get()
}

// GetBackupNameOk returns a tuple with the BackupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDeleteBackupRequestDto) GetBackupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupName.Get(), o.BackupName.IsSet()
}

// HasBackupName returns a boolean if a field has been set.
func (o *CDeleteBackupRequestDto) HasBackupName() bool {
	if o != nil && o.BackupName.IsSet() {
		return true
	}

	return false
}

// SetBackupName gets a reference to the given NullableString and assigns it to the BackupName field.
func (o *CDeleteBackupRequestDto) SetBackupName(v string) {
	o.BackupName.Set(&v)
}

// SetBackupNameNil sets the value for BackupName to be an explicit nil
func (o *CDeleteBackupRequestDto) SetBackupNameNil() {
	o.BackupName.Set(nil)
}

// UnsetBackupName ensures that no value is present for BackupName, not even an explicit nil
func (o *CDeleteBackupRequestDto) UnsetBackupName() {
	o.BackupName.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDeleteBackupRequestDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDeleteBackupRequestDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *CDeleteBackupRequestDto) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *CDeleteBackupRequestDto) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *CDeleteBackupRequestDto) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *CDeleteBackupRequestDto) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetPhase returns the Phase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDeleteBackupRequestDto) GetPhase() string {
	if o == nil || IsNil(o.Phase.Get()) {
		var ret string
		return ret
	}
	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDeleteBackupRequestDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// HasPhase returns a boolean if a field has been set.
func (o *CDeleteBackupRequestDto) HasPhase() bool {
	if o != nil && o.Phase.IsSet() {
		return true
	}

	return false
}

// SetPhase gets a reference to the given NullableString and assigns it to the Phase field.
func (o *CDeleteBackupRequestDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

// SetPhaseNil sets the value for Phase to be an explicit nil
func (o *CDeleteBackupRequestDto) SetPhaseNil() {
	o.Phase.Set(nil)
}

// UnsetPhase ensures that no value is present for Phase, not even an explicit nil
func (o *CDeleteBackupRequestDto) UnsetPhase() {
	o.Phase.Unset()
}

func (o CDeleteBackupRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDeleteBackupRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MetadataName.IsSet() {
		toSerialize["metadataName"] = o.MetadataName.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.BackupName.IsSet() {
		toSerialize["backupName"] = o.BackupName.Get()
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.Phase.IsSet() {
		toSerialize["phase"] = o.Phase.Get()
	}
	return toSerialize, nil
}

type NullableCDeleteBackupRequestDto struct {
	value *CDeleteBackupRequestDto
	isSet bool
}

func (v NullableCDeleteBackupRequestDto) Get() *CDeleteBackupRequestDto {
	return v.value
}

func (v *NullableCDeleteBackupRequestDto) Set(val *CDeleteBackupRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCDeleteBackupRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCDeleteBackupRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDeleteBackupRequestDto(val *CDeleteBackupRequestDto) *NullableCDeleteBackupRequestDto {
	return &NullableCDeleteBackupRequestDto{value: val, isSet: true}
}

func (v NullableCDeleteBackupRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDeleteBackupRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
