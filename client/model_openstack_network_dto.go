/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the OpenstackNetworkDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenstackNetworkDto{}

// OpenstackNetworkDto struct for OpenstackNetworkDto
type OpenstackNetworkDto struct {
	NetworkLimit           *int64 `json:"networkLimit,omitempty"`
	SubnetLimit            *int64 `json:"subnetLimit,omitempty"`
	FloatingIpLimit        *int64 `json:"floatingIpLimit,omitempty"`
	RouterLimit            *int64 `json:"routerLimit,omitempty"`
	SecurityGroupLimit     *int64 `json:"securityGroupLimit,omitempty"`
	SecurityGroupRuleLimit *int64 `json:"securityGroupRuleLimit,omitempty"`
	PortLimit              *int64 `json:"portLimit,omitempty"`
	NetworkUsed            *int64 `json:"networkUsed,omitempty"`
	SubnetUsed             *int64 `json:"subnetUsed,omitempty"`
	FloatingIpUsed         *int64 `json:"floatingIpUsed,omitempty"`
	RouterUsed             *int64 `json:"routerUsed,omitempty"`
	SecurityGroupUsed      *int64 `json:"securityGroupUsed,omitempty"`
	PortUsed               *int64 `json:"portUsed,omitempty"`
	SecurityGroupRuleUsed  *int64 `json:"securityGroupRuleUsed,omitempty"`
}

// NewOpenstackNetworkDto instantiates a new OpenstackNetworkDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenstackNetworkDto() *OpenstackNetworkDto {
	this := OpenstackNetworkDto{}
	return &this
}

// NewOpenstackNetworkDtoWithDefaults instantiates a new OpenstackNetworkDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenstackNetworkDtoWithDefaults() *OpenstackNetworkDto {
	this := OpenstackNetworkDto{}
	return &this
}

// GetNetworkLimit returns the NetworkLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetNetworkLimit() int64 {
	if o == nil || IsNil(o.NetworkLimit) {
		var ret int64
		return ret
	}
	return *o.NetworkLimit
}

// GetNetworkLimitOk returns a tuple with the NetworkLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetNetworkLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.NetworkLimit) {
		return nil, false
	}
	return o.NetworkLimit, true
}

// HasNetworkLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasNetworkLimit() bool {
	if o != nil && !IsNil(o.NetworkLimit) {
		return true
	}

	return false
}

// SetNetworkLimit gets a reference to the given int64 and assigns it to the NetworkLimit field.
func (o *OpenstackNetworkDto) SetNetworkLimit(v int64) {
	o.NetworkLimit = &v
}

// GetSubnetLimit returns the SubnetLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSubnetLimit() int64 {
	if o == nil || IsNil(o.SubnetLimit) {
		var ret int64
		return ret
	}
	return *o.SubnetLimit
}

// GetSubnetLimitOk returns a tuple with the SubnetLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSubnetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SubnetLimit) {
		return nil, false
	}
	return o.SubnetLimit, true
}

// HasSubnetLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSubnetLimit() bool {
	if o != nil && !IsNil(o.SubnetLimit) {
		return true
	}

	return false
}

// SetSubnetLimit gets a reference to the given int64 and assigns it to the SubnetLimit field.
func (o *OpenstackNetworkDto) SetSubnetLimit(v int64) {
	o.SubnetLimit = &v
}

// GetFloatingIpLimit returns the FloatingIpLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetFloatingIpLimit() int64 {
	if o == nil || IsNil(o.FloatingIpLimit) {
		var ret int64
		return ret
	}
	return *o.FloatingIpLimit
}

// GetFloatingIpLimitOk returns a tuple with the FloatingIpLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetFloatingIpLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.FloatingIpLimit) {
		return nil, false
	}
	return o.FloatingIpLimit, true
}

// HasFloatingIpLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasFloatingIpLimit() bool {
	if o != nil && !IsNil(o.FloatingIpLimit) {
		return true
	}

	return false
}

// SetFloatingIpLimit gets a reference to the given int64 and assigns it to the FloatingIpLimit field.
func (o *OpenstackNetworkDto) SetFloatingIpLimit(v int64) {
	o.FloatingIpLimit = &v
}

// GetRouterLimit returns the RouterLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetRouterLimit() int64 {
	if o == nil || IsNil(o.RouterLimit) {
		var ret int64
		return ret
	}
	return *o.RouterLimit
}

// GetRouterLimitOk returns a tuple with the RouterLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetRouterLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.RouterLimit) {
		return nil, false
	}
	return o.RouterLimit, true
}

// HasRouterLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasRouterLimit() bool {
	if o != nil && !IsNil(o.RouterLimit) {
		return true
	}

	return false
}

// SetRouterLimit gets a reference to the given int64 and assigns it to the RouterLimit field.
func (o *OpenstackNetworkDto) SetRouterLimit(v int64) {
	o.RouterLimit = &v
}

// GetSecurityGroupLimit returns the SecurityGroupLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSecurityGroupLimit() int64 {
	if o == nil || IsNil(o.SecurityGroupLimit) {
		var ret int64
		return ret
	}
	return *o.SecurityGroupLimit
}

// GetSecurityGroupLimitOk returns a tuple with the SecurityGroupLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSecurityGroupLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SecurityGroupLimit) {
		return nil, false
	}
	return o.SecurityGroupLimit, true
}

// HasSecurityGroupLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSecurityGroupLimit() bool {
	if o != nil && !IsNil(o.SecurityGroupLimit) {
		return true
	}

	return false
}

// SetSecurityGroupLimit gets a reference to the given int64 and assigns it to the SecurityGroupLimit field.
func (o *OpenstackNetworkDto) SetSecurityGroupLimit(v int64) {
	o.SecurityGroupLimit = &v
}

// GetSecurityGroupRuleLimit returns the SecurityGroupRuleLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSecurityGroupRuleLimit() int64 {
	if o == nil || IsNil(o.SecurityGroupRuleLimit) {
		var ret int64
		return ret
	}
	return *o.SecurityGroupRuleLimit
}

// GetSecurityGroupRuleLimitOk returns a tuple with the SecurityGroupRuleLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSecurityGroupRuleLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SecurityGroupRuleLimit) {
		return nil, false
	}
	return o.SecurityGroupRuleLimit, true
}

// HasSecurityGroupRuleLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSecurityGroupRuleLimit() bool {
	if o != nil && !IsNil(o.SecurityGroupRuleLimit) {
		return true
	}

	return false
}

// SetSecurityGroupRuleLimit gets a reference to the given int64 and assigns it to the SecurityGroupRuleLimit field.
func (o *OpenstackNetworkDto) SetSecurityGroupRuleLimit(v int64) {
	o.SecurityGroupRuleLimit = &v
}

// GetPortLimit returns the PortLimit field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetPortLimit() int64 {
	if o == nil || IsNil(o.PortLimit) {
		var ret int64
		return ret
	}
	return *o.PortLimit
}

// GetPortLimitOk returns a tuple with the PortLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetPortLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.PortLimit) {
		return nil, false
	}
	return o.PortLimit, true
}

// HasPortLimit returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasPortLimit() bool {
	if o != nil && !IsNil(o.PortLimit) {
		return true
	}

	return false
}

// SetPortLimit gets a reference to the given int64 and assigns it to the PortLimit field.
func (o *OpenstackNetworkDto) SetPortLimit(v int64) {
	o.PortLimit = &v
}

// GetNetworkUsed returns the NetworkUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetNetworkUsed() int64 {
	if o == nil || IsNil(o.NetworkUsed) {
		var ret int64
		return ret
	}
	return *o.NetworkUsed
}

// GetNetworkUsedOk returns a tuple with the NetworkUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetNetworkUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.NetworkUsed) {
		return nil, false
	}
	return o.NetworkUsed, true
}

// HasNetworkUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasNetworkUsed() bool {
	if o != nil && !IsNil(o.NetworkUsed) {
		return true
	}

	return false
}

// SetNetworkUsed gets a reference to the given int64 and assigns it to the NetworkUsed field.
func (o *OpenstackNetworkDto) SetNetworkUsed(v int64) {
	o.NetworkUsed = &v
}

// GetSubnetUsed returns the SubnetUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSubnetUsed() int64 {
	if o == nil || IsNil(o.SubnetUsed) {
		var ret int64
		return ret
	}
	return *o.SubnetUsed
}

// GetSubnetUsedOk returns a tuple with the SubnetUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSubnetUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.SubnetUsed) {
		return nil, false
	}
	return o.SubnetUsed, true
}

// HasSubnetUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSubnetUsed() bool {
	if o != nil && !IsNil(o.SubnetUsed) {
		return true
	}

	return false
}

// SetSubnetUsed gets a reference to the given int64 and assigns it to the SubnetUsed field.
func (o *OpenstackNetworkDto) SetSubnetUsed(v int64) {
	o.SubnetUsed = &v
}

// GetFloatingIpUsed returns the FloatingIpUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetFloatingIpUsed() int64 {
	if o == nil || IsNil(o.FloatingIpUsed) {
		var ret int64
		return ret
	}
	return *o.FloatingIpUsed
}

// GetFloatingIpUsedOk returns a tuple with the FloatingIpUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetFloatingIpUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.FloatingIpUsed) {
		return nil, false
	}
	return o.FloatingIpUsed, true
}

// HasFloatingIpUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasFloatingIpUsed() bool {
	if o != nil && !IsNil(o.FloatingIpUsed) {
		return true
	}

	return false
}

// SetFloatingIpUsed gets a reference to the given int64 and assigns it to the FloatingIpUsed field.
func (o *OpenstackNetworkDto) SetFloatingIpUsed(v int64) {
	o.FloatingIpUsed = &v
}

// GetRouterUsed returns the RouterUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetRouterUsed() int64 {
	if o == nil || IsNil(o.RouterUsed) {
		var ret int64
		return ret
	}
	return *o.RouterUsed
}

// GetRouterUsedOk returns a tuple with the RouterUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetRouterUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.RouterUsed) {
		return nil, false
	}
	return o.RouterUsed, true
}

// HasRouterUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasRouterUsed() bool {
	if o != nil && !IsNil(o.RouterUsed) {
		return true
	}

	return false
}

// SetRouterUsed gets a reference to the given int64 and assigns it to the RouterUsed field.
func (o *OpenstackNetworkDto) SetRouterUsed(v int64) {
	o.RouterUsed = &v
}

// GetSecurityGroupUsed returns the SecurityGroupUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSecurityGroupUsed() int64 {
	if o == nil || IsNil(o.SecurityGroupUsed) {
		var ret int64
		return ret
	}
	return *o.SecurityGroupUsed
}

// GetSecurityGroupUsedOk returns a tuple with the SecurityGroupUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSecurityGroupUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.SecurityGroupUsed) {
		return nil, false
	}
	return o.SecurityGroupUsed, true
}

// HasSecurityGroupUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSecurityGroupUsed() bool {
	if o != nil && !IsNil(o.SecurityGroupUsed) {
		return true
	}

	return false
}

// SetSecurityGroupUsed gets a reference to the given int64 and assigns it to the SecurityGroupUsed field.
func (o *OpenstackNetworkDto) SetSecurityGroupUsed(v int64) {
	o.SecurityGroupUsed = &v
}

// GetPortUsed returns the PortUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetPortUsed() int64 {
	if o == nil || IsNil(o.PortUsed) {
		var ret int64
		return ret
	}
	return *o.PortUsed
}

// GetPortUsedOk returns a tuple with the PortUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetPortUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.PortUsed) {
		return nil, false
	}
	return o.PortUsed, true
}

// HasPortUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasPortUsed() bool {
	if o != nil && !IsNil(o.PortUsed) {
		return true
	}

	return false
}

// SetPortUsed gets a reference to the given int64 and assigns it to the PortUsed field.
func (o *OpenstackNetworkDto) SetPortUsed(v int64) {
	o.PortUsed = &v
}

// GetSecurityGroupRuleUsed returns the SecurityGroupRuleUsed field value if set, zero value otherwise.
func (o *OpenstackNetworkDto) GetSecurityGroupRuleUsed() int64 {
	if o == nil || IsNil(o.SecurityGroupRuleUsed) {
		var ret int64
		return ret
	}
	return *o.SecurityGroupRuleUsed
}

// GetSecurityGroupRuleUsedOk returns a tuple with the SecurityGroupRuleUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenstackNetworkDto) GetSecurityGroupRuleUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.SecurityGroupRuleUsed) {
		return nil, false
	}
	return o.SecurityGroupRuleUsed, true
}

// HasSecurityGroupRuleUsed returns a boolean if a field has been set.
func (o *OpenstackNetworkDto) HasSecurityGroupRuleUsed() bool {
	if o != nil && !IsNil(o.SecurityGroupRuleUsed) {
		return true
	}

	return false
}

// SetSecurityGroupRuleUsed gets a reference to the given int64 and assigns it to the SecurityGroupRuleUsed field.
func (o *OpenstackNetworkDto) SetSecurityGroupRuleUsed(v int64) {
	o.SecurityGroupRuleUsed = &v
}

func (o OpenstackNetworkDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenstackNetworkDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkLimit) {
		toSerialize["networkLimit"] = o.NetworkLimit
	}
	if !IsNil(o.SubnetLimit) {
		toSerialize["subnetLimit"] = o.SubnetLimit
	}
	if !IsNil(o.FloatingIpLimit) {
		toSerialize["floatingIpLimit"] = o.FloatingIpLimit
	}
	if !IsNil(o.RouterLimit) {
		toSerialize["routerLimit"] = o.RouterLimit
	}
	if !IsNil(o.SecurityGroupLimit) {
		toSerialize["securityGroupLimit"] = o.SecurityGroupLimit
	}
	if !IsNil(o.SecurityGroupRuleLimit) {
		toSerialize["securityGroupRuleLimit"] = o.SecurityGroupRuleLimit
	}
	if !IsNil(o.PortLimit) {
		toSerialize["portLimit"] = o.PortLimit
	}
	if !IsNil(o.NetworkUsed) {
		toSerialize["networkUsed"] = o.NetworkUsed
	}
	if !IsNil(o.SubnetUsed) {
		toSerialize["subnetUsed"] = o.SubnetUsed
	}
	if !IsNil(o.FloatingIpUsed) {
		toSerialize["floatingIpUsed"] = o.FloatingIpUsed
	}
	if !IsNil(o.RouterUsed) {
		toSerialize["routerUsed"] = o.RouterUsed
	}
	if !IsNil(o.SecurityGroupUsed) {
		toSerialize["securityGroupUsed"] = o.SecurityGroupUsed
	}
	if !IsNil(o.PortUsed) {
		toSerialize["portUsed"] = o.PortUsed
	}
	if !IsNil(o.SecurityGroupRuleUsed) {
		toSerialize["securityGroupRuleUsed"] = o.SecurityGroupRuleUsed
	}
	return toSerialize, nil
}

type NullableOpenstackNetworkDto struct {
	value *OpenstackNetworkDto
	isSet bool
}

func (v NullableOpenstackNetworkDto) Get() *OpenstackNetworkDto {
	return v.value
}

func (v *NullableOpenstackNetworkDto) Set(val *OpenstackNetworkDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenstackNetworkDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenstackNetworkDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenstackNetworkDto(val *OpenstackNetworkDto) *NullableOpenstackNetworkDto {
	return &NullableOpenstackNetworkDto{value: val, isSet: true}
}

func (v NullableOpenstackNetworkDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenstackNetworkDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
