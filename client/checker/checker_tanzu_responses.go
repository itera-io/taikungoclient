// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CheckerTanzuReader is a Reader for the CheckerTanzu structure.
type CheckerTanzuReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerTanzuReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerTanzuOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerTanzuBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerTanzuUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerTanzuForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerTanzuNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerTanzuInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerTanzuOK creates a CheckerTanzuOK with default headers values
func NewCheckerTanzuOK() *CheckerTanzuOK {
	return &CheckerTanzuOK{}
}

/*
CheckerTanzuOK describes a response with status code 200, with default header values.

Success
*/
type CheckerTanzuOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this checker tanzu o k response has a 2xx status code
func (o *CheckerTanzuOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker tanzu o k response has a 3xx status code
func (o *CheckerTanzuOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu o k response has a 4xx status code
func (o *CheckerTanzuOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker tanzu o k response has a 5xx status code
func (o *CheckerTanzuOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker tanzu o k response a status code equal to that given
func (o *CheckerTanzuOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the checker tanzu o k response
func (o *CheckerTanzuOK) Code() int {
	return 200
}

func (o *CheckerTanzuOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuOK  %+v", 200, o.Payload)
}

func (o *CheckerTanzuOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuOK  %+v", 200, o.Payload)
}

func (o *CheckerTanzuOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CheckerTanzuOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerTanzuBadRequest creates a CheckerTanzuBadRequest with default headers values
func NewCheckerTanzuBadRequest() *CheckerTanzuBadRequest {
	return &CheckerTanzuBadRequest{}
}

/*
CheckerTanzuBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerTanzuBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this checker tanzu bad request response has a 2xx status code
func (o *CheckerTanzuBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker tanzu bad request response has a 3xx status code
func (o *CheckerTanzuBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu bad request response has a 4xx status code
func (o *CheckerTanzuBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker tanzu bad request response has a 5xx status code
func (o *CheckerTanzuBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker tanzu bad request response a status code equal to that given
func (o *CheckerTanzuBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the checker tanzu bad request response
func (o *CheckerTanzuBadRequest) Code() int {
	return 400
}

func (o *CheckerTanzuBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerTanzuBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerTanzuBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CheckerTanzuBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerTanzuUnauthorized creates a CheckerTanzuUnauthorized with default headers values
func NewCheckerTanzuUnauthorized() *CheckerTanzuUnauthorized {
	return &CheckerTanzuUnauthorized{}
}

/*
CheckerTanzuUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerTanzuUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this checker tanzu unauthorized response has a 2xx status code
func (o *CheckerTanzuUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker tanzu unauthorized response has a 3xx status code
func (o *CheckerTanzuUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu unauthorized response has a 4xx status code
func (o *CheckerTanzuUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker tanzu unauthorized response has a 5xx status code
func (o *CheckerTanzuUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker tanzu unauthorized response a status code equal to that given
func (o *CheckerTanzuUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the checker tanzu unauthorized response
func (o *CheckerTanzuUnauthorized) Code() int {
	return 401
}

func (o *CheckerTanzuUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerTanzuUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerTanzuUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CheckerTanzuUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerTanzuForbidden creates a CheckerTanzuForbidden with default headers values
func NewCheckerTanzuForbidden() *CheckerTanzuForbidden {
	return &CheckerTanzuForbidden{}
}

/*
CheckerTanzuForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerTanzuForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this checker tanzu forbidden response has a 2xx status code
func (o *CheckerTanzuForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker tanzu forbidden response has a 3xx status code
func (o *CheckerTanzuForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu forbidden response has a 4xx status code
func (o *CheckerTanzuForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker tanzu forbidden response has a 5xx status code
func (o *CheckerTanzuForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker tanzu forbidden response a status code equal to that given
func (o *CheckerTanzuForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the checker tanzu forbidden response
func (o *CheckerTanzuForbidden) Code() int {
	return 403
}

func (o *CheckerTanzuForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuForbidden  %+v", 403, o.Payload)
}

func (o *CheckerTanzuForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuForbidden  %+v", 403, o.Payload)
}

func (o *CheckerTanzuForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CheckerTanzuForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerTanzuNotFound creates a CheckerTanzuNotFound with default headers values
func NewCheckerTanzuNotFound() *CheckerTanzuNotFound {
	return &CheckerTanzuNotFound{}
}

/*
CheckerTanzuNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerTanzuNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this checker tanzu not found response has a 2xx status code
func (o *CheckerTanzuNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker tanzu not found response has a 3xx status code
func (o *CheckerTanzuNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu not found response has a 4xx status code
func (o *CheckerTanzuNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker tanzu not found response has a 5xx status code
func (o *CheckerTanzuNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker tanzu not found response a status code equal to that given
func (o *CheckerTanzuNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the checker tanzu not found response
func (o *CheckerTanzuNotFound) Code() int {
	return 404
}

func (o *CheckerTanzuNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuNotFound  %+v", 404, o.Payload)
}

func (o *CheckerTanzuNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuNotFound  %+v", 404, o.Payload)
}

func (o *CheckerTanzuNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CheckerTanzuNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerTanzuInternalServerError creates a CheckerTanzuInternalServerError with default headers values
func NewCheckerTanzuInternalServerError() *CheckerTanzuInternalServerError {
	return &CheckerTanzuInternalServerError{}
}

/*
CheckerTanzuInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerTanzuInternalServerError struct {
}

// IsSuccess returns true when this checker tanzu internal server error response has a 2xx status code
func (o *CheckerTanzuInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker tanzu internal server error response has a 3xx status code
func (o *CheckerTanzuInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker tanzu internal server error response has a 4xx status code
func (o *CheckerTanzuInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker tanzu internal server error response has a 5xx status code
func (o *CheckerTanzuInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker tanzu internal server error response a status code equal to that given
func (o *CheckerTanzuInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the checker tanzu internal server error response
func (o *CheckerTanzuInternalServerError) Code() int {
	return 500
}

func (o *CheckerTanzuInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuInternalServerError ", 500)
}

func (o *CheckerTanzuInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/tanzu][%d] checkerTanzuInternalServerError ", 500)
}

func (o *CheckerTanzuInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
