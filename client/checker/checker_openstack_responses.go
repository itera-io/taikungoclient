// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CheckerOpenstackReader is a Reader for the CheckerOpenstack structure.
type CheckerOpenstackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerOpenstackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerOpenstackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerOpenstackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerOpenstackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerOpenstackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerOpenstackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerOpenstackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerOpenstackOK creates a CheckerOpenstackOK with default headers values
func NewCheckerOpenstackOK() *CheckerOpenstackOK {
	return &CheckerOpenstackOK{}
}

/*
CheckerOpenstackOK describes a response with status code 200, with default header values.

Success
*/
type CheckerOpenstackOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this checker openstack o k response has a 2xx status code
func (o *CheckerOpenstackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker openstack o k response has a 3xx status code
func (o *CheckerOpenstackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack o k response has a 4xx status code
func (o *CheckerOpenstackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker openstack o k response has a 5xx status code
func (o *CheckerOpenstackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker openstack o k response a status code equal to that given
func (o *CheckerOpenstackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the checker openstack o k response
func (o *CheckerOpenstackOK) Code() int {
	return 200
}

func (o *CheckerOpenstackOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackOK  %+v", 200, o.Payload)
}

func (o *CheckerOpenstackOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackOK  %+v", 200, o.Payload)
}

func (o *CheckerOpenstackOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CheckerOpenstackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerOpenstackBadRequest creates a CheckerOpenstackBadRequest with default headers values
func NewCheckerOpenstackBadRequest() *CheckerOpenstackBadRequest {
	return &CheckerOpenstackBadRequest{}
}

/*
CheckerOpenstackBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerOpenstackBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this checker openstack bad request response has a 2xx status code
func (o *CheckerOpenstackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker openstack bad request response has a 3xx status code
func (o *CheckerOpenstackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack bad request response has a 4xx status code
func (o *CheckerOpenstackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker openstack bad request response has a 5xx status code
func (o *CheckerOpenstackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker openstack bad request response a status code equal to that given
func (o *CheckerOpenstackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the checker openstack bad request response
func (o *CheckerOpenstackBadRequest) Code() int {
	return 400
}

func (o *CheckerOpenstackBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerOpenstackBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerOpenstackBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerOpenstackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerOpenstackUnauthorized creates a CheckerOpenstackUnauthorized with default headers values
func NewCheckerOpenstackUnauthorized() *CheckerOpenstackUnauthorized {
	return &CheckerOpenstackUnauthorized{}
}

/*
CheckerOpenstackUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerOpenstackUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this checker openstack unauthorized response has a 2xx status code
func (o *CheckerOpenstackUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker openstack unauthorized response has a 3xx status code
func (o *CheckerOpenstackUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack unauthorized response has a 4xx status code
func (o *CheckerOpenstackUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker openstack unauthorized response has a 5xx status code
func (o *CheckerOpenstackUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker openstack unauthorized response a status code equal to that given
func (o *CheckerOpenstackUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the checker openstack unauthorized response
func (o *CheckerOpenstackUnauthorized) Code() int {
	return 401
}

func (o *CheckerOpenstackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerOpenstackUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerOpenstackUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerOpenstackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerOpenstackForbidden creates a CheckerOpenstackForbidden with default headers values
func NewCheckerOpenstackForbidden() *CheckerOpenstackForbidden {
	return &CheckerOpenstackForbidden{}
}

/*
CheckerOpenstackForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerOpenstackForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this checker openstack forbidden response has a 2xx status code
func (o *CheckerOpenstackForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker openstack forbidden response has a 3xx status code
func (o *CheckerOpenstackForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack forbidden response has a 4xx status code
func (o *CheckerOpenstackForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker openstack forbidden response has a 5xx status code
func (o *CheckerOpenstackForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker openstack forbidden response a status code equal to that given
func (o *CheckerOpenstackForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the checker openstack forbidden response
func (o *CheckerOpenstackForbidden) Code() int {
	return 403
}

func (o *CheckerOpenstackForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackForbidden  %+v", 403, o.Payload)
}

func (o *CheckerOpenstackForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackForbidden  %+v", 403, o.Payload)
}

func (o *CheckerOpenstackForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerOpenstackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerOpenstackNotFound creates a CheckerOpenstackNotFound with default headers values
func NewCheckerOpenstackNotFound() *CheckerOpenstackNotFound {
	return &CheckerOpenstackNotFound{}
}

/*
CheckerOpenstackNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerOpenstackNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this checker openstack not found response has a 2xx status code
func (o *CheckerOpenstackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker openstack not found response has a 3xx status code
func (o *CheckerOpenstackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack not found response has a 4xx status code
func (o *CheckerOpenstackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker openstack not found response has a 5xx status code
func (o *CheckerOpenstackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker openstack not found response a status code equal to that given
func (o *CheckerOpenstackNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the checker openstack not found response
func (o *CheckerOpenstackNotFound) Code() int {
	return 404
}

func (o *CheckerOpenstackNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackNotFound  %+v", 404, o.Payload)
}

func (o *CheckerOpenstackNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackNotFound  %+v", 404, o.Payload)
}

func (o *CheckerOpenstackNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerOpenstackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerOpenstackInternalServerError creates a CheckerOpenstackInternalServerError with default headers values
func NewCheckerOpenstackInternalServerError() *CheckerOpenstackInternalServerError {
	return &CheckerOpenstackInternalServerError{}
}

/*
CheckerOpenstackInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerOpenstackInternalServerError struct {
}

// IsSuccess returns true when this checker openstack internal server error response has a 2xx status code
func (o *CheckerOpenstackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker openstack internal server error response has a 3xx status code
func (o *CheckerOpenstackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker openstack internal server error response has a 4xx status code
func (o *CheckerOpenstackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker openstack internal server error response has a 5xx status code
func (o *CheckerOpenstackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker openstack internal server error response a status code equal to that given
func (o *CheckerOpenstackInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the checker openstack internal server error response
func (o *CheckerOpenstackInternalServerError) Code() int {
	return 500
}

func (o *CheckerOpenstackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackInternalServerError ", 500)
}

func (o *CheckerOpenstackInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/openstack][%d] checkerOpenstackInternalServerError ", 500)
}

func (o *CheckerOpenstackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
