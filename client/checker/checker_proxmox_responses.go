// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CheckerProxmoxReader is a Reader for the CheckerProxmox structure.
type CheckerProxmoxReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerProxmoxReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerProxmoxOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerProxmoxBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerProxmoxUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerProxmoxForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerProxmoxNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerProxmoxInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerProxmoxOK creates a CheckerProxmoxOK with default headers values
func NewCheckerProxmoxOK() *CheckerProxmoxOK {
	return &CheckerProxmoxOK{}
}

/*
CheckerProxmoxOK describes a response with status code 200, with default header values.

Success
*/
type CheckerProxmoxOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this checker proxmox o k response has a 2xx status code
func (o *CheckerProxmoxOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker proxmox o k response has a 3xx status code
func (o *CheckerProxmoxOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox o k response has a 4xx status code
func (o *CheckerProxmoxOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker proxmox o k response has a 5xx status code
func (o *CheckerProxmoxOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker proxmox o k response a status code equal to that given
func (o *CheckerProxmoxOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the checker proxmox o k response
func (o *CheckerProxmoxOK) Code() int {
	return 200
}

func (o *CheckerProxmoxOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxOK  %+v", 200, o.Payload)
}

func (o *CheckerProxmoxOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxOK  %+v", 200, o.Payload)
}

func (o *CheckerProxmoxOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CheckerProxmoxOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerProxmoxBadRequest creates a CheckerProxmoxBadRequest with default headers values
func NewCheckerProxmoxBadRequest() *CheckerProxmoxBadRequest {
	return &CheckerProxmoxBadRequest{}
}

/*
CheckerProxmoxBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerProxmoxBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this checker proxmox bad request response has a 2xx status code
func (o *CheckerProxmoxBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker proxmox bad request response has a 3xx status code
func (o *CheckerProxmoxBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox bad request response has a 4xx status code
func (o *CheckerProxmoxBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker proxmox bad request response has a 5xx status code
func (o *CheckerProxmoxBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker proxmox bad request response a status code equal to that given
func (o *CheckerProxmoxBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the checker proxmox bad request response
func (o *CheckerProxmoxBadRequest) Code() int {
	return 400
}

func (o *CheckerProxmoxBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerProxmoxBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerProxmoxBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerProxmoxBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerProxmoxUnauthorized creates a CheckerProxmoxUnauthorized with default headers values
func NewCheckerProxmoxUnauthorized() *CheckerProxmoxUnauthorized {
	return &CheckerProxmoxUnauthorized{}
}

/*
CheckerProxmoxUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerProxmoxUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this checker proxmox unauthorized response has a 2xx status code
func (o *CheckerProxmoxUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker proxmox unauthorized response has a 3xx status code
func (o *CheckerProxmoxUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox unauthorized response has a 4xx status code
func (o *CheckerProxmoxUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker proxmox unauthorized response has a 5xx status code
func (o *CheckerProxmoxUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker proxmox unauthorized response a status code equal to that given
func (o *CheckerProxmoxUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the checker proxmox unauthorized response
func (o *CheckerProxmoxUnauthorized) Code() int {
	return 401
}

func (o *CheckerProxmoxUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerProxmoxUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerProxmoxUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerProxmoxUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerProxmoxForbidden creates a CheckerProxmoxForbidden with default headers values
func NewCheckerProxmoxForbidden() *CheckerProxmoxForbidden {
	return &CheckerProxmoxForbidden{}
}

/*
CheckerProxmoxForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerProxmoxForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this checker proxmox forbidden response has a 2xx status code
func (o *CheckerProxmoxForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker proxmox forbidden response has a 3xx status code
func (o *CheckerProxmoxForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox forbidden response has a 4xx status code
func (o *CheckerProxmoxForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker proxmox forbidden response has a 5xx status code
func (o *CheckerProxmoxForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker proxmox forbidden response a status code equal to that given
func (o *CheckerProxmoxForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the checker proxmox forbidden response
func (o *CheckerProxmoxForbidden) Code() int {
	return 403
}

func (o *CheckerProxmoxForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxForbidden  %+v", 403, o.Payload)
}

func (o *CheckerProxmoxForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxForbidden  %+v", 403, o.Payload)
}

func (o *CheckerProxmoxForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerProxmoxForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerProxmoxNotFound creates a CheckerProxmoxNotFound with default headers values
func NewCheckerProxmoxNotFound() *CheckerProxmoxNotFound {
	return &CheckerProxmoxNotFound{}
}

/*
CheckerProxmoxNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerProxmoxNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this checker proxmox not found response has a 2xx status code
func (o *CheckerProxmoxNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker proxmox not found response has a 3xx status code
func (o *CheckerProxmoxNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox not found response has a 4xx status code
func (o *CheckerProxmoxNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker proxmox not found response has a 5xx status code
func (o *CheckerProxmoxNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker proxmox not found response a status code equal to that given
func (o *CheckerProxmoxNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the checker proxmox not found response
func (o *CheckerProxmoxNotFound) Code() int {
	return 404
}

func (o *CheckerProxmoxNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxNotFound  %+v", 404, o.Payload)
}

func (o *CheckerProxmoxNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxNotFound  %+v", 404, o.Payload)
}

func (o *CheckerProxmoxNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerProxmoxNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerProxmoxInternalServerError creates a CheckerProxmoxInternalServerError with default headers values
func NewCheckerProxmoxInternalServerError() *CheckerProxmoxInternalServerError {
	return &CheckerProxmoxInternalServerError{}
}

/*
CheckerProxmoxInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerProxmoxInternalServerError struct {
}

// IsSuccess returns true when this checker proxmox internal server error response has a 2xx status code
func (o *CheckerProxmoxInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker proxmox internal server error response has a 3xx status code
func (o *CheckerProxmoxInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker proxmox internal server error response has a 4xx status code
func (o *CheckerProxmoxInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker proxmox internal server error response has a 5xx status code
func (o *CheckerProxmoxInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker proxmox internal server error response a status code equal to that given
func (o *CheckerProxmoxInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the checker proxmox internal server error response
func (o *CheckerProxmoxInternalServerError) Code() int {
	return 500
}

func (o *CheckerProxmoxInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxInternalServerError ", 500)
}

func (o *CheckerProxmoxInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/proxmox][%d] checkerProxmoxInternalServerError ", 500)
}

func (o *CheckerProxmoxInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
