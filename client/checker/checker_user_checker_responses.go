// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CheckerUserCheckerReader is a Reader for the CheckerUserChecker structure.
type CheckerUserCheckerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerUserCheckerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerUserCheckerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerUserCheckerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerUserCheckerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerUserCheckerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerUserCheckerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerUserCheckerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerUserCheckerOK creates a CheckerUserCheckerOK with default headers values
func NewCheckerUserCheckerOK() *CheckerUserCheckerOK {
	return &CheckerUserCheckerOK{}
}

/*
CheckerUserCheckerOK describes a response with status code 200, with default header values.

Success
*/
type CheckerUserCheckerOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this checker user checker o k response has a 2xx status code
func (o *CheckerUserCheckerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker user checker o k response has a 3xx status code
func (o *CheckerUserCheckerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker o k response has a 4xx status code
func (o *CheckerUserCheckerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker user checker o k response has a 5xx status code
func (o *CheckerUserCheckerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker user checker o k response a status code equal to that given
func (o *CheckerUserCheckerOK) IsCode(code int) bool {
	return code == 200
}

func (o *CheckerUserCheckerOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerOK  %+v", 200, o.Payload)
}

func (o *CheckerUserCheckerOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerOK  %+v", 200, o.Payload)
}

func (o *CheckerUserCheckerOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CheckerUserCheckerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerUserCheckerBadRequest creates a CheckerUserCheckerBadRequest with default headers values
func NewCheckerUserCheckerBadRequest() *CheckerUserCheckerBadRequest {
	return &CheckerUserCheckerBadRequest{}
}

/*
CheckerUserCheckerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerUserCheckerBadRequest struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker user checker bad request response has a 2xx status code
func (o *CheckerUserCheckerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker user checker bad request response has a 3xx status code
func (o *CheckerUserCheckerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker bad request response has a 4xx status code
func (o *CheckerUserCheckerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker user checker bad request response has a 5xx status code
func (o *CheckerUserCheckerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker user checker bad request response a status code equal to that given
func (o *CheckerUserCheckerBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CheckerUserCheckerBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerUserCheckerBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerUserCheckerBadRequest) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerUserCheckerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerUserCheckerUnauthorized creates a CheckerUserCheckerUnauthorized with default headers values
func NewCheckerUserCheckerUnauthorized() *CheckerUserCheckerUnauthorized {
	return &CheckerUserCheckerUnauthorized{}
}

/*
CheckerUserCheckerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerUserCheckerUnauthorized struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker user checker unauthorized response has a 2xx status code
func (o *CheckerUserCheckerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker user checker unauthorized response has a 3xx status code
func (o *CheckerUserCheckerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker unauthorized response has a 4xx status code
func (o *CheckerUserCheckerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker user checker unauthorized response has a 5xx status code
func (o *CheckerUserCheckerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker user checker unauthorized response a status code equal to that given
func (o *CheckerUserCheckerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CheckerUserCheckerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerUserCheckerUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerUserCheckerUnauthorized) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerUserCheckerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerUserCheckerForbidden creates a CheckerUserCheckerForbidden with default headers values
func NewCheckerUserCheckerForbidden() *CheckerUserCheckerForbidden {
	return &CheckerUserCheckerForbidden{}
}

/*
CheckerUserCheckerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerUserCheckerForbidden struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker user checker forbidden response has a 2xx status code
func (o *CheckerUserCheckerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker user checker forbidden response has a 3xx status code
func (o *CheckerUserCheckerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker forbidden response has a 4xx status code
func (o *CheckerUserCheckerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker user checker forbidden response has a 5xx status code
func (o *CheckerUserCheckerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker user checker forbidden response a status code equal to that given
func (o *CheckerUserCheckerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CheckerUserCheckerForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerForbidden  %+v", 403, o.Payload)
}

func (o *CheckerUserCheckerForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerForbidden  %+v", 403, o.Payload)
}

func (o *CheckerUserCheckerForbidden) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerUserCheckerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerUserCheckerNotFound creates a CheckerUserCheckerNotFound with default headers values
func NewCheckerUserCheckerNotFound() *CheckerUserCheckerNotFound {
	return &CheckerUserCheckerNotFound{}
}

/*
CheckerUserCheckerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerUserCheckerNotFound struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker user checker not found response has a 2xx status code
func (o *CheckerUserCheckerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker user checker not found response has a 3xx status code
func (o *CheckerUserCheckerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker not found response has a 4xx status code
func (o *CheckerUserCheckerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker user checker not found response has a 5xx status code
func (o *CheckerUserCheckerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker user checker not found response a status code equal to that given
func (o *CheckerUserCheckerNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CheckerUserCheckerNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerNotFound  %+v", 404, o.Payload)
}

func (o *CheckerUserCheckerNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerNotFound  %+v", 404, o.Payload)
}

func (o *CheckerUserCheckerNotFound) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerUserCheckerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerUserCheckerInternalServerError creates a CheckerUserCheckerInternalServerError with default headers values
func NewCheckerUserCheckerInternalServerError() *CheckerUserCheckerInternalServerError {
	return &CheckerUserCheckerInternalServerError{}
}

/*
CheckerUserCheckerInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerUserCheckerInternalServerError struct {
}

// IsSuccess returns true when this checker user checker internal server error response has a 2xx status code
func (o *CheckerUserCheckerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker user checker internal server error response has a 3xx status code
func (o *CheckerUserCheckerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker user checker internal server error response has a 4xx status code
func (o *CheckerUserCheckerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker user checker internal server error response has a 5xx status code
func (o *CheckerUserCheckerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker user checker internal server error response a status code equal to that given
func (o *CheckerUserCheckerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CheckerUserCheckerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerInternalServerError ", 500)
}

func (o *CheckerUserCheckerInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/user][%d] checkerUserCheckerInternalServerError ", 500)
}

func (o *CheckerUserCheckerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
