// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckerGoogleReader is a Reader for the CheckerGoogle structure.
type CheckerGoogleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerGoogleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerGoogleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerGoogleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerGoogleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerGoogleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerGoogleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerGoogleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerGoogleOK creates a CheckerGoogleOK with default headers values
func NewCheckerGoogleOK() *CheckerGoogleOK {
	return &CheckerGoogleOK{}
}

/*
CheckerGoogleOK describes a response with status code 200, with default header values.

Success
*/
type CheckerGoogleOK struct {
	Payload interface{}
}

// IsSuccess returns true when this checker google o k response has a 2xx status code
func (o *CheckerGoogleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker google o k response has a 3xx status code
func (o *CheckerGoogleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google o k response has a 4xx status code
func (o *CheckerGoogleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker google o k response has a 5xx status code
func (o *CheckerGoogleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker google o k response a status code equal to that given
func (o *CheckerGoogleOK) IsCode(code int) bool {
	return code == 200
}

func (o *CheckerGoogleOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleOK  %+v", 200, o.Payload)
}

func (o *CheckerGoogleOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleOK  %+v", 200, o.Payload)
}

func (o *CheckerGoogleOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CheckerGoogleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerGoogleBadRequest creates a CheckerGoogleBadRequest with default headers values
func NewCheckerGoogleBadRequest() *CheckerGoogleBadRequest {
	return &CheckerGoogleBadRequest{}
}

/*
CheckerGoogleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerGoogleBadRequest struct {
	Payload []*CheckerGoogleBadRequestBodyItems0
}

// IsSuccess returns true when this checker google bad request response has a 2xx status code
func (o *CheckerGoogleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker google bad request response has a 3xx status code
func (o *CheckerGoogleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google bad request response has a 4xx status code
func (o *CheckerGoogleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker google bad request response has a 5xx status code
func (o *CheckerGoogleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker google bad request response a status code equal to that given
func (o *CheckerGoogleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CheckerGoogleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerGoogleBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerGoogleBadRequest) GetPayload() []*CheckerGoogleBadRequestBodyItems0 {
	return o.Payload
}

func (o *CheckerGoogleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerGoogleUnauthorized creates a CheckerGoogleUnauthorized with default headers values
func NewCheckerGoogleUnauthorized() *CheckerGoogleUnauthorized {
	return &CheckerGoogleUnauthorized{}
}

/*
CheckerGoogleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerGoogleUnauthorized struct {
	Payload *CheckerGoogleUnauthorizedBody
}

// IsSuccess returns true when this checker google unauthorized response has a 2xx status code
func (o *CheckerGoogleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker google unauthorized response has a 3xx status code
func (o *CheckerGoogleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google unauthorized response has a 4xx status code
func (o *CheckerGoogleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker google unauthorized response has a 5xx status code
func (o *CheckerGoogleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker google unauthorized response a status code equal to that given
func (o *CheckerGoogleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CheckerGoogleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerGoogleUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerGoogleUnauthorized) GetPayload() *CheckerGoogleUnauthorizedBody {
	return o.Payload
}

func (o *CheckerGoogleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckerGoogleUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerGoogleForbidden creates a CheckerGoogleForbidden with default headers values
func NewCheckerGoogleForbidden() *CheckerGoogleForbidden {
	return &CheckerGoogleForbidden{}
}

/*
CheckerGoogleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerGoogleForbidden struct {
	Payload *CheckerGoogleForbiddenBody
}

// IsSuccess returns true when this checker google forbidden response has a 2xx status code
func (o *CheckerGoogleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker google forbidden response has a 3xx status code
func (o *CheckerGoogleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google forbidden response has a 4xx status code
func (o *CheckerGoogleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker google forbidden response has a 5xx status code
func (o *CheckerGoogleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker google forbidden response a status code equal to that given
func (o *CheckerGoogleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CheckerGoogleForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleForbidden  %+v", 403, o.Payload)
}

func (o *CheckerGoogleForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleForbidden  %+v", 403, o.Payload)
}

func (o *CheckerGoogleForbidden) GetPayload() *CheckerGoogleForbiddenBody {
	return o.Payload
}

func (o *CheckerGoogleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckerGoogleForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerGoogleNotFound creates a CheckerGoogleNotFound with default headers values
func NewCheckerGoogleNotFound() *CheckerGoogleNotFound {
	return &CheckerGoogleNotFound{}
}

/*
CheckerGoogleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerGoogleNotFound struct {
	Payload *CheckerGoogleNotFoundBody
}

// IsSuccess returns true when this checker google not found response has a 2xx status code
func (o *CheckerGoogleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker google not found response has a 3xx status code
func (o *CheckerGoogleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google not found response has a 4xx status code
func (o *CheckerGoogleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker google not found response has a 5xx status code
func (o *CheckerGoogleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker google not found response a status code equal to that given
func (o *CheckerGoogleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CheckerGoogleNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleNotFound  %+v", 404, o.Payload)
}

func (o *CheckerGoogleNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleNotFound  %+v", 404, o.Payload)
}

func (o *CheckerGoogleNotFound) GetPayload() *CheckerGoogleNotFoundBody {
	return o.Payload
}

func (o *CheckerGoogleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckerGoogleNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerGoogleInternalServerError creates a CheckerGoogleInternalServerError with default headers values
func NewCheckerGoogleInternalServerError() *CheckerGoogleInternalServerError {
	return &CheckerGoogleInternalServerError{}
}

/*
CheckerGoogleInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerGoogleInternalServerError struct {
}

// IsSuccess returns true when this checker google internal server error response has a 2xx status code
func (o *CheckerGoogleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker google internal server error response has a 3xx status code
func (o *CheckerGoogleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker google internal server error response has a 4xx status code
func (o *CheckerGoogleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker google internal server error response has a 5xx status code
func (o *CheckerGoogleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker google internal server error response a status code equal to that given
func (o *CheckerGoogleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CheckerGoogleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleInternalServerError ", 500)
}

func (o *CheckerGoogleInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/google][%d] checkerGoogleInternalServerError ", 500)
}

func (o *CheckerGoogleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CheckerGoogleBadRequestBodyItems0 checker google bad request body items0
swagger:model CheckerGoogleBadRequestBodyItems0
*/
type CheckerGoogleBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this checker google bad request body items0
func (o *CheckerGoogleBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checker google bad request body items0 based on context it is used
func (o *CheckerGoogleBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckerGoogleBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckerGoogleBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CheckerGoogleBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CheckerGoogleForbiddenBody checker google forbidden body
swagger:model CheckerGoogleForbiddenBody
*/
type CheckerGoogleForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this checker google forbidden body
func (o *CheckerGoogleForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checker google forbidden body based on context it is used
func (o *CheckerGoogleForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckerGoogleForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckerGoogleForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CheckerGoogleForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CheckerGoogleNotFoundBody checker google not found body
swagger:model CheckerGoogleNotFoundBody
*/
type CheckerGoogleNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this checker google not found body
func (o *CheckerGoogleNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checker google not found body based on context it is used
func (o *CheckerGoogleNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckerGoogleNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckerGoogleNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CheckerGoogleNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CheckerGoogleUnauthorizedBody checker google unauthorized body
swagger:model CheckerGoogleUnauthorizedBody
*/
type CheckerGoogleUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this checker google unauthorized body
func (o *CheckerGoogleUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checker google unauthorized body based on context it is used
func (o *CheckerGoogleUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckerGoogleUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckerGoogleUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CheckerGoogleUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
