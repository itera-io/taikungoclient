// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CheckerCidrReader is a Reader for the CheckerCidr structure.
type CheckerCidrReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckerCidrReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckerCidrOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckerCidrBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckerCidrUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckerCidrForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckerCidrNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckerCidrInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckerCidrOK creates a CheckerCidrOK with default headers values
func NewCheckerCidrOK() *CheckerCidrOK {
	return &CheckerCidrOK{}
}

/*
CheckerCidrOK describes a response with status code 200, with default header values.

Success
*/
type CheckerCidrOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this checker cidr o k response has a 2xx status code
func (o *CheckerCidrOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checker cidr o k response has a 3xx status code
func (o *CheckerCidrOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr o k response has a 4xx status code
func (o *CheckerCidrOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker cidr o k response has a 5xx status code
func (o *CheckerCidrOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checker cidr o k response a status code equal to that given
func (o *CheckerCidrOK) IsCode(code int) bool {
	return code == 200
}

func (o *CheckerCidrOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrOK  %+v", 200, o.Payload)
}

func (o *CheckerCidrOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrOK  %+v", 200, o.Payload)
}

func (o *CheckerCidrOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CheckerCidrOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerCidrBadRequest creates a CheckerCidrBadRequest with default headers values
func NewCheckerCidrBadRequest() *CheckerCidrBadRequest {
	return &CheckerCidrBadRequest{}
}

/*
CheckerCidrBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckerCidrBadRequest struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker cidr bad request response has a 2xx status code
func (o *CheckerCidrBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker cidr bad request response has a 3xx status code
func (o *CheckerCidrBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr bad request response has a 4xx status code
func (o *CheckerCidrBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker cidr bad request response has a 5xx status code
func (o *CheckerCidrBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this checker cidr bad request response a status code equal to that given
func (o *CheckerCidrBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CheckerCidrBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerCidrBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrBadRequest  %+v", 400, o.Payload)
}

func (o *CheckerCidrBadRequest) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerCidrBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerCidrUnauthorized creates a CheckerCidrUnauthorized with default headers values
func NewCheckerCidrUnauthorized() *CheckerCidrUnauthorized {
	return &CheckerCidrUnauthorized{}
}

/*
CheckerCidrUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckerCidrUnauthorized struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker cidr unauthorized response has a 2xx status code
func (o *CheckerCidrUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker cidr unauthorized response has a 3xx status code
func (o *CheckerCidrUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr unauthorized response has a 4xx status code
func (o *CheckerCidrUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker cidr unauthorized response has a 5xx status code
func (o *CheckerCidrUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this checker cidr unauthorized response a status code equal to that given
func (o *CheckerCidrUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CheckerCidrUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerCidrUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckerCidrUnauthorized) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerCidrUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerCidrForbidden creates a CheckerCidrForbidden with default headers values
func NewCheckerCidrForbidden() *CheckerCidrForbidden {
	return &CheckerCidrForbidden{}
}

/*
CheckerCidrForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckerCidrForbidden struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker cidr forbidden response has a 2xx status code
func (o *CheckerCidrForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker cidr forbidden response has a 3xx status code
func (o *CheckerCidrForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr forbidden response has a 4xx status code
func (o *CheckerCidrForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker cidr forbidden response has a 5xx status code
func (o *CheckerCidrForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this checker cidr forbidden response a status code equal to that given
func (o *CheckerCidrForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CheckerCidrForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrForbidden  %+v", 403, o.Payload)
}

func (o *CheckerCidrForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrForbidden  %+v", 403, o.Payload)
}

func (o *CheckerCidrForbidden) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerCidrForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerCidrNotFound creates a CheckerCidrNotFound with default headers values
func NewCheckerCidrNotFound() *CheckerCidrNotFound {
	return &CheckerCidrNotFound{}
}

/*
CheckerCidrNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckerCidrNotFound struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this checker cidr not found response has a 2xx status code
func (o *CheckerCidrNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker cidr not found response has a 3xx status code
func (o *CheckerCidrNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr not found response has a 4xx status code
func (o *CheckerCidrNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this checker cidr not found response has a 5xx status code
func (o *CheckerCidrNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this checker cidr not found response a status code equal to that given
func (o *CheckerCidrNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CheckerCidrNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrNotFound  %+v", 404, o.Payload)
}

func (o *CheckerCidrNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrNotFound  %+v", 404, o.Payload)
}

func (o *CheckerCidrNotFound) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CheckerCidrNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckerCidrInternalServerError creates a CheckerCidrInternalServerError with default headers values
func NewCheckerCidrInternalServerError() *CheckerCidrInternalServerError {
	return &CheckerCidrInternalServerError{}
}

/*
CheckerCidrInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CheckerCidrInternalServerError struct {
}

// IsSuccess returns true when this checker cidr internal server error response has a 2xx status code
func (o *CheckerCidrInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this checker cidr internal server error response has a 3xx status code
func (o *CheckerCidrInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checker cidr internal server error response has a 4xx status code
func (o *CheckerCidrInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this checker cidr internal server error response has a 5xx status code
func (o *CheckerCidrInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this checker cidr internal server error response a status code equal to that given
func (o *CheckerCidrInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CheckerCidrInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrInternalServerError ", 500)
}

func (o *CheckerCidrInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Checker/cidr][%d] checkerCidrInternalServerError ", 500)
}

func (o *CheckerCidrInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
