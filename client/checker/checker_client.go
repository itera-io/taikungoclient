// Code generated by go-swagger; DO NOT EDIT.

package checker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new checker API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for checker API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckerAws(params *CheckerAwsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAwsOK, error)

	CheckerAzure(params *CheckerAzureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAzureOK, error)

	CheckerAzureCPUQuota(params *CheckerAzureCPUQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAzureCPUQuotaOK, error)

	CheckerCidr(params *CheckerCidrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerCidrOK, error)

	CheckerCron(params *CheckerCronParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerCronOK, error)

	CheckerDNS(params *CheckerDNSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerDNSOK, error)

	CheckerNtp(params *CheckerNtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerNtpOK, error)

	CheckerOpenstack(params *CheckerOpenstackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackOK, error)

	CheckerOpenstackImage(params *CheckerOpenstackImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackImageOK, error)

	CheckerOpenstackTaikunLbImage(params *CheckerOpenstackTaikunLbImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackTaikunLbImageOK, error)

	CheckerPrometheus(params *CheckerPrometheusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerPrometheusOK, error)

	CheckerS3(params *CheckerS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerS3OK, error)

	CheckerSSH(params *CheckerSSHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerSSHOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckerAws checks aws credentials
*/
func (a *Client) CheckerAws(params *CheckerAwsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAwsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerAwsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Aws",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/aws",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerAwsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerAwsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Aws: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerAzure checks valid azure credentials
*/
func (a *Client) CheckerAzure(params *CheckerAzureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAzureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerAzureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Azure",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/azure",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerAzureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerAzureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Azure: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerAzureCPUQuota checks azure cpu quota limit
*/
func (a *Client) CheckerAzureCPUQuota(params *CheckerAzureCPUQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerAzureCPUQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerAzureCPUQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_AzureCpuQuota",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/azure/quota/cpu",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerAzureCPUQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerAzureCPUQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_AzureCpuQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerCidr checks valid cidr format
*/
func (a *Client) CheckerCidr(params *CheckerCidrParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerCidrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerCidrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Cidr",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/cidr",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerCidrReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerCidrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Cidr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerCron checks valid cron job format
*/
func (a *Client) CheckerCron(params *CheckerCronParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerCronOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerCronParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Cron",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/cron",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerCronReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerCronOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Cron: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerDNS checks valid dns format
*/
func (a *Client) CheckerDNS(params *CheckerDNSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Dns",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/dns",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Dns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerNtp checks valid ntp format
*/
func (a *Client) CheckerNtp(params *CheckerNtpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerNtpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerNtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Ntp",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/ntp",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerNtpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerNtpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Ntp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerOpenstack checks openstack credentials
*/
func (a *Client) CheckerOpenstack(params *CheckerOpenstackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerOpenstackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Openstack",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/openstack",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerOpenstackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerOpenstackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Openstack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerOpenstackImage checks openstack taikun image
*/
func (a *Client) CheckerOpenstackImage(params *CheckerOpenstackImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerOpenstackImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_OpenstackImage",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/openstack-image/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerOpenstackImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerOpenstackImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_OpenstackImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerOpenstackTaikunLbImage checks openstack taikun lb image
*/
func (a *Client) CheckerOpenstackTaikunLbImage(params *CheckerOpenstackTaikunLbImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerOpenstackTaikunLbImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerOpenstackTaikunLbImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_OpenstackTaikunLbImage",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/taikun-lb-image/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerOpenstackTaikunLbImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerOpenstackTaikunLbImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_OpenstackTaikunLbImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerPrometheus checks prometheus credentials
*/
func (a *Client) CheckerPrometheus(params *CheckerPrometheusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerPrometheusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerPrometheusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Prometheus",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/prometheus",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerPrometheusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerPrometheusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Prometheus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerS3 checks s3 credentials
*/
func (a *Client) CheckerS3(params *CheckerS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerS3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerS3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_S3",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/s3",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerS3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_S3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckerSSH checks valid ssh key format
*/
func (a *Client) CheckerSSH(params *CheckerSSHParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckerSSHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckerSSHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Checker_Ssh",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Checker/ssh",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckerSSHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckerSSHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checker_Ssh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
