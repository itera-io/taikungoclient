// Code generated by go-swagger; DO NOT EDIT.

package user_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserGroupsListByProjectGroupIDReader is a Reader for the UserGroupsListByProjectGroupID structure.
type UserGroupsListByProjectGroupIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGroupsListByProjectGroupIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserGroupsListByProjectGroupIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserGroupsListByProjectGroupIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserGroupsListByProjectGroupIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserGroupsListByProjectGroupIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserGroupsListByProjectGroupIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserGroupsListByProjectGroupIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserGroupsListByProjectGroupIDOK creates a UserGroupsListByProjectGroupIDOK with default headers values
func NewUserGroupsListByProjectGroupIDOK() *UserGroupsListByProjectGroupIDOK {
	return &UserGroupsListByProjectGroupIDOK{}
}

/*
UserGroupsListByProjectGroupIDOK describes a response with status code 200, with default header values.

Success
*/
type UserGroupsListByProjectGroupIDOK struct {
	Payload []*UserGroupsListByProjectGroupIDOKBodyItems0
}

// IsSuccess returns true when this user groups list by project group Id o k response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user groups list by project group Id o k response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id o k response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user groups list by project group Id o k response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups list by project group Id o k response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserGroupsListByProjectGroupIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdOK  %+v", 200, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdOK  %+v", 200, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDOK) GetPayload() []*UserGroupsListByProjectGroupIDOKBodyItems0 {
	return o.Payload
}

func (o *UserGroupsListByProjectGroupIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsListByProjectGroupIDBadRequest creates a UserGroupsListByProjectGroupIDBadRequest with default headers values
func NewUserGroupsListByProjectGroupIDBadRequest() *UserGroupsListByProjectGroupIDBadRequest {
	return &UserGroupsListByProjectGroupIDBadRequest{}
}

/*
UserGroupsListByProjectGroupIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserGroupsListByProjectGroupIDBadRequest struct {
	Payload []*UserGroupsListByProjectGroupIDBadRequestBodyItems0
}

// IsSuccess returns true when this user groups list by project group Id bad request response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups list by project group Id bad request response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id bad request response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups list by project group Id bad request response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups list by project group Id bad request response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserGroupsListByProjectGroupIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDBadRequest) GetPayload() []*UserGroupsListByProjectGroupIDBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserGroupsListByProjectGroupIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsListByProjectGroupIDUnauthorized creates a UserGroupsListByProjectGroupIDUnauthorized with default headers values
func NewUserGroupsListByProjectGroupIDUnauthorized() *UserGroupsListByProjectGroupIDUnauthorized {
	return &UserGroupsListByProjectGroupIDUnauthorized{}
}

/*
UserGroupsListByProjectGroupIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserGroupsListByProjectGroupIDUnauthorized struct {
	Payload *UserGroupsListByProjectGroupIDUnauthorizedBody
}

// IsSuccess returns true when this user groups list by project group Id unauthorized response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups list by project group Id unauthorized response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id unauthorized response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups list by project group Id unauthorized response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups list by project group Id unauthorized response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserGroupsListByProjectGroupIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdUnauthorized  %+v", 401, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdUnauthorized  %+v", 401, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDUnauthorized) GetPayload() *UserGroupsListByProjectGroupIDUnauthorizedBody {
	return o.Payload
}

func (o *UserGroupsListByProjectGroupIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsListByProjectGroupIDUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsListByProjectGroupIDForbidden creates a UserGroupsListByProjectGroupIDForbidden with default headers values
func NewUserGroupsListByProjectGroupIDForbidden() *UserGroupsListByProjectGroupIDForbidden {
	return &UserGroupsListByProjectGroupIDForbidden{}
}

/*
UserGroupsListByProjectGroupIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserGroupsListByProjectGroupIDForbidden struct {
	Payload *UserGroupsListByProjectGroupIDForbiddenBody
}

// IsSuccess returns true when this user groups list by project group Id forbidden response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups list by project group Id forbidden response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id forbidden response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups list by project group Id forbidden response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups list by project group Id forbidden response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserGroupsListByProjectGroupIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDForbidden) GetPayload() *UserGroupsListByProjectGroupIDForbiddenBody {
	return o.Payload
}

func (o *UserGroupsListByProjectGroupIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsListByProjectGroupIDForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsListByProjectGroupIDNotFound creates a UserGroupsListByProjectGroupIDNotFound with default headers values
func NewUserGroupsListByProjectGroupIDNotFound() *UserGroupsListByProjectGroupIDNotFound {
	return &UserGroupsListByProjectGroupIDNotFound{}
}

/*
UserGroupsListByProjectGroupIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserGroupsListByProjectGroupIDNotFound struct {
	Payload *UserGroupsListByProjectGroupIDNotFoundBody
}

// IsSuccess returns true when this user groups list by project group Id not found response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups list by project group Id not found response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id not found response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups list by project group Id not found response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups list by project group Id not found response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserGroupsListByProjectGroupIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *UserGroupsListByProjectGroupIDNotFound) GetPayload() *UserGroupsListByProjectGroupIDNotFoundBody {
	return o.Payload
}

func (o *UserGroupsListByProjectGroupIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsListByProjectGroupIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsListByProjectGroupIDInternalServerError creates a UserGroupsListByProjectGroupIDInternalServerError with default headers values
func NewUserGroupsListByProjectGroupIDInternalServerError() *UserGroupsListByProjectGroupIDInternalServerError {
	return &UserGroupsListByProjectGroupIDInternalServerError{}
}

/*
UserGroupsListByProjectGroupIDInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserGroupsListByProjectGroupIDInternalServerError struct {
}

// IsSuccess returns true when this user groups list by project group Id internal server error response has a 2xx status code
func (o *UserGroupsListByProjectGroupIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups list by project group Id internal server error response has a 3xx status code
func (o *UserGroupsListByProjectGroupIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups list by project group Id internal server error response has a 4xx status code
func (o *UserGroupsListByProjectGroupIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user groups list by project group Id internal server error response has a 5xx status code
func (o *UserGroupsListByProjectGroupIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user groups list by project group Id internal server error response a status code equal to that given
func (o *UserGroupsListByProjectGroupIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserGroupsListByProjectGroupIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdInternalServerError ", 500)
}

func (o *UserGroupsListByProjectGroupIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserGroups/list-by-project-group-id][%d] userGroupsListByProjectGroupIdInternalServerError ", 500)
}

func (o *UserGroupsListByProjectGroupIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserGroupsListByProjectGroupIDBadRequestBodyItems0 user groups list by project group ID bad request body items0
swagger:model UserGroupsListByProjectGroupIDBadRequestBodyItems0
*/
type UserGroupsListByProjectGroupIDBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user groups list by project group ID bad request body items0
func (o *UserGroupsListByProjectGroupIDBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups list by project group ID bad request body items0 based on context it is used
func (o *UserGroupsListByProjectGroupIDBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupsListByProjectGroupIDBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsListByProjectGroupIDForbiddenBody user groups list by project group ID forbidden body
swagger:model UserGroupsListByProjectGroupIDForbiddenBody
*/
type UserGroupsListByProjectGroupIDForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups list by project group ID forbidden body
func (o *UserGroupsListByProjectGroupIDForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups list by project group ID forbidden body based on context it is used
func (o *UserGroupsListByProjectGroupIDForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsListByProjectGroupIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsListByProjectGroupIDNotFoundBody user groups list by project group ID not found body
swagger:model UserGroupsListByProjectGroupIDNotFoundBody
*/
type UserGroupsListByProjectGroupIDNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups list by project group ID not found body
func (o *UserGroupsListByProjectGroupIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups list by project group ID not found body based on context it is used
func (o *UserGroupsListByProjectGroupIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsListByProjectGroupIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsListByProjectGroupIDOKBodyItems0 user groups list by project group ID o k body items0
swagger:model UserGroupsListByProjectGroupIDOKBodyItems0
*/
type UserGroupsListByProjectGroupIDOKBodyItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this user groups list by project group ID o k body items0
func (o *UserGroupsListByProjectGroupIDOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups list by project group ID o k body items0 based on context it is used
func (o *UserGroupsListByProjectGroupIDOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupsListByProjectGroupIDOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsListByProjectGroupIDUnauthorizedBody user groups list by project group ID unauthorized body
swagger:model UserGroupsListByProjectGroupIDUnauthorizedBody
*/
type UserGroupsListByProjectGroupIDUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups list by project group ID unauthorized body
func (o *UserGroupsListByProjectGroupIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups list by project group ID unauthorized body based on context it is used
func (o *UserGroupsListByProjectGroupIDUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsListByProjectGroupIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsListByProjectGroupIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
