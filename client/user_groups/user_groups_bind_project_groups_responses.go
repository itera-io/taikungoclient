// Code generated by go-swagger; DO NOT EDIT.

package user_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserGroupsBindProjectGroupsReader is a Reader for the UserGroupsBindProjectGroups structure.
type UserGroupsBindProjectGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGroupsBindProjectGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserGroupsBindProjectGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserGroupsBindProjectGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserGroupsBindProjectGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserGroupsBindProjectGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserGroupsBindProjectGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserGroupsBindProjectGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserGroupsBindProjectGroupsOK creates a UserGroupsBindProjectGroupsOK with default headers values
func NewUserGroupsBindProjectGroupsOK() *UserGroupsBindProjectGroupsOK {
	return &UserGroupsBindProjectGroupsOK{}
}

/*
UserGroupsBindProjectGroupsOK describes a response with status code 200, with default header values.

Success
*/
type UserGroupsBindProjectGroupsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this user groups bind project groups o k response has a 2xx status code
func (o *UserGroupsBindProjectGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user groups bind project groups o k response has a 3xx status code
func (o *UserGroupsBindProjectGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups o k response has a 4xx status code
func (o *UserGroupsBindProjectGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user groups bind project groups o k response has a 5xx status code
func (o *UserGroupsBindProjectGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups bind project groups o k response a status code equal to that given
func (o *UserGroupsBindProjectGroupsOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserGroupsBindProjectGroupsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsOK  %+v", 200, o.Payload)
}

func (o *UserGroupsBindProjectGroupsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsOK  %+v", 200, o.Payload)
}

func (o *UserGroupsBindProjectGroupsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UserGroupsBindProjectGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsBindProjectGroupsBadRequest creates a UserGroupsBindProjectGroupsBadRequest with default headers values
func NewUserGroupsBindProjectGroupsBadRequest() *UserGroupsBindProjectGroupsBadRequest {
	return &UserGroupsBindProjectGroupsBadRequest{}
}

/*
UserGroupsBindProjectGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserGroupsBindProjectGroupsBadRequest struct {
	Payload []*UserGroupsBindProjectGroupsBadRequestBodyItems0
}

// IsSuccess returns true when this user groups bind project groups bad request response has a 2xx status code
func (o *UserGroupsBindProjectGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups bind project groups bad request response has a 3xx status code
func (o *UserGroupsBindProjectGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups bad request response has a 4xx status code
func (o *UserGroupsBindProjectGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups bind project groups bad request response has a 5xx status code
func (o *UserGroupsBindProjectGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups bind project groups bad request response a status code equal to that given
func (o *UserGroupsBindProjectGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserGroupsBindProjectGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *UserGroupsBindProjectGroupsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *UserGroupsBindProjectGroupsBadRequest) GetPayload() []*UserGroupsBindProjectGroupsBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserGroupsBindProjectGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsBindProjectGroupsUnauthorized creates a UserGroupsBindProjectGroupsUnauthorized with default headers values
func NewUserGroupsBindProjectGroupsUnauthorized() *UserGroupsBindProjectGroupsUnauthorized {
	return &UserGroupsBindProjectGroupsUnauthorized{}
}

/*
UserGroupsBindProjectGroupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserGroupsBindProjectGroupsUnauthorized struct {
	Payload *UserGroupsBindProjectGroupsUnauthorizedBody
}

// IsSuccess returns true when this user groups bind project groups unauthorized response has a 2xx status code
func (o *UserGroupsBindProjectGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups bind project groups unauthorized response has a 3xx status code
func (o *UserGroupsBindProjectGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups unauthorized response has a 4xx status code
func (o *UserGroupsBindProjectGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups bind project groups unauthorized response has a 5xx status code
func (o *UserGroupsBindProjectGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups bind project groups unauthorized response a status code equal to that given
func (o *UserGroupsBindProjectGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserGroupsBindProjectGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *UserGroupsBindProjectGroupsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *UserGroupsBindProjectGroupsUnauthorized) GetPayload() *UserGroupsBindProjectGroupsUnauthorizedBody {
	return o.Payload
}

func (o *UserGroupsBindProjectGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsBindProjectGroupsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsBindProjectGroupsForbidden creates a UserGroupsBindProjectGroupsForbidden with default headers values
func NewUserGroupsBindProjectGroupsForbidden() *UserGroupsBindProjectGroupsForbidden {
	return &UserGroupsBindProjectGroupsForbidden{}
}

/*
UserGroupsBindProjectGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserGroupsBindProjectGroupsForbidden struct {
	Payload *UserGroupsBindProjectGroupsForbiddenBody
}

// IsSuccess returns true when this user groups bind project groups forbidden response has a 2xx status code
func (o *UserGroupsBindProjectGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups bind project groups forbidden response has a 3xx status code
func (o *UserGroupsBindProjectGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups forbidden response has a 4xx status code
func (o *UserGroupsBindProjectGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups bind project groups forbidden response has a 5xx status code
func (o *UserGroupsBindProjectGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups bind project groups forbidden response a status code equal to that given
func (o *UserGroupsBindProjectGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserGroupsBindProjectGroupsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsForbidden  %+v", 403, o.Payload)
}

func (o *UserGroupsBindProjectGroupsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsForbidden  %+v", 403, o.Payload)
}

func (o *UserGroupsBindProjectGroupsForbidden) GetPayload() *UserGroupsBindProjectGroupsForbiddenBody {
	return o.Payload
}

func (o *UserGroupsBindProjectGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsBindProjectGroupsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsBindProjectGroupsNotFound creates a UserGroupsBindProjectGroupsNotFound with default headers values
func NewUserGroupsBindProjectGroupsNotFound() *UserGroupsBindProjectGroupsNotFound {
	return &UserGroupsBindProjectGroupsNotFound{}
}

/*
UserGroupsBindProjectGroupsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserGroupsBindProjectGroupsNotFound struct {
	Payload *UserGroupsBindProjectGroupsNotFoundBody
}

// IsSuccess returns true when this user groups bind project groups not found response has a 2xx status code
func (o *UserGroupsBindProjectGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups bind project groups not found response has a 3xx status code
func (o *UserGroupsBindProjectGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups not found response has a 4xx status code
func (o *UserGroupsBindProjectGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user groups bind project groups not found response has a 5xx status code
func (o *UserGroupsBindProjectGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user groups bind project groups not found response a status code equal to that given
func (o *UserGroupsBindProjectGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserGroupsBindProjectGroupsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsNotFound  %+v", 404, o.Payload)
}

func (o *UserGroupsBindProjectGroupsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsNotFound  %+v", 404, o.Payload)
}

func (o *UserGroupsBindProjectGroupsNotFound) GetPayload() *UserGroupsBindProjectGroupsNotFoundBody {
	return o.Payload
}

func (o *UserGroupsBindProjectGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserGroupsBindProjectGroupsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGroupsBindProjectGroupsInternalServerError creates a UserGroupsBindProjectGroupsInternalServerError with default headers values
func NewUserGroupsBindProjectGroupsInternalServerError() *UserGroupsBindProjectGroupsInternalServerError {
	return &UserGroupsBindProjectGroupsInternalServerError{}
}

/*
UserGroupsBindProjectGroupsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserGroupsBindProjectGroupsInternalServerError struct {
}

// IsSuccess returns true when this user groups bind project groups internal server error response has a 2xx status code
func (o *UserGroupsBindProjectGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user groups bind project groups internal server error response has a 3xx status code
func (o *UserGroupsBindProjectGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user groups bind project groups internal server error response has a 4xx status code
func (o *UserGroupsBindProjectGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user groups bind project groups internal server error response has a 5xx status code
func (o *UserGroupsBindProjectGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user groups bind project groups internal server error response a status code equal to that given
func (o *UserGroupsBindProjectGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserGroupsBindProjectGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsInternalServerError ", 500)
}

func (o *UserGroupsBindProjectGroupsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserGroups/bind-project-groups][%d] userGroupsBindProjectGroupsInternalServerError ", 500)
}

func (o *UserGroupsBindProjectGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserGroupsBindProjectGroupsBadRequestBodyItems0 user groups bind project groups bad request body items0
swagger:model UserGroupsBindProjectGroupsBadRequestBodyItems0
*/
type UserGroupsBindProjectGroupsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user groups bind project groups bad request body items0
func (o *UserGroupsBindProjectGroupsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups bind project groups bad request body items0 based on context it is used
func (o *UserGroupsBindProjectGroupsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsBindProjectGroupsBody user groups bind project groups body
swagger:model UserGroupsBindProjectGroupsBody
*/
type UserGroupsBindProjectGroupsBody struct {

	// project groups
	ProjectGroups []*UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0 `json:"projectGroups"`

	// user group Id
	UserGroupID int32 `json:"userGroupId,omitempty"`

	// user group name
	UserGroupName string `json:"userGroupName,omitempty"`
}

// Validate validates this user groups bind project groups body
func (o *UserGroupsBindProjectGroupsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjectGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserGroupsBindProjectGroupsBody) validateProjectGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.ProjectGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.ProjectGroups); i++ {
		if swag.IsZero(o.ProjectGroups[i]) { // not required
			continue
		}

		if o.ProjectGroups[i] != nil {
			if err := o.ProjectGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projectGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projectGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user groups bind project groups body based on the context it is used
func (o *UserGroupsBindProjectGroupsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjectGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserGroupsBindProjectGroupsBody) contextValidateProjectGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ProjectGroups); i++ {

		if o.ProjectGroups[i] != nil {
			if err := o.ProjectGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projectGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projectGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsBindProjectGroupsForbiddenBody user groups bind project groups forbidden body
swagger:model UserGroupsBindProjectGroupsForbiddenBody
*/
type UserGroupsBindProjectGroupsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups bind project groups forbidden body
func (o *UserGroupsBindProjectGroupsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups bind project groups forbidden body based on context it is used
func (o *UserGroupsBindProjectGroupsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsBindProjectGroupsNotFoundBody user groups bind project groups not found body
swagger:model UserGroupsBindProjectGroupsNotFoundBody
*/
type UserGroupsBindProjectGroupsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups bind project groups not found body
func (o *UserGroupsBindProjectGroupsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups bind project groups not found body based on context it is used
func (o *UserGroupsBindProjectGroupsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0 user groups bind project groups params body project groups items0
swagger:model UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0
*/
type UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0 struct {

	// is bound
	IsBound bool `json:"isBound"`

	// project group Id
	ProjectGroupID int32 `json:"projectGroupId,omitempty"`
}

// Validate validates this user groups bind project groups params body project groups items0
func (o *UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups bind project groups params body project groups items0 based on context it is used
func (o *UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsParamsBodyProjectGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserGroupsBindProjectGroupsUnauthorizedBody user groups bind project groups unauthorized body
swagger:model UserGroupsBindProjectGroupsUnauthorizedBody
*/
type UserGroupsBindProjectGroupsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user groups bind project groups unauthorized body
func (o *UserGroupsBindProjectGroupsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user groups bind project groups unauthorized body based on context it is used
func (o *UserGroupsBindProjectGroupsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGroupsBindProjectGroupsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserGroupsBindProjectGroupsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
