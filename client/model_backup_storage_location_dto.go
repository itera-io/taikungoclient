/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BackupStorageLocationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupStorageLocationDto{}

// BackupStorageLocationDto struct for BackupStorageLocationDto
type BackupStorageLocationDto struct {
	MetadataName string `json:"metadataName"`
	Provider string `json:"provider"`
	Namespace string `json:"namespace"`
	LastValidated NullableTime `json:"lastValidated"`
	CreatedAt NullableTime `json:"createdAt"`
	AccessMode string `json:"accessMode"`
	Phase NullableString `json:"phase"`
	BackupCredentialId NullableInt32 `json:"backupCredentialId"`
}

type _BackupStorageLocationDto BackupStorageLocationDto

// NewBackupStorageLocationDto instantiates a new BackupStorageLocationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStorageLocationDto(metadataName string, provider string, namespace string, lastValidated NullableTime, createdAt NullableTime, accessMode string, phase NullableString, backupCredentialId NullableInt32) *BackupStorageLocationDto {
	this := BackupStorageLocationDto{}
	this.MetadataName = metadataName
	this.Provider = provider
	this.Namespace = namespace
	this.LastValidated = lastValidated
	this.CreatedAt = createdAt
	this.AccessMode = accessMode
	this.Phase = phase
	this.BackupCredentialId = backupCredentialId
	return &this
}

// NewBackupStorageLocationDtoWithDefaults instantiates a new BackupStorageLocationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStorageLocationDtoWithDefaults() *BackupStorageLocationDto {
	this := BackupStorageLocationDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *BackupStorageLocationDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *BackupStorageLocationDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetProvider returns the Provider field value
func (o *BackupStorageLocationDto) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *BackupStorageLocationDto) SetProvider(v string) {
	o.Provider = v
}

// GetNamespace returns the Namespace field value
func (o *BackupStorageLocationDto) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *BackupStorageLocationDto) SetNamespace(v string) {
	o.Namespace = v
}

// GetLastValidated returns the LastValidated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *BackupStorageLocationDto) GetLastValidated() time.Time {
	if o == nil || o.LastValidated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastValidated.Get()
}

// GetLastValidatedOk returns a tuple with the LastValidated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupStorageLocationDto) GetLastValidatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastValidated.Get(), o.LastValidated.IsSet()
}

// SetLastValidated sets field value
func (o *BackupStorageLocationDto) SetLastValidated(v time.Time) {
	o.LastValidated.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *BackupStorageLocationDto) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupStorageLocationDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *BackupStorageLocationDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetAccessMode returns the AccessMode field value
func (o *BackupStorageLocationDto) GetAccessMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetAccessModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessMode, true
}

// SetAccessMode sets field value
func (o *BackupStorageLocationDto) SetAccessMode(v string) {
	o.AccessMode = v
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BackupStorageLocationDto) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupStorageLocationDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *BackupStorageLocationDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

// GetBackupCredentialId returns the BackupCredentialId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *BackupStorageLocationDto) GetBackupCredentialId() int32 {
	if o == nil || o.BackupCredentialId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.BackupCredentialId.Get()
}

// GetBackupCredentialIdOk returns a tuple with the BackupCredentialId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupStorageLocationDto) GetBackupCredentialIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupCredentialId.Get(), o.BackupCredentialId.IsSet()
}

// SetBackupCredentialId sets field value
func (o *BackupStorageLocationDto) SetBackupCredentialId(v int32) {
	o.BackupCredentialId.Set(&v)
}

func (o BackupStorageLocationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupStorageLocationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["provider"] = o.Provider
	toSerialize["namespace"] = o.Namespace
	toSerialize["lastValidated"] = o.LastValidated.Get()
	toSerialize["createdAt"] = o.CreatedAt.Get()
	toSerialize["accessMode"] = o.AccessMode
	toSerialize["phase"] = o.Phase.Get()
	toSerialize["backupCredentialId"] = o.BackupCredentialId.Get()
	return toSerialize, nil
}

func (o *BackupStorageLocationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"provider",
		"namespace",
		"lastValidated",
		"createdAt",
		"accessMode",
		"phase",
		"backupCredentialId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupStorageLocationDto := _BackupStorageLocationDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupStorageLocationDto)

	if err != nil {
		return err
	}

	*o = BackupStorageLocationDto(varBackupStorageLocationDto)

	return err
}

type NullableBackupStorageLocationDto struct {
	value *BackupStorageLocationDto
	isSet bool
}

func (v NullableBackupStorageLocationDto) Get() *BackupStorageLocationDto {
	return v.value
}

func (v *NullableBackupStorageLocationDto) Set(val *BackupStorageLocationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStorageLocationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStorageLocationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStorageLocationDto(val *BackupStorageLocationDto) *NullableBackupStorageLocationDto {
	return &NullableBackupStorageLocationDto{value: val, isSet: true}
}

func (v NullableBackupStorageLocationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStorageLocationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


