// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneRepairReader is a Reader for the StandAloneRepair structure.
type StandAloneRepairReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneRepairReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneRepairOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneRepairBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneRepairUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneRepairForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneRepairNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneRepairInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneRepairOK creates a StandAloneRepairOK with default headers values
func NewStandAloneRepairOK() *StandAloneRepairOK {
	return &StandAloneRepairOK{}
}

/*
StandAloneRepairOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneRepairOK struct {
	Payload interface{}
}

// IsSuccess returns true when this stand alone repair o k response has a 2xx status code
func (o *StandAloneRepairOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone repair o k response has a 3xx status code
func (o *StandAloneRepairOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair o k response has a 4xx status code
func (o *StandAloneRepairOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone repair o k response has a 5xx status code
func (o *StandAloneRepairOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone repair o k response a status code equal to that given
func (o *StandAloneRepairOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneRepairOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairOK  %+v", 200, o.Payload)
}

func (o *StandAloneRepairOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairOK  %+v", 200, o.Payload)
}

func (o *StandAloneRepairOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StandAloneRepairOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneRepairBadRequest creates a StandAloneRepairBadRequest with default headers values
func NewStandAloneRepairBadRequest() *StandAloneRepairBadRequest {
	return &StandAloneRepairBadRequest{}
}

/*
StandAloneRepairBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneRepairBadRequest struct {
	Payload []*StandAloneRepairBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone repair bad request response has a 2xx status code
func (o *StandAloneRepairBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone repair bad request response has a 3xx status code
func (o *StandAloneRepairBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair bad request response has a 4xx status code
func (o *StandAloneRepairBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone repair bad request response has a 5xx status code
func (o *StandAloneRepairBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone repair bad request response a status code equal to that given
func (o *StandAloneRepairBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneRepairBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneRepairBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneRepairBadRequest) GetPayload() []*StandAloneRepairBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneRepairBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneRepairUnauthorized creates a StandAloneRepairUnauthorized with default headers values
func NewStandAloneRepairUnauthorized() *StandAloneRepairUnauthorized {
	return &StandAloneRepairUnauthorized{}
}

/*
StandAloneRepairUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneRepairUnauthorized struct {
	Payload *StandAloneRepairUnauthorizedBody
}

// IsSuccess returns true when this stand alone repair unauthorized response has a 2xx status code
func (o *StandAloneRepairUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone repair unauthorized response has a 3xx status code
func (o *StandAloneRepairUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair unauthorized response has a 4xx status code
func (o *StandAloneRepairUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone repair unauthorized response has a 5xx status code
func (o *StandAloneRepairUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone repair unauthorized response a status code equal to that given
func (o *StandAloneRepairUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneRepairUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneRepairUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneRepairUnauthorized) GetPayload() *StandAloneRepairUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneRepairUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneRepairUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneRepairForbidden creates a StandAloneRepairForbidden with default headers values
func NewStandAloneRepairForbidden() *StandAloneRepairForbidden {
	return &StandAloneRepairForbidden{}
}

/*
StandAloneRepairForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneRepairForbidden struct {
	Payload *StandAloneRepairForbiddenBody
}

// IsSuccess returns true when this stand alone repair forbidden response has a 2xx status code
func (o *StandAloneRepairForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone repair forbidden response has a 3xx status code
func (o *StandAloneRepairForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair forbidden response has a 4xx status code
func (o *StandAloneRepairForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone repair forbidden response has a 5xx status code
func (o *StandAloneRepairForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone repair forbidden response a status code equal to that given
func (o *StandAloneRepairForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneRepairForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneRepairForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneRepairForbidden) GetPayload() *StandAloneRepairForbiddenBody {
	return o.Payload
}

func (o *StandAloneRepairForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneRepairForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneRepairNotFound creates a StandAloneRepairNotFound with default headers values
func NewStandAloneRepairNotFound() *StandAloneRepairNotFound {
	return &StandAloneRepairNotFound{}
}

/*
StandAloneRepairNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneRepairNotFound struct {
	Payload *StandAloneRepairNotFoundBody
}

// IsSuccess returns true when this stand alone repair not found response has a 2xx status code
func (o *StandAloneRepairNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone repair not found response has a 3xx status code
func (o *StandAloneRepairNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair not found response has a 4xx status code
func (o *StandAloneRepairNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone repair not found response has a 5xx status code
func (o *StandAloneRepairNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone repair not found response a status code equal to that given
func (o *StandAloneRepairNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneRepairNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneRepairNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneRepairNotFound) GetPayload() *StandAloneRepairNotFoundBody {
	return o.Payload
}

func (o *StandAloneRepairNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneRepairNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneRepairInternalServerError creates a StandAloneRepairInternalServerError with default headers values
func NewStandAloneRepairInternalServerError() *StandAloneRepairInternalServerError {
	return &StandAloneRepairInternalServerError{}
}

/*
StandAloneRepairInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneRepairInternalServerError struct {
}

// IsSuccess returns true when this stand alone repair internal server error response has a 2xx status code
func (o *StandAloneRepairInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone repair internal server error response has a 3xx status code
func (o *StandAloneRepairInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone repair internal server error response has a 4xx status code
func (o *StandAloneRepairInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone repair internal server error response has a 5xx status code
func (o *StandAloneRepairInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone repair internal server error response a status code equal to that given
func (o *StandAloneRepairInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneRepairInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairInternalServerError ", 500)
}

func (o *StandAloneRepairInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/repair][%d] standAloneRepairInternalServerError ", 500)
}

func (o *StandAloneRepairInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneRepairBadRequestBodyItems0 stand alone repair bad request body items0
swagger:model StandAloneRepairBadRequestBodyItems0
*/
type StandAloneRepairBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone repair bad request body items0
func (o *StandAloneRepairBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone repair bad request body items0 based on context it is used
func (o *StandAloneRepairBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneRepairBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneRepairBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneRepairBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneRepairBody stand alone repair body
swagger:model StandAloneRepairBody
*/
type StandAloneRepairBody struct {

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`
}

// Validate validates this stand alone repair body
func (o *StandAloneRepairBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone repair body based on context it is used
func (o *StandAloneRepairBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneRepairBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneRepairBody) UnmarshalBinary(b []byte) error {
	var res StandAloneRepairBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneRepairForbiddenBody stand alone repair forbidden body
swagger:model StandAloneRepairForbiddenBody
*/
type StandAloneRepairForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone repair forbidden body
func (o *StandAloneRepairForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone repair forbidden body based on context it is used
func (o *StandAloneRepairForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneRepairForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneRepairForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneRepairForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneRepairNotFoundBody stand alone repair not found body
swagger:model StandAloneRepairNotFoundBody
*/
type StandAloneRepairNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone repair not found body
func (o *StandAloneRepairNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone repair not found body based on context it is used
func (o *StandAloneRepairNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneRepairNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneRepairNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneRepairNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneRepairUnauthorizedBody stand alone repair unauthorized body
swagger:model StandAloneRepairUnauthorizedBody
*/
type StandAloneRepairUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone repair unauthorized body
func (o *StandAloneRepairUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone repair unauthorized body based on context it is used
func (o *StandAloneRepairUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneRepairUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneRepairUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneRepairUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
