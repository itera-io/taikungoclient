// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneListReader is a Reader for the StandAloneList structure.
type StandAloneListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneListOK creates a StandAloneListOK with default headers values
func NewStandAloneListOK() *StandAloneListOK {
	return &StandAloneListOK{}
}

/*
StandAloneListOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneListOK struct {
	Payload *StandAloneListOKBody
}

// IsSuccess returns true when this stand alone list o k response has a 2xx status code
func (o *StandAloneListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone list o k response has a 3xx status code
func (o *StandAloneListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list o k response has a 4xx status code
func (o *StandAloneListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone list o k response has a 5xx status code
func (o *StandAloneListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone list o k response a status code equal to that given
func (o *StandAloneListOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListOK  %+v", 200, o.Payload)
}

func (o *StandAloneListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListOK  %+v", 200, o.Payload)
}

func (o *StandAloneListOK) GetPayload() *StandAloneListOKBody {
	return o.Payload
}

func (o *StandAloneListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneListBadRequest creates a StandAloneListBadRequest with default headers values
func NewStandAloneListBadRequest() *StandAloneListBadRequest {
	return &StandAloneListBadRequest{}
}

/*
StandAloneListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneListBadRequest struct {
	Payload []*StandAloneListBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone list bad request response has a 2xx status code
func (o *StandAloneListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone list bad request response has a 3xx status code
func (o *StandAloneListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list bad request response has a 4xx status code
func (o *StandAloneListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone list bad request response has a 5xx status code
func (o *StandAloneListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone list bad request response a status code equal to that given
func (o *StandAloneListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneListBadRequest) GetPayload() []*StandAloneListBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneListUnauthorized creates a StandAloneListUnauthorized with default headers values
func NewStandAloneListUnauthorized() *StandAloneListUnauthorized {
	return &StandAloneListUnauthorized{}
}

/*
StandAloneListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneListUnauthorized struct {
	Payload *StandAloneListUnauthorizedBody
}

// IsSuccess returns true when this stand alone list unauthorized response has a 2xx status code
func (o *StandAloneListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone list unauthorized response has a 3xx status code
func (o *StandAloneListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list unauthorized response has a 4xx status code
func (o *StandAloneListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone list unauthorized response has a 5xx status code
func (o *StandAloneListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone list unauthorized response a status code equal to that given
func (o *StandAloneListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneListUnauthorized) GetPayload() *StandAloneListUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneListForbidden creates a StandAloneListForbidden with default headers values
func NewStandAloneListForbidden() *StandAloneListForbidden {
	return &StandAloneListForbidden{}
}

/*
StandAloneListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneListForbidden struct {
	Payload *StandAloneListForbiddenBody
}

// IsSuccess returns true when this stand alone list forbidden response has a 2xx status code
func (o *StandAloneListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone list forbidden response has a 3xx status code
func (o *StandAloneListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list forbidden response has a 4xx status code
func (o *StandAloneListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone list forbidden response has a 5xx status code
func (o *StandAloneListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone list forbidden response a status code equal to that given
func (o *StandAloneListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneListForbidden) GetPayload() *StandAloneListForbiddenBody {
	return o.Payload
}

func (o *StandAloneListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneListNotFound creates a StandAloneListNotFound with default headers values
func NewStandAloneListNotFound() *StandAloneListNotFound {
	return &StandAloneListNotFound{}
}

/*
StandAloneListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneListNotFound struct {
	Payload *StandAloneListNotFoundBody
}

// IsSuccess returns true when this stand alone list not found response has a 2xx status code
func (o *StandAloneListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone list not found response has a 3xx status code
func (o *StandAloneListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list not found response has a 4xx status code
func (o *StandAloneListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone list not found response has a 5xx status code
func (o *StandAloneListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone list not found response a status code equal to that given
func (o *StandAloneListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneListNotFound) GetPayload() *StandAloneListNotFoundBody {
	return o.Payload
}

func (o *StandAloneListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneListInternalServerError creates a StandAloneListInternalServerError with default headers values
func NewStandAloneListInternalServerError() *StandAloneListInternalServerError {
	return &StandAloneListInternalServerError{}
}

/*
StandAloneListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneListInternalServerError struct {
}

// IsSuccess returns true when this stand alone list internal server error response has a 2xx status code
func (o *StandAloneListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone list internal server error response has a 3xx status code
func (o *StandAloneListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone list internal server error response has a 4xx status code
func (o *StandAloneListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone list internal server error response has a 5xx status code
func (o *StandAloneListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone list internal server error response a status code equal to that given
func (o *StandAloneListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListInternalServerError ", 500)
}

func (o *StandAloneListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone][%d] standAloneListInternalServerError ", 500)
}

func (o *StandAloneListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneListBadRequestBodyItems0 stand alone list bad request body items0
swagger:model StandAloneListBadRequestBodyItems0
*/
type StandAloneListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone list bad request body items0
func (o *StandAloneListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone list bad request body items0 based on context it is used
func (o *StandAloneListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListForbiddenBody stand alone list forbidden body
swagger:model StandAloneListForbiddenBody
*/
type StandAloneListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone list forbidden body
func (o *StandAloneListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone list forbidden body based on context it is used
func (o *StandAloneListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListNotFoundBody stand alone list not found body
swagger:model StandAloneListNotFoundBody
*/
type StandAloneListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone list not found body
func (o *StandAloneListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone list not found body based on context it is used
func (o *StandAloneListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListOKBody stand alone list o k body
swagger:model StandAloneListOKBody
*/
type StandAloneListOKBody struct {

	// data
	Data []*StandAloneListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this stand alone list o k body
func (o *StandAloneListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone list o k body based on the context it is used
func (o *StandAloneListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListOKBody) UnmarshalBinary(b []byte) error {
	var res StandAloneListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListOKBodyDataItems0 stand alone list o k body data items0
swagger:model StandAloneListOKBodyDataItems0
*/
type StandAloneListOKBodyDataItems0 struct {

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// flavor Id
	FlavorID string `json:"flavorId,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// is windows
	IsWindows bool `json:"isWindows"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// stand alone profile
	StandAloneProfile *StandAloneListOKBodyDataItems0StandAloneProfile `json:"standAloneProfile,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// volume size
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone list o k body data items0
func (o *StandAloneListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStandAloneProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBodyDataItems0) validateStandAloneProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneProfile) { // not required
		return nil
	}

	if o.StandAloneProfile != nil {
		if err := o.StandAloneProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stand alone list o k body data items0 based on the context it is used
func (o *StandAloneListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStandAloneProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBodyDataItems0) contextValidateStandAloneProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.StandAloneProfile != nil {
		if err := o.StandAloneProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListOKBodyDataItems0StandAloneProfile stand alone list o k body data items0 stand alone profile
swagger:model StandAloneListOKBodyDataItems0StandAloneProfile
*/
type StandAloneListOKBodyDataItems0StandAloneProfile struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// stand alone profile security groups
	StandAloneProfileSecurityGroups []*StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 `json:"standAloneProfileSecurityGroups"`
}

// Validate validates this stand alone list o k body data items0 stand alone profile
func (o *StandAloneListOKBodyDataItems0StandAloneProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStandAloneProfileSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBodyDataItems0StandAloneProfile) validateStandAloneProfileSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneProfileSecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.StandAloneProfileSecurityGroups); i++ {
		if swag.IsZero(o.StandAloneProfileSecurityGroups[i]) { // not required
			continue
		}

		if o.StandAloneProfileSecurityGroups[i] != nil {
			if err := o.StandAloneProfileSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone list o k body data items0 stand alone profile based on the context it is used
func (o *StandAloneListOKBodyDataItems0StandAloneProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStandAloneProfileSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneListOKBodyDataItems0StandAloneProfile) contextValidateStandAloneProfileSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandAloneProfileSecurityGroups); i++ {

		if o.StandAloneProfileSecurityGroups[i] != nil {
			if err := o.StandAloneProfileSecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0StandAloneProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0StandAloneProfile) UnmarshalBinary(b []byte) error {
	var res StandAloneListOKBodyDataItems0StandAloneProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 stand alone list o k body data items0 stand alone profile stand alone profile security groups items0
swagger:model StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
*/
type StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port max range
	PortMaxRange int32 `json:"portMaxRange,omitempty"`

	// port min range
	PortMinRange int32 `json:"portMinRange,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// remote Ip prefix
	RemoteIPPrefix string `json:"remoteIpPrefix,omitempty"`
}

// Validate validates this stand alone list o k body data items0 stand alone profile stand alone profile security groups items0
func (o *StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone list o k body data items0 stand alone profile stand alone profile security groups items0 based on context it is used
func (o *StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneListOKBodyDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneListUnauthorizedBody stand alone list unauthorized body
swagger:model StandAloneListUnauthorizedBody
*/
type StandAloneListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone list unauthorized body
func (o *StandAloneListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone list unauthorized body based on context it is used
func (o *StandAloneListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
