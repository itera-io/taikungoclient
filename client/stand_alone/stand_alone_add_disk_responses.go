// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// StandAloneAddDiskReader is a Reader for the StandAloneAddDisk structure.
type StandAloneAddDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneAddDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneAddDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneAddDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneAddDiskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneAddDiskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneAddDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneAddDiskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneAddDiskOK creates a StandAloneAddDiskOK with default headers values
func NewStandAloneAddDiskOK() *StandAloneAddDiskOK {
	return &StandAloneAddDiskOK{}
}

/* StandAloneAddDiskOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneAddDiskOK struct {
	Payload models.Unit
}

func (o *StandAloneAddDiskOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskOK  %+v", 200, o.Payload)
}
func (o *StandAloneAddDiskOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *StandAloneAddDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneAddDiskBadRequest creates a StandAloneAddDiskBadRequest with default headers values
func NewStandAloneAddDiskBadRequest() *StandAloneAddDiskBadRequest {
	return &StandAloneAddDiskBadRequest{}
}

/* StandAloneAddDiskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneAddDiskBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *StandAloneAddDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskBadRequest  %+v", 400, o.Payload)
}
func (o *StandAloneAddDiskBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *StandAloneAddDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneAddDiskUnauthorized creates a StandAloneAddDiskUnauthorized with default headers values
func NewStandAloneAddDiskUnauthorized() *StandAloneAddDiskUnauthorized {
	return &StandAloneAddDiskUnauthorized{}
}

/* StandAloneAddDiskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneAddDiskUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *StandAloneAddDiskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskUnauthorized  %+v", 401, o.Payload)
}
func (o *StandAloneAddDiskUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *StandAloneAddDiskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneAddDiskForbidden creates a StandAloneAddDiskForbidden with default headers values
func NewStandAloneAddDiskForbidden() *StandAloneAddDiskForbidden {
	return &StandAloneAddDiskForbidden{}
}

/* StandAloneAddDiskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneAddDiskForbidden struct {
	Payload *models.ProblemDetails
}

func (o *StandAloneAddDiskForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskForbidden  %+v", 403, o.Payload)
}
func (o *StandAloneAddDiskForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *StandAloneAddDiskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneAddDiskNotFound creates a StandAloneAddDiskNotFound with default headers values
func NewStandAloneAddDiskNotFound() *StandAloneAddDiskNotFound {
	return &StandAloneAddDiskNotFound{}
}

/* StandAloneAddDiskNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneAddDiskNotFound struct {
	Payload *models.ProblemDetails
}

func (o *StandAloneAddDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskNotFound  %+v", 404, o.Payload)
}
func (o *StandAloneAddDiskNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *StandAloneAddDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneAddDiskInternalServerError creates a StandAloneAddDiskInternalServerError with default headers values
func NewStandAloneAddDiskInternalServerError() *StandAloneAddDiskInternalServerError {
	return &StandAloneAddDiskInternalServerError{}
}

/* StandAloneAddDiskInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneAddDiskInternalServerError struct {
}

func (o *StandAloneAddDiskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/add/disk][%d] standAloneAddDiskInternalServerError ", 500)
}

func (o *StandAloneAddDiskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
