// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneDetailsReader is a Reader for the StandAloneDetails structure.
type StandAloneDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneDetailsOK creates a StandAloneDetailsOK with default headers values
func NewStandAloneDetailsOK() *StandAloneDetailsOK {
	return &StandAloneDetailsOK{}
}

/*
StandAloneDetailsOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneDetailsOK struct {
	Payload *StandAloneDetailsOKBody
}

// IsSuccess returns true when this stand alone details o k response has a 2xx status code
func (o *StandAloneDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone details o k response has a 3xx status code
func (o *StandAloneDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details o k response has a 4xx status code
func (o *StandAloneDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone details o k response has a 5xx status code
func (o *StandAloneDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone details o k response a status code equal to that given
func (o *StandAloneDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneDetailsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsOK  %+v", 200, o.Payload)
}

func (o *StandAloneDetailsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsOK  %+v", 200, o.Payload)
}

func (o *StandAloneDetailsOK) GetPayload() *StandAloneDetailsOKBody {
	return o.Payload
}

func (o *StandAloneDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneDetailsBadRequest creates a StandAloneDetailsBadRequest with default headers values
func NewStandAloneDetailsBadRequest() *StandAloneDetailsBadRequest {
	return &StandAloneDetailsBadRequest{}
}

/*
StandAloneDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneDetailsBadRequest struct {
	Payload []*StandAloneDetailsBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone details bad request response has a 2xx status code
func (o *StandAloneDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone details bad request response has a 3xx status code
func (o *StandAloneDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details bad request response has a 4xx status code
func (o *StandAloneDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone details bad request response has a 5xx status code
func (o *StandAloneDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone details bad request response a status code equal to that given
func (o *StandAloneDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneDetailsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneDetailsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneDetailsBadRequest) GetPayload() []*StandAloneDetailsBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneDetailsUnauthorized creates a StandAloneDetailsUnauthorized with default headers values
func NewStandAloneDetailsUnauthorized() *StandAloneDetailsUnauthorized {
	return &StandAloneDetailsUnauthorized{}
}

/*
StandAloneDetailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneDetailsUnauthorized struct {
	Payload *StandAloneDetailsUnauthorizedBody
}

// IsSuccess returns true when this stand alone details unauthorized response has a 2xx status code
func (o *StandAloneDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone details unauthorized response has a 3xx status code
func (o *StandAloneDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details unauthorized response has a 4xx status code
func (o *StandAloneDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone details unauthorized response has a 5xx status code
func (o *StandAloneDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone details unauthorized response a status code equal to that given
func (o *StandAloneDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneDetailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneDetailsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneDetailsUnauthorized) GetPayload() *StandAloneDetailsUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneDetailsForbidden creates a StandAloneDetailsForbidden with default headers values
func NewStandAloneDetailsForbidden() *StandAloneDetailsForbidden {
	return &StandAloneDetailsForbidden{}
}

/*
StandAloneDetailsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneDetailsForbidden struct {
	Payload *StandAloneDetailsForbiddenBody
}

// IsSuccess returns true when this stand alone details forbidden response has a 2xx status code
func (o *StandAloneDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone details forbidden response has a 3xx status code
func (o *StandAloneDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details forbidden response has a 4xx status code
func (o *StandAloneDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone details forbidden response has a 5xx status code
func (o *StandAloneDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone details forbidden response a status code equal to that given
func (o *StandAloneDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneDetailsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneDetailsForbidden) GetPayload() *StandAloneDetailsForbiddenBody {
	return o.Payload
}

func (o *StandAloneDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneDetailsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneDetailsNotFound creates a StandAloneDetailsNotFound with default headers values
func NewStandAloneDetailsNotFound() *StandAloneDetailsNotFound {
	return &StandAloneDetailsNotFound{}
}

/*
StandAloneDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneDetailsNotFound struct {
	Payload *StandAloneDetailsNotFoundBody
}

// IsSuccess returns true when this stand alone details not found response has a 2xx status code
func (o *StandAloneDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone details not found response has a 3xx status code
func (o *StandAloneDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details not found response has a 4xx status code
func (o *StandAloneDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone details not found response has a 5xx status code
func (o *StandAloneDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone details not found response a status code equal to that given
func (o *StandAloneDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneDetailsNotFound) GetPayload() *StandAloneDetailsNotFoundBody {
	return o.Payload
}

func (o *StandAloneDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneDetailsInternalServerError creates a StandAloneDetailsInternalServerError with default headers values
func NewStandAloneDetailsInternalServerError() *StandAloneDetailsInternalServerError {
	return &StandAloneDetailsInternalServerError{}
}

/*
StandAloneDetailsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneDetailsInternalServerError struct {
}

// IsSuccess returns true when this stand alone details internal server error response has a 2xx status code
func (o *StandAloneDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone details internal server error response has a 3xx status code
func (o *StandAloneDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone details internal server error response has a 4xx status code
func (o *StandAloneDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone details internal server error response has a 5xx status code
func (o *StandAloneDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone details internal server error response a status code equal to that given
func (o *StandAloneDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsInternalServerError ", 500)
}

func (o *StandAloneDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/{projectId}][%d] standAloneDetailsInternalServerError ", 500)
}

func (o *StandAloneDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneDetailsBadRequestBodyItems0 stand alone details bad request body items0
swagger:model StandAloneDetailsBadRequestBodyItems0
*/
type StandAloneDetailsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone details bad request body items0
func (o *StandAloneDetailsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details bad request body items0 based on context it is used
func (o *StandAloneDetailsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsForbiddenBody stand alone details forbidden body
swagger:model StandAloneDetailsForbiddenBody
*/
type StandAloneDetailsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone details forbidden body
func (o *StandAloneDetailsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details forbidden body based on context it is used
func (o *StandAloneDetailsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsNotFoundBody stand alone details not found body
swagger:model StandAloneDetailsNotFoundBody
*/
type StandAloneDetailsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone details not found body
func (o *StandAloneDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details not found body based on context it is used
func (o *StandAloneDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBody stand alone details o k body
swagger:model StandAloneDetailsOKBody
*/
type StandAloneDetailsOKBody struct {

	// data
	Data []*StandAloneDetailsOKBodyDataItems0 `json:"data"`

	// project
	Project *StandAloneDetailsOKBodyProject `json:"project,omitempty"`
}

// Validate validates this stand alone details o k body
func (o *StandAloneDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneDetailsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneDetailsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneDetailsOKBody) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(o.Project) { // not required
		return nil
	}

	if o.Project != nil {
		if err := o.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneDetailsOK" + "." + "project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneDetailsOK" + "." + "project")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stand alone details o k body based on the context it is used
func (o *StandAloneDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneDetailsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneDetailsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneDetailsOKBody) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if o.Project != nil {
		if err := o.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneDetailsOK" + "." + "project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneDetailsOK" + "." + "project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyDataItems0 stand alone details o k body data items0
swagger:model StandAloneDetailsOKBodyDataItems0
*/
type StandAloneDetailsOKBodyDataItems0 struct {

	// cloud init
	CloudInit string `json:"cloudInit,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// current flavor
	CurrentFlavor string `json:"currentFlavor,omitempty"`

	// disks
	Disks []*StandAloneDetailsOKBodyDataItems0DisksItems0 `json:"disks"`

	// id
	ID int32 `json:"id,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// is windows
	IsWindows bool `json:"isWindows"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// profile
	Profile *StandAloneDetailsOKBodyDataItems0Profile `json:"profile,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice string `json:"spotPrice,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`

	// stand alone meta datas
	StandAloneMetaDatas []*StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0 `json:"standAloneMetaDatas"`

	// status
	Status string `json:"status,omitempty"`

	// target flavor
	TargetFlavor string `json:"targetFlavor,omitempty"`

	// volume size
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone details o k body data items0
func (o *StandAloneDetailsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStandAloneMetaDatas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(o.Disks) { // not required
		return nil
	}

	for i := 0; i < len(o.Disks); i++ {
		if swag.IsZero(o.Disks[i]) { // not required
			continue
		}

		if o.Disks[i] != nil {
			if err := o.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) validateStandAloneMetaDatas(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneMetaDatas) { // not required
		return nil
	}

	for i := 0; i < len(o.StandAloneMetaDatas); i++ {
		if swag.IsZero(o.StandAloneMetaDatas[i]) { // not required
			continue
		}

		if o.StandAloneMetaDatas[i] != nil {
			if err := o.StandAloneMetaDatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone details o k body data items0 based on the context it is used
func (o *StandAloneDetailsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStandAloneMetaDatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Disks); i++ {

		if o.Disks[i] != nil {
			if err := o.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.Profile != nil {
		if err := o.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0) contextValidateStandAloneMetaDatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandAloneMetaDatas); i++ {

		if o.StandAloneMetaDatas[i] != nil {
			if err := o.StandAloneMetaDatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyDataItems0DisksItems0 stand alone details o k body data items0 disks items0
swagger:model StandAloneDetailsOKBodyDataItems0DisksItems0
*/
type StandAloneDetailsOKBodyDataItems0DisksItems0 struct {

	// current size
	CurrentSize int64 `json:"currentSize,omitempty"`

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// lun Id
	LunID string `json:"lunId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// target size
	TargetSize int64 `json:"targetSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone details o k body data items0 disks items0
func (o *StandAloneDetailsOKBodyDataItems0DisksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details o k body data items0 disks items0 based on context it is used
func (o *StandAloneDetailsOKBodyDataItems0DisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0DisksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0DisksItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyDataItems0DisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyDataItems0Profile stand alone details o k body data items0 profile
swagger:model StandAloneDetailsOKBodyDataItems0Profile
*/
type StandAloneDetailsOKBodyDataItems0Profile struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// public key
	PublicKey string `json:"publicKey,omitempty"`

	// security groups
	SecurityGroups []*StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0 `json:"securityGroups"`
}

// Validate validates this stand alone details o k body data items0 profile
func (o *StandAloneDetailsOKBodyDataItems0Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0Profile) validateSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.SecurityGroups); i++ {
		if swag.IsZero(o.SecurityGroups[i]) { // not required
			continue
		}

		if o.SecurityGroups[i] != nil {
			if err := o.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profile" + "." + "securityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profile" + "." + "securityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone details o k body data items0 profile based on the context it is used
func (o *StandAloneDetailsOKBodyDataItems0Profile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneDetailsOKBodyDataItems0Profile) contextValidateSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SecurityGroups); i++ {

		if o.SecurityGroups[i] != nil {
			if err := o.SecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profile" + "." + "securityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("profile" + "." + "securityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0Profile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0Profile) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyDataItems0Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0 stand alone details o k body data items0 profile security groups items0
swagger:model StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0
*/
type StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is rdp port enabled
	IsRdpPortEnabled bool `json:"isRdpPortEnabled"`

	// name
	Name string `json:"name,omitempty"`

	// port max range
	PortMaxRange int32 `json:"portMaxRange,omitempty"`

	// port min range
	PortMinRange int32 `json:"portMinRange,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// remote Ip prefix
	RemoteIPPrefix string `json:"remoteIpPrefix,omitempty"`
}

// Validate validates this stand alone details o k body data items0 profile security groups items0
func (o *StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details o k body data items0 profile security groups items0 based on context it is used
func (o *StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyDataItems0ProfileSecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0 stand alone details o k body data items0 stand alone meta datas items0
swagger:model StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0
*/
type StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this stand alone details o k body data items0 stand alone meta datas items0
func (o *StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details o k body data items0 stand alone meta datas items0 based on context it is used
func (o *StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyDataItems0StandAloneMetaDatasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsOKBodyProject stand alone details o k body project
swagger:model StandAloneDetailsOKBodyProject
*/
type StandAloneDetailsOKBodyProject struct {

	// allow full spot kubernetes
	AllowFullSpotKubernetes bool `json:"allowFullSpotKubernetes"`

	// allow spot v ms
	AllowSpotVMs bool `json:"allowSpotVMs"`

	// allow spot workers
	AllowSpotWorkers bool `json:"allowSpotWorkers"`

	// cloud credential revision
	CloudCredentialRevision int32 `json:"cloudCredentialRevision,omitempty"`

	// cloud Id
	CloudID int32 `json:"cloudId,omitempty"`

	// cloud name
	CloudName string `json:"cloudName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// has selected flavors
	HasSelectedFlavors bool `json:"hasSelectedFlavors"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is maintenance mode enabled
	IsMaintenanceModeEnabled bool `json:"isMaintenanceModeEnabled"`

	// max spot price
	MaxSpotPrice float64 `json:"maxSpotPrice,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project cloud revision
	ProjectCloudRevision int32 `json:"projectCloudRevision,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project status
	ProjectStatus string `json:"projectStatus,omitempty"`

	// total hourly cost
	TotalHourlyCost float64 `json:"totalHourlyCost,omitempty"`
}

// Validate validates this stand alone details o k body project
func (o *StandAloneDetailsOKBodyProject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details o k body project based on context it is used
func (o *StandAloneDetailsOKBodyProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyProject) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsOKBodyProject) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsOKBodyProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneDetailsUnauthorizedBody stand alone details unauthorized body
swagger:model StandAloneDetailsUnauthorizedBody
*/
type StandAloneDetailsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone details unauthorized body
func (o *StandAloneDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone details unauthorized body based on context it is used
func (o *StandAloneDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
