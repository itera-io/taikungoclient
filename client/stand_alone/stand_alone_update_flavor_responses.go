// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneUpdateFlavorReader is a Reader for the StandAloneUpdateFlavor structure.
type StandAloneUpdateFlavorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneUpdateFlavorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneUpdateFlavorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneUpdateFlavorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneUpdateFlavorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneUpdateFlavorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneUpdateFlavorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneUpdateFlavorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneUpdateFlavorOK creates a StandAloneUpdateFlavorOK with default headers values
func NewStandAloneUpdateFlavorOK() *StandAloneUpdateFlavorOK {
	return &StandAloneUpdateFlavorOK{}
}

/*
StandAloneUpdateFlavorOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneUpdateFlavorOK struct {
	Payload interface{}
}

// IsSuccess returns true when this stand alone update flavor o k response has a 2xx status code
func (o *StandAloneUpdateFlavorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone update flavor o k response has a 3xx status code
func (o *StandAloneUpdateFlavorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor o k response has a 4xx status code
func (o *StandAloneUpdateFlavorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone update flavor o k response has a 5xx status code
func (o *StandAloneUpdateFlavorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update flavor o k response a status code equal to that given
func (o *StandAloneUpdateFlavorOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneUpdateFlavorOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorOK  %+v", 200, o.Payload)
}

func (o *StandAloneUpdateFlavorOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorOK  %+v", 200, o.Payload)
}

func (o *StandAloneUpdateFlavorOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StandAloneUpdateFlavorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateFlavorBadRequest creates a StandAloneUpdateFlavorBadRequest with default headers values
func NewStandAloneUpdateFlavorBadRequest() *StandAloneUpdateFlavorBadRequest {
	return &StandAloneUpdateFlavorBadRequest{}
}

/*
StandAloneUpdateFlavorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneUpdateFlavorBadRequest struct {
	Payload []*StandAloneUpdateFlavorBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone update flavor bad request response has a 2xx status code
func (o *StandAloneUpdateFlavorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update flavor bad request response has a 3xx status code
func (o *StandAloneUpdateFlavorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor bad request response has a 4xx status code
func (o *StandAloneUpdateFlavorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update flavor bad request response has a 5xx status code
func (o *StandAloneUpdateFlavorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update flavor bad request response a status code equal to that given
func (o *StandAloneUpdateFlavorBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneUpdateFlavorBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneUpdateFlavorBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneUpdateFlavorBadRequest) GetPayload() []*StandAloneUpdateFlavorBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneUpdateFlavorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateFlavorUnauthorized creates a StandAloneUpdateFlavorUnauthorized with default headers values
func NewStandAloneUpdateFlavorUnauthorized() *StandAloneUpdateFlavorUnauthorized {
	return &StandAloneUpdateFlavorUnauthorized{}
}

/*
StandAloneUpdateFlavorUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneUpdateFlavorUnauthorized struct {
	Payload *StandAloneUpdateFlavorUnauthorizedBody
}

// IsSuccess returns true when this stand alone update flavor unauthorized response has a 2xx status code
func (o *StandAloneUpdateFlavorUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update flavor unauthorized response has a 3xx status code
func (o *StandAloneUpdateFlavorUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor unauthorized response has a 4xx status code
func (o *StandAloneUpdateFlavorUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update flavor unauthorized response has a 5xx status code
func (o *StandAloneUpdateFlavorUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update flavor unauthorized response a status code equal to that given
func (o *StandAloneUpdateFlavorUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneUpdateFlavorUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneUpdateFlavorUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneUpdateFlavorUnauthorized) GetPayload() *StandAloneUpdateFlavorUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneUpdateFlavorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateFlavorUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateFlavorForbidden creates a StandAloneUpdateFlavorForbidden with default headers values
func NewStandAloneUpdateFlavorForbidden() *StandAloneUpdateFlavorForbidden {
	return &StandAloneUpdateFlavorForbidden{}
}

/*
StandAloneUpdateFlavorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneUpdateFlavorForbidden struct {
	Payload *StandAloneUpdateFlavorForbiddenBody
}

// IsSuccess returns true when this stand alone update flavor forbidden response has a 2xx status code
func (o *StandAloneUpdateFlavorForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update flavor forbidden response has a 3xx status code
func (o *StandAloneUpdateFlavorForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor forbidden response has a 4xx status code
func (o *StandAloneUpdateFlavorForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update flavor forbidden response has a 5xx status code
func (o *StandAloneUpdateFlavorForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update flavor forbidden response a status code equal to that given
func (o *StandAloneUpdateFlavorForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneUpdateFlavorForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneUpdateFlavorForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneUpdateFlavorForbidden) GetPayload() *StandAloneUpdateFlavorForbiddenBody {
	return o.Payload
}

func (o *StandAloneUpdateFlavorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateFlavorForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateFlavorNotFound creates a StandAloneUpdateFlavorNotFound with default headers values
func NewStandAloneUpdateFlavorNotFound() *StandAloneUpdateFlavorNotFound {
	return &StandAloneUpdateFlavorNotFound{}
}

/*
StandAloneUpdateFlavorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneUpdateFlavorNotFound struct {
	Payload *StandAloneUpdateFlavorNotFoundBody
}

// IsSuccess returns true when this stand alone update flavor not found response has a 2xx status code
func (o *StandAloneUpdateFlavorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update flavor not found response has a 3xx status code
func (o *StandAloneUpdateFlavorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor not found response has a 4xx status code
func (o *StandAloneUpdateFlavorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update flavor not found response has a 5xx status code
func (o *StandAloneUpdateFlavorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update flavor not found response a status code equal to that given
func (o *StandAloneUpdateFlavorNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneUpdateFlavorNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneUpdateFlavorNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneUpdateFlavorNotFound) GetPayload() *StandAloneUpdateFlavorNotFoundBody {
	return o.Payload
}

func (o *StandAloneUpdateFlavorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateFlavorNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateFlavorInternalServerError creates a StandAloneUpdateFlavorInternalServerError with default headers values
func NewStandAloneUpdateFlavorInternalServerError() *StandAloneUpdateFlavorInternalServerError {
	return &StandAloneUpdateFlavorInternalServerError{}
}

/*
StandAloneUpdateFlavorInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneUpdateFlavorInternalServerError struct {
}

// IsSuccess returns true when this stand alone update flavor internal server error response has a 2xx status code
func (o *StandAloneUpdateFlavorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update flavor internal server error response has a 3xx status code
func (o *StandAloneUpdateFlavorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update flavor internal server error response has a 4xx status code
func (o *StandAloneUpdateFlavorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone update flavor internal server error response has a 5xx status code
func (o *StandAloneUpdateFlavorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone update flavor internal server error response a status code equal to that given
func (o *StandAloneUpdateFlavorInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneUpdateFlavorInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorInternalServerError ", 500)
}

func (o *StandAloneUpdateFlavorInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update/flavor][%d] standAloneUpdateFlavorInternalServerError ", 500)
}

func (o *StandAloneUpdateFlavorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneUpdateFlavorBadRequestBodyItems0 stand alone update flavor bad request body items0
swagger:model StandAloneUpdateFlavorBadRequestBodyItems0
*/
type StandAloneUpdateFlavorBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone update flavor bad request body items0
func (o *StandAloneUpdateFlavorBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update flavor bad request body items0 based on context it is used
func (o *StandAloneUpdateFlavorBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateFlavorBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateFlavorBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateFlavorBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateFlavorBody stand alone update flavor body
swagger:model StandAloneUpdateFlavorBody
*/
type StandAloneUpdateFlavorBody struct {

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this stand alone update flavor body
func (o *StandAloneUpdateFlavorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update flavor body based on context it is used
func (o *StandAloneUpdateFlavorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateFlavorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateFlavorBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateFlavorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateFlavorForbiddenBody stand alone update flavor forbidden body
swagger:model StandAloneUpdateFlavorForbiddenBody
*/
type StandAloneUpdateFlavorForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update flavor forbidden body
func (o *StandAloneUpdateFlavorForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update flavor forbidden body based on context it is used
func (o *StandAloneUpdateFlavorForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateFlavorForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateFlavorForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateFlavorForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateFlavorNotFoundBody stand alone update flavor not found body
swagger:model StandAloneUpdateFlavorNotFoundBody
*/
type StandAloneUpdateFlavorNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update flavor not found body
func (o *StandAloneUpdateFlavorNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update flavor not found body based on context it is used
func (o *StandAloneUpdateFlavorNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateFlavorNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateFlavorNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateFlavorNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateFlavorUnauthorizedBody stand alone update flavor unauthorized body
swagger:model StandAloneUpdateFlavorUnauthorizedBody
*/
type StandAloneUpdateFlavorUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update flavor unauthorized body
func (o *StandAloneUpdateFlavorUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update flavor unauthorized body based on context it is used
func (o *StandAloneUpdateFlavorUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateFlavorUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateFlavorUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateFlavorUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
