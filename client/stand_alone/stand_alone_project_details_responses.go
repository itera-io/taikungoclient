// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandAloneProjectDetailsReader is a Reader for the StandAloneProjectDetails structure.
type StandAloneProjectDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneProjectDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneProjectDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneProjectDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneProjectDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneProjectDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneProjectDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneProjectDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneProjectDetailsOK creates a StandAloneProjectDetailsOK with default headers values
func NewStandAloneProjectDetailsOK() *StandAloneProjectDetailsOK {
	return &StandAloneProjectDetailsOK{}
}

/*
StandAloneProjectDetailsOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneProjectDetailsOK struct {
	Payload *StandAloneProjectDetailsOKBody
}

// IsSuccess returns true when this stand alone project details o k response has a 2xx status code
func (o *StandAloneProjectDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone project details o k response has a 3xx status code
func (o *StandAloneProjectDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details o k response has a 4xx status code
func (o *StandAloneProjectDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone project details o k response has a 5xx status code
func (o *StandAloneProjectDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone project details o k response a status code equal to that given
func (o *StandAloneProjectDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneProjectDetailsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsOK  %+v", 200, o.Payload)
}

func (o *StandAloneProjectDetailsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsOK  %+v", 200, o.Payload)
}

func (o *StandAloneProjectDetailsOK) GetPayload() *StandAloneProjectDetailsOKBody {
	return o.Payload
}

func (o *StandAloneProjectDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneProjectDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneProjectDetailsBadRequest creates a StandAloneProjectDetailsBadRequest with default headers values
func NewStandAloneProjectDetailsBadRequest() *StandAloneProjectDetailsBadRequest {
	return &StandAloneProjectDetailsBadRequest{}
}

/*
StandAloneProjectDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneProjectDetailsBadRequest struct {
	Payload []*StandAloneProjectDetailsBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone project details bad request response has a 2xx status code
func (o *StandAloneProjectDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone project details bad request response has a 3xx status code
func (o *StandAloneProjectDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details bad request response has a 4xx status code
func (o *StandAloneProjectDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone project details bad request response has a 5xx status code
func (o *StandAloneProjectDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone project details bad request response a status code equal to that given
func (o *StandAloneProjectDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneProjectDetailsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneProjectDetailsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneProjectDetailsBadRequest) GetPayload() []*StandAloneProjectDetailsBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneProjectDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneProjectDetailsUnauthorized creates a StandAloneProjectDetailsUnauthorized with default headers values
func NewStandAloneProjectDetailsUnauthorized() *StandAloneProjectDetailsUnauthorized {
	return &StandAloneProjectDetailsUnauthorized{}
}

/*
StandAloneProjectDetailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneProjectDetailsUnauthorized struct {
	Payload *StandAloneProjectDetailsUnauthorizedBody
}

// IsSuccess returns true when this stand alone project details unauthorized response has a 2xx status code
func (o *StandAloneProjectDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone project details unauthorized response has a 3xx status code
func (o *StandAloneProjectDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details unauthorized response has a 4xx status code
func (o *StandAloneProjectDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone project details unauthorized response has a 5xx status code
func (o *StandAloneProjectDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone project details unauthorized response a status code equal to that given
func (o *StandAloneProjectDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneProjectDetailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneProjectDetailsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneProjectDetailsUnauthorized) GetPayload() *StandAloneProjectDetailsUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneProjectDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneProjectDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneProjectDetailsForbidden creates a StandAloneProjectDetailsForbidden with default headers values
func NewStandAloneProjectDetailsForbidden() *StandAloneProjectDetailsForbidden {
	return &StandAloneProjectDetailsForbidden{}
}

/*
StandAloneProjectDetailsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneProjectDetailsForbidden struct {
	Payload *StandAloneProjectDetailsForbiddenBody
}

// IsSuccess returns true when this stand alone project details forbidden response has a 2xx status code
func (o *StandAloneProjectDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone project details forbidden response has a 3xx status code
func (o *StandAloneProjectDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details forbidden response has a 4xx status code
func (o *StandAloneProjectDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone project details forbidden response has a 5xx status code
func (o *StandAloneProjectDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone project details forbidden response a status code equal to that given
func (o *StandAloneProjectDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneProjectDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneProjectDetailsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneProjectDetailsForbidden) GetPayload() *StandAloneProjectDetailsForbiddenBody {
	return o.Payload
}

func (o *StandAloneProjectDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneProjectDetailsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneProjectDetailsNotFound creates a StandAloneProjectDetailsNotFound with default headers values
func NewStandAloneProjectDetailsNotFound() *StandAloneProjectDetailsNotFound {
	return &StandAloneProjectDetailsNotFound{}
}

/*
StandAloneProjectDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneProjectDetailsNotFound struct {
	Payload *StandAloneProjectDetailsNotFoundBody
}

// IsSuccess returns true when this stand alone project details not found response has a 2xx status code
func (o *StandAloneProjectDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone project details not found response has a 3xx status code
func (o *StandAloneProjectDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details not found response has a 4xx status code
func (o *StandAloneProjectDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone project details not found response has a 5xx status code
func (o *StandAloneProjectDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone project details not found response a status code equal to that given
func (o *StandAloneProjectDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneProjectDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneProjectDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneProjectDetailsNotFound) GetPayload() *StandAloneProjectDetailsNotFoundBody {
	return o.Payload
}

func (o *StandAloneProjectDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneProjectDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneProjectDetailsInternalServerError creates a StandAloneProjectDetailsInternalServerError with default headers values
func NewStandAloneProjectDetailsInternalServerError() *StandAloneProjectDetailsInternalServerError {
	return &StandAloneProjectDetailsInternalServerError{}
}

/*
StandAloneProjectDetailsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneProjectDetailsInternalServerError struct {
}

// IsSuccess returns true when this stand alone project details internal server error response has a 2xx status code
func (o *StandAloneProjectDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone project details internal server error response has a 3xx status code
func (o *StandAloneProjectDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone project details internal server error response has a 4xx status code
func (o *StandAloneProjectDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone project details internal server error response has a 5xx status code
func (o *StandAloneProjectDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone project details internal server error response a status code equal to that given
func (o *StandAloneProjectDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneProjectDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsInternalServerError ", 500)
}

func (o *StandAloneProjectDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/StandAlone/project/{projectId}][%d] standAloneProjectDetailsInternalServerError ", 500)
}

func (o *StandAloneProjectDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneProjectDetailsBadRequestBodyItems0 stand alone project details bad request body items0
swagger:model StandAloneProjectDetailsBadRequestBodyItems0
*/
type StandAloneProjectDetailsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone project details bad request body items0
func (o *StandAloneProjectDetailsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details bad request body items0 based on context it is used
func (o *StandAloneProjectDetailsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsForbiddenBody stand alone project details forbidden body
swagger:model StandAloneProjectDetailsForbiddenBody
*/
type StandAloneProjectDetailsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone project details forbidden body
func (o *StandAloneProjectDetailsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details forbidden body based on context it is used
func (o *StandAloneProjectDetailsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsNotFoundBody stand alone project details not found body
swagger:model StandAloneProjectDetailsNotFoundBody
*/
type StandAloneProjectDetailsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone project details not found body
func (o *StandAloneProjectDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details not found body based on context it is used
func (o *StandAloneProjectDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBody stand alone project details o k body
swagger:model StandAloneProjectDetailsOKBody
*/
type StandAloneProjectDetailsOKBody struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// access profiles
	AccessProfiles *StandAloneProjectDetailsOKBodyAccessProfiles `json:"accessProfiles,omitempty"`

	// cidr
	Cidr string `json:"cidr,omitempty"`

	// cloud credential name
	CloudCredentialName string `json:"cloudCredentialName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// health
	Health string `json:"health,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled"`

	// is delete cluster
	IsDeleteCluster bool `json:"isDeleteCluster"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes"`

	// is kubevap enabled
	IsKubevapEnabled bool `json:"isKubevapEnabled"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// job Url
	JobURL string `json:"jobUrl,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// net mask
	NetMask int32 `json:"netMask,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// standalone vms
	StandaloneVms []*StandAloneProjectDetailsOKBodyStandaloneVmsItems0 `json:"standaloneVms"`

	// status
	Status string `json:"status,omitempty"`

	// taikun private SSH key
	TaikunPrivateSSHKey string `json:"taikunPrivateSSHKey,omitempty"`

	// taikun public SSH key
	TaikunPublicSSHKey string `json:"taikunPublicSSHKey,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this stand alone project details o k body
func (o *StandAloneProjectDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStandaloneVms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBody) validateAccessProfiles(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessProfiles) { // not required
		return nil
	}

	if o.AccessProfiles != nil {
		if err := o.AccessProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneProjectDetailsOKBody) validateStandaloneVms(formats strfmt.Registry) error {
	if swag.IsZero(o.StandaloneVms) { // not required
		return nil
	}

	for i := 0; i < len(o.StandaloneVms); i++ {
		if swag.IsZero(o.StandaloneVms[i]) { // not required
			continue
		}

		if o.StandaloneVms[i] != nil {
			if err := o.StandaloneVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "standaloneVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBody) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("standAloneProjectDetailsOK"+"."+"updatedAt", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stand alone project details o k body based on the context it is used
func (o *StandAloneProjectDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccessProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStandaloneVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBody) contextValidateAccessProfiles(ctx context.Context, formats strfmt.Registry) error {

	if o.AccessProfiles != nil {
		if err := o.AccessProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneProjectDetailsOKBody) contextValidateStandaloneVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandaloneVms); i++ {

		if o.StandaloneVms[i] != nil {
			if err := o.StandaloneVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "standaloneVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyAccessProfiles stand alone project details o k body access profiles
swagger:model StandAloneProjectDetailsOKBodyAccessProfiles
*/
type StandAloneProjectDetailsOKBodyAccessProfiles struct {

	// allowed hosts
	AllowedHosts []*StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0 `json:"allowedHosts"`

	// dns servers
	DNSServers []*StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0 `json:"dnsServers"`

	// http proxy
	HTTPProxy string `json:"httpProxy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ntp servers
	NtpServers []*StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0 `json:"ntpServers"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// ssh users
	SSHUsers []*StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0 `json:"sshUsers"`
}

// Validate validates this stand alone project details o k body access profiles
func (o *StandAloneProjectDetailsOKBodyAccessProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSSHUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) validateAllowedHosts(formats strfmt.Registry) error {
	if swag.IsZero(o.AllowedHosts) { // not required
		return nil
	}

	for i := 0; i < len(o.AllowedHosts); i++ {
		if swag.IsZero(o.AllowedHosts[i]) { // not required
			continue
		}

		if o.AllowedHosts[i] != nil {
			if err := o.AllowedHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(o.DNSServers) { // not required
		return nil
	}

	for i := 0; i < len(o.DNSServers); i++ {
		if swag.IsZero(o.DNSServers[i]) { // not required
			continue
		}

		if o.DNSServers[i] != nil {
			if err := o.DNSServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) validateNtpServers(formats strfmt.Registry) error {
	if swag.IsZero(o.NtpServers) { // not required
		return nil
	}

	for i := 0; i < len(o.NtpServers); i++ {
		if swag.IsZero(o.NtpServers[i]) { // not required
			continue
		}

		if o.NtpServers[i] != nil {
			if err := o.NtpServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) validateSSHUsers(formats strfmt.Registry) error {
	if swag.IsZero(o.SSHUsers) { // not required
		return nil
	}

	for i := 0; i < len(o.SSHUsers); i++ {
		if swag.IsZero(o.SSHUsers[i]) { // not required
			continue
		}

		if o.SSHUsers[i] != nil {
			if err := o.SSHUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone project details o k body access profiles based on the context it is used
func (o *StandAloneProjectDetailsOKBodyAccessProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAllowedHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNtpServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSSHUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) contextValidateAllowedHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AllowedHosts); i++ {

		if o.AllowedHosts[i] != nil {
			if err := o.AllowedHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DNSServers); i++ {

		if o.DNSServers[i] != nil {
			if err := o.DNSServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) contextValidateNtpServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NtpServers); i++ {

		if o.NtpServers[i] != nil {
			if err := o.NtpServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyAccessProfiles) contextValidateSSHUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SSHUsers); i++ {

		if o.SSHUsers[i] != nil {
			if err := o.SSHUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProjectDetailsOK" + "." + "accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfiles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfiles) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyAccessProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0 stand alone project details o k body access profiles allowed hosts items0
swagger:model StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0
*/
type StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0 struct {

	// access profile Id
	AccessProfileID int32 `json:"accessProfileId,omitempty"`

	// access profile name
	AccessProfileName string `json:"accessProfileName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mask bits
	MaskBits int32 `json:"maskBits,omitempty"`
}

// Validate validates this stand alone project details o k body access profiles allowed hosts items0
func (o *StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body access profiles allowed hosts items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyAccessProfilesAllowedHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0 stand alone project details o k body access profiles DNS servers items0
swagger:model StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0
*/
type StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this stand alone project details o k body access profiles DNS servers items0
func (o *StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body access profiles DNS servers items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyAccessProfilesDNSServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0 stand alone project details o k body access profiles ntp servers items0
swagger:model StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0
*/
type StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this stand alone project details o k body access profiles ntp servers items0
func (o *StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body access profiles ntp servers items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyAccessProfilesNtpServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0 stand alone project details o k body access profiles SSH users items0
swagger:model StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0
*/
type StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"isDeleted"`

	// name
	Name string `json:"name,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this stand alone project details o k body access profiles SSH users items0
func (o *StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body access profiles SSH users items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyAccessProfilesSSHUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyStandaloneVmsItems0 stand alone project details o k body standalone vms items0
swagger:model StandAloneProjectDetailsOKBodyStandaloneVmsItems0
*/
type StandAloneProjectDetailsOKBodyStandaloneVmsItems0 struct {

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// cloud init
	CloudInit string `json:"cloudInit,omitempty"`

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// flavor Id
	FlavorID string `json:"flavorId,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// is windows
	IsWindows bool `json:"isWindows"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// shut off
	ShutOff bool `json:"shutOff"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice string `json:"spotPrice,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`

	// stand alone profile
	StandAloneProfile *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile `json:"standAloneProfile,omitempty"`

	// stand alone Vm disks
	StandAloneVMDisks []*StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0 `json:"standAloneVmDisks"`

	// status
	Status string `json:"status,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// volume size
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone project details o k body standalone vms items0
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStandAloneProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStandAloneVMDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) validateStandAloneProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneProfile) { // not required
		return nil
	}

	if o.StandAloneProfile != nil {
		if err := o.StandAloneProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) validateStandAloneVMDisks(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneVMDisks) { // not required
		return nil
	}

	for i := 0; i < len(o.StandAloneVMDisks); i++ {
		if swag.IsZero(o.StandAloneVMDisks[i]) { // not required
			continue
		}

		if o.StandAloneVMDisks[i] != nil {
			if err := o.StandAloneVMDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone project details o k body standalone vms items0 based on the context it is used
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStandAloneProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStandAloneVMDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) contextValidateStandAloneProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.StandAloneProfile != nil {
		if err := o.StandAloneProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) contextValidateStandAloneVMDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandAloneVMDisks); i++ {

		if o.StandAloneVMDisks[i] != nil {
			if err := o.StandAloneVMDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyStandaloneVmsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile stand alone project details o k body standalone vms items0 stand alone profile
swagger:model StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile
*/
type StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// public key
	PublicKey string `json:"publicKey,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// stand alone profile security groups
	StandAloneProfileSecurityGroups []*StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 `json:"standAloneProfileSecurityGroups"`
}

// Validate validates this stand alone project details o k body standalone vms items0 stand alone profile
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStandAloneProfileSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) validateStandAloneProfileSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.StandAloneProfileSecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.StandAloneProfileSecurityGroups); i++ {
		if swag.IsZero(o.StandAloneProfileSecurityGroups[i]) { // not required
			continue
		}

		if o.StandAloneProfileSecurityGroups[i] != nil {
			if err := o.StandAloneProfileSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone project details o k body standalone vms items0 stand alone profile based on the context it is used
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStandAloneProfileSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) contextValidateStandAloneProfileSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandAloneProfileSecurityGroups); i++ {

		if o.StandAloneProfileSecurityGroups[i] != nil {
			if err := o.StandAloneProfileSecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 stand alone project details o k body standalone vms items0 stand alone profile stand alone profile security groups items0
swagger:model StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
*/
type StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port max range
	PortMaxRange int32 `json:"portMaxRange,omitempty"`

	// port min range
	PortMinRange int32 `json:"portMinRange,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// remote Ip prefix
	RemoteIPPrefix string `json:"remoteIpPrefix,omitempty"`
}

// Validate validates this stand alone project details o k body standalone vms items0 stand alone profile stand alone profile security groups items0
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body standalone vms items0 stand alone profile stand alone profile security groups items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0 stand alone project details o k body standalone vms items0 stand alone VM disks items0
swagger:model StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0
*/
type StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0 struct {

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// lun Id
	LunID string `json:"lunId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone project details o k body standalone vms items0 stand alone VM disks items0
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details o k body standalone vms items0 stand alone VM disks items0 based on context it is used
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsOKBodyStandaloneVmsItems0StandAloneVMDisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneProjectDetailsUnauthorizedBody stand alone project details unauthorized body
swagger:model StandAloneProjectDetailsUnauthorizedBody
*/
type StandAloneProjectDetailsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone project details unauthorized body
func (o *StandAloneProjectDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone project details unauthorized body based on context it is used
func (o *StandAloneProjectDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneProjectDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneProjectDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneProjectDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
