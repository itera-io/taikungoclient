// Code generated by go-swagger; DO NOT EDIT.

package stand_alone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneUpdateReader is a Reader for the StandAloneUpdate structure.
type StandAloneUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneUpdateOK creates a StandAloneUpdateOK with default headers values
func NewStandAloneUpdateOK() *StandAloneUpdateOK {
	return &StandAloneUpdateOK{}
}

/*
StandAloneUpdateOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this stand alone update o k response has a 2xx status code
func (o *StandAloneUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone update o k response has a 3xx status code
func (o *StandAloneUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update o k response has a 4xx status code
func (o *StandAloneUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone update o k response has a 5xx status code
func (o *StandAloneUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update o k response a status code equal to that given
func (o *StandAloneUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateOK  %+v", 200, o.Payload)
}

func (o *StandAloneUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateOK  %+v", 200, o.Payload)
}

func (o *StandAloneUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StandAloneUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateBadRequest creates a StandAloneUpdateBadRequest with default headers values
func NewStandAloneUpdateBadRequest() *StandAloneUpdateBadRequest {
	return &StandAloneUpdateBadRequest{}
}

/*
StandAloneUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneUpdateBadRequest struct {
	Payload []*StandAloneUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone update bad request response has a 2xx status code
func (o *StandAloneUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update bad request response has a 3xx status code
func (o *StandAloneUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update bad request response has a 4xx status code
func (o *StandAloneUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update bad request response has a 5xx status code
func (o *StandAloneUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update bad request response a status code equal to that given
func (o *StandAloneUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneUpdateBadRequest) GetPayload() []*StandAloneUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateUnauthorized creates a StandAloneUpdateUnauthorized with default headers values
func NewStandAloneUpdateUnauthorized() *StandAloneUpdateUnauthorized {
	return &StandAloneUpdateUnauthorized{}
}

/*
StandAloneUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneUpdateUnauthorized struct {
	Payload *StandAloneUpdateUnauthorizedBody
}

// IsSuccess returns true when this stand alone update unauthorized response has a 2xx status code
func (o *StandAloneUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update unauthorized response has a 3xx status code
func (o *StandAloneUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update unauthorized response has a 4xx status code
func (o *StandAloneUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update unauthorized response has a 5xx status code
func (o *StandAloneUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update unauthorized response a status code equal to that given
func (o *StandAloneUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneUpdateUnauthorized) GetPayload() *StandAloneUpdateUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateForbidden creates a StandAloneUpdateForbidden with default headers values
func NewStandAloneUpdateForbidden() *StandAloneUpdateForbidden {
	return &StandAloneUpdateForbidden{}
}

/*
StandAloneUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneUpdateForbidden struct {
	Payload *StandAloneUpdateForbiddenBody
}

// IsSuccess returns true when this stand alone update forbidden response has a 2xx status code
func (o *StandAloneUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update forbidden response has a 3xx status code
func (o *StandAloneUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update forbidden response has a 4xx status code
func (o *StandAloneUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update forbidden response has a 5xx status code
func (o *StandAloneUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update forbidden response a status code equal to that given
func (o *StandAloneUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneUpdateForbidden) GetPayload() *StandAloneUpdateForbiddenBody {
	return o.Payload
}

func (o *StandAloneUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateNotFound creates a StandAloneUpdateNotFound with default headers values
func NewStandAloneUpdateNotFound() *StandAloneUpdateNotFound {
	return &StandAloneUpdateNotFound{}
}

/*
StandAloneUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneUpdateNotFound struct {
	Payload *StandAloneUpdateNotFoundBody
}

// IsSuccess returns true when this stand alone update not found response has a 2xx status code
func (o *StandAloneUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update not found response has a 3xx status code
func (o *StandAloneUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update not found response has a 4xx status code
func (o *StandAloneUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone update not found response has a 5xx status code
func (o *StandAloneUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone update not found response a status code equal to that given
func (o *StandAloneUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneUpdateNotFound) GetPayload() *StandAloneUpdateNotFoundBody {
	return o.Payload
}

func (o *StandAloneUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneUpdateInternalServerError creates a StandAloneUpdateInternalServerError with default headers values
func NewStandAloneUpdateInternalServerError() *StandAloneUpdateInternalServerError {
	return &StandAloneUpdateInternalServerError{}
}

/*
StandAloneUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneUpdateInternalServerError struct {
}

// IsSuccess returns true when this stand alone update internal server error response has a 2xx status code
func (o *StandAloneUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone update internal server error response has a 3xx status code
func (o *StandAloneUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone update internal server error response has a 4xx status code
func (o *StandAloneUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone update internal server error response has a 5xx status code
func (o *StandAloneUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone update internal server error response a status code equal to that given
func (o *StandAloneUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateInternalServerError ", 500)
}

func (o *StandAloneUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAlone/update][%d] standAloneUpdateInternalServerError ", 500)
}

func (o *StandAloneUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneUpdateBadRequestBodyItems0 stand alone update bad request body items0
swagger:model StandAloneUpdateBadRequestBodyItems0
*/
type StandAloneUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone update bad request body items0
func (o *StandAloneUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update bad request body items0 based on context it is used
func (o *StandAloneUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateBody stand alone update body
swagger:model StandAloneUpdateBody
*/
type StandAloneUpdateBody struct {

	// disks
	Disks []*StandAloneUpdateParamsBodyDisksItems0 `json:"disks"`

	// flavor Id
	FlavorID string `json:"flavorId,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// instance Id
	InstanceID string `json:"instanceId,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`
}

// Validate validates this stand alone update body
func (o *StandAloneUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneUpdateBody) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(o.Disks) { // not required
		return nil
	}

	for i := 0; i < len(o.Disks); i++ {
		if swag.IsZero(o.Disks[i]) { // not required
			continue
		}

		if o.Disks[i] != nil {
			if err := o.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stand alone update body based on the context it is used
func (o *StandAloneUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StandAloneUpdateBody) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Disks); i++ {

		if o.Disks[i] != nil {
			if err := o.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateForbiddenBody stand alone update forbidden body
swagger:model StandAloneUpdateForbiddenBody
*/
type StandAloneUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update forbidden body
func (o *StandAloneUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update forbidden body based on context it is used
func (o *StandAloneUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateNotFoundBody stand alone update not found body
swagger:model StandAloneUpdateNotFoundBody
*/
type StandAloneUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update not found body
func (o *StandAloneUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update not found body based on context it is used
func (o *StandAloneUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateParamsBodyDisksItems0 stand alone update params body disks items0
swagger:model StandAloneUpdateParamsBodyDisksItems0
*/
type StandAloneUpdateParamsBodyDisksItems0 struct {

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this stand alone update params body disks items0
func (o *StandAloneUpdateParamsBodyDisksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update params body disks items0 based on context it is used
func (o *StandAloneUpdateParamsBodyDisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateParamsBodyDisksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateParamsBodyDisksItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateParamsBodyDisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneUpdateUnauthorizedBody stand alone update unauthorized body
swagger:model StandAloneUpdateUnauthorizedBody
*/
type StandAloneUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone update unauthorized body
func (o *StandAloneUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone update unauthorized body based on context it is used
func (o *StandAloneUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
