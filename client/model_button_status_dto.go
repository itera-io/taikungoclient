/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ButtonStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ButtonStatusDto{}

// ButtonStatusDto struct for ButtonStatusDto
type ButtonStatusDto struct {
	Enable bool `json:"enable"`
	Reasons []string `json:"reasons"`
	Hidden bool `json:"hidden"`
}

type _ButtonStatusDto ButtonStatusDto

// NewButtonStatusDto instantiates a new ButtonStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewButtonStatusDto(enable bool, reasons []string, hidden bool) *ButtonStatusDto {
	this := ButtonStatusDto{}
	this.Enable = enable
	this.Reasons = reasons
	this.Hidden = hidden
	return &this
}

// NewButtonStatusDtoWithDefaults instantiates a new ButtonStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewButtonStatusDtoWithDefaults() *ButtonStatusDto {
	this := ButtonStatusDto{}
	return &this
}

// GetEnable returns the Enable field value
func (o *ButtonStatusDto) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *ButtonStatusDto) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *ButtonStatusDto) SetEnable(v bool) {
	o.Enable = v
}

// GetReasons returns the Reasons field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ButtonStatusDto) GetReasons() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ButtonStatusDto) GetReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// SetReasons sets field value
func (o *ButtonStatusDto) SetReasons(v []string) {
	o.Reasons = v
}

// GetHidden returns the Hidden field value
func (o *ButtonStatusDto) GetHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value
// and a boolean to check if the value has been set.
func (o *ButtonStatusDto) GetHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hidden, true
}

// SetHidden sets field value
func (o *ButtonStatusDto) SetHidden(v bool) {
	o.Hidden = v
}

func (o ButtonStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ButtonStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	if o.Reasons != nil {
		toSerialize["reasons"] = o.Reasons
	}
	toSerialize["hidden"] = o.Hidden
	return toSerialize, nil
}

func (o *ButtonStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
		"reasons",
		"hidden",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varButtonStatusDto := _ButtonStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varButtonStatusDto)

	if err != nil {
		return err
	}

	*o = ButtonStatusDto(varButtonStatusDto)

	return err
}

type NullableButtonStatusDto struct {
	value *ButtonStatusDto
	isSet bool
}

func (v NullableButtonStatusDto) Get() *ButtonStatusDto {
	return v.value
}

func (v *NullableButtonStatusDto) Set(val *ButtonStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableButtonStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableButtonStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableButtonStatusDto(val *ButtonStatusDto) *NullableButtonStatusDto {
	return &NullableButtonStatusDto{value: val, isSet: true}
}

func (v NullableButtonStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableButtonStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


