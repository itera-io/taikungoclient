/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AvailableEndpointData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableEndpointData{}

// AvailableEndpointData struct for AvailableEndpointData
type AvailableEndpointData struct {
	Id *int32 `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
	Method *string `json:"method,omitempty"`
	Description *string `json:"description,omitempty"`
	Controller *string `json:"controller,omitempty"`
}

// NewAvailableEndpointData instantiates a new AvailableEndpointData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableEndpointData() *AvailableEndpointData {
	this := AvailableEndpointData{}
	return &this
}

// NewAvailableEndpointDataWithDefaults instantiates a new AvailableEndpointData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableEndpointDataWithDefaults() *AvailableEndpointData {
	this := AvailableEndpointData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AvailableEndpointData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableEndpointData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AvailableEndpointData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AvailableEndpointData) SetId(v int32) {
	o.Id = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *AvailableEndpointData) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableEndpointData) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *AvailableEndpointData) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *AvailableEndpointData) SetPath(v string) {
	o.Path = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *AvailableEndpointData) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableEndpointData) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *AvailableEndpointData) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *AvailableEndpointData) SetMethod(v string) {
	o.Method = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AvailableEndpointData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableEndpointData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AvailableEndpointData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AvailableEndpointData) SetDescription(v string) {
	o.Description = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *AvailableEndpointData) GetController() string {
	if o == nil || IsNil(o.Controller) {
		var ret string
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableEndpointData) GetControllerOk() (*string, bool) {
	if o == nil || IsNil(o.Controller) {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *AvailableEndpointData) HasController() bool {
	if o != nil && !IsNil(o.Controller) {
		return true
	}

	return false
}

// SetController gets a reference to the given string and assigns it to the Controller field.
func (o *AvailableEndpointData) SetController(v string) {
	o.Controller = &v
}

func (o AvailableEndpointData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableEndpointData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Controller) {
		toSerialize["controller"] = o.Controller
	}
	return toSerialize, nil
}

type NullableAvailableEndpointData struct {
	value *AvailableEndpointData
	isSet bool
}

func (v NullableAvailableEndpointData) Get() *AvailableEndpointData {
	return v.value
}

func (v *NullableAvailableEndpointData) Set(val *AvailableEndpointData) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableEndpointData) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableEndpointData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableEndpointData(val *AvailableEndpointData) *NullableAvailableEndpointData {
	return &NullableAvailableEndpointData{value: val, isSet: true}
}

func (v NullableAvailableEndpointData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableEndpointData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


