/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// EDaemonSetAction the model 'EDaemonSetAction'
type EDaemonSetAction string

// List of EDaemonSetAction
const (
	EDAEMONSETACTION_RESTART EDaemonSetAction = "Restart"
	EDAEMONSETACTION_ROLLBACK EDaemonSetAction = "Rollback"
)

// All allowed values of EDaemonSetAction enum
var AllowedEDaemonSetActionEnumValues = []EDaemonSetAction{
	"Restart",
	"Rollback",
}

func (v *EDaemonSetAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EDaemonSetAction(value)
	for _, existing := range AllowedEDaemonSetActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EDaemonSetAction", value)
}

// NewEDaemonSetActionFromValue returns a pointer to a valid EDaemonSetAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEDaemonSetActionFromValue(v string) (*EDaemonSetAction, error) {
	ev := EDaemonSetAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EDaemonSetAction: valid values are %v", v, AllowedEDaemonSetActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EDaemonSetAction) IsValid() bool {
	for _, existing := range AllowedEDaemonSetActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EDaemonSetAction value
func (v EDaemonSetAction) Ptr() *EDaemonSetAction {
	return &v
}

type NullableEDaemonSetAction struct {
	value *EDaemonSetAction
	isSet bool
}

func (v NullableEDaemonSetAction) Get() *EDaemonSetAction {
	return v.value
}

func (v *NullableEDaemonSetAction) Set(val *EDaemonSetAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEDaemonSetAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEDaemonSetAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEDaemonSetAction(val *EDaemonSetAction) *NullableEDaemonSetAction {
	return &NullableEDaemonSetAction{value: val, isSet: true}
}

func (v NullableEDaemonSetAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEDaemonSetAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

