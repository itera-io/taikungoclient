/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectAppDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectAppDetailsDto{}

// ProjectAppDetailsDto struct for ProjectAppDetailsDto
type ProjectAppDetailsDto struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Status *EInstanceStatus `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
	CatalogId *int32 `json:"catalogId,omitempty"`
	CatalogName *string `json:"catalogName,omitempty"`
	CatalogAppName *string `json:"catalogAppName,omitempty"`
	AppRepoName *string `json:"appRepoName,omitempty"`
	Logo *string `json:"logo,omitempty"`
	Values *string `json:"values,omitempty"`
	AutoSync *bool `json:"autoSync,omitempty"`
	ReleaseNotes *string `json:"releaseNotes,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
	HelmResult *string `json:"helmResult,omitempty"`
	ProjectId *int32 `json:"projectId,omitempty"`
	HasJsonSchema *bool `json:"hasJsonSchema,omitempty"`
	CatalogAppId *int32 `json:"catalogAppId,omitempty"`
	PackageId *string `json:"packageId,omitempty"`
	Logs *string `json:"logs,omitempty"`
	ProjectAppParams []ProjectAppParamDto `json:"projectAppParams,omitempty"`
}

// NewProjectAppDetailsDto instantiates a new ProjectAppDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectAppDetailsDto() *ProjectAppDetailsDto {
	this := ProjectAppDetailsDto{}
	return &this
}

// NewProjectAppDetailsDtoWithDefaults instantiates a new ProjectAppDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectAppDetailsDtoWithDefaults() *ProjectAppDetailsDto {
	this := ProjectAppDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectAppDetailsDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectAppDetailsDto) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ProjectAppDetailsDto) SetNamespace(v string) {
	o.Namespace = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetStatus() EInstanceStatus {
	if o == nil || IsNil(o.Status) {
		var ret EInstanceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetStatusOk() (*EInstanceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EInstanceStatus and assigns it to the Status field.
func (o *ProjectAppDetailsDto) SetStatus(v EInstanceStatus) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ProjectAppDetailsDto) SetVersion(v string) {
	o.Version = &v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetCatalogId() int32 {
	if o == nil || IsNil(o.CatalogId) {
		var ret int32
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetCatalogIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given int32 and assigns it to the CatalogId field.
func (o *ProjectAppDetailsDto) SetCatalogId(v int32) {
	o.CatalogId = &v
}

// GetCatalogName returns the CatalogName field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetCatalogName() string {
	if o == nil || IsNil(o.CatalogName) {
		var ret string
		return ret
	}
	return *o.CatalogName
}

// GetCatalogNameOk returns a tuple with the CatalogName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetCatalogNameOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogName) {
		return nil, false
	}
	return o.CatalogName, true
}

// HasCatalogName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogName() bool {
	if o != nil && !IsNil(o.CatalogName) {
		return true
	}

	return false
}

// SetCatalogName gets a reference to the given string and assigns it to the CatalogName field.
func (o *ProjectAppDetailsDto) SetCatalogName(v string) {
	o.CatalogName = &v
}

// GetCatalogAppName returns the CatalogAppName field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetCatalogAppName() string {
	if o == nil || IsNil(o.CatalogAppName) {
		var ret string
		return ret
	}
	return *o.CatalogAppName
}

// GetCatalogAppNameOk returns a tuple with the CatalogAppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetCatalogAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogAppName) {
		return nil, false
	}
	return o.CatalogAppName, true
}

// HasCatalogAppName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogAppName() bool {
	if o != nil && !IsNil(o.CatalogAppName) {
		return true
	}

	return false
}

// SetCatalogAppName gets a reference to the given string and assigns it to the CatalogAppName field.
func (o *ProjectAppDetailsDto) SetCatalogAppName(v string) {
	o.CatalogAppName = &v
}

// GetAppRepoName returns the AppRepoName field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetAppRepoName() string {
	if o == nil || IsNil(o.AppRepoName) {
		var ret string
		return ret
	}
	return *o.AppRepoName
}

// GetAppRepoNameOk returns a tuple with the AppRepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetAppRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppRepoName) {
		return nil, false
	}
	return o.AppRepoName, true
}

// HasAppRepoName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasAppRepoName() bool {
	if o != nil && !IsNil(o.AppRepoName) {
		return true
	}

	return false
}

// SetAppRepoName gets a reference to the given string and assigns it to the AppRepoName field.
func (o *ProjectAppDetailsDto) SetAppRepoName(v string) {
	o.AppRepoName = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ProjectAppDetailsDto) SetLogo(v string) {
	o.Logo = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetValues() string {
	if o == nil || IsNil(o.Values) {
		var ret string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetValuesOk() (*string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given string and assigns it to the Values field.
func (o *ProjectAppDetailsDto) SetValues(v string) {
	o.Values = &v
}

// GetAutoSync returns the AutoSync field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetAutoSync() bool {
	if o == nil || IsNil(o.AutoSync) {
		var ret bool
		return ret
	}
	return *o.AutoSync
}

// GetAutoSyncOk returns a tuple with the AutoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetAutoSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoSync) {
		return nil, false
	}
	return o.AutoSync, true
}

// HasAutoSync returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasAutoSync() bool {
	if o != nil && !IsNil(o.AutoSync) {
		return true
	}

	return false
}

// SetAutoSync gets a reference to the given bool and assigns it to the AutoSync field.
func (o *ProjectAppDetailsDto) SetAutoSync(v bool) {
	o.AutoSync = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetReleaseNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNotes) {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasReleaseNotes() bool {
	if o != nil && !IsNil(o.ReleaseNotes) {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *ProjectAppDetailsDto) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *ProjectAppDetailsDto) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetHelmResult returns the HelmResult field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetHelmResult() string {
	if o == nil || IsNil(o.HelmResult) {
		var ret string
		return ret
	}
	return *o.HelmResult
}

// GetHelmResultOk returns a tuple with the HelmResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetHelmResultOk() (*string, bool) {
	if o == nil || IsNil(o.HelmResult) {
		return nil, false
	}
	return o.HelmResult, true
}

// HasHelmResult returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasHelmResult() bool {
	if o != nil && !IsNil(o.HelmResult) {
		return true
	}

	return false
}

// SetHelmResult gets a reference to the given string and assigns it to the HelmResult field.
func (o *ProjectAppDetailsDto) SetHelmResult(v string) {
	o.HelmResult = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ProjectAppDetailsDto) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetHasJsonSchema returns the HasJsonSchema field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetHasJsonSchema() bool {
	if o == nil || IsNil(o.HasJsonSchema) {
		var ret bool
		return ret
	}
	return *o.HasJsonSchema
}

// GetHasJsonSchemaOk returns a tuple with the HasJsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetHasJsonSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasJsonSchema) {
		return nil, false
	}
	return o.HasJsonSchema, true
}

// HasHasJsonSchema returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasHasJsonSchema() bool {
	if o != nil && !IsNil(o.HasJsonSchema) {
		return true
	}

	return false
}

// SetHasJsonSchema gets a reference to the given bool and assigns it to the HasJsonSchema field.
func (o *ProjectAppDetailsDto) SetHasJsonSchema(v bool) {
	o.HasJsonSchema = &v
}

// GetCatalogAppId returns the CatalogAppId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetCatalogAppId() int32 {
	if o == nil || IsNil(o.CatalogAppId) {
		var ret int32
		return ret
	}
	return *o.CatalogAppId
}

// GetCatalogAppIdOk returns a tuple with the CatalogAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetCatalogAppIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogAppId) {
		return nil, false
	}
	return o.CatalogAppId, true
}

// HasCatalogAppId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasCatalogAppId() bool {
	if o != nil && !IsNil(o.CatalogAppId) {
		return true
	}

	return false
}

// SetCatalogAppId gets a reference to the given int32 and assigns it to the CatalogAppId field.
func (o *ProjectAppDetailsDto) SetCatalogAppId(v int32) {
	o.CatalogAppId = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetPackageId() string {
	if o == nil || IsNil(o.PackageId) {
		var ret string
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetPackageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given string and assigns it to the PackageId field.
func (o *ProjectAppDetailsDto) SetPackageId(v string) {
	o.PackageId = &v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetLogs() string {
	if o == nil || IsNil(o.Logs) {
		var ret string
		return ret
	}
	return *o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetLogsOk() (*string, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given string and assigns it to the Logs field.
func (o *ProjectAppDetailsDto) SetLogs(v string) {
	o.Logs = &v
}

// GetProjectAppParams returns the ProjectAppParams field value if set, zero value otherwise.
func (o *ProjectAppDetailsDto) GetProjectAppParams() []ProjectAppParamDto {
	if o == nil || IsNil(o.ProjectAppParams) {
		var ret []ProjectAppParamDto
		return ret
	}
	return o.ProjectAppParams
}

// GetProjectAppParamsOk returns a tuple with the ProjectAppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectAppDetailsDto) GetProjectAppParamsOk() ([]ProjectAppParamDto, bool) {
	if o == nil || IsNil(o.ProjectAppParams) {
		return nil, false
	}
	return o.ProjectAppParams, true
}

// HasProjectAppParams returns a boolean if a field has been set.
func (o *ProjectAppDetailsDto) HasProjectAppParams() bool {
	if o != nil && !IsNil(o.ProjectAppParams) {
		return true
	}

	return false
}

// SetProjectAppParams gets a reference to the given []ProjectAppParamDto and assigns it to the ProjectAppParams field.
func (o *ProjectAppDetailsDto) SetProjectAppParams(v []ProjectAppParamDto) {
	o.ProjectAppParams = v
}

func (o ProjectAppDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectAppDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.CatalogId) {
		toSerialize["catalogId"] = o.CatalogId
	}
	if !IsNil(o.CatalogName) {
		toSerialize["catalogName"] = o.CatalogName
	}
	if !IsNil(o.CatalogAppName) {
		toSerialize["catalogAppName"] = o.CatalogAppName
	}
	if !IsNil(o.AppRepoName) {
		toSerialize["appRepoName"] = o.AppRepoName
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.AutoSync) {
		toSerialize["autoSync"] = o.AutoSync
	}
	if !IsNil(o.ReleaseNotes) {
		toSerialize["releaseNotes"] = o.ReleaseNotes
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.HelmResult) {
		toSerialize["helmResult"] = o.HelmResult
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.HasJsonSchema) {
		toSerialize["hasJsonSchema"] = o.HasJsonSchema
	}
	if !IsNil(o.CatalogAppId) {
		toSerialize["catalogAppId"] = o.CatalogAppId
	}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	if !IsNil(o.ProjectAppParams) {
		toSerialize["projectAppParams"] = o.ProjectAppParams
	}
	return toSerialize, nil
}

type NullableProjectAppDetailsDto struct {
	value *ProjectAppDetailsDto
	isSet bool
}

func (v NullableProjectAppDetailsDto) Get() *ProjectAppDetailsDto {
	return v.value
}

func (v *NullableProjectAppDetailsDto) Set(val *ProjectAppDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAppDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAppDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAppDetailsDto(val *ProjectAppDetailsDto) *NullableProjectAppDetailsDto {
	return &NullableProjectAppDetailsDto{value: val, isSet: true}
}

func (v NullableProjectAppDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAppDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


