// Code generated by go-swagger; DO NOT EDIT.

package security_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SecurityGroupCreate(params *SecurityGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupCreateOK, error)

	SecurityGroupDelete(params *SecurityGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupDeleteOK, error)

	SecurityGroupEdit(params *SecurityGroupEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupEditOK, error)

	SecurityGroupList(params *SecurityGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SecurityGroupCreate creates standalone profile security group
*/
func (a *Client) SecurityGroupCreate(params *SecurityGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityGroup_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SecurityGroup/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityGroupCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityGroup_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupDelete deletes standalone profile security group
*/
func (a *Client) SecurityGroupDelete(params *SecurityGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityGroup_Delete",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SecurityGroup/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityGroupDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityGroup_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupEdit es dit standalone profile security group
*/
func (a *Client) SecurityGroupEdit(params *SecurityGroupEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityGroup_Edit",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SecurityGroup/edit",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityGroupEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityGroup_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SecurityGroupList lists stand alone security group by profile id
*/
func (a *Client) SecurityGroupList(params *SecurityGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SecurityGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecurityGroupListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecurityGroup_List",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SecurityGroup/list/{standAloneProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SecurityGroupListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecurityGroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SecurityGroup_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
