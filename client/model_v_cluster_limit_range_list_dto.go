/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the VClusterLimitRangeListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VClusterLimitRangeListDto{}

// VClusterLimitRangeListDto struct for VClusterLimitRangeListDto
type VClusterLimitRangeListDto struct {
	ResourceType NullableString `json:"resourceType,omitempty"`
	MaxLimit NullableString `json:"maxLimit,omitempty"`
	MinRequest NullableString `json:"minRequest,omitempty"`
	DefaultLimit NullableString `json:"defaultLimit,omitempty"`
	DefaultRequest NullableString `json:"defaultRequest,omitempty"`
}

// NewVClusterLimitRangeListDto instantiates a new VClusterLimitRangeListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVClusterLimitRangeListDto() *VClusterLimitRangeListDto {
	this := VClusterLimitRangeListDto{}
	return &this
}

// NewVClusterLimitRangeListDtoWithDefaults instantiates a new VClusterLimitRangeListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVClusterLimitRangeListDtoWithDefaults() *VClusterLimitRangeListDto {
	this := VClusterLimitRangeListDto{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VClusterLimitRangeListDto) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *VClusterLimitRangeListDto) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableString and assigns it to the ResourceType field.
func (o *VClusterLimitRangeListDto) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}
// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *VClusterLimitRangeListDto) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *VClusterLimitRangeListDto) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetMaxLimit returns the MaxLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VClusterLimitRangeListDto) GetMaxLimit() string {
	if o == nil || IsNil(o.MaxLimit.Get()) {
		var ret string
		return ret
	}
	return *o.MaxLimit.Get()
}

// GetMaxLimitOk returns a tuple with the MaxLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetMaxLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxLimit.Get(), o.MaxLimit.IsSet()
}

// HasMaxLimit returns a boolean if a field has been set.
func (o *VClusterLimitRangeListDto) HasMaxLimit() bool {
	if o != nil && o.MaxLimit.IsSet() {
		return true
	}

	return false
}

// SetMaxLimit gets a reference to the given NullableString and assigns it to the MaxLimit field.
func (o *VClusterLimitRangeListDto) SetMaxLimit(v string) {
	o.MaxLimit.Set(&v)
}
// SetMaxLimitNil sets the value for MaxLimit to be an explicit nil
func (o *VClusterLimitRangeListDto) SetMaxLimitNil() {
	o.MaxLimit.Set(nil)
}

// UnsetMaxLimit ensures that no value is present for MaxLimit, not even an explicit nil
func (o *VClusterLimitRangeListDto) UnsetMaxLimit() {
	o.MaxLimit.Unset()
}

// GetMinRequest returns the MinRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VClusterLimitRangeListDto) GetMinRequest() string {
	if o == nil || IsNil(o.MinRequest.Get()) {
		var ret string
		return ret
	}
	return *o.MinRequest.Get()
}

// GetMinRequestOk returns a tuple with the MinRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetMinRequestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinRequest.Get(), o.MinRequest.IsSet()
}

// HasMinRequest returns a boolean if a field has been set.
func (o *VClusterLimitRangeListDto) HasMinRequest() bool {
	if o != nil && o.MinRequest.IsSet() {
		return true
	}

	return false
}

// SetMinRequest gets a reference to the given NullableString and assigns it to the MinRequest field.
func (o *VClusterLimitRangeListDto) SetMinRequest(v string) {
	o.MinRequest.Set(&v)
}
// SetMinRequestNil sets the value for MinRequest to be an explicit nil
func (o *VClusterLimitRangeListDto) SetMinRequestNil() {
	o.MinRequest.Set(nil)
}

// UnsetMinRequest ensures that no value is present for MinRequest, not even an explicit nil
func (o *VClusterLimitRangeListDto) UnsetMinRequest() {
	o.MinRequest.Unset()
}

// GetDefaultLimit returns the DefaultLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VClusterLimitRangeListDto) GetDefaultLimit() string {
	if o == nil || IsNil(o.DefaultLimit.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultLimit.Get()
}

// GetDefaultLimitOk returns a tuple with the DefaultLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetDefaultLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultLimit.Get(), o.DefaultLimit.IsSet()
}

// HasDefaultLimit returns a boolean if a field has been set.
func (o *VClusterLimitRangeListDto) HasDefaultLimit() bool {
	if o != nil && o.DefaultLimit.IsSet() {
		return true
	}

	return false
}

// SetDefaultLimit gets a reference to the given NullableString and assigns it to the DefaultLimit field.
func (o *VClusterLimitRangeListDto) SetDefaultLimit(v string) {
	o.DefaultLimit.Set(&v)
}
// SetDefaultLimitNil sets the value for DefaultLimit to be an explicit nil
func (o *VClusterLimitRangeListDto) SetDefaultLimitNil() {
	o.DefaultLimit.Set(nil)
}

// UnsetDefaultLimit ensures that no value is present for DefaultLimit, not even an explicit nil
func (o *VClusterLimitRangeListDto) UnsetDefaultLimit() {
	o.DefaultLimit.Unset()
}

// GetDefaultRequest returns the DefaultRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VClusterLimitRangeListDto) GetDefaultRequest() string {
	if o == nil || IsNil(o.DefaultRequest.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultRequest.Get()
}

// GetDefaultRequestOk returns a tuple with the DefaultRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetDefaultRequestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRequest.Get(), o.DefaultRequest.IsSet()
}

// HasDefaultRequest returns a boolean if a field has been set.
func (o *VClusterLimitRangeListDto) HasDefaultRequest() bool {
	if o != nil && o.DefaultRequest.IsSet() {
		return true
	}

	return false
}

// SetDefaultRequest gets a reference to the given NullableString and assigns it to the DefaultRequest field.
func (o *VClusterLimitRangeListDto) SetDefaultRequest(v string) {
	o.DefaultRequest.Set(&v)
}
// SetDefaultRequestNil sets the value for DefaultRequest to be an explicit nil
func (o *VClusterLimitRangeListDto) SetDefaultRequestNil() {
	o.DefaultRequest.Set(nil)
}

// UnsetDefaultRequest ensures that no value is present for DefaultRequest, not even an explicit nil
func (o *VClusterLimitRangeListDto) UnsetDefaultRequest() {
	o.DefaultRequest.Unset()
}

func (o VClusterLimitRangeListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VClusterLimitRangeListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType.IsSet() {
		toSerialize["resourceType"] = o.ResourceType.Get()
	}
	if o.MaxLimit.IsSet() {
		toSerialize["maxLimit"] = o.MaxLimit.Get()
	}
	if o.MinRequest.IsSet() {
		toSerialize["minRequest"] = o.MinRequest.Get()
	}
	if o.DefaultLimit.IsSet() {
		toSerialize["defaultLimit"] = o.DefaultLimit.Get()
	}
	if o.DefaultRequest.IsSet() {
		toSerialize["defaultRequest"] = o.DefaultRequest.Get()
	}
	return toSerialize, nil
}

type NullableVClusterLimitRangeListDto struct {
	value *VClusterLimitRangeListDto
	isSet bool
}

func (v NullableVClusterLimitRangeListDto) Get() *VClusterLimitRangeListDto {
	return v.value
}

func (v *NullableVClusterLimitRangeListDto) Set(val *VClusterLimitRangeListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVClusterLimitRangeListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVClusterLimitRangeListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVClusterLimitRangeListDto(val *VClusterLimitRangeListDto) *NullableVClusterLimitRangeListDto {
	return &NullableVClusterLimitRangeListDto{value: val, isSet: true}
}

func (v NullableVClusterLimitRangeListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVClusterLimitRangeListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


