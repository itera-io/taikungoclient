/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VClusterLimitRangeListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VClusterLimitRangeListDto{}

// VClusterLimitRangeListDto struct for VClusterLimitRangeListDto
type VClusterLimitRangeListDto struct {
	ResourceUnit NullableString `json:"resourceUnit"`
	DefaultLimit float64 `json:"defaultLimit"`
	DefaultRequest float64 `json:"defaultRequest"`
}

type _VClusterLimitRangeListDto VClusterLimitRangeListDto

// NewVClusterLimitRangeListDto instantiates a new VClusterLimitRangeListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVClusterLimitRangeListDto(resourceUnit NullableString, defaultLimit float64, defaultRequest float64) *VClusterLimitRangeListDto {
	this := VClusterLimitRangeListDto{}
	this.ResourceUnit = resourceUnit
	this.DefaultLimit = defaultLimit
	this.DefaultRequest = defaultRequest
	return &this
}

// NewVClusterLimitRangeListDtoWithDefaults instantiates a new VClusterLimitRangeListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVClusterLimitRangeListDtoWithDefaults() *VClusterLimitRangeListDto {
	this := VClusterLimitRangeListDto{}
	return &this
}

// GetResourceUnit returns the ResourceUnit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VClusterLimitRangeListDto) GetResourceUnit() string {
	if o == nil || o.ResourceUnit.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResourceUnit.Get()
}

// GetResourceUnitOk returns a tuple with the ResourceUnit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VClusterLimitRangeListDto) GetResourceUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceUnit.Get(), o.ResourceUnit.IsSet()
}

// SetResourceUnit sets field value
func (o *VClusterLimitRangeListDto) SetResourceUnit(v string) {
	o.ResourceUnit.Set(&v)
}

// GetDefaultLimit returns the DefaultLimit field value
func (o *VClusterLimitRangeListDto) GetDefaultLimit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DefaultLimit
}

// GetDefaultLimitOk returns a tuple with the DefaultLimit field value
// and a boolean to check if the value has been set.
func (o *VClusterLimitRangeListDto) GetDefaultLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultLimit, true
}

// SetDefaultLimit sets field value
func (o *VClusterLimitRangeListDto) SetDefaultLimit(v float64) {
	o.DefaultLimit = v
}

// GetDefaultRequest returns the DefaultRequest field value
func (o *VClusterLimitRangeListDto) GetDefaultRequest() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DefaultRequest
}

// GetDefaultRequestOk returns a tuple with the DefaultRequest field value
// and a boolean to check if the value has been set.
func (o *VClusterLimitRangeListDto) GetDefaultRequestOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultRequest, true
}

// SetDefaultRequest sets field value
func (o *VClusterLimitRangeListDto) SetDefaultRequest(v float64) {
	o.DefaultRequest = v
}

func (o VClusterLimitRangeListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VClusterLimitRangeListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceUnit"] = o.ResourceUnit.Get()
	toSerialize["defaultLimit"] = o.DefaultLimit
	toSerialize["defaultRequest"] = o.DefaultRequest
	return toSerialize, nil
}

func (o *VClusterLimitRangeListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceUnit",
		"defaultLimit",
		"defaultRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVClusterLimitRangeListDto := _VClusterLimitRangeListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVClusterLimitRangeListDto)

	if err != nil {
		return err
	}

	*o = VClusterLimitRangeListDto(varVClusterLimitRangeListDto)

	return err
}

type NullableVClusterLimitRangeListDto struct {
	value *VClusterLimitRangeListDto
	isSet bool
}

func (v NullableVClusterLimitRangeListDto) Get() *VClusterLimitRangeListDto {
	return v.value
}

func (v *NullableVClusterLimitRangeListDto) Set(val *VClusterLimitRangeListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVClusterLimitRangeListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVClusterLimitRangeListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVClusterLimitRangeListDto(val *VClusterLimitRangeListDto) *NullableVClusterLimitRangeListDto {
	return &NullableVClusterLimitRangeListDto{value: val, isSet: true}
}

func (v NullableVClusterLimitRangeListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVClusterLimitRangeListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


