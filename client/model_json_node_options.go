/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the JsonNodeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonNodeOptions{}

// JsonNodeOptions struct for JsonNodeOptions
type JsonNodeOptions struct {
	HasValue *bool `json:"hasValue,omitempty"`
	Value *JsonNodeOptions `json:"value,omitempty"`
}

// NewJsonNodeOptions instantiates a new JsonNodeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonNodeOptions() *JsonNodeOptions {
	this := JsonNodeOptions{}
	return &this
}

// NewJsonNodeOptionsWithDefaults instantiates a new JsonNodeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonNodeOptionsWithDefaults() *JsonNodeOptions {
	this := JsonNodeOptions{}
	return &this
}

// GetHasValue returns the HasValue field value if set, zero value otherwise.
func (o *JsonNodeOptions) GetHasValue() bool {
	if o == nil || IsNil(o.HasValue) {
		var ret bool
		return ret
	}
	return *o.HasValue
}

// GetHasValueOk returns a tuple with the HasValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNodeOptions) GetHasValueOk() (*bool, bool) {
	if o == nil || IsNil(o.HasValue) {
		return nil, false
	}
	return o.HasValue, true
}

// HasHasValue returns a boolean if a field has been set.
func (o *JsonNodeOptions) HasHasValue() bool {
	if o != nil && !IsNil(o.HasValue) {
		return true
	}

	return false
}

// SetHasValue gets a reference to the given bool and assigns it to the HasValue field.
func (o *JsonNodeOptions) SetHasValue(v bool) {
	o.HasValue = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *JsonNodeOptions) GetValue() JsonNodeOptions {
	if o == nil || IsNil(o.Value) {
		var ret JsonNodeOptions
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNodeOptions) GetValueOk() (*JsonNodeOptions, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *JsonNodeOptions) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given JsonNodeOptions and assigns it to the Value field.
func (o *JsonNodeOptions) SetValue(v JsonNodeOptions) {
	o.Value = &v
}

func (o JsonNodeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonNodeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasValue) {
		toSerialize["hasValue"] = o.HasValue
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableJsonNodeOptions struct {
	value *JsonNodeOptions
	isSet bool
}

func (v NullableJsonNodeOptions) Get() *JsonNodeOptions {
	return v.value
}

func (v *NullableJsonNodeOptions) Set(val *JsonNodeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonNodeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonNodeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonNodeOptions(val *JsonNodeOptions) *NullableJsonNodeOptions {
	return &NullableJsonNodeOptions{value: val, isSet: true}
}

func (v NullableJsonNodeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonNodeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


