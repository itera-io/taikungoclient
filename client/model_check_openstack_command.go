/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CheckOpenstackCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckOpenstackCommand{}

// CheckOpenstackCommand struct for CheckOpenstackCommand
type CheckOpenstackCommand struct {
	OpenStackUser *string `json:"openStackUser,omitempty"`
	OpenStackPassword *string `json:"openStackPassword,omitempty"`
	OpenStackUrl *string `json:"openStackUrl,omitempty"`
	OpenStackDomain *string `json:"openStackDomain,omitempty"`
	IsAdmin *bool `json:"isAdmin,omitempty"`
	ApplicationCredEnabled NullableBool `json:"applicationCredEnabled,omitempty"`
}

// NewCheckOpenstackCommand instantiates a new CheckOpenstackCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckOpenstackCommand() *CheckOpenstackCommand {
	this := CheckOpenstackCommand{}
	return &this
}

// NewCheckOpenstackCommandWithDefaults instantiates a new CheckOpenstackCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckOpenstackCommandWithDefaults() *CheckOpenstackCommand {
	this := CheckOpenstackCommand{}
	return &this
}

// GetOpenStackUser returns the OpenStackUser field value if set, zero value otherwise.
func (o *CheckOpenstackCommand) GetOpenStackUser() string {
	if o == nil || IsNil(o.OpenStackUser) {
		var ret string
		return ret
	}
	return *o.OpenStackUser
}

// GetOpenStackUserOk returns a tuple with the OpenStackUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOpenstackCommand) GetOpenStackUserOk() (*string, bool) {
	if o == nil || IsNil(o.OpenStackUser) {
		return nil, false
	}
	return o.OpenStackUser, true
}

// HasOpenStackUser returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasOpenStackUser() bool {
	if o != nil && !IsNil(o.OpenStackUser) {
		return true
	}

	return false
}

// SetOpenStackUser gets a reference to the given string and assigns it to the OpenStackUser field.
func (o *CheckOpenstackCommand) SetOpenStackUser(v string) {
	o.OpenStackUser = &v
}

// GetOpenStackPassword returns the OpenStackPassword field value if set, zero value otherwise.
func (o *CheckOpenstackCommand) GetOpenStackPassword() string {
	if o == nil || IsNil(o.OpenStackPassword) {
		var ret string
		return ret
	}
	return *o.OpenStackPassword
}

// GetOpenStackPasswordOk returns a tuple with the OpenStackPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOpenstackCommand) GetOpenStackPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OpenStackPassword) {
		return nil, false
	}
	return o.OpenStackPassword, true
}

// HasOpenStackPassword returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasOpenStackPassword() bool {
	if o != nil && !IsNil(o.OpenStackPassword) {
		return true
	}

	return false
}

// SetOpenStackPassword gets a reference to the given string and assigns it to the OpenStackPassword field.
func (o *CheckOpenstackCommand) SetOpenStackPassword(v string) {
	o.OpenStackPassword = &v
}

// GetOpenStackUrl returns the OpenStackUrl field value if set, zero value otherwise.
func (o *CheckOpenstackCommand) GetOpenStackUrl() string {
	if o == nil || IsNil(o.OpenStackUrl) {
		var ret string
		return ret
	}
	return *o.OpenStackUrl
}

// GetOpenStackUrlOk returns a tuple with the OpenStackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOpenstackCommand) GetOpenStackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OpenStackUrl) {
		return nil, false
	}
	return o.OpenStackUrl, true
}

// HasOpenStackUrl returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasOpenStackUrl() bool {
	if o != nil && !IsNil(o.OpenStackUrl) {
		return true
	}

	return false
}

// SetOpenStackUrl gets a reference to the given string and assigns it to the OpenStackUrl field.
func (o *CheckOpenstackCommand) SetOpenStackUrl(v string) {
	o.OpenStackUrl = &v
}

// GetOpenStackDomain returns the OpenStackDomain field value if set, zero value otherwise.
func (o *CheckOpenstackCommand) GetOpenStackDomain() string {
	if o == nil || IsNil(o.OpenStackDomain) {
		var ret string
		return ret
	}
	return *o.OpenStackDomain
}

// GetOpenStackDomainOk returns a tuple with the OpenStackDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOpenstackCommand) GetOpenStackDomainOk() (*string, bool) {
	if o == nil || IsNil(o.OpenStackDomain) {
		return nil, false
	}
	return o.OpenStackDomain, true
}

// HasOpenStackDomain returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasOpenStackDomain() bool {
	if o != nil && !IsNil(o.OpenStackDomain) {
		return true
	}

	return false
}

// SetOpenStackDomain gets a reference to the given string and assigns it to the OpenStackDomain field.
func (o *CheckOpenstackCommand) SetOpenStackDomain(v string) {
	o.OpenStackDomain = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *CheckOpenstackCommand) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckOpenstackCommand) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *CheckOpenstackCommand) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetApplicationCredEnabled returns the ApplicationCredEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckOpenstackCommand) GetApplicationCredEnabled() bool {
	if o == nil || IsNil(o.ApplicationCredEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.ApplicationCredEnabled.Get()
}

// GetApplicationCredEnabledOk returns a tuple with the ApplicationCredEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckOpenstackCommand) GetApplicationCredEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationCredEnabled.Get(), o.ApplicationCredEnabled.IsSet()
}

// HasApplicationCredEnabled returns a boolean if a field has been set.
func (o *CheckOpenstackCommand) HasApplicationCredEnabled() bool {
	if o != nil && o.ApplicationCredEnabled.IsSet() {
		return true
	}

	return false
}

// SetApplicationCredEnabled gets a reference to the given NullableBool and assigns it to the ApplicationCredEnabled field.
func (o *CheckOpenstackCommand) SetApplicationCredEnabled(v bool) {
	o.ApplicationCredEnabled.Set(&v)
}
// SetApplicationCredEnabledNil sets the value for ApplicationCredEnabled to be an explicit nil
func (o *CheckOpenstackCommand) SetApplicationCredEnabledNil() {
	o.ApplicationCredEnabled.Set(nil)
}

// UnsetApplicationCredEnabled ensures that no value is present for ApplicationCredEnabled, not even an explicit nil
func (o *CheckOpenstackCommand) UnsetApplicationCredEnabled() {
	o.ApplicationCredEnabled.Unset()
}

func (o CheckOpenstackCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckOpenstackCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenStackUser) {
		toSerialize["openStackUser"] = o.OpenStackUser
	}
	if !IsNil(o.OpenStackPassword) {
		toSerialize["openStackPassword"] = o.OpenStackPassword
	}
	if !IsNil(o.OpenStackUrl) {
		toSerialize["openStackUrl"] = o.OpenStackUrl
	}
	if !IsNil(o.OpenStackDomain) {
		toSerialize["openStackDomain"] = o.OpenStackDomain
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["isAdmin"] = o.IsAdmin
	}
	if o.ApplicationCredEnabled.IsSet() {
		toSerialize["applicationCredEnabled"] = o.ApplicationCredEnabled.Get()
	}
	return toSerialize, nil
}

type NullableCheckOpenstackCommand struct {
	value *CheckOpenstackCommand
	isSet bool
}

func (v NullableCheckOpenstackCommand) Get() *CheckOpenstackCommand {
	return v.value
}

func (v *NullableCheckOpenstackCommand) Set(val *CheckOpenstackCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckOpenstackCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckOpenstackCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckOpenstackCommand(val *CheckOpenstackCommand) *NullableCheckOpenstackCommand {
	return &NullableCheckOpenstackCommand{value: val, isSet: true}
}

func (v NullableCheckOpenstackCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckOpenstackCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


