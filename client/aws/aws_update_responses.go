// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsUpdateReader is a Reader for the AwsUpdate structure.
type AwsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AwsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAwsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAwsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAwsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAwsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAwsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAwsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAwsUpdateOK creates a AwsUpdateOK with default headers values
func NewAwsUpdateOK() *AwsUpdateOK {
	return &AwsUpdateOK{}
}

/*
AwsUpdateOK describes a response with status code 200, with default header values.

Success
*/
type AwsUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this aws update o k response has a 2xx status code
func (o *AwsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aws update o k response has a 3xx status code
func (o *AwsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update o k response has a 4xx status code
func (o *AwsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aws update o k response has a 5xx status code
func (o *AwsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aws update o k response a status code equal to that given
func (o *AwsUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *AwsUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateOK  %+v", 200, o.Payload)
}

func (o *AwsUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateOK  %+v", 200, o.Payload)
}

func (o *AwsUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AwsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsUpdateBadRequest creates a AwsUpdateBadRequest with default headers values
func NewAwsUpdateBadRequest() *AwsUpdateBadRequest {
	return &AwsUpdateBadRequest{}
}

/*
AwsUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AwsUpdateBadRequest struct {
	Payload []*AwsUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this aws update bad request response has a 2xx status code
func (o *AwsUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws update bad request response has a 3xx status code
func (o *AwsUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update bad request response has a 4xx status code
func (o *AwsUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws update bad request response has a 5xx status code
func (o *AwsUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aws update bad request response a status code equal to that given
func (o *AwsUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AwsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AwsUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AwsUpdateBadRequest) GetPayload() []*AwsUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *AwsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsUpdateUnauthorized creates a AwsUpdateUnauthorized with default headers values
func NewAwsUpdateUnauthorized() *AwsUpdateUnauthorized {
	return &AwsUpdateUnauthorized{}
}

/*
AwsUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AwsUpdateUnauthorized struct {
	Payload *AwsUpdateUnauthorizedBody
}

// IsSuccess returns true when this aws update unauthorized response has a 2xx status code
func (o *AwsUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws update unauthorized response has a 3xx status code
func (o *AwsUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update unauthorized response has a 4xx status code
func (o *AwsUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws update unauthorized response has a 5xx status code
func (o *AwsUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this aws update unauthorized response a status code equal to that given
func (o *AwsUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AwsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AwsUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AwsUpdateUnauthorized) GetPayload() *AwsUpdateUnauthorizedBody {
	return o.Payload
}

func (o *AwsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AwsUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsUpdateForbidden creates a AwsUpdateForbidden with default headers values
func NewAwsUpdateForbidden() *AwsUpdateForbidden {
	return &AwsUpdateForbidden{}
}

/*
AwsUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AwsUpdateForbidden struct {
	Payload *AwsUpdateForbiddenBody
}

// IsSuccess returns true when this aws update forbidden response has a 2xx status code
func (o *AwsUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws update forbidden response has a 3xx status code
func (o *AwsUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update forbidden response has a 4xx status code
func (o *AwsUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws update forbidden response has a 5xx status code
func (o *AwsUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aws update forbidden response a status code equal to that given
func (o *AwsUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AwsUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *AwsUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *AwsUpdateForbidden) GetPayload() *AwsUpdateForbiddenBody {
	return o.Payload
}

func (o *AwsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AwsUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsUpdateNotFound creates a AwsUpdateNotFound with default headers values
func NewAwsUpdateNotFound() *AwsUpdateNotFound {
	return &AwsUpdateNotFound{}
}

/*
AwsUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AwsUpdateNotFound struct {
	Payload *AwsUpdateNotFoundBody
}

// IsSuccess returns true when this aws update not found response has a 2xx status code
func (o *AwsUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws update not found response has a 3xx status code
func (o *AwsUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update not found response has a 4xx status code
func (o *AwsUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws update not found response has a 5xx status code
func (o *AwsUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this aws update not found response a status code equal to that given
func (o *AwsUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AwsUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AwsUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AwsUpdateNotFound) GetPayload() *AwsUpdateNotFoundBody {
	return o.Payload
}

func (o *AwsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AwsUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsUpdateInternalServerError creates a AwsUpdateInternalServerError with default headers values
func NewAwsUpdateInternalServerError() *AwsUpdateInternalServerError {
	return &AwsUpdateInternalServerError{}
}

/*
AwsUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AwsUpdateInternalServerError struct {
}

// IsSuccess returns true when this aws update internal server error response has a 2xx status code
func (o *AwsUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws update internal server error response has a 3xx status code
func (o *AwsUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws update internal server error response has a 4xx status code
func (o *AwsUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aws update internal server error response has a 5xx status code
func (o *AwsUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aws update internal server error response a status code equal to that given
func (o *AwsUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AwsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateInternalServerError ", 500)
}

func (o *AwsUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/update][%d] awsUpdateInternalServerError ", 500)
}

func (o *AwsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AwsUpdateBadRequestBodyItems0 aws update bad request body items0
swagger:model AwsUpdateBadRequestBodyItems0
*/
type AwsUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this aws update bad request body items0
func (o *AwsUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aws update bad request body items0 based on context it is used
func (o *AwsUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AwsUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AwsUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AwsUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AwsUpdateBody aws update body
swagger:model AwsUpdateBody
*/
type AwsUpdateBody struct {

	// aws access key Id
	AwsAccessKeyID string `json:"awsAccessKeyId,omitempty"`

	// aws secret access key
	AwsSecretAccessKey string `json:"awsSecretAccessKey,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this aws update body
func (o *AwsUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aws update body based on context it is used
func (o *AwsUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AwsUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AwsUpdateBody) UnmarshalBinary(b []byte) error {
	var res AwsUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AwsUpdateForbiddenBody aws update forbidden body
swagger:model AwsUpdateForbiddenBody
*/
type AwsUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this aws update forbidden body
func (o *AwsUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aws update forbidden body based on context it is used
func (o *AwsUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AwsUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AwsUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AwsUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AwsUpdateNotFoundBody aws update not found body
swagger:model AwsUpdateNotFoundBody
*/
type AwsUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this aws update not found body
func (o *AwsUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aws update not found body based on context it is used
func (o *AwsUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AwsUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AwsUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AwsUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AwsUpdateUnauthorizedBody aws update unauthorized body
swagger:model AwsUpdateUnauthorizedBody
*/
type AwsUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this aws update unauthorized body
func (o *AwsUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aws update unauthorized body based on context it is used
func (o *AwsUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AwsUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AwsUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AwsUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
