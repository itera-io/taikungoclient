// Code generated by go-swagger; DO NOT EDIT.

package aws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AwsDeviceNamesReader is a Reader for the AwsDeviceNames structure.
type AwsDeviceNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AwsDeviceNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAwsDeviceNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAwsDeviceNamesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAwsDeviceNamesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAwsDeviceNamesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAwsDeviceNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAwsDeviceNamesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAwsDeviceNamesOK creates a AwsDeviceNamesOK with default headers values
func NewAwsDeviceNamesOK() *AwsDeviceNamesOK {
	return &AwsDeviceNamesOK{}
}

/*
AwsDeviceNamesOK describes a response with status code 200, with default header values.

Success
*/
type AwsDeviceNamesOK struct {
	Payload []string
}

// IsSuccess returns true when this aws device names o k response has a 2xx status code
func (o *AwsDeviceNamesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aws device names o k response has a 3xx status code
func (o *AwsDeviceNamesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names o k response has a 4xx status code
func (o *AwsDeviceNamesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aws device names o k response has a 5xx status code
func (o *AwsDeviceNamesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aws device names o k response a status code equal to that given
func (o *AwsDeviceNamesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aws device names o k response
func (o *AwsDeviceNamesOK) Code() int {
	return 200
}

func (o *AwsDeviceNamesOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesOK  %+v", 200, o.Payload)
}

func (o *AwsDeviceNamesOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesOK  %+v", 200, o.Payload)
}

func (o *AwsDeviceNamesOK) GetPayload() []string {
	return o.Payload
}

func (o *AwsDeviceNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsDeviceNamesBadRequest creates a AwsDeviceNamesBadRequest with default headers values
func NewAwsDeviceNamesBadRequest() *AwsDeviceNamesBadRequest {
	return &AwsDeviceNamesBadRequest{}
}

/*
AwsDeviceNamesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AwsDeviceNamesBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this aws device names bad request response has a 2xx status code
func (o *AwsDeviceNamesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws device names bad request response has a 3xx status code
func (o *AwsDeviceNamesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names bad request response has a 4xx status code
func (o *AwsDeviceNamesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws device names bad request response has a 5xx status code
func (o *AwsDeviceNamesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aws device names bad request response a status code equal to that given
func (o *AwsDeviceNamesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aws device names bad request response
func (o *AwsDeviceNamesBadRequest) Code() int {
	return 400
}

func (o *AwsDeviceNamesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesBadRequest  %+v", 400, o.Payload)
}

func (o *AwsDeviceNamesBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesBadRequest  %+v", 400, o.Payload)
}

func (o *AwsDeviceNamesBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *AwsDeviceNamesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsDeviceNamesUnauthorized creates a AwsDeviceNamesUnauthorized with default headers values
func NewAwsDeviceNamesUnauthorized() *AwsDeviceNamesUnauthorized {
	return &AwsDeviceNamesUnauthorized{}
}

/*
AwsDeviceNamesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AwsDeviceNamesUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this aws device names unauthorized response has a 2xx status code
func (o *AwsDeviceNamesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws device names unauthorized response has a 3xx status code
func (o *AwsDeviceNamesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names unauthorized response has a 4xx status code
func (o *AwsDeviceNamesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws device names unauthorized response has a 5xx status code
func (o *AwsDeviceNamesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this aws device names unauthorized response a status code equal to that given
func (o *AwsDeviceNamesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the aws device names unauthorized response
func (o *AwsDeviceNamesUnauthorized) Code() int {
	return 401
}

func (o *AwsDeviceNamesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesUnauthorized  %+v", 401, o.Payload)
}

func (o *AwsDeviceNamesUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesUnauthorized  %+v", 401, o.Payload)
}

func (o *AwsDeviceNamesUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *AwsDeviceNamesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsDeviceNamesForbidden creates a AwsDeviceNamesForbidden with default headers values
func NewAwsDeviceNamesForbidden() *AwsDeviceNamesForbidden {
	return &AwsDeviceNamesForbidden{}
}

/*
AwsDeviceNamesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AwsDeviceNamesForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this aws device names forbidden response has a 2xx status code
func (o *AwsDeviceNamesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws device names forbidden response has a 3xx status code
func (o *AwsDeviceNamesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names forbidden response has a 4xx status code
func (o *AwsDeviceNamesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws device names forbidden response has a 5xx status code
func (o *AwsDeviceNamesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aws device names forbidden response a status code equal to that given
func (o *AwsDeviceNamesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aws device names forbidden response
func (o *AwsDeviceNamesForbidden) Code() int {
	return 403
}

func (o *AwsDeviceNamesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesForbidden  %+v", 403, o.Payload)
}

func (o *AwsDeviceNamesForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesForbidden  %+v", 403, o.Payload)
}

func (o *AwsDeviceNamesForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AwsDeviceNamesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsDeviceNamesNotFound creates a AwsDeviceNamesNotFound with default headers values
func NewAwsDeviceNamesNotFound() *AwsDeviceNamesNotFound {
	return &AwsDeviceNamesNotFound{}
}

/*
AwsDeviceNamesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AwsDeviceNamesNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this aws device names not found response has a 2xx status code
func (o *AwsDeviceNamesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws device names not found response has a 3xx status code
func (o *AwsDeviceNamesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names not found response has a 4xx status code
func (o *AwsDeviceNamesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this aws device names not found response has a 5xx status code
func (o *AwsDeviceNamesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this aws device names not found response a status code equal to that given
func (o *AwsDeviceNamesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the aws device names not found response
func (o *AwsDeviceNamesNotFound) Code() int {
	return 404
}

func (o *AwsDeviceNamesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesNotFound  %+v", 404, o.Payload)
}

func (o *AwsDeviceNamesNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesNotFound  %+v", 404, o.Payload)
}

func (o *AwsDeviceNamesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *AwsDeviceNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAwsDeviceNamesInternalServerError creates a AwsDeviceNamesInternalServerError with default headers values
func NewAwsDeviceNamesInternalServerError() *AwsDeviceNamesInternalServerError {
	return &AwsDeviceNamesInternalServerError{}
}

/*
AwsDeviceNamesInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AwsDeviceNamesInternalServerError struct {
}

// IsSuccess returns true when this aws device names internal server error response has a 2xx status code
func (o *AwsDeviceNamesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aws device names internal server error response has a 3xx status code
func (o *AwsDeviceNamesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aws device names internal server error response has a 4xx status code
func (o *AwsDeviceNamesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aws device names internal server error response has a 5xx status code
func (o *AwsDeviceNamesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aws device names internal server error response a status code equal to that given
func (o *AwsDeviceNamesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aws device names internal server error response
func (o *AwsDeviceNamesInternalServerError) Code() int {
	return 500
}

func (o *AwsDeviceNamesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesInternalServerError ", 500)
}

func (o *AwsDeviceNamesInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Aws/device-names][%d] awsDeviceNamesInternalServerError ", 500)
}

func (o *AwsDeviceNamesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
