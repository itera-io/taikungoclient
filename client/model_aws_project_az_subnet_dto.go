/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AwsProjectAZSubnetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsProjectAZSubnetDto{}

// AwsProjectAZSubnetDto struct for AwsProjectAZSubnetDto
type AwsProjectAZSubnetDto struct {
	Zone      NullableString `json:"zone,omitempty"`
	PublicIp  NullableString `json:"publicIp,omitempty"`
	PrivateIp NullableString `json:"privateIp,omitempty"`
}

// NewAwsProjectAZSubnetDto instantiates a new AwsProjectAZSubnetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsProjectAZSubnetDto() *AwsProjectAZSubnetDto {
	this := AwsProjectAZSubnetDto{}
	return &this
}

// NewAwsProjectAZSubnetDtoWithDefaults instantiates a new AwsProjectAZSubnetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsProjectAZSubnetDtoWithDefaults() *AwsProjectAZSubnetDto {
	this := AwsProjectAZSubnetDto{}
	return &this
}

// GetZone returns the Zone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsProjectAZSubnetDto) GetZone() string {
	if o == nil || IsNil(o.Zone.Get()) {
		var ret string
		return ret
	}
	return *o.Zone.Get()
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsProjectAZSubnetDto) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Zone.Get(), o.Zone.IsSet()
}

// HasZone returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasZone() bool {
	if o != nil && o.Zone.IsSet() {
		return true
	}

	return false
}

// SetZone gets a reference to the given NullableString and assigns it to the Zone field.
func (o *AwsProjectAZSubnetDto) SetZone(v string) {
	o.Zone.Set(&v)
}

// SetZoneNil sets the value for Zone to be an explicit nil
func (o *AwsProjectAZSubnetDto) SetZoneNil() {
	o.Zone.Set(nil)
}

// UnsetZone ensures that no value is present for Zone, not even an explicit nil
func (o *AwsProjectAZSubnetDto) UnsetZone() {
	o.Zone.Unset()
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsProjectAZSubnetDto) GetPublicIp() string {
	if o == nil || IsNil(o.PublicIp.Get()) {
		var ret string
		return ret
	}
	return *o.PublicIp.Get()
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsProjectAZSubnetDto) GetPublicIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIp.Get(), o.PublicIp.IsSet()
}

// HasPublicIp returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasPublicIp() bool {
	if o != nil && o.PublicIp.IsSet() {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given NullableString and assigns it to the PublicIp field.
func (o *AwsProjectAZSubnetDto) SetPublicIp(v string) {
	o.PublicIp.Set(&v)
}

// SetPublicIpNil sets the value for PublicIp to be an explicit nil
func (o *AwsProjectAZSubnetDto) SetPublicIpNil() {
	o.PublicIp.Set(nil)
}

// UnsetPublicIp ensures that no value is present for PublicIp, not even an explicit nil
func (o *AwsProjectAZSubnetDto) UnsetPublicIp() {
	o.PublicIp.Unset()
}

// GetPrivateIp returns the PrivateIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsProjectAZSubnetDto) GetPrivateIp() string {
	if o == nil || IsNil(o.PrivateIp.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateIp.Get()
}

// GetPrivateIpOk returns a tuple with the PrivateIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsProjectAZSubnetDto) GetPrivateIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateIp.Get(), o.PrivateIp.IsSet()
}

// HasPrivateIp returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasPrivateIp() bool {
	if o != nil && o.PrivateIp.IsSet() {
		return true
	}

	return false
}

// SetPrivateIp gets a reference to the given NullableString and assigns it to the PrivateIp field.
func (o *AwsProjectAZSubnetDto) SetPrivateIp(v string) {
	o.PrivateIp.Set(&v)
}

// SetPrivateIpNil sets the value for PrivateIp to be an explicit nil
func (o *AwsProjectAZSubnetDto) SetPrivateIpNil() {
	o.PrivateIp.Set(nil)
}

// UnsetPrivateIp ensures that no value is present for PrivateIp, not even an explicit nil
func (o *AwsProjectAZSubnetDto) UnsetPrivateIp() {
	o.PrivateIp.Unset()
}

func (o AwsProjectAZSubnetDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsProjectAZSubnetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Zone.IsSet() {
		toSerialize["zone"] = o.Zone.Get()
	}
	if o.PublicIp.IsSet() {
		toSerialize["publicIp"] = o.PublicIp.Get()
	}
	if o.PrivateIp.IsSet() {
		toSerialize["privateIp"] = o.PrivateIp.Get()
	}
	return toSerialize, nil
}

type NullableAwsProjectAZSubnetDto struct {
	value *AwsProjectAZSubnetDto
	isSet bool
}

func (v NullableAwsProjectAZSubnetDto) Get() *AwsProjectAZSubnetDto {
	return v.value
}

func (v *NullableAwsProjectAZSubnetDto) Set(val *AwsProjectAZSubnetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsProjectAZSubnetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsProjectAZSubnetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsProjectAZSubnetDto(val *AwsProjectAZSubnetDto) *NullableAwsProjectAZSubnetDto {
	return &NullableAwsProjectAZSubnetDto{value: val, isSet: true}
}

func (v NullableAwsProjectAZSubnetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsProjectAZSubnetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
