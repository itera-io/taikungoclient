/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ECronJobAction the model 'ECronJobAction'
type ECronJobAction string

// List of ECronJobAction
const (
	ECRONJOBACTION_SUSPEND ECronJobAction = "Suspend"
	ECRONJOBACTION_RESUME ECronJobAction = "Resume"
	ECRONJOBACTION_TRIGGER ECronJobAction = "Trigger"
)

// All allowed values of ECronJobAction enum
var AllowedECronJobActionEnumValues = []ECronJobAction{
	"Suspend",
	"Resume",
	"Trigger",
}

func (v *ECronJobAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ECronJobAction(value)
	for _, existing := range AllowedECronJobActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ECronJobAction", value)
}

// NewECronJobActionFromValue returns a pointer to a valid ECronJobAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewECronJobActionFromValue(v string) (*ECronJobAction, error) {
	ev := ECronJobAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ECronJobAction: valid values are %v", v, AllowedECronJobActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ECronJobAction) IsValid() bool {
	for _, existing := range AllowedECronJobActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ECronJobAction value
func (v ECronJobAction) Ptr() *ECronJobAction {
	return &v
}

type NullableECronJobAction struct {
	value *ECronJobAction
	isSet bool
}

func (v NullableECronJobAction) Get() *ECronJobAction {
	return v.value
}

func (v *NullableECronJobAction) Set(val *ECronJobAction) {
	v.value = val
	v.isSet = true
}

func (v NullableECronJobAction) IsSet() bool {
	return v.isSet
}

func (v *NullableECronJobAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECronJobAction(val *ECronJobAction) *NullableECronJobAction {
	return &NullableECronJobAction{value: val, isSet: true}
}

func (v NullableECronJobAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECronJobAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

