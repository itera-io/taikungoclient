/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectWithFlavorsAndImagesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectWithFlavorsAndImagesDto{}

// ProjectWithFlavorsAndImagesDto struct for ProjectWithFlavorsAndImagesDto
type ProjectWithFlavorsAndImagesDto struct {
	Id int32 `json:"id"`
	Name NullableString `json:"name"`
	Flavors []string `json:"flavors"`
	Images []string `json:"images"`
	ImageNames []string `json:"imageNames"`
	IsReady bool `json:"isReady"`
}

type _ProjectWithFlavorsAndImagesDto ProjectWithFlavorsAndImagesDto

// NewProjectWithFlavorsAndImagesDto instantiates a new ProjectWithFlavorsAndImagesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectWithFlavorsAndImagesDto(id int32, name NullableString, flavors []string, images []string, imageNames []string, isReady bool) *ProjectWithFlavorsAndImagesDto {
	this := ProjectWithFlavorsAndImagesDto{}
	this.Id = id
	this.Name = name
	this.Flavors = flavors
	this.Images = images
	this.ImageNames = imageNames
	this.IsReady = isReady
	return &this
}

// NewProjectWithFlavorsAndImagesDtoWithDefaults instantiates a new ProjectWithFlavorsAndImagesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithFlavorsAndImagesDtoWithDefaults() *ProjectWithFlavorsAndImagesDto {
	this := ProjectWithFlavorsAndImagesDto{}
	return &this
}

// GetId returns the Id field value
func (o *ProjectWithFlavorsAndImagesDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectWithFlavorsAndImagesDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetName(v string) {
	o.Name.Set(&v)
}

// GetFlavors returns the Flavors field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetFlavors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetFlavorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flavors) {
		return nil, false
	}
	return o.Flavors, true
}

// SetFlavors sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetFlavors(v []string) {
	o.Flavors = v
}

// GetImages returns the Images field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Images
}

// GetImagesOk returns a tuple with the Images field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// SetImages sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetImages(v []string) {
	o.Images = v
}

// GetImageNames returns the ImageNames field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImageNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ImageNames
}

// GetImageNamesOk returns a tuple with the ImageNames field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWithFlavorsAndImagesDto) GetImageNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ImageNames) {
		return nil, false
	}
	return o.ImageNames, true
}

// SetImageNames sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetImageNames(v []string) {
	o.ImageNames = v
}

// GetIsReady returns the IsReady field value
func (o *ProjectWithFlavorsAndImagesDto) GetIsReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsReady
}

// GetIsReadyOk returns a tuple with the IsReady field value
// and a boolean to check if the value has been set.
func (o *ProjectWithFlavorsAndImagesDto) GetIsReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReady, true
}

// SetIsReady sets field value
func (o *ProjectWithFlavorsAndImagesDto) SetIsReady(v bool) {
	o.IsReady = v
}

func (o ProjectWithFlavorsAndImagesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectWithFlavorsAndImagesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name.Get()
	if o.Flavors != nil {
		toSerialize["flavors"] = o.Flavors
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.ImageNames != nil {
		toSerialize["imageNames"] = o.ImageNames
	}
	toSerialize["isReady"] = o.IsReady
	return toSerialize, nil
}

func (o *ProjectWithFlavorsAndImagesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"flavors",
		"images",
		"imageNames",
		"isReady",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectWithFlavorsAndImagesDto := _ProjectWithFlavorsAndImagesDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectWithFlavorsAndImagesDto)

	if err != nil {
		return err
	}

	*o = ProjectWithFlavorsAndImagesDto(varProjectWithFlavorsAndImagesDto)

	return err
}

type NullableProjectWithFlavorsAndImagesDto struct {
	value *ProjectWithFlavorsAndImagesDto
	isSet bool
}

func (v NullableProjectWithFlavorsAndImagesDto) Get() *ProjectWithFlavorsAndImagesDto {
	return v.value
}

func (v *NullableProjectWithFlavorsAndImagesDto) Set(val *ProjectWithFlavorsAndImagesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectWithFlavorsAndImagesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectWithFlavorsAndImagesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectWithFlavorsAndImagesDto(val *ProjectWithFlavorsAndImagesDto) *NullableProjectWithFlavorsAndImagesDto {
	return &NullableProjectWithFlavorsAndImagesDto{value: val, isSet: true}
}

func (v NullableProjectWithFlavorsAndImagesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectWithFlavorsAndImagesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


