/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UnbindUserGroupFromProjectGroupCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnbindUserGroupFromProjectGroupCommand{}

// UnbindUserGroupFromProjectGroupCommand struct for UnbindUserGroupFromProjectGroupCommand
type UnbindUserGroupFromProjectGroupCommand struct {
	ProjectGroupId *int32 `json:"projectGroupId,omitempty"`
	UserGroupIds []int32 `json:"userGroupIds,omitempty"`
}

// NewUnbindUserGroupFromProjectGroupCommand instantiates a new UnbindUserGroupFromProjectGroupCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnbindUserGroupFromProjectGroupCommand() *UnbindUserGroupFromProjectGroupCommand {
	this := UnbindUserGroupFromProjectGroupCommand{}
	return &this
}

// NewUnbindUserGroupFromProjectGroupCommandWithDefaults instantiates a new UnbindUserGroupFromProjectGroupCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnbindUserGroupFromProjectGroupCommandWithDefaults() *UnbindUserGroupFromProjectGroupCommand {
	this := UnbindUserGroupFromProjectGroupCommand{}
	return &this
}

// GetProjectGroupId returns the ProjectGroupId field value if set, zero value otherwise.
func (o *UnbindUserGroupFromProjectGroupCommand) GetProjectGroupId() int32 {
	if o == nil || IsNil(o.ProjectGroupId) {
		var ret int32
		return ret
	}
	return *o.ProjectGroupId
}

// GetProjectGroupIdOk returns a tuple with the ProjectGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnbindUserGroupFromProjectGroupCommand) GetProjectGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectGroupId) {
		return nil, false
	}
	return o.ProjectGroupId, true
}

// HasProjectGroupId returns a boolean if a field has been set.
func (o *UnbindUserGroupFromProjectGroupCommand) HasProjectGroupId() bool {
	if o != nil && !IsNil(o.ProjectGroupId) {
		return true
	}

	return false
}

// SetProjectGroupId gets a reference to the given int32 and assigns it to the ProjectGroupId field.
func (o *UnbindUserGroupFromProjectGroupCommand) SetProjectGroupId(v int32) {
	o.ProjectGroupId = &v
}

// GetUserGroupIds returns the UserGroupIds field value if set, zero value otherwise.
func (o *UnbindUserGroupFromProjectGroupCommand) GetUserGroupIds() []int32 {
	if o == nil || IsNil(o.UserGroupIds) {
		var ret []int32
		return ret
	}
	return o.UserGroupIds
}

// GetUserGroupIdsOk returns a tuple with the UserGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnbindUserGroupFromProjectGroupCommand) GetUserGroupIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.UserGroupIds) {
		return nil, false
	}
	return o.UserGroupIds, true
}

// HasUserGroupIds returns a boolean if a field has been set.
func (o *UnbindUserGroupFromProjectGroupCommand) HasUserGroupIds() bool {
	if o != nil && !IsNil(o.UserGroupIds) {
		return true
	}

	return false
}

// SetUserGroupIds gets a reference to the given []int32 and assigns it to the UserGroupIds field.
func (o *UnbindUserGroupFromProjectGroupCommand) SetUserGroupIds(v []int32) {
	o.UserGroupIds = v
}

func (o UnbindUserGroupFromProjectGroupCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnbindUserGroupFromProjectGroupCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectGroupId) {
		toSerialize["projectGroupId"] = o.ProjectGroupId
	}
	if !IsNil(o.UserGroupIds) {
		toSerialize["userGroupIds"] = o.UserGroupIds
	}
	return toSerialize, nil
}

type NullableUnbindUserGroupFromProjectGroupCommand struct {
	value *UnbindUserGroupFromProjectGroupCommand
	isSet bool
}

func (v NullableUnbindUserGroupFromProjectGroupCommand) Get() *UnbindUserGroupFromProjectGroupCommand {
	return v.value
}

func (v *NullableUnbindUserGroupFromProjectGroupCommand) Set(val *UnbindUserGroupFromProjectGroupCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUnbindUserGroupFromProjectGroupCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUnbindUserGroupFromProjectGroupCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnbindUserGroupFromProjectGroupCommand(val *UnbindUserGroupFromProjectGroupCommand) *NullableUnbindUserGroupFromProjectGroupCommand {
	return &NullableUnbindUserGroupFromProjectGroupCommand{value: val, isSet: true}
}

func (v NullableUnbindUserGroupFromProjectGroupCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnbindUserGroupFromProjectGroupCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


