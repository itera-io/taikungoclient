/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// EDeploymentAction the model 'EDeploymentAction'
type EDeploymentAction string

// List of EDeploymentAction
const (
	EDEPLOYMENTACTION_PAUSE EDeploymentAction = "Pause"
	EDEPLOYMENTACTION_RESUME EDeploymentAction = "Resume"
	EDEPLOYMENTACTION_RESTART EDeploymentAction = "Restart"
	EDEPLOYMENTACTION_SCALE EDeploymentAction = "Scale"
	EDEPLOYMENTACTION_ROLLBACK EDeploymentAction = "Rollback"
)

// All allowed values of EDeploymentAction enum
var AllowedEDeploymentActionEnumValues = []EDeploymentAction{
	"Pause",
	"Resume",
	"Restart",
	"Scale",
	"Rollback",
}

func (v *EDeploymentAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EDeploymentAction(value)
	for _, existing := range AllowedEDeploymentActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EDeploymentAction", value)
}

// NewEDeploymentActionFromValue returns a pointer to a valid EDeploymentAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEDeploymentActionFromValue(v string) (*EDeploymentAction, error) {
	ev := EDeploymentAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EDeploymentAction: valid values are %v", v, AllowedEDeploymentActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EDeploymentAction) IsValid() bool {
	for _, existing := range AllowedEDeploymentActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EDeploymentAction value
func (v EDeploymentAction) Ptr() *EDeploymentAction {
	return &v
}

type NullableEDeploymentAction struct {
	value *EDeploymentAction
	isSet bool
}

func (v NullableEDeploymentAction) Get() *EDeploymentAction {
	return v.value
}

func (v *NullableEDeploymentAction) Set(val *EDeploymentAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEDeploymentAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEDeploymentAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEDeploymentAction(val *EDeploymentAction) *NullableEDeploymentAction {
	return &NullableEDeploymentAction{value: val, isSet: true}
}

func (v NullableEDeploymentAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEDeploymentAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

