// Code generated by go-swagger; DO NOT EDIT.

package azure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureListReader is a Reader for the AzureList structure.
type AzureListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AzureListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAzureListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAzureListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAzureListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAzureListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAzureListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAzureListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAzureListOK creates a AzureListOK with default headers values
func NewAzureListOK() *AzureListOK {
	return &AzureListOK{}
}

/*
AzureListOK describes a response with status code 200, with default header values.

Success
*/
type AzureListOK struct {
	Payload *AzureListOKBody
}

// IsSuccess returns true when this azure list o k response has a 2xx status code
func (o *AzureListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this azure list o k response has a 3xx status code
func (o *AzureListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list o k response has a 4xx status code
func (o *AzureListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure list o k response has a 5xx status code
func (o *AzureListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this azure list o k response a status code equal to that given
func (o *AzureListOK) IsCode(code int) bool {
	return code == 200
}

func (o *AzureListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListOK  %+v", 200, o.Payload)
}

func (o *AzureListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListOK  %+v", 200, o.Payload)
}

func (o *AzureListOK) GetPayload() *AzureListOKBody {
	return o.Payload
}

func (o *AzureListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureListBadRequest creates a AzureListBadRequest with default headers values
func NewAzureListBadRequest() *AzureListBadRequest {
	return &AzureListBadRequest{}
}

/*
AzureListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AzureListBadRequest struct {
	Payload []*AzureListBadRequestBodyItems0
}

// IsSuccess returns true when this azure list bad request response has a 2xx status code
func (o *AzureListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure list bad request response has a 3xx status code
func (o *AzureListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list bad request response has a 4xx status code
func (o *AzureListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure list bad request response has a 5xx status code
func (o *AzureListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this azure list bad request response a status code equal to that given
func (o *AzureListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AzureListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListBadRequest  %+v", 400, o.Payload)
}

func (o *AzureListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListBadRequest  %+v", 400, o.Payload)
}

func (o *AzureListBadRequest) GetPayload() []*AzureListBadRequestBodyItems0 {
	return o.Payload
}

func (o *AzureListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureListUnauthorized creates a AzureListUnauthorized with default headers values
func NewAzureListUnauthorized() *AzureListUnauthorized {
	return &AzureListUnauthorized{}
}

/*
AzureListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AzureListUnauthorized struct {
	Payload *AzureListUnauthorizedBody
}

// IsSuccess returns true when this azure list unauthorized response has a 2xx status code
func (o *AzureListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure list unauthorized response has a 3xx status code
func (o *AzureListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list unauthorized response has a 4xx status code
func (o *AzureListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure list unauthorized response has a 5xx status code
func (o *AzureListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this azure list unauthorized response a status code equal to that given
func (o *AzureListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AzureListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureListUnauthorized) GetPayload() *AzureListUnauthorizedBody {
	return o.Payload
}

func (o *AzureListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureListForbidden creates a AzureListForbidden with default headers values
func NewAzureListForbidden() *AzureListForbidden {
	return &AzureListForbidden{}
}

/*
AzureListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AzureListForbidden struct {
	Payload *AzureListForbiddenBody
}

// IsSuccess returns true when this azure list forbidden response has a 2xx status code
func (o *AzureListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure list forbidden response has a 3xx status code
func (o *AzureListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list forbidden response has a 4xx status code
func (o *AzureListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure list forbidden response has a 5xx status code
func (o *AzureListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this azure list forbidden response a status code equal to that given
func (o *AzureListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AzureListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListForbidden  %+v", 403, o.Payload)
}

func (o *AzureListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListForbidden  %+v", 403, o.Payload)
}

func (o *AzureListForbidden) GetPayload() *AzureListForbiddenBody {
	return o.Payload
}

func (o *AzureListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureListNotFound creates a AzureListNotFound with default headers values
func NewAzureListNotFound() *AzureListNotFound {
	return &AzureListNotFound{}
}

/*
AzureListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AzureListNotFound struct {
	Payload *AzureListNotFoundBody
}

// IsSuccess returns true when this azure list not found response has a 2xx status code
func (o *AzureListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure list not found response has a 3xx status code
func (o *AzureListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list not found response has a 4xx status code
func (o *AzureListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure list not found response has a 5xx status code
func (o *AzureListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this azure list not found response a status code equal to that given
func (o *AzureListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AzureListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListNotFound  %+v", 404, o.Payload)
}

func (o *AzureListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListNotFound  %+v", 404, o.Payload)
}

func (o *AzureListNotFound) GetPayload() *AzureListNotFoundBody {
	return o.Payload
}

func (o *AzureListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureListInternalServerError creates a AzureListInternalServerError with default headers values
func NewAzureListInternalServerError() *AzureListInternalServerError {
	return &AzureListInternalServerError{}
}

/*
AzureListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AzureListInternalServerError struct {
}

// IsSuccess returns true when this azure list internal server error response has a 2xx status code
func (o *AzureListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure list internal server error response has a 3xx status code
func (o *AzureListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure list internal server error response has a 4xx status code
func (o *AzureListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure list internal server error response has a 5xx status code
func (o *AzureListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this azure list internal server error response a status code equal to that given
func (o *AzureListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AzureListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListInternalServerError ", 500)
}

func (o *AzureListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Azure/list][%d] azureListInternalServerError ", 500)
}

func (o *AzureListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AzureListBadRequestBodyItems0 azure list bad request body items0
swagger:model AzureListBadRequestBodyItems0
*/
type AzureListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this azure list bad request body items0
func (o *AzureListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure list bad request body items0 based on context it is used
func (o *AzureListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AzureListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListForbiddenBody azure list forbidden body
swagger:model AzureListForbiddenBody
*/
type AzureListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure list forbidden body
func (o *AzureListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure list forbidden body based on context it is used
func (o *AzureListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AzureListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListNotFoundBody azure list not found body
swagger:model AzureListNotFoundBody
*/
type AzureListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure list not found body
func (o *AzureListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure list not found body based on context it is used
func (o *AzureListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AzureListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListOKBody azure list o k body
swagger:model AzureListOKBody
*/
type AzureListOKBody struct {

	// data
	Data []*AzureListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this azure list o k body
func (o *AzureListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AzureListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this azure list o k body based on the context it is used
func (o *AzureListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AzureListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AzureListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListOKBody) UnmarshalBinary(b []byte) error {
	var res AzureListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListOKBodyDataItems0 azure list o k body data items0
swagger:model AzureListOKBodyDataItems0
*/
type AzureListOKBodyDataItems0 struct {

	// availability zones
	AvailabilityZones []string `json:"availabilityZones"`

	// continent name
	ContinentName string `json:"continentName,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project count
	ProjectCount int32 `json:"projectCount,omitempty"`

	// projects
	Projects []*AzureListOKBodyDataItems0ProjectsItems0 `json:"projects"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this azure list o k body data items0
func (o *AzureListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AzureListOKBodyDataItems0) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this azure list o k body data items0 based on the context it is used
func (o *AzureListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AzureListOKBodyDataItems0) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AzureListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res AzureListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListOKBodyDataItems0ProjectsItems0 azure list o k body data items0 projects items0
swagger:model AzureListOKBodyDataItems0ProjectsItems0
*/
type AzureListOKBodyDataItems0ProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this azure list o k body data items0 projects items0
func (o *AzureListOKBodyDataItems0ProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure list o k body data items0 projects items0 based on context it is used
func (o *AzureListOKBodyDataItems0ProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureListOKBodyDataItems0ProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListOKBodyDataItems0ProjectsItems0) UnmarshalBinary(b []byte) error {
	var res AzureListOKBodyDataItems0ProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureListUnauthorizedBody azure list unauthorized body
swagger:model AzureListUnauthorizedBody
*/
type AzureListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure list unauthorized body
func (o *AzureListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure list unauthorized body based on context it is used
func (o *AzureListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AzureListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
