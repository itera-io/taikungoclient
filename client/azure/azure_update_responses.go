// Code generated by go-swagger; DO NOT EDIT.

package azure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureUpdateReader is a Reader for the AzureUpdate structure.
type AzureUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AzureUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAzureUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAzureUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAzureUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAzureUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAzureUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAzureUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAzureUpdateOK creates a AzureUpdateOK with default headers values
func NewAzureUpdateOK() *AzureUpdateOK {
	return &AzureUpdateOK{}
}

/*
AzureUpdateOK describes a response with status code 200, with default header values.

Success
*/
type AzureUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this azure update o k response has a 2xx status code
func (o *AzureUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this azure update o k response has a 3xx status code
func (o *AzureUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update o k response has a 4xx status code
func (o *AzureUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure update o k response has a 5xx status code
func (o *AzureUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this azure update o k response a status code equal to that given
func (o *AzureUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *AzureUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateOK  %+v", 200, o.Payload)
}

func (o *AzureUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateOK  %+v", 200, o.Payload)
}

func (o *AzureUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AzureUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureUpdateBadRequest creates a AzureUpdateBadRequest with default headers values
func NewAzureUpdateBadRequest() *AzureUpdateBadRequest {
	return &AzureUpdateBadRequest{}
}

/*
AzureUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AzureUpdateBadRequest struct {
	Payload []*AzureUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this azure update bad request response has a 2xx status code
func (o *AzureUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure update bad request response has a 3xx status code
func (o *AzureUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update bad request response has a 4xx status code
func (o *AzureUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure update bad request response has a 5xx status code
func (o *AzureUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this azure update bad request response a status code equal to that given
func (o *AzureUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AzureUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AzureUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AzureUpdateBadRequest) GetPayload() []*AzureUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *AzureUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureUpdateUnauthorized creates a AzureUpdateUnauthorized with default headers values
func NewAzureUpdateUnauthorized() *AzureUpdateUnauthorized {
	return &AzureUpdateUnauthorized{}
}

/*
AzureUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AzureUpdateUnauthorized struct {
	Payload *AzureUpdateUnauthorizedBody
}

// IsSuccess returns true when this azure update unauthorized response has a 2xx status code
func (o *AzureUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure update unauthorized response has a 3xx status code
func (o *AzureUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update unauthorized response has a 4xx status code
func (o *AzureUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure update unauthorized response has a 5xx status code
func (o *AzureUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this azure update unauthorized response a status code equal to that given
func (o *AzureUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AzureUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureUpdateUnauthorized) GetPayload() *AzureUpdateUnauthorizedBody {
	return o.Payload
}

func (o *AzureUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureUpdateForbidden creates a AzureUpdateForbidden with default headers values
func NewAzureUpdateForbidden() *AzureUpdateForbidden {
	return &AzureUpdateForbidden{}
}

/*
AzureUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AzureUpdateForbidden struct {
	Payload *AzureUpdateForbiddenBody
}

// IsSuccess returns true when this azure update forbidden response has a 2xx status code
func (o *AzureUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure update forbidden response has a 3xx status code
func (o *AzureUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update forbidden response has a 4xx status code
func (o *AzureUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure update forbidden response has a 5xx status code
func (o *AzureUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this azure update forbidden response a status code equal to that given
func (o *AzureUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AzureUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateForbidden  %+v", 403, o.Payload)
}

func (o *AzureUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateForbidden  %+v", 403, o.Payload)
}

func (o *AzureUpdateForbidden) GetPayload() *AzureUpdateForbiddenBody {
	return o.Payload
}

func (o *AzureUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureUpdateNotFound creates a AzureUpdateNotFound with default headers values
func NewAzureUpdateNotFound() *AzureUpdateNotFound {
	return &AzureUpdateNotFound{}
}

/*
AzureUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AzureUpdateNotFound struct {
	Payload *AzureUpdateNotFoundBody
}

// IsSuccess returns true when this azure update not found response has a 2xx status code
func (o *AzureUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure update not found response has a 3xx status code
func (o *AzureUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update not found response has a 4xx status code
func (o *AzureUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure update not found response has a 5xx status code
func (o *AzureUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this azure update not found response a status code equal to that given
func (o *AzureUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AzureUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AzureUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AzureUpdateNotFound) GetPayload() *AzureUpdateNotFoundBody {
	return o.Payload
}

func (o *AzureUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureUpdateInternalServerError creates a AzureUpdateInternalServerError with default headers values
func NewAzureUpdateInternalServerError() *AzureUpdateInternalServerError {
	return &AzureUpdateInternalServerError{}
}

/*
AzureUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AzureUpdateInternalServerError struct {
}

// IsSuccess returns true when this azure update internal server error response has a 2xx status code
func (o *AzureUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure update internal server error response has a 3xx status code
func (o *AzureUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure update internal server error response has a 4xx status code
func (o *AzureUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure update internal server error response has a 5xx status code
func (o *AzureUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this azure update internal server error response a status code equal to that given
func (o *AzureUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AzureUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateInternalServerError ", 500)
}

func (o *AzureUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/update][%d] azureUpdateInternalServerError ", 500)
}

func (o *AzureUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AzureUpdateBadRequestBodyItems0 azure update bad request body items0
swagger:model AzureUpdateBadRequestBodyItems0
*/
type AzureUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this azure update bad request body items0
func (o *AzureUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure update bad request body items0 based on context it is used
func (o *AzureUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AzureUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureUpdateBody azure update body
swagger:model AzureUpdateBody
*/
type AzureUpdateBody struct {

	// azure client Id
	AzureClientID string `json:"azureClientId,omitempty"`

	// azure client secret
	AzureClientSecret string `json:"azureClientSecret,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this azure update body
func (o *AzureUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure update body based on context it is used
func (o *AzureUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureUpdateBody) UnmarshalBinary(b []byte) error {
	var res AzureUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureUpdateForbiddenBody azure update forbidden body
swagger:model AzureUpdateForbiddenBody
*/
type AzureUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure update forbidden body
func (o *AzureUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure update forbidden body based on context it is used
func (o *AzureUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AzureUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureUpdateNotFoundBody azure update not found body
swagger:model AzureUpdateNotFoundBody
*/
type AzureUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure update not found body
func (o *AzureUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure update not found body based on context it is used
func (o *AzureUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AzureUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureUpdateUnauthorizedBody azure update unauthorized body
swagger:model AzureUpdateUnauthorizedBody
*/
type AzureUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure update unauthorized body
func (o *AzureUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure update unauthorized body based on context it is used
func (o *AzureUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AzureUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
