// Code generated by go-swagger; DO NOT EDIT.

package azure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureSubscriptionsReader is a Reader for the AzureSubscriptions structure.
type AzureSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AzureSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAzureSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAzureSubscriptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAzureSubscriptionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAzureSubscriptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAzureSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAzureSubscriptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAzureSubscriptionsOK creates a AzureSubscriptionsOK with default headers values
func NewAzureSubscriptionsOK() *AzureSubscriptionsOK {
	return &AzureSubscriptionsOK{}
}

/*
AzureSubscriptionsOK describes a response with status code 200, with default header values.

Success
*/
type AzureSubscriptionsOK struct {
	Payload []*AzureSubscriptionsOKBodyItems0
}

// IsSuccess returns true when this azure subscriptions o k response has a 2xx status code
func (o *AzureSubscriptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this azure subscriptions o k response has a 3xx status code
func (o *AzureSubscriptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions o k response has a 4xx status code
func (o *AzureSubscriptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure subscriptions o k response has a 5xx status code
func (o *AzureSubscriptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this azure subscriptions o k response a status code equal to that given
func (o *AzureSubscriptionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *AzureSubscriptionsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsOK  %+v", 200, o.Payload)
}

func (o *AzureSubscriptionsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsOK  %+v", 200, o.Payload)
}

func (o *AzureSubscriptionsOK) GetPayload() []*AzureSubscriptionsOKBodyItems0 {
	return o.Payload
}

func (o *AzureSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureSubscriptionsBadRequest creates a AzureSubscriptionsBadRequest with default headers values
func NewAzureSubscriptionsBadRequest() *AzureSubscriptionsBadRequest {
	return &AzureSubscriptionsBadRequest{}
}

/*
AzureSubscriptionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AzureSubscriptionsBadRequest struct {
	Payload []*AzureSubscriptionsBadRequestBodyItems0
}

// IsSuccess returns true when this azure subscriptions bad request response has a 2xx status code
func (o *AzureSubscriptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure subscriptions bad request response has a 3xx status code
func (o *AzureSubscriptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions bad request response has a 4xx status code
func (o *AzureSubscriptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure subscriptions bad request response has a 5xx status code
func (o *AzureSubscriptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this azure subscriptions bad request response a status code equal to that given
func (o *AzureSubscriptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AzureSubscriptionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsBadRequest  %+v", 400, o.Payload)
}

func (o *AzureSubscriptionsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsBadRequest  %+v", 400, o.Payload)
}

func (o *AzureSubscriptionsBadRequest) GetPayload() []*AzureSubscriptionsBadRequestBodyItems0 {
	return o.Payload
}

func (o *AzureSubscriptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureSubscriptionsUnauthorized creates a AzureSubscriptionsUnauthorized with default headers values
func NewAzureSubscriptionsUnauthorized() *AzureSubscriptionsUnauthorized {
	return &AzureSubscriptionsUnauthorized{}
}

/*
AzureSubscriptionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AzureSubscriptionsUnauthorized struct {
	Payload *AzureSubscriptionsUnauthorizedBody
}

// IsSuccess returns true when this azure subscriptions unauthorized response has a 2xx status code
func (o *AzureSubscriptionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure subscriptions unauthorized response has a 3xx status code
func (o *AzureSubscriptionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions unauthorized response has a 4xx status code
func (o *AzureSubscriptionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure subscriptions unauthorized response has a 5xx status code
func (o *AzureSubscriptionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this azure subscriptions unauthorized response a status code equal to that given
func (o *AzureSubscriptionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AzureSubscriptionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureSubscriptionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *AzureSubscriptionsUnauthorized) GetPayload() *AzureSubscriptionsUnauthorizedBody {
	return o.Payload
}

func (o *AzureSubscriptionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureSubscriptionsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureSubscriptionsForbidden creates a AzureSubscriptionsForbidden with default headers values
func NewAzureSubscriptionsForbidden() *AzureSubscriptionsForbidden {
	return &AzureSubscriptionsForbidden{}
}

/*
AzureSubscriptionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AzureSubscriptionsForbidden struct {
	Payload *AzureSubscriptionsForbiddenBody
}

// IsSuccess returns true when this azure subscriptions forbidden response has a 2xx status code
func (o *AzureSubscriptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure subscriptions forbidden response has a 3xx status code
func (o *AzureSubscriptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions forbidden response has a 4xx status code
func (o *AzureSubscriptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure subscriptions forbidden response has a 5xx status code
func (o *AzureSubscriptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this azure subscriptions forbidden response a status code equal to that given
func (o *AzureSubscriptionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AzureSubscriptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsForbidden  %+v", 403, o.Payload)
}

func (o *AzureSubscriptionsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsForbidden  %+v", 403, o.Payload)
}

func (o *AzureSubscriptionsForbidden) GetPayload() *AzureSubscriptionsForbiddenBody {
	return o.Payload
}

func (o *AzureSubscriptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureSubscriptionsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureSubscriptionsNotFound creates a AzureSubscriptionsNotFound with default headers values
func NewAzureSubscriptionsNotFound() *AzureSubscriptionsNotFound {
	return &AzureSubscriptionsNotFound{}
}

/*
AzureSubscriptionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AzureSubscriptionsNotFound struct {
	Payload *AzureSubscriptionsNotFoundBody
}

// IsSuccess returns true when this azure subscriptions not found response has a 2xx status code
func (o *AzureSubscriptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure subscriptions not found response has a 3xx status code
func (o *AzureSubscriptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions not found response has a 4xx status code
func (o *AzureSubscriptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure subscriptions not found response has a 5xx status code
func (o *AzureSubscriptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this azure subscriptions not found response a status code equal to that given
func (o *AzureSubscriptionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AzureSubscriptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsNotFound  %+v", 404, o.Payload)
}

func (o *AzureSubscriptionsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsNotFound  %+v", 404, o.Payload)
}

func (o *AzureSubscriptionsNotFound) GetPayload() *AzureSubscriptionsNotFoundBody {
	return o.Payload
}

func (o *AzureSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AzureSubscriptionsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureSubscriptionsInternalServerError creates a AzureSubscriptionsInternalServerError with default headers values
func NewAzureSubscriptionsInternalServerError() *AzureSubscriptionsInternalServerError {
	return &AzureSubscriptionsInternalServerError{}
}

/*
AzureSubscriptionsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AzureSubscriptionsInternalServerError struct {
}

// IsSuccess returns true when this azure subscriptions internal server error response has a 2xx status code
func (o *AzureSubscriptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure subscriptions internal server error response has a 3xx status code
func (o *AzureSubscriptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure subscriptions internal server error response has a 4xx status code
func (o *AzureSubscriptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure subscriptions internal server error response has a 5xx status code
func (o *AzureSubscriptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this azure subscriptions internal server error response a status code equal to that given
func (o *AzureSubscriptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AzureSubscriptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsInternalServerError ", 500)
}

func (o *AzureSubscriptionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Azure/subscriptions][%d] azureSubscriptionsInternalServerError ", 500)
}

func (o *AzureSubscriptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AzureSubscriptionsBadRequestBodyItems0 azure subscriptions bad request body items0
swagger:model AzureSubscriptionsBadRequestBodyItems0
*/
type AzureSubscriptionsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this azure subscriptions bad request body items0
func (o *AzureSubscriptionsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions bad request body items0 based on context it is used
func (o *AzureSubscriptionsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureSubscriptionsBody azure subscriptions body
swagger:model AzureSubscriptionsBody
*/
type AzureSubscriptionsBody struct {

	// client Id
	ClientID string `json:"clientId,omitempty"`

	// client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this azure subscriptions body
func (o *AzureSubscriptionsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions body based on context it is used
func (o *AzureSubscriptionsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsBody) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureSubscriptionsForbiddenBody azure subscriptions forbidden body
swagger:model AzureSubscriptionsForbiddenBody
*/
type AzureSubscriptionsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure subscriptions forbidden body
func (o *AzureSubscriptionsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions forbidden body based on context it is used
func (o *AzureSubscriptionsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureSubscriptionsNotFoundBody azure subscriptions not found body
swagger:model AzureSubscriptionsNotFoundBody
*/
type AzureSubscriptionsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure subscriptions not found body
func (o *AzureSubscriptionsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions not found body based on context it is used
func (o *AzureSubscriptionsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureSubscriptionsOKBodyItems0 azure subscriptions o k body items0
swagger:model AzureSubscriptionsOKBodyItems0
*/
type AzureSubscriptionsOKBodyItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this azure subscriptions o k body items0
func (o *AzureSubscriptionsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions o k body items0 based on context it is used
func (o *AzureSubscriptionsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AzureSubscriptionsUnauthorizedBody azure subscriptions unauthorized body
swagger:model AzureSubscriptionsUnauthorizedBody
*/
type AzureSubscriptionsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this azure subscriptions unauthorized body
func (o *AzureSubscriptionsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure subscriptions unauthorized body based on context it is used
func (o *AzureSubscriptionsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AzureSubscriptionsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AzureSubscriptionsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AzureSubscriptionsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
