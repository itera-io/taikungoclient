// Code generated by go-swagger; DO NOT EDIT.

package dns_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dns servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dns servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DNSServersCreate(params *DNSServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersCreateOK, error)

	DNSServersDelete(params *DNSServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersDeleteOK, *DNSServersDeleteNoContent, error)

	DNSServersEdit(params *DNSServersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersEditOK, error)

	DNSServersList(params *DNSServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DNSServersCreate creates access profile dns server
*/
func (a *Client) DNSServersCreate(params *DNSServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSServersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DnsServers_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/DnsServers/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DNSServersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DNSServersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DnsServers_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DNSServersDelete deletes access profile dns server
*/
func (a *Client) DNSServersDelete(params *DNSServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersDeleteOK, *DNSServersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSServersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DnsServers_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/DnsServers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DNSServersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DNSServersDeleteOK:
		return value, nil, nil
	case *DNSServersDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dns_servers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DNSServersEdit edits access profile dns server
*/
func (a *Client) DNSServersEdit(params *DNSServersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSServersEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DnsServers_Edit",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/DnsServers/edit/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DNSServersEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DNSServersEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DnsServers_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DNSServersList lists dns servers by profile id
*/
func (a *Client) DNSServersList(params *DNSServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DNSServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDNSServersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DnsServers_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/DnsServers/list/{accessProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DNSServersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DNSServersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DnsServers_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
