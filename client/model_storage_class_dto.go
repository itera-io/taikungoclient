/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageClassDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageClassDto{}

// StorageClassDto struct for StorageClassDto
type StorageClassDto struct {
	MetadataName string `json:"metadataName"`
	Age NullableString `json:"age"`
	Provisioner NullableString `json:"provisioner"`
	ReclaimPolicy NullableString `json:"reclaimPolicy"`
	VolumeBindingMode NullableString `json:"volumeBindingMode"`
	AllowVolumeExpansion NullableBool `json:"allowVolumeExpansion"`
}

type _StorageClassDto StorageClassDto

// NewStorageClassDto instantiates a new StorageClassDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageClassDto(metadataName string, age NullableString, provisioner NullableString, reclaimPolicy NullableString, volumeBindingMode NullableString, allowVolumeExpansion NullableBool) *StorageClassDto {
	this := StorageClassDto{}
	this.MetadataName = metadataName
	this.Age = age
	this.Provisioner = provisioner
	this.ReclaimPolicy = reclaimPolicy
	this.VolumeBindingMode = volumeBindingMode
	this.AllowVolumeExpansion = allowVolumeExpansion
	return &this
}

// NewStorageClassDtoWithDefaults instantiates a new StorageClassDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageClassDtoWithDefaults() *StorageClassDto {
	this := StorageClassDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *StorageClassDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *StorageClassDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *StorageClassDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetAge returns the Age field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassDto) GetAge() string {
	if o == nil || o.Age.Get() == nil {
		var ret string
		return ret
	}

	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassDto) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// SetAge sets field value
func (o *StorageClassDto) SetAge(v string) {
	o.Age.Set(&v)
}

// GetProvisioner returns the Provisioner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassDto) GetProvisioner() string {
	if o == nil || o.Provisioner.Get() == nil {
		var ret string
		return ret
	}

	return *o.Provisioner.Get()
}

// GetProvisionerOk returns a tuple with the Provisioner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassDto) GetProvisionerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provisioner.Get(), o.Provisioner.IsSet()
}

// SetProvisioner sets field value
func (o *StorageClassDto) SetProvisioner(v string) {
	o.Provisioner.Set(&v)
}

// GetReclaimPolicy returns the ReclaimPolicy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassDto) GetReclaimPolicy() string {
	if o == nil || o.ReclaimPolicy.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReclaimPolicy.Get()
}

// GetReclaimPolicyOk returns a tuple with the ReclaimPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassDto) GetReclaimPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReclaimPolicy.Get(), o.ReclaimPolicy.IsSet()
}

// SetReclaimPolicy sets field value
func (o *StorageClassDto) SetReclaimPolicy(v string) {
	o.ReclaimPolicy.Set(&v)
}

// GetVolumeBindingMode returns the VolumeBindingMode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassDto) GetVolumeBindingMode() string {
	if o == nil || o.VolumeBindingMode.Get() == nil {
		var ret string
		return ret
	}

	return *o.VolumeBindingMode.Get()
}

// GetVolumeBindingModeOk returns a tuple with the VolumeBindingMode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassDto) GetVolumeBindingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeBindingMode.Get(), o.VolumeBindingMode.IsSet()
}

// SetVolumeBindingMode sets field value
func (o *StorageClassDto) SetVolumeBindingMode(v string) {
	o.VolumeBindingMode.Set(&v)
}

// GetAllowVolumeExpansion returns the AllowVolumeExpansion field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *StorageClassDto) GetAllowVolumeExpansion() bool {
	if o == nil || o.AllowVolumeExpansion.Get() == nil {
		var ret bool
		return ret
	}

	return *o.AllowVolumeExpansion.Get()
}

// GetAllowVolumeExpansionOk returns a tuple with the AllowVolumeExpansion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassDto) GetAllowVolumeExpansionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowVolumeExpansion.Get(), o.AllowVolumeExpansion.IsSet()
}

// SetAllowVolumeExpansion sets field value
func (o *StorageClassDto) SetAllowVolumeExpansion(v bool) {
	o.AllowVolumeExpansion.Set(&v)
}

func (o StorageClassDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageClassDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["age"] = o.Age.Get()
	toSerialize["provisioner"] = o.Provisioner.Get()
	toSerialize["reclaimPolicy"] = o.ReclaimPolicy.Get()
	toSerialize["volumeBindingMode"] = o.VolumeBindingMode.Get()
	toSerialize["allowVolumeExpansion"] = o.AllowVolumeExpansion.Get()
	return toSerialize, nil
}

func (o *StorageClassDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"age",
		"provisioner",
		"reclaimPolicy",
		"volumeBindingMode",
		"allowVolumeExpansion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageClassDto := _StorageClassDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageClassDto)

	if err != nil {
		return err
	}

	*o = StorageClassDto(varStorageClassDto)

	return err
}

type NullableStorageClassDto struct {
	value *StorageClassDto
	isSet bool
}

func (v NullableStorageClassDto) Get() *StorageClassDto {
	return v.value
}

func (v *NullableStorageClassDto) Set(val *StorageClassDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageClassDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageClassDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageClassDto(val *StorageClassDto) *NullableStorageClassDto {
	return &NullableStorageClassDto{value: val, isSet: true}
}

func (v NullableStorageClassDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageClassDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


