// Code generated by go-swagger; DO NOT EDIT.

package cron_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CronJobSyncProjectsReader is a Reader for the CronJobSyncProjects structure.
type CronJobSyncProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CronJobSyncProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCronJobSyncProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCronJobSyncProjectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCronJobSyncProjectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCronJobSyncProjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCronJobSyncProjectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCronJobSyncProjectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCronJobSyncProjectsOK creates a CronJobSyncProjectsOK with default headers values
func NewCronJobSyncProjectsOK() *CronJobSyncProjectsOK {
	return &CronJobSyncProjectsOK{}
}

/*
CronJobSyncProjectsOK describes a response with status code 200, with default header values.

Success
*/
type CronJobSyncProjectsOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this cron job sync projects o k response has a 2xx status code
func (o *CronJobSyncProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cron job sync projects o k response has a 3xx status code
func (o *CronJobSyncProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects o k response has a 4xx status code
func (o *CronJobSyncProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job sync projects o k response has a 5xx status code
func (o *CronJobSyncProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job sync projects o k response a status code equal to that given
func (o *CronJobSyncProjectsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cron job sync projects o k response
func (o *CronJobSyncProjectsOK) Code() int {
	return 200
}

func (o *CronJobSyncProjectsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsOK  %+v", 200, o.Payload)
}

func (o *CronJobSyncProjectsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsOK  %+v", 200, o.Payload)
}

func (o *CronJobSyncProjectsOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CronJobSyncProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobSyncProjectsBadRequest creates a CronJobSyncProjectsBadRequest with default headers values
func NewCronJobSyncProjectsBadRequest() *CronJobSyncProjectsBadRequest {
	return &CronJobSyncProjectsBadRequest{}
}

/*
CronJobSyncProjectsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CronJobSyncProjectsBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job sync projects bad request response has a 2xx status code
func (o *CronJobSyncProjectsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job sync projects bad request response has a 3xx status code
func (o *CronJobSyncProjectsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects bad request response has a 4xx status code
func (o *CronJobSyncProjectsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job sync projects bad request response has a 5xx status code
func (o *CronJobSyncProjectsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job sync projects bad request response a status code equal to that given
func (o *CronJobSyncProjectsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cron job sync projects bad request response
func (o *CronJobSyncProjectsBadRequest) Code() int {
	return 400
}

func (o *CronJobSyncProjectsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobSyncProjectsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobSyncProjectsBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobSyncProjectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobSyncProjectsUnauthorized creates a CronJobSyncProjectsUnauthorized with default headers values
func NewCronJobSyncProjectsUnauthorized() *CronJobSyncProjectsUnauthorized {
	return &CronJobSyncProjectsUnauthorized{}
}

/*
CronJobSyncProjectsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CronJobSyncProjectsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job sync projects unauthorized response has a 2xx status code
func (o *CronJobSyncProjectsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job sync projects unauthorized response has a 3xx status code
func (o *CronJobSyncProjectsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects unauthorized response has a 4xx status code
func (o *CronJobSyncProjectsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job sync projects unauthorized response has a 5xx status code
func (o *CronJobSyncProjectsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job sync projects unauthorized response a status code equal to that given
func (o *CronJobSyncProjectsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cron job sync projects unauthorized response
func (o *CronJobSyncProjectsUnauthorized) Code() int {
	return 401
}

func (o *CronJobSyncProjectsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobSyncProjectsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobSyncProjectsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobSyncProjectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobSyncProjectsForbidden creates a CronJobSyncProjectsForbidden with default headers values
func NewCronJobSyncProjectsForbidden() *CronJobSyncProjectsForbidden {
	return &CronJobSyncProjectsForbidden{}
}

/*
CronJobSyncProjectsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CronJobSyncProjectsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job sync projects forbidden response has a 2xx status code
func (o *CronJobSyncProjectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job sync projects forbidden response has a 3xx status code
func (o *CronJobSyncProjectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects forbidden response has a 4xx status code
func (o *CronJobSyncProjectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job sync projects forbidden response has a 5xx status code
func (o *CronJobSyncProjectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job sync projects forbidden response a status code equal to that given
func (o *CronJobSyncProjectsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cron job sync projects forbidden response
func (o *CronJobSyncProjectsForbidden) Code() int {
	return 403
}

func (o *CronJobSyncProjectsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsForbidden  %+v", 403, o.Payload)
}

func (o *CronJobSyncProjectsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsForbidden  %+v", 403, o.Payload)
}

func (o *CronJobSyncProjectsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobSyncProjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobSyncProjectsNotFound creates a CronJobSyncProjectsNotFound with default headers values
func NewCronJobSyncProjectsNotFound() *CronJobSyncProjectsNotFound {
	return &CronJobSyncProjectsNotFound{}
}

/*
CronJobSyncProjectsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CronJobSyncProjectsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job sync projects not found response has a 2xx status code
func (o *CronJobSyncProjectsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job sync projects not found response has a 3xx status code
func (o *CronJobSyncProjectsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects not found response has a 4xx status code
func (o *CronJobSyncProjectsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job sync projects not found response has a 5xx status code
func (o *CronJobSyncProjectsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job sync projects not found response a status code equal to that given
func (o *CronJobSyncProjectsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cron job sync projects not found response
func (o *CronJobSyncProjectsNotFound) Code() int {
	return 404
}

func (o *CronJobSyncProjectsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsNotFound  %+v", 404, o.Payload)
}

func (o *CronJobSyncProjectsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsNotFound  %+v", 404, o.Payload)
}

func (o *CronJobSyncProjectsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobSyncProjectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobSyncProjectsInternalServerError creates a CronJobSyncProjectsInternalServerError with default headers values
func NewCronJobSyncProjectsInternalServerError() *CronJobSyncProjectsInternalServerError {
	return &CronJobSyncProjectsInternalServerError{}
}

/*
CronJobSyncProjectsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CronJobSyncProjectsInternalServerError struct {
}

// IsSuccess returns true when this cron job sync projects internal server error response has a 2xx status code
func (o *CronJobSyncProjectsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job sync projects internal server error response has a 3xx status code
func (o *CronJobSyncProjectsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job sync projects internal server error response has a 4xx status code
func (o *CronJobSyncProjectsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job sync projects internal server error response has a 5xx status code
func (o *CronJobSyncProjectsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cron job sync projects internal server error response a status code equal to that given
func (o *CronJobSyncProjectsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cron job sync projects internal server error response
func (o *CronJobSyncProjectsInternalServerError) Code() int {
	return 500
}

func (o *CronJobSyncProjectsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsInternalServerError ", 500)
}

func (o *CronJobSyncProjectsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/sync-projects][%d] cronJobSyncProjectsInternalServerError ", 500)
}

func (o *CronJobSyncProjectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
