// Code generated by go-swagger; DO NOT EDIT.

package cron_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CronJobDeleteExpiredRefreshTokensReader is a Reader for the CronJobDeleteExpiredRefreshTokens structure.
type CronJobDeleteExpiredRefreshTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CronJobDeleteExpiredRefreshTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCronJobDeleteExpiredRefreshTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCronJobDeleteExpiredRefreshTokensBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCronJobDeleteExpiredRefreshTokensUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCronJobDeleteExpiredRefreshTokensForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCronJobDeleteExpiredRefreshTokensNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCronJobDeleteExpiredRefreshTokensInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCronJobDeleteExpiredRefreshTokensOK creates a CronJobDeleteExpiredRefreshTokensOK with default headers values
func NewCronJobDeleteExpiredRefreshTokensOK() *CronJobDeleteExpiredRefreshTokensOK {
	return &CronJobDeleteExpiredRefreshTokensOK{}
}

/*
CronJobDeleteExpiredRefreshTokensOK describes a response with status code 200, with default header values.

Success
*/
type CronJobDeleteExpiredRefreshTokensOK struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job delete expired refresh tokens o k response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cron job delete expired refresh tokens o k response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens o k response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job delete expired refresh tokens o k response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job delete expired refresh tokens o k response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensOK) IsCode(code int) bool {
	return code == 200
}

func (o *CronJobDeleteExpiredRefreshTokensOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensOK  %+v", 200, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensOK  %+v", 200, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobDeleteExpiredRefreshTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobDeleteExpiredRefreshTokensBadRequest creates a CronJobDeleteExpiredRefreshTokensBadRequest with default headers values
func NewCronJobDeleteExpiredRefreshTokensBadRequest() *CronJobDeleteExpiredRefreshTokensBadRequest {
	return &CronJobDeleteExpiredRefreshTokensBadRequest{}
}

/*
CronJobDeleteExpiredRefreshTokensBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CronJobDeleteExpiredRefreshTokensBadRequest struct {
	Payload []*CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0
}

// IsSuccess returns true when this cron job delete expired refresh tokens bad request response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job delete expired refresh tokens bad request response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens bad request response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job delete expired refresh tokens bad request response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job delete expired refresh tokens bad request response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CronJobDeleteExpiredRefreshTokensBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensBadRequest) GetPayload() []*CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0 {
	return o.Payload
}

func (o *CronJobDeleteExpiredRefreshTokensBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobDeleteExpiredRefreshTokensUnauthorized creates a CronJobDeleteExpiredRefreshTokensUnauthorized with default headers values
func NewCronJobDeleteExpiredRefreshTokensUnauthorized() *CronJobDeleteExpiredRefreshTokensUnauthorized {
	return &CronJobDeleteExpiredRefreshTokensUnauthorized{}
}

/*
CronJobDeleteExpiredRefreshTokensUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CronJobDeleteExpiredRefreshTokensUnauthorized struct {
	Payload *CronJobDeleteExpiredRefreshTokensUnauthorizedBody
}

// IsSuccess returns true when this cron job delete expired refresh tokens unauthorized response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job delete expired refresh tokens unauthorized response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens unauthorized response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job delete expired refresh tokens unauthorized response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job delete expired refresh tokens unauthorized response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) GetPayload() *CronJobDeleteExpiredRefreshTokensUnauthorizedBody {
	return o.Payload
}

func (o *CronJobDeleteExpiredRefreshTokensUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobDeleteExpiredRefreshTokensUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobDeleteExpiredRefreshTokensForbidden creates a CronJobDeleteExpiredRefreshTokensForbidden with default headers values
func NewCronJobDeleteExpiredRefreshTokensForbidden() *CronJobDeleteExpiredRefreshTokensForbidden {
	return &CronJobDeleteExpiredRefreshTokensForbidden{}
}

/*
CronJobDeleteExpiredRefreshTokensForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CronJobDeleteExpiredRefreshTokensForbidden struct {
	Payload *CronJobDeleteExpiredRefreshTokensForbiddenBody
}

// IsSuccess returns true when this cron job delete expired refresh tokens forbidden response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job delete expired refresh tokens forbidden response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens forbidden response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job delete expired refresh tokens forbidden response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job delete expired refresh tokens forbidden response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CronJobDeleteExpiredRefreshTokensForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensForbidden  %+v", 403, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensForbidden  %+v", 403, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensForbidden) GetPayload() *CronJobDeleteExpiredRefreshTokensForbiddenBody {
	return o.Payload
}

func (o *CronJobDeleteExpiredRefreshTokensForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobDeleteExpiredRefreshTokensForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobDeleteExpiredRefreshTokensNotFound creates a CronJobDeleteExpiredRefreshTokensNotFound with default headers values
func NewCronJobDeleteExpiredRefreshTokensNotFound() *CronJobDeleteExpiredRefreshTokensNotFound {
	return &CronJobDeleteExpiredRefreshTokensNotFound{}
}

/*
CronJobDeleteExpiredRefreshTokensNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CronJobDeleteExpiredRefreshTokensNotFound struct {
	Payload *CronJobDeleteExpiredRefreshTokensNotFoundBody
}

// IsSuccess returns true when this cron job delete expired refresh tokens not found response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job delete expired refresh tokens not found response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens not found response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job delete expired refresh tokens not found response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job delete expired refresh tokens not found response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CronJobDeleteExpiredRefreshTokensNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensNotFound  %+v", 404, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensNotFound  %+v", 404, o.Payload)
}

func (o *CronJobDeleteExpiredRefreshTokensNotFound) GetPayload() *CronJobDeleteExpiredRefreshTokensNotFoundBody {
	return o.Payload
}

func (o *CronJobDeleteExpiredRefreshTokensNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobDeleteExpiredRefreshTokensNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobDeleteExpiredRefreshTokensInternalServerError creates a CronJobDeleteExpiredRefreshTokensInternalServerError with default headers values
func NewCronJobDeleteExpiredRefreshTokensInternalServerError() *CronJobDeleteExpiredRefreshTokensInternalServerError {
	return &CronJobDeleteExpiredRefreshTokensInternalServerError{}
}

/*
CronJobDeleteExpiredRefreshTokensInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CronJobDeleteExpiredRefreshTokensInternalServerError struct {
}

// IsSuccess returns true when this cron job delete expired refresh tokens internal server error response has a 2xx status code
func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job delete expired refresh tokens internal server error response has a 3xx status code
func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job delete expired refresh tokens internal server error response has a 4xx status code
func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job delete expired refresh tokens internal server error response has a 5xx status code
func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cron job delete expired refresh tokens internal server error response a status code equal to that given
func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensInternalServerError ", 500)
}

func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/refresh-tokens][%d] cronJobDeleteExpiredRefreshTokensInternalServerError ", 500)
}

func (o *CronJobDeleteExpiredRefreshTokensInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0 cron job delete expired refresh tokens bad request body items0
swagger:model CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0
*/
type CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this cron job delete expired refresh tokens bad request body items0
func (o *CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job delete expired refresh tokens bad request body items0 based on context it is used
func (o *CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CronJobDeleteExpiredRefreshTokensBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobDeleteExpiredRefreshTokensForbiddenBody cron job delete expired refresh tokens forbidden body
swagger:model CronJobDeleteExpiredRefreshTokensForbiddenBody
*/
type CronJobDeleteExpiredRefreshTokensForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job delete expired refresh tokens forbidden body
func (o *CronJobDeleteExpiredRefreshTokensForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job delete expired refresh tokens forbidden body based on context it is used
func (o *CronJobDeleteExpiredRefreshTokensForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CronJobDeleteExpiredRefreshTokensForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobDeleteExpiredRefreshTokensNotFoundBody cron job delete expired refresh tokens not found body
swagger:model CronJobDeleteExpiredRefreshTokensNotFoundBody
*/
type CronJobDeleteExpiredRefreshTokensNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job delete expired refresh tokens not found body
func (o *CronJobDeleteExpiredRefreshTokensNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job delete expired refresh tokens not found body based on context it is used
func (o *CronJobDeleteExpiredRefreshTokensNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CronJobDeleteExpiredRefreshTokensNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobDeleteExpiredRefreshTokensUnauthorizedBody cron job delete expired refresh tokens unauthorized body
swagger:model CronJobDeleteExpiredRefreshTokensUnauthorizedBody
*/
type CronJobDeleteExpiredRefreshTokensUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job delete expired refresh tokens unauthorized body
func (o *CronJobDeleteExpiredRefreshTokensUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job delete expired refresh tokens unauthorized body based on context it is used
func (o *CronJobDeleteExpiredRefreshTokensUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobDeleteExpiredRefreshTokensUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CronJobDeleteExpiredRefreshTokensUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
