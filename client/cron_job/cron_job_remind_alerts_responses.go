// Code generated by go-swagger; DO NOT EDIT.

package cron_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CronJobRemindAlertsReader is a Reader for the CronJobRemindAlerts structure.
type CronJobRemindAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CronJobRemindAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCronJobRemindAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCronJobRemindAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCronJobRemindAlertsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCronJobRemindAlertsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCronJobRemindAlertsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCronJobRemindAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCronJobRemindAlertsOK creates a CronJobRemindAlertsOK with default headers values
func NewCronJobRemindAlertsOK() *CronJobRemindAlertsOK {
	return &CronJobRemindAlertsOK{}
}

/*
CronJobRemindAlertsOK describes a response with status code 200, with default header values.

Success
*/
type CronJobRemindAlertsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this cron job remind alerts o k response has a 2xx status code
func (o *CronJobRemindAlertsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cron job remind alerts o k response has a 3xx status code
func (o *CronJobRemindAlertsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts o k response has a 4xx status code
func (o *CronJobRemindAlertsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job remind alerts o k response has a 5xx status code
func (o *CronJobRemindAlertsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job remind alerts o k response a status code equal to that given
func (o *CronJobRemindAlertsOK) IsCode(code int) bool {
	return code == 200
}

func (o *CronJobRemindAlertsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsOK  %+v", 200, o.Payload)
}

func (o *CronJobRemindAlertsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsOK  %+v", 200, o.Payload)
}

func (o *CronJobRemindAlertsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CronJobRemindAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobRemindAlertsBadRequest creates a CronJobRemindAlertsBadRequest with default headers values
func NewCronJobRemindAlertsBadRequest() *CronJobRemindAlertsBadRequest {
	return &CronJobRemindAlertsBadRequest{}
}

/*
CronJobRemindAlertsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CronJobRemindAlertsBadRequest struct {
	Payload []*CronJobRemindAlertsBadRequestBodyItems0
}

// IsSuccess returns true when this cron job remind alerts bad request response has a 2xx status code
func (o *CronJobRemindAlertsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job remind alerts bad request response has a 3xx status code
func (o *CronJobRemindAlertsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts bad request response has a 4xx status code
func (o *CronJobRemindAlertsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job remind alerts bad request response has a 5xx status code
func (o *CronJobRemindAlertsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job remind alerts bad request response a status code equal to that given
func (o *CronJobRemindAlertsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CronJobRemindAlertsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobRemindAlertsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *CronJobRemindAlertsBadRequest) GetPayload() []*CronJobRemindAlertsBadRequestBodyItems0 {
	return o.Payload
}

func (o *CronJobRemindAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobRemindAlertsUnauthorized creates a CronJobRemindAlertsUnauthorized with default headers values
func NewCronJobRemindAlertsUnauthorized() *CronJobRemindAlertsUnauthorized {
	return &CronJobRemindAlertsUnauthorized{}
}

/*
CronJobRemindAlertsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CronJobRemindAlertsUnauthorized struct {
	Payload *CronJobRemindAlertsUnauthorizedBody
}

// IsSuccess returns true when this cron job remind alerts unauthorized response has a 2xx status code
func (o *CronJobRemindAlertsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job remind alerts unauthorized response has a 3xx status code
func (o *CronJobRemindAlertsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts unauthorized response has a 4xx status code
func (o *CronJobRemindAlertsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job remind alerts unauthorized response has a 5xx status code
func (o *CronJobRemindAlertsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job remind alerts unauthorized response a status code equal to that given
func (o *CronJobRemindAlertsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CronJobRemindAlertsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobRemindAlertsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsUnauthorized  %+v", 401, o.Payload)
}

func (o *CronJobRemindAlertsUnauthorized) GetPayload() *CronJobRemindAlertsUnauthorizedBody {
	return o.Payload
}

func (o *CronJobRemindAlertsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobRemindAlertsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobRemindAlertsForbidden creates a CronJobRemindAlertsForbidden with default headers values
func NewCronJobRemindAlertsForbidden() *CronJobRemindAlertsForbidden {
	return &CronJobRemindAlertsForbidden{}
}

/*
CronJobRemindAlertsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CronJobRemindAlertsForbidden struct {
	Payload *CronJobRemindAlertsForbiddenBody
}

// IsSuccess returns true when this cron job remind alerts forbidden response has a 2xx status code
func (o *CronJobRemindAlertsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job remind alerts forbidden response has a 3xx status code
func (o *CronJobRemindAlertsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts forbidden response has a 4xx status code
func (o *CronJobRemindAlertsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job remind alerts forbidden response has a 5xx status code
func (o *CronJobRemindAlertsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job remind alerts forbidden response a status code equal to that given
func (o *CronJobRemindAlertsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CronJobRemindAlertsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsForbidden  %+v", 403, o.Payload)
}

func (o *CronJobRemindAlertsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsForbidden  %+v", 403, o.Payload)
}

func (o *CronJobRemindAlertsForbidden) GetPayload() *CronJobRemindAlertsForbiddenBody {
	return o.Payload
}

func (o *CronJobRemindAlertsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobRemindAlertsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobRemindAlertsNotFound creates a CronJobRemindAlertsNotFound with default headers values
func NewCronJobRemindAlertsNotFound() *CronJobRemindAlertsNotFound {
	return &CronJobRemindAlertsNotFound{}
}

/*
CronJobRemindAlertsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CronJobRemindAlertsNotFound struct {
	Payload *CronJobRemindAlertsNotFoundBody
}

// IsSuccess returns true when this cron job remind alerts not found response has a 2xx status code
func (o *CronJobRemindAlertsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job remind alerts not found response has a 3xx status code
func (o *CronJobRemindAlertsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts not found response has a 4xx status code
func (o *CronJobRemindAlertsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cron job remind alerts not found response has a 5xx status code
func (o *CronJobRemindAlertsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cron job remind alerts not found response a status code equal to that given
func (o *CronJobRemindAlertsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CronJobRemindAlertsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsNotFound  %+v", 404, o.Payload)
}

func (o *CronJobRemindAlertsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsNotFound  %+v", 404, o.Payload)
}

func (o *CronJobRemindAlertsNotFound) GetPayload() *CronJobRemindAlertsNotFoundBody {
	return o.Payload
}

func (o *CronJobRemindAlertsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CronJobRemindAlertsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCronJobRemindAlertsInternalServerError creates a CronJobRemindAlertsInternalServerError with default headers values
func NewCronJobRemindAlertsInternalServerError() *CronJobRemindAlertsInternalServerError {
	return &CronJobRemindAlertsInternalServerError{}
}

/*
CronJobRemindAlertsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CronJobRemindAlertsInternalServerError struct {
}

// IsSuccess returns true when this cron job remind alerts internal server error response has a 2xx status code
func (o *CronJobRemindAlertsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cron job remind alerts internal server error response has a 3xx status code
func (o *CronJobRemindAlertsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cron job remind alerts internal server error response has a 4xx status code
func (o *CronJobRemindAlertsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cron job remind alerts internal server error response has a 5xx status code
func (o *CronJobRemindAlertsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cron job remind alerts internal server error response a status code equal to that given
func (o *CronJobRemindAlertsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CronJobRemindAlertsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsInternalServerError ", 500)
}

func (o *CronJobRemindAlertsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/CronJob/remind-alerts][%d] cronJobRemindAlertsInternalServerError ", 500)
}

func (o *CronJobRemindAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CronJobRemindAlertsBadRequestBodyItems0 cron job remind alerts bad request body items0
swagger:model CronJobRemindAlertsBadRequestBodyItems0
*/
type CronJobRemindAlertsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this cron job remind alerts bad request body items0
func (o *CronJobRemindAlertsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job remind alerts bad request body items0 based on context it is used
func (o *CronJobRemindAlertsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobRemindAlertsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobRemindAlertsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CronJobRemindAlertsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobRemindAlertsBody cron job remind alerts body
swagger:model CronJobRemindAlertsBody
*/
type CronJobRemindAlertsBody struct {

	// reminder
	// Enum: [100 200 300 -1]
	Reminder int32 `json:"reminder,omitempty"`
}

// Validate validates this cron job remind alerts body
func (o *CronJobRemindAlertsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReminder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cronJobRemindAlertsBodyTypeReminderPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,300,-1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cronJobRemindAlertsBodyTypeReminderPropEnum = append(cronJobRemindAlertsBodyTypeReminderPropEnum, v)
	}
}

// prop value enum
func (o *CronJobRemindAlertsBody) validateReminderEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, cronJobRemindAlertsBodyTypeReminderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CronJobRemindAlertsBody) validateReminder(formats strfmt.Registry) error {
	if swag.IsZero(o.Reminder) { // not required
		return nil
	}

	// value enum
	if err := o.validateReminderEnum("body"+"."+"reminder", "body", o.Reminder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cron job remind alerts body based on context it is used
func (o *CronJobRemindAlertsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobRemindAlertsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobRemindAlertsBody) UnmarshalBinary(b []byte) error {
	var res CronJobRemindAlertsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobRemindAlertsForbiddenBody cron job remind alerts forbidden body
swagger:model CronJobRemindAlertsForbiddenBody
*/
type CronJobRemindAlertsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job remind alerts forbidden body
func (o *CronJobRemindAlertsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job remind alerts forbidden body based on context it is used
func (o *CronJobRemindAlertsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobRemindAlertsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobRemindAlertsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CronJobRemindAlertsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobRemindAlertsNotFoundBody cron job remind alerts not found body
swagger:model CronJobRemindAlertsNotFoundBody
*/
type CronJobRemindAlertsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job remind alerts not found body
func (o *CronJobRemindAlertsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job remind alerts not found body based on context it is used
func (o *CronJobRemindAlertsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobRemindAlertsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobRemindAlertsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CronJobRemindAlertsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CronJobRemindAlertsUnauthorizedBody cron job remind alerts unauthorized body
swagger:model CronJobRemindAlertsUnauthorizedBody
*/
type CronJobRemindAlertsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cron job remind alerts unauthorized body
func (o *CronJobRemindAlertsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cron job remind alerts unauthorized body based on context it is used
func (o *CronJobRemindAlertsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CronJobRemindAlertsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CronJobRemindAlertsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CronJobRemindAlertsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
