/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesNodeListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNodeListDto{}

// KubernetesNodeListDto struct for KubernetesNodeListDto
type KubernetesNodeListDto struct {
	MetadataName NullableString `json:"metadataName"`
	Type []string `json:"type"`
	Status []string `json:"status"`
	Reason []string `json:"reason"`
	Message []string `json:"message"`
}

type _KubernetesNodeListDto KubernetesNodeListDto

// NewKubernetesNodeListDto instantiates a new KubernetesNodeListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNodeListDto(metadataName NullableString, type_ []string, status []string, reason []string, message []string) *KubernetesNodeListDto {
	this := KubernetesNodeListDto{}
	this.MetadataName = metadataName
	this.Type = type_
	this.Status = status
	this.Reason = reason
	this.Message = message
	return &this
}

// NewKubernetesNodeListDtoWithDefaults instantiates a new KubernetesNodeListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNodeListDtoWithDefaults() *KubernetesNodeListDto {
	this := KubernetesNodeListDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KubernetesNodeListDto) GetMetadataName() string {
	if o == nil || o.MetadataName.Get() == nil {
		var ret string
		return ret
	}

	return *o.MetadataName.Get()
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeListDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataName.Get(), o.MetadataName.IsSet()
}

// SetMetadataName sets field value
func (o *KubernetesNodeListDto) SetMetadataName(v string) {
	o.MetadataName.Set(&v)
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *KubernetesNodeListDto) GetType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeListDto) GetTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *KubernetesNodeListDto) SetType(v []string) {
	o.Type = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *KubernetesNodeListDto) GetStatus() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeListDto) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *KubernetesNodeListDto) SetStatus(v []string) {
	o.Status = v
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *KubernetesNodeListDto) GetReason() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeListDto) GetReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// SetReason sets field value
func (o *KubernetesNodeListDto) SetReason(v []string) {
	o.Reason = v
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *KubernetesNodeListDto) GetMessage() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNodeListDto) GetMessageOk() ([]string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// SetMessage sets field value
func (o *KubernetesNodeListDto) SetMessage(v []string) {
	o.Message = v
}

func (o KubernetesNodeListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNodeListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName.Get()
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

func (o *KubernetesNodeListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"type",
		"status",
		"reason",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesNodeListDto := _KubernetesNodeListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesNodeListDto)

	if err != nil {
		return err
	}

	*o = KubernetesNodeListDto(varKubernetesNodeListDto)

	return err
}

type NullableKubernetesNodeListDto struct {
	value *KubernetesNodeListDto
	isSet bool
}

func (v NullableKubernetesNodeListDto) Get() *KubernetesNodeListDto {
	return v.value
}

func (v *NullableKubernetesNodeListDto) Set(val *KubernetesNodeListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNodeListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNodeListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNodeListDto(val *KubernetesNodeListDto) *NullableKubernetesNodeListDto {
	return &NullableKubernetesNodeListDto{value: val, isSet: true}
}

func (v NullableKubernetesNodeListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNodeListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


