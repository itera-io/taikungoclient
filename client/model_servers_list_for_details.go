/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ServersListForDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServersListForDetails{}

// ServersListForDetails struct for ServersListForDetails
type ServersListForDetails struct {
	Data    []ServerListDto              `json:"data,omitempty"`
	Project *ProjectDetailsForServersDto `json:"project,omitempty"`
}

// NewServersListForDetails instantiates a new ServersListForDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServersListForDetails() *ServersListForDetails {
	this := ServersListForDetails{}
	return &this
}

// NewServersListForDetailsWithDefaults instantiates a new ServersListForDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServersListForDetailsWithDefaults() *ServersListForDetails {
	this := ServersListForDetails{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServersListForDetails) GetData() []ServerListDto {
	if o == nil {
		var ret []ServerListDto
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServersListForDetails) GetDataOk() ([]ServerListDto, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServersListForDetails) HasData() bool {
	if o != nil && IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ServerListDto and assigns it to the Data field.
func (o *ServersListForDetails) SetData(v []ServerListDto) {
	o.Data = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ServersListForDetails) GetProject() ProjectDetailsForServersDto {
	if o == nil || IsNil(o.Project) {
		var ret ProjectDetailsForServersDto
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServersListForDetails) GetProjectOk() (*ProjectDetailsForServersDto, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ServersListForDetails) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectDetailsForServersDto and assigns it to the Project field.
func (o *ServersListForDetails) SetProject(v ProjectDetailsForServersDto) {
	o.Project = &v
}

func (o ServersListForDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServersListForDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	return toSerialize, nil
}

type NullableServersListForDetails struct {
	value *ServersListForDetails
	isSet bool
}

func (v NullableServersListForDetails) Get() *ServersListForDetails {
	return v.value
}

func (v *NullableServersListForDetails) Set(val *ServersListForDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableServersListForDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableServersListForDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServersListForDetails(val *ServersListForDetails) *NullableServersListForDetails {
	return &NullableServersListForDetails{value: val, isSet: true}
}

func (v NullableServersListForDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServersListForDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
