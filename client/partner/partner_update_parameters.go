// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPartnerUpdateParams creates a new PartnerUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartnerUpdateParams() *PartnerUpdateParams {
	return &PartnerUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartnerUpdateParamsWithTimeout creates a new PartnerUpdateParams object
// with the ability to set a timeout on a request.
func NewPartnerUpdateParamsWithTimeout(timeout time.Duration) *PartnerUpdateParams {
	return &PartnerUpdateParams{
		timeout: timeout,
	}
}

// NewPartnerUpdateParamsWithContext creates a new PartnerUpdateParams object
// with the ability to set a context for a request.
func NewPartnerUpdateParamsWithContext(ctx context.Context) *PartnerUpdateParams {
	return &PartnerUpdateParams{
		Context: ctx,
	}
}

// NewPartnerUpdateParamsWithHTTPClient creates a new PartnerUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartnerUpdateParamsWithHTTPClient(client *http.Client) *PartnerUpdateParams {
	return &PartnerUpdateParams{
		HTTPClient: client,
	}
}

/* PartnerUpdateParams contains all the parameters to send to the API endpoint
   for the partner update operation.

   Typically these are written to a http.Request.
*/
type PartnerUpdateParams struct {

	// Address.
	Address *string

	// AllowRegistration.
	AllowRegistration *bool

	// BackgroundImage.
	BackgroundImage runtime.NamedReadCloser

	// City.
	City *string

	// Country.
	Country *string

	// Domain.
	Domain *string

	// Email.
	Email *string

	// Link.
	Link *string

	// Logo.
	Logo runtime.NamedReadCloser

	// Name.
	Name *string

	// PaymentEnabled.
	PaymentEnabled *bool

	// Phone.
	Phone *string

	// RequiredUserApproval.
	RequiredUserApproval *bool

	// VatNumber.
	VatNumber *string

	// ID.
	//
	// Format: int32
	ID int32

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partner update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerUpdateParams) WithDefaults() *PartnerUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partner update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the partner update params
func (o *PartnerUpdateParams) WithTimeout(timeout time.Duration) *PartnerUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partner update params
func (o *PartnerUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partner update params
func (o *PartnerUpdateParams) WithContext(ctx context.Context) *PartnerUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partner update params
func (o *PartnerUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partner update params
func (o *PartnerUpdateParams) WithHTTPClient(client *http.Client) *PartnerUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partner update params
func (o *PartnerUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the partner update params
func (o *PartnerUpdateParams) WithAddress(address *string) *PartnerUpdateParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the partner update params
func (o *PartnerUpdateParams) SetAddress(address *string) {
	o.Address = address
}

// WithAllowRegistration adds the allowRegistration to the partner update params
func (o *PartnerUpdateParams) WithAllowRegistration(allowRegistration *bool) *PartnerUpdateParams {
	o.SetAllowRegistration(allowRegistration)
	return o
}

// SetAllowRegistration adds the allowRegistration to the partner update params
func (o *PartnerUpdateParams) SetAllowRegistration(allowRegistration *bool) {
	o.AllowRegistration = allowRegistration
}

// WithBackgroundImage adds the backgroundImage to the partner update params
func (o *PartnerUpdateParams) WithBackgroundImage(backgroundImage runtime.NamedReadCloser) *PartnerUpdateParams {
	o.SetBackgroundImage(backgroundImage)
	return o
}

// SetBackgroundImage adds the backgroundImage to the partner update params
func (o *PartnerUpdateParams) SetBackgroundImage(backgroundImage runtime.NamedReadCloser) {
	o.BackgroundImage = backgroundImage
}

// WithCity adds the city to the partner update params
func (o *PartnerUpdateParams) WithCity(city *string) *PartnerUpdateParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the partner update params
func (o *PartnerUpdateParams) SetCity(city *string) {
	o.City = city
}

// WithCountry adds the country to the partner update params
func (o *PartnerUpdateParams) WithCountry(country *string) *PartnerUpdateParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the partner update params
func (o *PartnerUpdateParams) SetCountry(country *string) {
	o.Country = country
}

// WithDomain adds the domain to the partner update params
func (o *PartnerUpdateParams) WithDomain(domain *string) *PartnerUpdateParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the partner update params
func (o *PartnerUpdateParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithEmail adds the email to the partner update params
func (o *PartnerUpdateParams) WithEmail(email *string) *PartnerUpdateParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the partner update params
func (o *PartnerUpdateParams) SetEmail(email *string) {
	o.Email = email
}

// WithLink adds the link to the partner update params
func (o *PartnerUpdateParams) WithLink(link *string) *PartnerUpdateParams {
	o.SetLink(link)
	return o
}

// SetLink adds the link to the partner update params
func (o *PartnerUpdateParams) SetLink(link *string) {
	o.Link = link
}

// WithLogo adds the logo to the partner update params
func (o *PartnerUpdateParams) WithLogo(logo runtime.NamedReadCloser) *PartnerUpdateParams {
	o.SetLogo(logo)
	return o
}

// SetLogo adds the logo to the partner update params
func (o *PartnerUpdateParams) SetLogo(logo runtime.NamedReadCloser) {
	o.Logo = logo
}

// WithName adds the name to the partner update params
func (o *PartnerUpdateParams) WithName(name *string) *PartnerUpdateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the partner update params
func (o *PartnerUpdateParams) SetName(name *string) {
	o.Name = name
}

// WithPaymentEnabled adds the paymentEnabled to the partner update params
func (o *PartnerUpdateParams) WithPaymentEnabled(paymentEnabled *bool) *PartnerUpdateParams {
	o.SetPaymentEnabled(paymentEnabled)
	return o
}

// SetPaymentEnabled adds the paymentEnabled to the partner update params
func (o *PartnerUpdateParams) SetPaymentEnabled(paymentEnabled *bool) {
	o.PaymentEnabled = paymentEnabled
}

// WithPhone adds the phone to the partner update params
func (o *PartnerUpdateParams) WithPhone(phone *string) *PartnerUpdateParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the partner update params
func (o *PartnerUpdateParams) SetPhone(phone *string) {
	o.Phone = phone
}

// WithRequiredUserApproval adds the requiredUserApproval to the partner update params
func (o *PartnerUpdateParams) WithRequiredUserApproval(requiredUserApproval *bool) *PartnerUpdateParams {
	o.SetRequiredUserApproval(requiredUserApproval)
	return o
}

// SetRequiredUserApproval adds the requiredUserApproval to the partner update params
func (o *PartnerUpdateParams) SetRequiredUserApproval(requiredUserApproval *bool) {
	o.RequiredUserApproval = requiredUserApproval
}

// WithVatNumber adds the vatNumber to the partner update params
func (o *PartnerUpdateParams) WithVatNumber(vatNumber *string) *PartnerUpdateParams {
	o.SetVatNumber(vatNumber)
	return o
}

// SetVatNumber adds the vatNumber to the partner update params
func (o *PartnerUpdateParams) SetVatNumber(vatNumber *string) {
	o.VatNumber = vatNumber
}

// WithID adds the id to the partner update params
func (o *PartnerUpdateParams) WithID(id int32) *PartnerUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the partner update params
func (o *PartnerUpdateParams) SetID(id int32) {
	o.ID = id
}

// WithV adds the v to the partner update params
func (o *PartnerUpdateParams) WithV(v string) *PartnerUpdateParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the partner update params
func (o *PartnerUpdateParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *PartnerUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// form param Address
		var frAddress string
		if o.Address != nil {
			frAddress = *o.Address
		}
		fAddress := frAddress
		if fAddress != "" {
			if err := r.SetFormParam("Address", fAddress); err != nil {
				return err
			}
		}
	}

	if o.AllowRegistration != nil {

		// form param AllowRegistration
		var frAllowRegistration bool
		if o.AllowRegistration != nil {
			frAllowRegistration = *o.AllowRegistration
		}
		fAllowRegistration := swag.FormatBool(frAllowRegistration)
		if fAllowRegistration != "" {
			if err := r.SetFormParam("AllowRegistration", fAllowRegistration); err != nil {
				return err
			}
		}
	}

	if o.BackgroundImage != nil {

		if o.BackgroundImage != nil {
			// form file param BackgroundImage
			if err := r.SetFileParam("BackgroundImage", o.BackgroundImage); err != nil {
				return err
			}
		}
	}

	if o.City != nil {

		// form param City
		var frCity string
		if o.City != nil {
			frCity = *o.City
		}
		fCity := frCity
		if fCity != "" {
			if err := r.SetFormParam("City", fCity); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// form param Country
		var frCountry string
		if o.Country != nil {
			frCountry = *o.Country
		}
		fCountry := frCountry
		if fCountry != "" {
			if err := r.SetFormParam("Country", fCountry); err != nil {
				return err
			}
		}
	}

	if o.Domain != nil {

		// form param Domain
		var frDomain string
		if o.Domain != nil {
			frDomain = *o.Domain
		}
		fDomain := frDomain
		if fDomain != "" {
			if err := r.SetFormParam("Domain", fDomain); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// form param Email
		var frEmail string
		if o.Email != nil {
			frEmail = *o.Email
		}
		fEmail := frEmail
		if fEmail != "" {
			if err := r.SetFormParam("Email", fEmail); err != nil {
				return err
			}
		}
	}

	if o.Link != nil {

		// form param Link
		var frLink string
		if o.Link != nil {
			frLink = *o.Link
		}
		fLink := frLink
		if fLink != "" {
			if err := r.SetFormParam("Link", fLink); err != nil {
				return err
			}
		}
	}

	if o.Logo != nil {

		if o.Logo != nil {
			// form file param Logo
			if err := r.SetFileParam("Logo", o.Logo); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// form param Name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("Name", fName); err != nil {
				return err
			}
		}
	}

	if o.PaymentEnabled != nil {

		// form param PaymentEnabled
		var frPaymentEnabled bool
		if o.PaymentEnabled != nil {
			frPaymentEnabled = *o.PaymentEnabled
		}
		fPaymentEnabled := swag.FormatBool(frPaymentEnabled)
		if fPaymentEnabled != "" {
			if err := r.SetFormParam("PaymentEnabled", fPaymentEnabled); err != nil {
				return err
			}
		}
	}

	if o.Phone != nil {

		// form param Phone
		var frPhone string
		if o.Phone != nil {
			frPhone = *o.Phone
		}
		fPhone := frPhone
		if fPhone != "" {
			if err := r.SetFormParam("Phone", fPhone); err != nil {
				return err
			}
		}
	}

	if o.RequiredUserApproval != nil {

		// form param RequiredUserApproval
		var frRequiredUserApproval bool
		if o.RequiredUserApproval != nil {
			frRequiredUserApproval = *o.RequiredUserApproval
		}
		fRequiredUserApproval := swag.FormatBool(frRequiredUserApproval)
		if fRequiredUserApproval != "" {
			if err := r.SetFormParam("RequiredUserApproval", fRequiredUserApproval); err != nil {
				return err
			}
		}
	}

	if o.VatNumber != nil {

		// form param VatNumber
		var frVatNumber string
		if o.VatNumber != nil {
			frVatNumber = *o.VatNumber
		}
		fVatNumber := frVatNumber
		if fVatNumber != "" {
			if err := r.SetFormParam("VatNumber", fVatNumber); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
