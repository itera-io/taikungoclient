// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PartnerContactUsReader is a Reader for the PartnerContactUs structure.
type PartnerContactUsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartnerContactUsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPartnerContactUsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPartnerContactUsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPartnerContactUsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPartnerContactUsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPartnerContactUsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPartnerContactUsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPartnerContactUsOK creates a PartnerContactUsOK with default headers values
func NewPartnerContactUsOK() *PartnerContactUsOK {
	return &PartnerContactUsOK{}
}

/*
PartnerContactUsOK describes a response with status code 200, with default header values.

Success
*/
type PartnerContactUsOK struct {
}

// IsSuccess returns true when this partner contact us o k response has a 2xx status code
func (o *PartnerContactUsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this partner contact us o k response has a 3xx status code
func (o *PartnerContactUsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us o k response has a 4xx status code
func (o *PartnerContactUsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner contact us o k response has a 5xx status code
func (o *PartnerContactUsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this partner contact us o k response a status code equal to that given
func (o *PartnerContactUsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the partner contact us o k response
func (o *PartnerContactUsOK) Code() int {
	return 200
}

func (o *PartnerContactUsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsOK ", 200)
}

func (o *PartnerContactUsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsOK ", 200)
}

func (o *PartnerContactUsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPartnerContactUsBadRequest creates a PartnerContactUsBadRequest with default headers values
func NewPartnerContactUsBadRequest() *PartnerContactUsBadRequest {
	return &PartnerContactUsBadRequest{}
}

/*
PartnerContactUsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PartnerContactUsBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this partner contact us bad request response has a 2xx status code
func (o *PartnerContactUsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner contact us bad request response has a 3xx status code
func (o *PartnerContactUsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us bad request response has a 4xx status code
func (o *PartnerContactUsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner contact us bad request response has a 5xx status code
func (o *PartnerContactUsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this partner contact us bad request response a status code equal to that given
func (o *PartnerContactUsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the partner contact us bad request response
func (o *PartnerContactUsBadRequest) Code() int {
	return 400
}

func (o *PartnerContactUsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerContactUsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerContactUsBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PartnerContactUsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerContactUsUnauthorized creates a PartnerContactUsUnauthorized with default headers values
func NewPartnerContactUsUnauthorized() *PartnerContactUsUnauthorized {
	return &PartnerContactUsUnauthorized{}
}

/*
PartnerContactUsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PartnerContactUsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this partner contact us unauthorized response has a 2xx status code
func (o *PartnerContactUsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner contact us unauthorized response has a 3xx status code
func (o *PartnerContactUsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us unauthorized response has a 4xx status code
func (o *PartnerContactUsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner contact us unauthorized response has a 5xx status code
func (o *PartnerContactUsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this partner contact us unauthorized response a status code equal to that given
func (o *PartnerContactUsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the partner contact us unauthorized response
func (o *PartnerContactUsUnauthorized) Code() int {
	return 401
}

func (o *PartnerContactUsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerContactUsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerContactUsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PartnerContactUsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerContactUsForbidden creates a PartnerContactUsForbidden with default headers values
func NewPartnerContactUsForbidden() *PartnerContactUsForbidden {
	return &PartnerContactUsForbidden{}
}

/*
PartnerContactUsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PartnerContactUsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this partner contact us forbidden response has a 2xx status code
func (o *PartnerContactUsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner contact us forbidden response has a 3xx status code
func (o *PartnerContactUsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us forbidden response has a 4xx status code
func (o *PartnerContactUsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner contact us forbidden response has a 5xx status code
func (o *PartnerContactUsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this partner contact us forbidden response a status code equal to that given
func (o *PartnerContactUsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the partner contact us forbidden response
func (o *PartnerContactUsForbidden) Code() int {
	return 403
}

func (o *PartnerContactUsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsForbidden  %+v", 403, o.Payload)
}

func (o *PartnerContactUsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsForbidden  %+v", 403, o.Payload)
}

func (o *PartnerContactUsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PartnerContactUsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerContactUsNotFound creates a PartnerContactUsNotFound with default headers values
func NewPartnerContactUsNotFound() *PartnerContactUsNotFound {
	return &PartnerContactUsNotFound{}
}

/*
PartnerContactUsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PartnerContactUsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this partner contact us not found response has a 2xx status code
func (o *PartnerContactUsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner contact us not found response has a 3xx status code
func (o *PartnerContactUsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us not found response has a 4xx status code
func (o *PartnerContactUsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner contact us not found response has a 5xx status code
func (o *PartnerContactUsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this partner contact us not found response a status code equal to that given
func (o *PartnerContactUsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the partner contact us not found response
func (o *PartnerContactUsNotFound) Code() int {
	return 404
}

func (o *PartnerContactUsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsNotFound  %+v", 404, o.Payload)
}

func (o *PartnerContactUsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsNotFound  %+v", 404, o.Payload)
}

func (o *PartnerContactUsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PartnerContactUsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerContactUsInternalServerError creates a PartnerContactUsInternalServerError with default headers values
func NewPartnerContactUsInternalServerError() *PartnerContactUsInternalServerError {
	return &PartnerContactUsInternalServerError{}
}

/*
PartnerContactUsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PartnerContactUsInternalServerError struct {
}

// IsSuccess returns true when this partner contact us internal server error response has a 2xx status code
func (o *PartnerContactUsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner contact us internal server error response has a 3xx status code
func (o *PartnerContactUsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner contact us internal server error response has a 4xx status code
func (o *PartnerContactUsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner contact us internal server error response has a 5xx status code
func (o *PartnerContactUsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this partner contact us internal server error response a status code equal to that given
func (o *PartnerContactUsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the partner contact us internal server error response
func (o *PartnerContactUsInternalServerError) Code() int {
	return 500
}

func (o *PartnerContactUsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsInternalServerError ", 500)
}

func (o *PartnerContactUsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/contact-us][%d] partnerContactUsInternalServerError ", 500)
}

func (o *PartnerContactUsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
