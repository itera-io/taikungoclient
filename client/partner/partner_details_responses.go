// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartnerDetailsReader is a Reader for the PartnerDetails structure.
type PartnerDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartnerDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPartnerDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPartnerDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPartnerDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPartnerDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPartnerDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPartnerDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPartnerDetailsOK creates a PartnerDetailsOK with default headers values
func NewPartnerDetailsOK() *PartnerDetailsOK {
	return &PartnerDetailsOK{}
}

/*
PartnerDetailsOK describes a response with status code 200, with default header values.

Success
*/
type PartnerDetailsOK struct {
	Payload *PartnerDetailsOKBody
}

// IsSuccess returns true when this partner details o k response has a 2xx status code
func (o *PartnerDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this partner details o k response has a 3xx status code
func (o *PartnerDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details o k response has a 4xx status code
func (o *PartnerDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner details o k response has a 5xx status code
func (o *PartnerDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this partner details o k response a status code equal to that given
func (o *PartnerDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PartnerDetailsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsOK  %+v", 200, o.Payload)
}

func (o *PartnerDetailsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsOK  %+v", 200, o.Payload)
}

func (o *PartnerDetailsOK) GetPayload() *PartnerDetailsOKBody {
	return o.Payload
}

func (o *PartnerDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerDetailsBadRequest creates a PartnerDetailsBadRequest with default headers values
func NewPartnerDetailsBadRequest() *PartnerDetailsBadRequest {
	return &PartnerDetailsBadRequest{}
}

/*
PartnerDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PartnerDetailsBadRequest struct {
	Payload []*PartnerDetailsBadRequestBodyItems0
}

// IsSuccess returns true when this partner details bad request response has a 2xx status code
func (o *PartnerDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner details bad request response has a 3xx status code
func (o *PartnerDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details bad request response has a 4xx status code
func (o *PartnerDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner details bad request response has a 5xx status code
func (o *PartnerDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this partner details bad request response a status code equal to that given
func (o *PartnerDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PartnerDetailsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerDetailsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerDetailsBadRequest) GetPayload() []*PartnerDetailsBadRequestBodyItems0 {
	return o.Payload
}

func (o *PartnerDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerDetailsUnauthorized creates a PartnerDetailsUnauthorized with default headers values
func NewPartnerDetailsUnauthorized() *PartnerDetailsUnauthorized {
	return &PartnerDetailsUnauthorized{}
}

/*
PartnerDetailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PartnerDetailsUnauthorized struct {
	Payload *PartnerDetailsUnauthorizedBody
}

// IsSuccess returns true when this partner details unauthorized response has a 2xx status code
func (o *PartnerDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner details unauthorized response has a 3xx status code
func (o *PartnerDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details unauthorized response has a 4xx status code
func (o *PartnerDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner details unauthorized response has a 5xx status code
func (o *PartnerDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this partner details unauthorized response a status code equal to that given
func (o *PartnerDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PartnerDetailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerDetailsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerDetailsUnauthorized) GetPayload() *PartnerDetailsUnauthorizedBody {
	return o.Payload
}

func (o *PartnerDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerDetailsForbidden creates a PartnerDetailsForbidden with default headers values
func NewPartnerDetailsForbidden() *PartnerDetailsForbidden {
	return &PartnerDetailsForbidden{}
}

/*
PartnerDetailsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PartnerDetailsForbidden struct {
	Payload *PartnerDetailsForbiddenBody
}

// IsSuccess returns true when this partner details forbidden response has a 2xx status code
func (o *PartnerDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner details forbidden response has a 3xx status code
func (o *PartnerDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details forbidden response has a 4xx status code
func (o *PartnerDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner details forbidden response has a 5xx status code
func (o *PartnerDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this partner details forbidden response a status code equal to that given
func (o *PartnerDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PartnerDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsForbidden  %+v", 403, o.Payload)
}

func (o *PartnerDetailsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsForbidden  %+v", 403, o.Payload)
}

func (o *PartnerDetailsForbidden) GetPayload() *PartnerDetailsForbiddenBody {
	return o.Payload
}

func (o *PartnerDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerDetailsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerDetailsNotFound creates a PartnerDetailsNotFound with default headers values
func NewPartnerDetailsNotFound() *PartnerDetailsNotFound {
	return &PartnerDetailsNotFound{}
}

/*
PartnerDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PartnerDetailsNotFound struct {
	Payload *PartnerDetailsNotFoundBody
}

// IsSuccess returns true when this partner details not found response has a 2xx status code
func (o *PartnerDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner details not found response has a 3xx status code
func (o *PartnerDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details not found response has a 4xx status code
func (o *PartnerDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner details not found response has a 5xx status code
func (o *PartnerDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this partner details not found response a status code equal to that given
func (o *PartnerDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PartnerDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsNotFound  %+v", 404, o.Payload)
}

func (o *PartnerDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsNotFound  %+v", 404, o.Payload)
}

func (o *PartnerDetailsNotFound) GetPayload() *PartnerDetailsNotFoundBody {
	return o.Payload
}

func (o *PartnerDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerDetailsInternalServerError creates a PartnerDetailsInternalServerError with default headers values
func NewPartnerDetailsInternalServerError() *PartnerDetailsInternalServerError {
	return &PartnerDetailsInternalServerError{}
}

/*
PartnerDetailsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PartnerDetailsInternalServerError struct {
}

// IsSuccess returns true when this partner details internal server error response has a 2xx status code
func (o *PartnerDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner details internal server error response has a 3xx status code
func (o *PartnerDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner details internal server error response has a 4xx status code
func (o *PartnerDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner details internal server error response has a 5xx status code
func (o *PartnerDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this partner details internal server error response a status code equal to that given
func (o *PartnerDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PartnerDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsInternalServerError ", 500)
}

func (o *PartnerDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Partner/details][%d] partnerDetailsInternalServerError ", 500)
}

func (o *PartnerDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PartnerDetailsBadRequestBodyItems0 partner details bad request body items0
swagger:model PartnerDetailsBadRequestBodyItems0
*/
type PartnerDetailsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this partner details bad request body items0
func (o *PartnerDetailsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details bad request body items0 based on context it is used
func (o *PartnerDetailsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsForbiddenBody partner details forbidden body
swagger:model PartnerDetailsForbiddenBody
*/
type PartnerDetailsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner details forbidden body
func (o *PartnerDetailsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details forbidden body based on context it is used
func (o *PartnerDetailsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsNotFoundBody partner details not found body
swagger:model PartnerDetailsNotFoundBody
*/
type PartnerDetailsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner details not found body
func (o *PartnerDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details not found body based on context it is used
func (o *PartnerDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsOKBody partner details o k body
swagger:model PartnerDetailsOKBody
*/
type PartnerDetailsOKBody struct {

	// address
	Address string `json:"address,omitempty"`

	// allow registration
	AllowRegistration bool `json:"allowRegistration"`

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organizations
	Organizations []*PartnerDetailsOKBodyOrganizationsItems0 `json:"organizations"`

	// payment enabled
	PaymentEnabled bool `json:"paymentEnabled"`

	// phone
	Phone string `json:"phone,omitempty"`

	// required user approval
	RequiredUserApproval bool `json:"requiredUserApproval"`

	// vat number
	VatNumber string `json:"vatNumber,omitempty"`

	// white list domains
	WhiteListDomains []*PartnerDetailsOKBodyWhiteListDomainsItems0 `json:"whiteListDomains"`
}

// Validate validates this partner details o k body
func (o *PartnerDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PartnerDetailsOKBody) validateOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(o.Organizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Organizations); i++ {
		if swag.IsZero(o.Organizations[i]) { // not required
			continue
		}

		if o.Organizations[i] != nil {
			if err := o.Organizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partnerDetailsOK" + "." + "organizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partnerDetailsOK" + "." + "organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PartnerDetailsOKBody) validateWhiteListDomains(formats strfmt.Registry) error {
	if swag.IsZero(o.WhiteListDomains) { // not required
		return nil
	}

	for i := 0; i < len(o.WhiteListDomains); i++ {
		if swag.IsZero(o.WhiteListDomains[i]) { // not required
			continue
		}

		if o.WhiteListDomains[i] != nil {
			if err := o.WhiteListDomains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partnerDetailsOK" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partnerDetailsOK" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this partner details o k body based on the context it is used
func (o *PartnerDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWhiteListDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PartnerDetailsOKBody) contextValidateOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Organizations); i++ {

		if o.Organizations[i] != nil {
			if err := o.Organizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partnerDetailsOK" + "." + "organizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partnerDetailsOK" + "." + "organizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PartnerDetailsOKBody) contextValidateWhiteListDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.WhiteListDomains); i++ {

		if o.WhiteListDomains[i] != nil {
			if err := o.WhiteListDomains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partnerDetailsOK" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partnerDetailsOK" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsOKBodyOrganizationsItems0 partner details o k body organizations items0
swagger:model PartnerDetailsOKBodyOrganizationsItems0
*/
type PartnerDetailsOKBodyOrganizationsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this partner details o k body organizations items0
func (o *PartnerDetailsOKBodyOrganizationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details o k body organizations items0 based on context it is used
func (o *PartnerDetailsOKBodyOrganizationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsOKBodyOrganizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsOKBodyOrganizationsItems0) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsOKBodyOrganizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsOKBodyWhiteListDomainsItems0 partner details o k body white list domains items0
swagger:model PartnerDetailsOKBodyWhiteListDomainsItems0
*/
type PartnerDetailsOKBodyWhiteListDomainsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this partner details o k body white list domains items0
func (o *PartnerDetailsOKBodyWhiteListDomainsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details o k body white list domains items0 based on context it is used
func (o *PartnerDetailsOKBodyWhiteListDomainsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsOKBodyWhiteListDomainsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsOKBodyWhiteListDomainsItems0) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsOKBodyWhiteListDomainsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerDetailsUnauthorizedBody partner details unauthorized body
swagger:model PartnerDetailsUnauthorizedBody
*/
type PartnerDetailsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner details unauthorized body
func (o *PartnerDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner details unauthorized body based on context it is used
func (o *PartnerDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PartnerDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
