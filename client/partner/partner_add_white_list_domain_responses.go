// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartnerAddWhiteListDomainReader is a Reader for the PartnerAddWhiteListDomain structure.
type PartnerAddWhiteListDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartnerAddWhiteListDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPartnerAddWhiteListDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPartnerAddWhiteListDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPartnerAddWhiteListDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPartnerAddWhiteListDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPartnerAddWhiteListDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPartnerAddWhiteListDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPartnerAddWhiteListDomainOK creates a PartnerAddWhiteListDomainOK with default headers values
func NewPartnerAddWhiteListDomainOK() *PartnerAddWhiteListDomainOK {
	return &PartnerAddWhiteListDomainOK{}
}

/*
PartnerAddWhiteListDomainOK describes a response with status code 200, with default header values.

Success
*/
type PartnerAddWhiteListDomainOK struct {
	Payload interface{}
}

// IsSuccess returns true when this partner add white list domain o k response has a 2xx status code
func (o *PartnerAddWhiteListDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this partner add white list domain o k response has a 3xx status code
func (o *PartnerAddWhiteListDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain o k response has a 4xx status code
func (o *PartnerAddWhiteListDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner add white list domain o k response has a 5xx status code
func (o *PartnerAddWhiteListDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this partner add white list domain o k response a status code equal to that given
func (o *PartnerAddWhiteListDomainOK) IsCode(code int) bool {
	return code == 200
}

func (o *PartnerAddWhiteListDomainOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainOK  %+v", 200, o.Payload)
}

func (o *PartnerAddWhiteListDomainOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainOK  %+v", 200, o.Payload)
}

func (o *PartnerAddWhiteListDomainOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PartnerAddWhiteListDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerAddWhiteListDomainBadRequest creates a PartnerAddWhiteListDomainBadRequest with default headers values
func NewPartnerAddWhiteListDomainBadRequest() *PartnerAddWhiteListDomainBadRequest {
	return &PartnerAddWhiteListDomainBadRequest{}
}

/*
PartnerAddWhiteListDomainBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PartnerAddWhiteListDomainBadRequest struct {
	Payload []*PartnerAddWhiteListDomainBadRequestBodyItems0
}

// IsSuccess returns true when this partner add white list domain bad request response has a 2xx status code
func (o *PartnerAddWhiteListDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner add white list domain bad request response has a 3xx status code
func (o *PartnerAddWhiteListDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain bad request response has a 4xx status code
func (o *PartnerAddWhiteListDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner add white list domain bad request response has a 5xx status code
func (o *PartnerAddWhiteListDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this partner add white list domain bad request response a status code equal to that given
func (o *PartnerAddWhiteListDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PartnerAddWhiteListDomainBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerAddWhiteListDomainBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PartnerAddWhiteListDomainBadRequest) GetPayload() []*PartnerAddWhiteListDomainBadRequestBodyItems0 {
	return o.Payload
}

func (o *PartnerAddWhiteListDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerAddWhiteListDomainUnauthorized creates a PartnerAddWhiteListDomainUnauthorized with default headers values
func NewPartnerAddWhiteListDomainUnauthorized() *PartnerAddWhiteListDomainUnauthorized {
	return &PartnerAddWhiteListDomainUnauthorized{}
}

/*
PartnerAddWhiteListDomainUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PartnerAddWhiteListDomainUnauthorized struct {
	Payload *PartnerAddWhiteListDomainUnauthorizedBody
}

// IsSuccess returns true when this partner add white list domain unauthorized response has a 2xx status code
func (o *PartnerAddWhiteListDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner add white list domain unauthorized response has a 3xx status code
func (o *PartnerAddWhiteListDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain unauthorized response has a 4xx status code
func (o *PartnerAddWhiteListDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner add white list domain unauthorized response has a 5xx status code
func (o *PartnerAddWhiteListDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this partner add white list domain unauthorized response a status code equal to that given
func (o *PartnerAddWhiteListDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PartnerAddWhiteListDomainUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerAddWhiteListDomainUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PartnerAddWhiteListDomainUnauthorized) GetPayload() *PartnerAddWhiteListDomainUnauthorizedBody {
	return o.Payload
}

func (o *PartnerAddWhiteListDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerAddWhiteListDomainUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerAddWhiteListDomainForbidden creates a PartnerAddWhiteListDomainForbidden with default headers values
func NewPartnerAddWhiteListDomainForbidden() *PartnerAddWhiteListDomainForbidden {
	return &PartnerAddWhiteListDomainForbidden{}
}

/*
PartnerAddWhiteListDomainForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PartnerAddWhiteListDomainForbidden struct {
	Payload *PartnerAddWhiteListDomainForbiddenBody
}

// IsSuccess returns true when this partner add white list domain forbidden response has a 2xx status code
func (o *PartnerAddWhiteListDomainForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner add white list domain forbidden response has a 3xx status code
func (o *PartnerAddWhiteListDomainForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain forbidden response has a 4xx status code
func (o *PartnerAddWhiteListDomainForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner add white list domain forbidden response has a 5xx status code
func (o *PartnerAddWhiteListDomainForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this partner add white list domain forbidden response a status code equal to that given
func (o *PartnerAddWhiteListDomainForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PartnerAddWhiteListDomainForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainForbidden  %+v", 403, o.Payload)
}

func (o *PartnerAddWhiteListDomainForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainForbidden  %+v", 403, o.Payload)
}

func (o *PartnerAddWhiteListDomainForbidden) GetPayload() *PartnerAddWhiteListDomainForbiddenBody {
	return o.Payload
}

func (o *PartnerAddWhiteListDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerAddWhiteListDomainForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerAddWhiteListDomainNotFound creates a PartnerAddWhiteListDomainNotFound with default headers values
func NewPartnerAddWhiteListDomainNotFound() *PartnerAddWhiteListDomainNotFound {
	return &PartnerAddWhiteListDomainNotFound{}
}

/*
PartnerAddWhiteListDomainNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PartnerAddWhiteListDomainNotFound struct {
	Payload *PartnerAddWhiteListDomainNotFoundBody
}

// IsSuccess returns true when this partner add white list domain not found response has a 2xx status code
func (o *PartnerAddWhiteListDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner add white list domain not found response has a 3xx status code
func (o *PartnerAddWhiteListDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain not found response has a 4xx status code
func (o *PartnerAddWhiteListDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this partner add white list domain not found response has a 5xx status code
func (o *PartnerAddWhiteListDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this partner add white list domain not found response a status code equal to that given
func (o *PartnerAddWhiteListDomainNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PartnerAddWhiteListDomainNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainNotFound  %+v", 404, o.Payload)
}

func (o *PartnerAddWhiteListDomainNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainNotFound  %+v", 404, o.Payload)
}

func (o *PartnerAddWhiteListDomainNotFound) GetPayload() *PartnerAddWhiteListDomainNotFoundBody {
	return o.Payload
}

func (o *PartnerAddWhiteListDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PartnerAddWhiteListDomainNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartnerAddWhiteListDomainInternalServerError creates a PartnerAddWhiteListDomainInternalServerError with default headers values
func NewPartnerAddWhiteListDomainInternalServerError() *PartnerAddWhiteListDomainInternalServerError {
	return &PartnerAddWhiteListDomainInternalServerError{}
}

/*
PartnerAddWhiteListDomainInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PartnerAddWhiteListDomainInternalServerError struct {
}

// IsSuccess returns true when this partner add white list domain internal server error response has a 2xx status code
func (o *PartnerAddWhiteListDomainInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this partner add white list domain internal server error response has a 3xx status code
func (o *PartnerAddWhiteListDomainInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this partner add white list domain internal server error response has a 4xx status code
func (o *PartnerAddWhiteListDomainInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this partner add white list domain internal server error response has a 5xx status code
func (o *PartnerAddWhiteListDomainInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this partner add white list domain internal server error response a status code equal to that given
func (o *PartnerAddWhiteListDomainInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PartnerAddWhiteListDomainInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainInternalServerError ", 500)
}

func (o *PartnerAddWhiteListDomainInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Partner/add/whitelist/domain][%d] partnerAddWhiteListDomainInternalServerError ", 500)
}

func (o *PartnerAddWhiteListDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PartnerAddWhiteListDomainBadRequestBodyItems0 partner add white list domain bad request body items0
swagger:model PartnerAddWhiteListDomainBadRequestBodyItems0
*/
type PartnerAddWhiteListDomainBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this partner add white list domain bad request body items0
func (o *PartnerAddWhiteListDomainBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner add white list domain bad request body items0 based on context it is used
func (o *PartnerAddWhiteListDomainBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerAddWhiteListDomainBody partner add white list domain body
swagger:model PartnerAddWhiteListDomainBody
*/
type PartnerAddWhiteListDomainBody struct {

	// partner Id
	PartnerID int32 `json:"partnerId,omitempty"`

	// white list domains
	WhiteListDomains []*PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0 `json:"whiteListDomains"`
}

// Validate validates this partner add white list domain body
func (o *PartnerAddWhiteListDomainBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWhiteListDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PartnerAddWhiteListDomainBody) validateWhiteListDomains(formats strfmt.Registry) error {
	if swag.IsZero(o.WhiteListDomains) { // not required
		return nil
	}

	for i := 0; i < len(o.WhiteListDomains); i++ {
		if swag.IsZero(o.WhiteListDomains[i]) { // not required
			continue
		}

		if o.WhiteListDomains[i] != nil {
			if err := o.WhiteListDomains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this partner add white list domain body based on the context it is used
func (o *PartnerAddWhiteListDomainBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWhiteListDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PartnerAddWhiteListDomainBody) contextValidateWhiteListDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.WhiteListDomains); i++ {

		if o.WhiteListDomains[i] != nil {
			if err := o.WhiteListDomains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "whiteListDomains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainBody) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerAddWhiteListDomainForbiddenBody partner add white list domain forbidden body
swagger:model PartnerAddWhiteListDomainForbiddenBody
*/
type PartnerAddWhiteListDomainForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner add white list domain forbidden body
func (o *PartnerAddWhiteListDomainForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner add white list domain forbidden body based on context it is used
func (o *PartnerAddWhiteListDomainForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerAddWhiteListDomainNotFoundBody partner add white list domain not found body
swagger:model PartnerAddWhiteListDomainNotFoundBody
*/
type PartnerAddWhiteListDomainNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner add white list domain not found body
func (o *PartnerAddWhiteListDomainNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner add white list domain not found body based on context it is used
func (o *PartnerAddWhiteListDomainNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0 partner add white list domain params body white list domains items0
swagger:model PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0
*/
type PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0 struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this partner add white list domain params body white list domains items0
func (o *PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner add white list domain params body white list domains items0 based on context it is used
func (o *PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainParamsBodyWhiteListDomainsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PartnerAddWhiteListDomainUnauthorizedBody partner add white list domain unauthorized body
swagger:model PartnerAddWhiteListDomainUnauthorizedBody
*/
type PartnerAddWhiteListDomainUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this partner add white list domain unauthorized body
func (o *PartnerAddWhiteListDomainUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this partner add white list domain unauthorized body based on context it is used
func (o *PartnerAddWhiteListDomainUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PartnerAddWhiteListDomainUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PartnerAddWhiteListDomainUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
