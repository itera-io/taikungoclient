// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SubscriptionDeleteReader is a Reader for the SubscriptionDelete structure.
type SubscriptionDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSubscriptionDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscriptionDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscriptionDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionDeleteOK creates a SubscriptionDeleteOK with default headers values
func NewSubscriptionDeleteOK() *SubscriptionDeleteOK {
	return &SubscriptionDeleteOK{}
}

/*
SubscriptionDeleteOK describes a response with status code 200, with default header values.

Success
*/
type SubscriptionDeleteOK struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription delete o k response has a 2xx status code
func (o *SubscriptionDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription delete o k response has a 3xx status code
func (o *SubscriptionDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete o k response has a 4xx status code
func (o *SubscriptionDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription delete o k response has a 5xx status code
func (o *SubscriptionDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete o k response a status code equal to that given
func (o *SubscriptionDeleteOK) IsCode(code int) bool {
	return code == 200
}

func (o *SubscriptionDeleteOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteOK  %+v", 200, o.Payload)
}

func (o *SubscriptionDeleteOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteOK  %+v", 200, o.Payload)
}

func (o *SubscriptionDeleteOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionDeleteNoContent creates a SubscriptionDeleteNoContent with default headers values
func NewSubscriptionDeleteNoContent() *SubscriptionDeleteNoContent {
	return &SubscriptionDeleteNoContent{}
}

/*
SubscriptionDeleteNoContent describes a response with status code 204, with default header values.

Success
*/
type SubscriptionDeleteNoContent struct {
}

// IsSuccess returns true when this subscription delete no content response has a 2xx status code
func (o *SubscriptionDeleteNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription delete no content response has a 3xx status code
func (o *SubscriptionDeleteNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete no content response has a 4xx status code
func (o *SubscriptionDeleteNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription delete no content response has a 5xx status code
func (o *SubscriptionDeleteNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete no content response a status code equal to that given
func (o *SubscriptionDeleteNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *SubscriptionDeleteNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteNoContent ", 204)
}

func (o *SubscriptionDeleteNoContent) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteNoContent ", 204)
}

func (o *SubscriptionDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSubscriptionDeleteBadRequest creates a SubscriptionDeleteBadRequest with default headers values
func NewSubscriptionDeleteBadRequest() *SubscriptionDeleteBadRequest {
	return &SubscriptionDeleteBadRequest{}
}

/*
SubscriptionDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SubscriptionDeleteBadRequest struct {
	Payload []*SubscriptionDeleteBadRequestBodyItems0
}

// IsSuccess returns true when this subscription delete bad request response has a 2xx status code
func (o *SubscriptionDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription delete bad request response has a 3xx status code
func (o *SubscriptionDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete bad request response has a 4xx status code
func (o *SubscriptionDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription delete bad request response has a 5xx status code
func (o *SubscriptionDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete bad request response a status code equal to that given
func (o *SubscriptionDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubscriptionDeleteBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionDeleteBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionDeleteBadRequest) GetPayload() []*SubscriptionDeleteBadRequestBodyItems0 {
	return o.Payload
}

func (o *SubscriptionDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionDeleteUnauthorized creates a SubscriptionDeleteUnauthorized with default headers values
func NewSubscriptionDeleteUnauthorized() *SubscriptionDeleteUnauthorized {
	return &SubscriptionDeleteUnauthorized{}
}

/*
SubscriptionDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionDeleteUnauthorized struct {
	Payload *SubscriptionDeleteUnauthorizedBody
}

// IsSuccess returns true when this subscription delete unauthorized response has a 2xx status code
func (o *SubscriptionDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription delete unauthorized response has a 3xx status code
func (o *SubscriptionDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete unauthorized response has a 4xx status code
func (o *SubscriptionDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription delete unauthorized response has a 5xx status code
func (o *SubscriptionDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete unauthorized response a status code equal to that given
func (o *SubscriptionDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SubscriptionDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionDeleteUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionDeleteUnauthorized) GetPayload() *SubscriptionDeleteUnauthorizedBody {
	return o.Payload
}

func (o *SubscriptionDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionDeleteUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionDeleteForbidden creates a SubscriptionDeleteForbidden with default headers values
func NewSubscriptionDeleteForbidden() *SubscriptionDeleteForbidden {
	return &SubscriptionDeleteForbidden{}
}

/*
SubscriptionDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscriptionDeleteForbidden struct {
	Payload *SubscriptionDeleteForbiddenBody
}

// IsSuccess returns true when this subscription delete forbidden response has a 2xx status code
func (o *SubscriptionDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription delete forbidden response has a 3xx status code
func (o *SubscriptionDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete forbidden response has a 4xx status code
func (o *SubscriptionDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription delete forbidden response has a 5xx status code
func (o *SubscriptionDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete forbidden response a status code equal to that given
func (o *SubscriptionDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubscriptionDeleteForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionDeleteForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionDeleteForbidden) GetPayload() *SubscriptionDeleteForbiddenBody {
	return o.Payload
}

func (o *SubscriptionDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionDeleteForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionDeleteNotFound creates a SubscriptionDeleteNotFound with default headers values
func NewSubscriptionDeleteNotFound() *SubscriptionDeleteNotFound {
	return &SubscriptionDeleteNotFound{}
}

/*
SubscriptionDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SubscriptionDeleteNotFound struct {
	Payload *SubscriptionDeleteNotFoundBody
}

// IsSuccess returns true when this subscription delete not found response has a 2xx status code
func (o *SubscriptionDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription delete not found response has a 3xx status code
func (o *SubscriptionDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete not found response has a 4xx status code
func (o *SubscriptionDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription delete not found response has a 5xx status code
func (o *SubscriptionDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription delete not found response a status code equal to that given
func (o *SubscriptionDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubscriptionDeleteNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionDeleteNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionDeleteNotFound) GetPayload() *SubscriptionDeleteNotFoundBody {
	return o.Payload
}

func (o *SubscriptionDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionDeleteNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionDeleteInternalServerError creates a SubscriptionDeleteInternalServerError with default headers values
func NewSubscriptionDeleteInternalServerError() *SubscriptionDeleteInternalServerError {
	return &SubscriptionDeleteInternalServerError{}
}

/*
SubscriptionDeleteInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SubscriptionDeleteInternalServerError struct {
}

// IsSuccess returns true when this subscription delete internal server error response has a 2xx status code
func (o *SubscriptionDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription delete internal server error response has a 3xx status code
func (o *SubscriptionDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription delete internal server error response has a 4xx status code
func (o *SubscriptionDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription delete internal server error response has a 5xx status code
func (o *SubscriptionDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this subscription delete internal server error response a status code equal to that given
func (o *SubscriptionDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubscriptionDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteInternalServerError ", 500)
}

func (o *SubscriptionDeleteInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/delete][%d] subscriptionDeleteInternalServerError ", 500)
}

func (o *SubscriptionDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SubscriptionDeleteBadRequestBodyItems0 subscription delete bad request body items0
swagger:model SubscriptionDeleteBadRequestBodyItems0
*/
type SubscriptionDeleteBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this subscription delete bad request body items0
func (o *SubscriptionDeleteBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription delete bad request body items0 based on context it is used
func (o *SubscriptionDeleteBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionDeleteBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionDeleteBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeleteBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionDeleteBody subscription delete body
swagger:model SubscriptionDeleteBody
*/
type SubscriptionDeleteBody struct {

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this subscription delete body
func (o *SubscriptionDeleteBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription delete body based on context it is used
func (o *SubscriptionDeleteBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionDeleteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionDeleteBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeleteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionDeleteForbiddenBody subscription delete forbidden body
swagger:model SubscriptionDeleteForbiddenBody
*/
type SubscriptionDeleteForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription delete forbidden body
func (o *SubscriptionDeleteForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription delete forbidden body based on context it is used
func (o *SubscriptionDeleteForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionDeleteForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionDeleteForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeleteForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionDeleteNotFoundBody subscription delete not found body
swagger:model SubscriptionDeleteNotFoundBody
*/
type SubscriptionDeleteNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription delete not found body
func (o *SubscriptionDeleteNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription delete not found body based on context it is used
func (o *SubscriptionDeleteNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionDeleteNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionDeleteNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeleteNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionDeleteUnauthorizedBody subscription delete unauthorized body
swagger:model SubscriptionDeleteUnauthorizedBody
*/
type SubscriptionDeleteUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription delete unauthorized body
func (o *SubscriptionDeleteUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription delete unauthorized body based on context it is used
func (o *SubscriptionDeleteUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionDeleteUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionDeleteUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeleteUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
