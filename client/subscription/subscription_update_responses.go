// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SubscriptionUpdateReader is a Reader for the SubscriptionUpdate structure.
type SubscriptionUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscriptionUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscriptionUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionUpdateOK creates a SubscriptionUpdateOK with default headers values
func NewSubscriptionUpdateOK() *SubscriptionUpdateOK {
	return &SubscriptionUpdateOK{}
}

/*
SubscriptionUpdateOK describes a response with status code 200, with default header values.

Success
*/
type SubscriptionUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription update o k response has a 2xx status code
func (o *SubscriptionUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription update o k response has a 3xx status code
func (o *SubscriptionUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update o k response has a 4xx status code
func (o *SubscriptionUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription update o k response has a 5xx status code
func (o *SubscriptionUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription update o k response a status code equal to that given
func (o *SubscriptionUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *SubscriptionUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateOK  %+v", 200, o.Payload)
}

func (o *SubscriptionUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateOK  %+v", 200, o.Payload)
}

func (o *SubscriptionUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateBadRequest creates a SubscriptionUpdateBadRequest with default headers values
func NewSubscriptionUpdateBadRequest() *SubscriptionUpdateBadRequest {
	return &SubscriptionUpdateBadRequest{}
}

/*
SubscriptionUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SubscriptionUpdateBadRequest struct {
	Payload []*SubscriptionUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this subscription update bad request response has a 2xx status code
func (o *SubscriptionUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription update bad request response has a 3xx status code
func (o *SubscriptionUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update bad request response has a 4xx status code
func (o *SubscriptionUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription update bad request response has a 5xx status code
func (o *SubscriptionUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription update bad request response a status code equal to that given
func (o *SubscriptionUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubscriptionUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionUpdateBadRequest) GetPayload() []*SubscriptionUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *SubscriptionUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateUnauthorized creates a SubscriptionUpdateUnauthorized with default headers values
func NewSubscriptionUpdateUnauthorized() *SubscriptionUpdateUnauthorized {
	return &SubscriptionUpdateUnauthorized{}
}

/*
SubscriptionUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionUpdateUnauthorized struct {
	Payload *SubscriptionUpdateUnauthorizedBody
}

// IsSuccess returns true when this subscription update unauthorized response has a 2xx status code
func (o *SubscriptionUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription update unauthorized response has a 3xx status code
func (o *SubscriptionUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update unauthorized response has a 4xx status code
func (o *SubscriptionUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription update unauthorized response has a 5xx status code
func (o *SubscriptionUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription update unauthorized response a status code equal to that given
func (o *SubscriptionUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SubscriptionUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionUpdateUnauthorized) GetPayload() *SubscriptionUpdateUnauthorizedBody {
	return o.Payload
}

func (o *SubscriptionUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateForbidden creates a SubscriptionUpdateForbidden with default headers values
func NewSubscriptionUpdateForbidden() *SubscriptionUpdateForbidden {
	return &SubscriptionUpdateForbidden{}
}

/*
SubscriptionUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscriptionUpdateForbidden struct {
	Payload *SubscriptionUpdateForbiddenBody
}

// IsSuccess returns true when this subscription update forbidden response has a 2xx status code
func (o *SubscriptionUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription update forbidden response has a 3xx status code
func (o *SubscriptionUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update forbidden response has a 4xx status code
func (o *SubscriptionUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription update forbidden response has a 5xx status code
func (o *SubscriptionUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription update forbidden response a status code equal to that given
func (o *SubscriptionUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubscriptionUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionUpdateForbidden) GetPayload() *SubscriptionUpdateForbiddenBody {
	return o.Payload
}

func (o *SubscriptionUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateNotFound creates a SubscriptionUpdateNotFound with default headers values
func NewSubscriptionUpdateNotFound() *SubscriptionUpdateNotFound {
	return &SubscriptionUpdateNotFound{}
}

/*
SubscriptionUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SubscriptionUpdateNotFound struct {
	Payload *SubscriptionUpdateNotFoundBody
}

// IsSuccess returns true when this subscription update not found response has a 2xx status code
func (o *SubscriptionUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription update not found response has a 3xx status code
func (o *SubscriptionUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update not found response has a 4xx status code
func (o *SubscriptionUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription update not found response has a 5xx status code
func (o *SubscriptionUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription update not found response a status code equal to that given
func (o *SubscriptionUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubscriptionUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionUpdateNotFound) GetPayload() *SubscriptionUpdateNotFoundBody {
	return o.Payload
}

func (o *SubscriptionUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateInternalServerError creates a SubscriptionUpdateInternalServerError with default headers values
func NewSubscriptionUpdateInternalServerError() *SubscriptionUpdateInternalServerError {
	return &SubscriptionUpdateInternalServerError{}
}

/*
SubscriptionUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SubscriptionUpdateInternalServerError struct {
}

// IsSuccess returns true when this subscription update internal server error response has a 2xx status code
func (o *SubscriptionUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription update internal server error response has a 3xx status code
func (o *SubscriptionUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription update internal server error response has a 4xx status code
func (o *SubscriptionUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription update internal server error response has a 5xx status code
func (o *SubscriptionUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this subscription update internal server error response a status code equal to that given
func (o *SubscriptionUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubscriptionUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateInternalServerError ", 500)
}

func (o *SubscriptionUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateInternalServerError ", 500)
}

func (o *SubscriptionUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SubscriptionUpdateBadRequestBodyItems0 subscription update bad request body items0
swagger:model SubscriptionUpdateBadRequestBodyItems0
*/
type SubscriptionUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this subscription update bad request body items0
func (o *SubscriptionUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription update bad request body items0 based on context it is used
func (o *SubscriptionUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionUpdateBody subscription update body
swagger:model SubscriptionUpdateBody
*/
type SubscriptionUpdateBody struct {

	// cloud credential limit
	CloudCredentialLimit int32 `json:"cloudCredentialLimit,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// monthly price
	MonthlyPrice float64 `json:"monthlyPrice,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project limit
	ProjectLimit int32 `json:"projectLimit,omitempty"`

	// server limit
	ServerLimit int32 `json:"serverLimit,omitempty"`

	// tcu price
	TcuPrice float64 `json:"tcuPrice,omitempty"`

	// trial days
	TrialDays int32 `json:"trialDays,omitempty"`

	// user limit
	UserLimit int32 `json:"userLimit,omitempty"`

	// yearly price
	YearlyPrice float64 `json:"yearlyPrice,omitempty"`
}

// Validate validates this subscription update body
func (o *SubscriptionUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription update body based on context it is used
func (o *SubscriptionUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionUpdateBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionUpdateForbiddenBody subscription update forbidden body
swagger:model SubscriptionUpdateForbiddenBody
*/
type SubscriptionUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription update forbidden body
func (o *SubscriptionUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription update forbidden body based on context it is used
func (o *SubscriptionUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionUpdateNotFoundBody subscription update not found body
swagger:model SubscriptionUpdateNotFoundBody
*/
type SubscriptionUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription update not found body
func (o *SubscriptionUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription update not found body based on context it is used
func (o *SubscriptionUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionUpdateUnauthorizedBody subscription update unauthorized body
swagger:model SubscriptionUpdateUnauthorizedBody
*/
type SubscriptionUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription update unauthorized body
func (o *SubscriptionUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription update unauthorized body based on context it is used
func (o *SubscriptionUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
