// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SubscriptionUpdateReader is a Reader for the SubscriptionUpdate structure.
type SubscriptionUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscriptionUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscriptionUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubscriptionUpdateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionUpdateOK creates a SubscriptionUpdateOK with default headers values
func NewSubscriptionUpdateOK() *SubscriptionUpdateOK {
	return &SubscriptionUpdateOK{}
}

/* SubscriptionUpdateOK describes a response with status code 200, with default header values.

Success
*/
type SubscriptionUpdateOK struct {
	Payload models.Unit
}

func (o *SubscriptionUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateOK  %+v", 200, o.Payload)
}
func (o *SubscriptionUpdateOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *SubscriptionUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateBadRequest creates a SubscriptionUpdateBadRequest with default headers values
func NewSubscriptionUpdateBadRequest() *SubscriptionUpdateBadRequest {
	return &SubscriptionUpdateBadRequest{}
}

/* SubscriptionUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SubscriptionUpdateBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *SubscriptionUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateBadRequest  %+v", 400, o.Payload)
}
func (o *SubscriptionUpdateBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *SubscriptionUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateUnauthorized creates a SubscriptionUpdateUnauthorized with default headers values
func NewSubscriptionUpdateUnauthorized() *SubscriptionUpdateUnauthorized {
	return &SubscriptionUpdateUnauthorized{}
}

/* SubscriptionUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionUpdateUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *SubscriptionUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateUnauthorized  %+v", 401, o.Payload)
}
func (o *SubscriptionUpdateUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SubscriptionUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateForbidden creates a SubscriptionUpdateForbidden with default headers values
func NewSubscriptionUpdateForbidden() *SubscriptionUpdateForbidden {
	return &SubscriptionUpdateForbidden{}
}

/* SubscriptionUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscriptionUpdateForbidden struct {
	Payload *models.ProblemDetails
}

func (o *SubscriptionUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateForbidden  %+v", 403, o.Payload)
}
func (o *SubscriptionUpdateForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SubscriptionUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateNotFound creates a SubscriptionUpdateNotFound with default headers values
func NewSubscriptionUpdateNotFound() *SubscriptionUpdateNotFound {
	return &SubscriptionUpdateNotFound{}
}

/* SubscriptionUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SubscriptionUpdateNotFound struct {
	Payload *models.ProblemDetails
}

func (o *SubscriptionUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateNotFound  %+v", 404, o.Payload)
}
func (o *SubscriptionUpdateNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SubscriptionUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateTooManyRequests creates a SubscriptionUpdateTooManyRequests with default headers values
func NewSubscriptionUpdateTooManyRequests() *SubscriptionUpdateTooManyRequests {
	return &SubscriptionUpdateTooManyRequests{}
}

/* SubscriptionUpdateTooManyRequests describes a response with status code 429, with default header values.

Client Error
*/
type SubscriptionUpdateTooManyRequests struct {
	Payload *models.ProblemDetails
}

func (o *SubscriptionUpdateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateTooManyRequests  %+v", 429, o.Payload)
}
func (o *SubscriptionUpdateTooManyRequests) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SubscriptionUpdateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionUpdateInternalServerError creates a SubscriptionUpdateInternalServerError with default headers values
func NewSubscriptionUpdateInternalServerError() *SubscriptionUpdateInternalServerError {
	return &SubscriptionUpdateInternalServerError{}
}

/* SubscriptionUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SubscriptionUpdateInternalServerError struct {
}

func (o *SubscriptionUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/update][%d] subscriptionUpdateInternalServerError ", 500)
}

func (o *SubscriptionUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
