// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SubscriptionBindReader is a Reader for the SubscriptionBind structure.
type SubscriptionBindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionBindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionBindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscriptionBindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscriptionBindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionBindForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionBindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionBindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionBindOK creates a SubscriptionBindOK with default headers values
func NewSubscriptionBindOK() *SubscriptionBindOK {
	return &SubscriptionBindOK{}
}

/*
SubscriptionBindOK describes a response with status code 200, with default header values.

Success
*/
type SubscriptionBindOK struct {
	Payload *models.BindSubscriptionResponseDto
}

// IsSuccess returns true when this subscription bind o k response has a 2xx status code
func (o *SubscriptionBindOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription bind o k response has a 3xx status code
func (o *SubscriptionBindOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind o k response has a 4xx status code
func (o *SubscriptionBindOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription bind o k response has a 5xx status code
func (o *SubscriptionBindOK) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription bind o k response a status code equal to that given
func (o *SubscriptionBindOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the subscription bind o k response
func (o *SubscriptionBindOK) Code() int {
	return 200
}

func (o *SubscriptionBindOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindOK  %+v", 200, o.Payload)
}

func (o *SubscriptionBindOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindOK  %+v", 200, o.Payload)
}

func (o *SubscriptionBindOK) GetPayload() *models.BindSubscriptionResponseDto {
	return o.Payload
}

func (o *SubscriptionBindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BindSubscriptionResponseDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionBindBadRequest creates a SubscriptionBindBadRequest with default headers values
func NewSubscriptionBindBadRequest() *SubscriptionBindBadRequest {
	return &SubscriptionBindBadRequest{}
}

/*
SubscriptionBindBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SubscriptionBindBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription bind bad request response has a 2xx status code
func (o *SubscriptionBindBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription bind bad request response has a 3xx status code
func (o *SubscriptionBindBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind bad request response has a 4xx status code
func (o *SubscriptionBindBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription bind bad request response has a 5xx status code
func (o *SubscriptionBindBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription bind bad request response a status code equal to that given
func (o *SubscriptionBindBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the subscription bind bad request response
func (o *SubscriptionBindBadRequest) Code() int {
	return 400
}

func (o *SubscriptionBindBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionBindBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionBindBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionBindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionBindUnauthorized creates a SubscriptionBindUnauthorized with default headers values
func NewSubscriptionBindUnauthorized() *SubscriptionBindUnauthorized {
	return &SubscriptionBindUnauthorized{}
}

/*
SubscriptionBindUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionBindUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription bind unauthorized response has a 2xx status code
func (o *SubscriptionBindUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription bind unauthorized response has a 3xx status code
func (o *SubscriptionBindUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind unauthorized response has a 4xx status code
func (o *SubscriptionBindUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription bind unauthorized response has a 5xx status code
func (o *SubscriptionBindUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription bind unauthorized response a status code equal to that given
func (o *SubscriptionBindUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the subscription bind unauthorized response
func (o *SubscriptionBindUnauthorized) Code() int {
	return 401
}

func (o *SubscriptionBindUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionBindUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionBindUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionBindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionBindForbidden creates a SubscriptionBindForbidden with default headers values
func NewSubscriptionBindForbidden() *SubscriptionBindForbidden {
	return &SubscriptionBindForbidden{}
}

/*
SubscriptionBindForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscriptionBindForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription bind forbidden response has a 2xx status code
func (o *SubscriptionBindForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription bind forbidden response has a 3xx status code
func (o *SubscriptionBindForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind forbidden response has a 4xx status code
func (o *SubscriptionBindForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription bind forbidden response has a 5xx status code
func (o *SubscriptionBindForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription bind forbidden response a status code equal to that given
func (o *SubscriptionBindForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the subscription bind forbidden response
func (o *SubscriptionBindForbidden) Code() int {
	return 403
}

func (o *SubscriptionBindForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionBindForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionBindForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionBindForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionBindNotFound creates a SubscriptionBindNotFound with default headers values
func NewSubscriptionBindNotFound() *SubscriptionBindNotFound {
	return &SubscriptionBindNotFound{}
}

/*
SubscriptionBindNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SubscriptionBindNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this subscription bind not found response has a 2xx status code
func (o *SubscriptionBindNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription bind not found response has a 3xx status code
func (o *SubscriptionBindNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind not found response has a 4xx status code
func (o *SubscriptionBindNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription bind not found response has a 5xx status code
func (o *SubscriptionBindNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription bind not found response a status code equal to that given
func (o *SubscriptionBindNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the subscription bind not found response
func (o *SubscriptionBindNotFound) Code() int {
	return 404
}

func (o *SubscriptionBindNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionBindNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionBindNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *SubscriptionBindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionBindInternalServerError creates a SubscriptionBindInternalServerError with default headers values
func NewSubscriptionBindInternalServerError() *SubscriptionBindInternalServerError {
	return &SubscriptionBindInternalServerError{}
}

/*
SubscriptionBindInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SubscriptionBindInternalServerError struct {
}

// IsSuccess returns true when this subscription bind internal server error response has a 2xx status code
func (o *SubscriptionBindInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription bind internal server error response has a 3xx status code
func (o *SubscriptionBindInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription bind internal server error response has a 4xx status code
func (o *SubscriptionBindInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription bind internal server error response has a 5xx status code
func (o *SubscriptionBindInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this subscription bind internal server error response a status code equal to that given
func (o *SubscriptionBindInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the subscription bind internal server error response
func (o *SubscriptionBindInternalServerError) Code() int {
	return 500
}

func (o *SubscriptionBindInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindInternalServerError ", 500)
}

func (o *SubscriptionBindInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Subscription/bind][%d] subscriptionBindInternalServerError ", 500)
}

func (o *SubscriptionBindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
