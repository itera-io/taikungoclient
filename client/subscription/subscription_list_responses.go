// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SubscriptionListReader is a Reader for the SubscriptionList structure.
type SubscriptionListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscriptionListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscriptionListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscriptionListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscriptionListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscriptionListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscriptionListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscriptionListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscriptionListOK creates a SubscriptionListOK with default headers values
func NewSubscriptionListOK() *SubscriptionListOK {
	return &SubscriptionListOK{}
}

/*
SubscriptionListOK describes a response with status code 200, with default header values.

Success
*/
type SubscriptionListOK struct {
	Payload *SubscriptionListOKBody
}

// IsSuccess returns true when this subscription list o k response has a 2xx status code
func (o *SubscriptionListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this subscription list o k response has a 3xx status code
func (o *SubscriptionListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list o k response has a 4xx status code
func (o *SubscriptionListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription list o k response has a 5xx status code
func (o *SubscriptionListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription list o k response a status code equal to that given
func (o *SubscriptionListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SubscriptionListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListOK  %+v", 200, o.Payload)
}

func (o *SubscriptionListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListOK  %+v", 200, o.Payload)
}

func (o *SubscriptionListOK) GetPayload() *SubscriptionListOKBody {
	return o.Payload
}

func (o *SubscriptionListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionListBadRequest creates a SubscriptionListBadRequest with default headers values
func NewSubscriptionListBadRequest() *SubscriptionListBadRequest {
	return &SubscriptionListBadRequest{}
}

/*
SubscriptionListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SubscriptionListBadRequest struct {
	Payload []*SubscriptionListBadRequestBodyItems0
}

// IsSuccess returns true when this subscription list bad request response has a 2xx status code
func (o *SubscriptionListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription list bad request response has a 3xx status code
func (o *SubscriptionListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list bad request response has a 4xx status code
func (o *SubscriptionListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription list bad request response has a 5xx status code
func (o *SubscriptionListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription list bad request response a status code equal to that given
func (o *SubscriptionListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubscriptionListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListBadRequest  %+v", 400, o.Payload)
}

func (o *SubscriptionListBadRequest) GetPayload() []*SubscriptionListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SubscriptionListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionListUnauthorized creates a SubscriptionListUnauthorized with default headers values
func NewSubscriptionListUnauthorized() *SubscriptionListUnauthorized {
	return &SubscriptionListUnauthorized{}
}

/*
SubscriptionListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscriptionListUnauthorized struct {
	Payload *SubscriptionListUnauthorizedBody
}

// IsSuccess returns true when this subscription list unauthorized response has a 2xx status code
func (o *SubscriptionListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription list unauthorized response has a 3xx status code
func (o *SubscriptionListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list unauthorized response has a 4xx status code
func (o *SubscriptionListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription list unauthorized response has a 5xx status code
func (o *SubscriptionListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription list unauthorized response a status code equal to that given
func (o *SubscriptionListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SubscriptionListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListUnauthorized  %+v", 401, o.Payload)
}

func (o *SubscriptionListUnauthorized) GetPayload() *SubscriptionListUnauthorizedBody {
	return o.Payload
}

func (o *SubscriptionListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionListForbidden creates a SubscriptionListForbidden with default headers values
func NewSubscriptionListForbidden() *SubscriptionListForbidden {
	return &SubscriptionListForbidden{}
}

/*
SubscriptionListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscriptionListForbidden struct {
	Payload *SubscriptionListForbiddenBody
}

// IsSuccess returns true when this subscription list forbidden response has a 2xx status code
func (o *SubscriptionListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription list forbidden response has a 3xx status code
func (o *SubscriptionListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list forbidden response has a 4xx status code
func (o *SubscriptionListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription list forbidden response has a 5xx status code
func (o *SubscriptionListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription list forbidden response a status code equal to that given
func (o *SubscriptionListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubscriptionListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListForbidden  %+v", 403, o.Payload)
}

func (o *SubscriptionListForbidden) GetPayload() *SubscriptionListForbiddenBody {
	return o.Payload
}

func (o *SubscriptionListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionListNotFound creates a SubscriptionListNotFound with default headers values
func NewSubscriptionListNotFound() *SubscriptionListNotFound {
	return &SubscriptionListNotFound{}
}

/*
SubscriptionListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SubscriptionListNotFound struct {
	Payload *SubscriptionListNotFoundBody
}

// IsSuccess returns true when this subscription list not found response has a 2xx status code
func (o *SubscriptionListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription list not found response has a 3xx status code
func (o *SubscriptionListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list not found response has a 4xx status code
func (o *SubscriptionListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this subscription list not found response has a 5xx status code
func (o *SubscriptionListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this subscription list not found response a status code equal to that given
func (o *SubscriptionListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubscriptionListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListNotFound  %+v", 404, o.Payload)
}

func (o *SubscriptionListNotFound) GetPayload() *SubscriptionListNotFoundBody {
	return o.Payload
}

func (o *SubscriptionListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SubscriptionListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscriptionListInternalServerError creates a SubscriptionListInternalServerError with default headers values
func NewSubscriptionListInternalServerError() *SubscriptionListInternalServerError {
	return &SubscriptionListInternalServerError{}
}

/*
SubscriptionListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SubscriptionListInternalServerError struct {
}

// IsSuccess returns true when this subscription list internal server error response has a 2xx status code
func (o *SubscriptionListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this subscription list internal server error response has a 3xx status code
func (o *SubscriptionListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this subscription list internal server error response has a 4xx status code
func (o *SubscriptionListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this subscription list internal server error response has a 5xx status code
func (o *SubscriptionListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this subscription list internal server error response a status code equal to that given
func (o *SubscriptionListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubscriptionListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListInternalServerError ", 500)
}

func (o *SubscriptionListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Subscription][%d] subscriptionListInternalServerError ", 500)
}

func (o *SubscriptionListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SubscriptionListBadRequestBodyItems0 subscription list bad request body items0
swagger:model SubscriptionListBadRequestBodyItems0
*/
type SubscriptionListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this subscription list bad request body items0
func (o *SubscriptionListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription list bad request body items0 based on context it is used
func (o *SubscriptionListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SubscriptionListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListForbiddenBody subscription list forbidden body
swagger:model SubscriptionListForbiddenBody
*/
type SubscriptionListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription list forbidden body
func (o *SubscriptionListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription list forbidden body based on context it is used
func (o *SubscriptionListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListNotFoundBody subscription list not found body
swagger:model SubscriptionListNotFoundBody
*/
type SubscriptionListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription list not found body
func (o *SubscriptionListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription list not found body based on context it is used
func (o *SubscriptionListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListOKBody subscription list o k body
swagger:model SubscriptionListOKBody
*/
type SubscriptionListOKBody struct {

	// active subscription status
	ActiveSubscriptionStatus string `json:"activeSubscriptionStatus,omitempty"`

	// data
	Data []*SubscriptionListOKBodyDataItems0 `json:"data"`

	// is eligible to switch
	IsEligibleToSwitch bool `json:"isEligibleToSwitch"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this subscription list o k body
func (o *SubscriptionListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubscriptionListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptionListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptionListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this subscription list o k body based on the context it is used
func (o *SubscriptionListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubscriptionListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptionListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptionListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListOKBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListOKBodyDataItems0 subscription list o k body data items0
swagger:model SubscriptionListOKBodyDataItems0
*/
type SubscriptionListOKBodyDataItems0 struct {

	// cloud credential limit
	CloudCredentialLimit int32 `json:"cloudCredentialLimit,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exceeded cloud credential
	ExceededCloudCredential bool `json:"exceededCloudCredential"`

	// exceeded project
	ExceededProject bool `json:"exceededProject"`

	// exceeded servers
	ExceededServers bool `json:"exceededServers"`

	// exceeded user
	ExceededUser bool `json:"exceededUser"`

	// id
	ID int32 `json:"id,omitempty"`

	// is active
	IsActive bool `json:"isActive"`

	// is demo
	IsDemo bool `json:"isDemo"`

	// is deprecated
	IsDeprecated bool `json:"isDeprecated"`

	// is yearly
	IsYearly bool `json:"isYearly"`

	// monthly price
	MonthlyPrice float64 `json:"monthlyPrice,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// partner
	Partner *SubscriptionListOKBodyDataItems0Partner `json:"partner,omitempty"`

	// project limit
	ProjectLimit int32 `json:"projectLimit,omitempty"`

	// server limit
	ServerLimit int32 `json:"serverLimit,omitempty"`

	// tcu price
	TcuPrice float64 `json:"tcuPrice,omitempty"`

	// trial days
	TrialDays int32 `json:"trialDays,omitempty"`

	// user limit
	UserLimit int32 `json:"userLimit,omitempty"`

	// yearly price
	YearlyPrice float64 `json:"yearlyPrice,omitempty"`
}

// Validate validates this subscription list o k body data items0
func (o *SubscriptionListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubscriptionListOKBodyDataItems0) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription list o k body data items0 based on the context it is used
func (o *SubscriptionListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubscriptionListOKBodyDataItems0) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if o.Partner != nil {
		if err := o.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SubscriptionListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListOKBodyDataItems0Partner subscription list o k body data items0 partner
swagger:model SubscriptionListOKBodyDataItems0Partner
*/
type SubscriptionListOKBodyDataItems0Partner struct {

	// id
	ID int32 `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this subscription list o k body data items0 partner
func (o *SubscriptionListOKBodyDataItems0Partner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription list o k body data items0 partner based on context it is used
func (o *SubscriptionListOKBodyDataItems0Partner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListOKBodyDataItems0Partner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListOKBodyDataItems0Partner) UnmarshalBinary(b []byte) error {
	var res SubscriptionListOKBodyDataItems0Partner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SubscriptionListUnauthorizedBody subscription list unauthorized body
swagger:model SubscriptionListUnauthorizedBody
*/
type SubscriptionListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this subscription list unauthorized body
func (o *SubscriptionListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subscription list unauthorized body based on context it is used
func (o *SubscriptionListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubscriptionListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubscriptionListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SubscriptionListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
