// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SlackDeleteMultipleReader is a Reader for the SlackDeleteMultiple structure.
type SlackDeleteMultipleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackDeleteMultipleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackDeleteMultipleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackDeleteMultipleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackDeleteMultipleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackDeleteMultipleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackDeleteMultipleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackDeleteMultipleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackDeleteMultipleOK creates a SlackDeleteMultipleOK with default headers values
func NewSlackDeleteMultipleOK() *SlackDeleteMultipleOK {
	return &SlackDeleteMultipleOK{}
}

/* SlackDeleteMultipleOK describes a response with status code 200, with default header values.

Success
*/
type SlackDeleteMultipleOK struct {
	Payload models.Unit
}

func (o *SlackDeleteMultipleOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleOK  %+v", 200, o.Payload)
}
func (o *SlackDeleteMultipleOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *SlackDeleteMultipleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackDeleteMultipleBadRequest creates a SlackDeleteMultipleBadRequest with default headers values
func NewSlackDeleteMultipleBadRequest() *SlackDeleteMultipleBadRequest {
	return &SlackDeleteMultipleBadRequest{}
}

/* SlackDeleteMultipleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackDeleteMultipleBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *SlackDeleteMultipleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleBadRequest  %+v", 400, o.Payload)
}
func (o *SlackDeleteMultipleBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *SlackDeleteMultipleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackDeleteMultipleUnauthorized creates a SlackDeleteMultipleUnauthorized with default headers values
func NewSlackDeleteMultipleUnauthorized() *SlackDeleteMultipleUnauthorized {
	return &SlackDeleteMultipleUnauthorized{}
}

/* SlackDeleteMultipleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackDeleteMultipleUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *SlackDeleteMultipleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleUnauthorized  %+v", 401, o.Payload)
}
func (o *SlackDeleteMultipleUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackDeleteMultipleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackDeleteMultipleForbidden creates a SlackDeleteMultipleForbidden with default headers values
func NewSlackDeleteMultipleForbidden() *SlackDeleteMultipleForbidden {
	return &SlackDeleteMultipleForbidden{}
}

/* SlackDeleteMultipleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackDeleteMultipleForbidden struct {
	Payload *models.ProblemDetails
}

func (o *SlackDeleteMultipleForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleForbidden  %+v", 403, o.Payload)
}
func (o *SlackDeleteMultipleForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackDeleteMultipleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackDeleteMultipleNotFound creates a SlackDeleteMultipleNotFound with default headers values
func NewSlackDeleteMultipleNotFound() *SlackDeleteMultipleNotFound {
	return &SlackDeleteMultipleNotFound{}
}

/* SlackDeleteMultipleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackDeleteMultipleNotFound struct {
	Payload *models.ProblemDetails
}

func (o *SlackDeleteMultipleNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleNotFound  %+v", 404, o.Payload)
}
func (o *SlackDeleteMultipleNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackDeleteMultipleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackDeleteMultipleInternalServerError creates a SlackDeleteMultipleInternalServerError with default headers values
func NewSlackDeleteMultipleInternalServerError() *SlackDeleteMultipleInternalServerError {
	return &SlackDeleteMultipleInternalServerError{}
}

/* SlackDeleteMultipleInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackDeleteMultipleInternalServerError struct {
}

func (o *SlackDeleteMultipleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack/delete-multiple][%d] slackDeleteMultipleInternalServerError ", 500)
}

func (o *SlackDeleteMultipleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
