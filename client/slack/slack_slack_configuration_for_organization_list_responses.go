// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SlackSlackConfigurationForOrganizationListReader is a Reader for the SlackSlackConfigurationForOrganizationList structure.
type SlackSlackConfigurationForOrganizationListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackSlackConfigurationForOrganizationListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackSlackConfigurationForOrganizationListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackSlackConfigurationForOrganizationListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackSlackConfigurationForOrganizationListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackSlackConfigurationForOrganizationListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackSlackConfigurationForOrganizationListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackSlackConfigurationForOrganizationListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackSlackConfigurationForOrganizationListOK creates a SlackSlackConfigurationForOrganizationListOK with default headers values
func NewSlackSlackConfigurationForOrganizationListOK() *SlackSlackConfigurationForOrganizationListOK {
	return &SlackSlackConfigurationForOrganizationListOK{}
}

/* SlackSlackConfigurationForOrganizationListOK describes a response with status code 200, with default header values.

Success
*/
type SlackSlackConfigurationForOrganizationListOK struct {
	Payload []*models.SlackConfigurationEntity
}

func (o *SlackSlackConfigurationForOrganizationListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListOK  %+v", 200, o.Payload)
}
func (o *SlackSlackConfigurationForOrganizationListOK) GetPayload() []*models.SlackConfigurationEntity {
	return o.Payload
}

func (o *SlackSlackConfigurationForOrganizationListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackSlackConfigurationForOrganizationListBadRequest creates a SlackSlackConfigurationForOrganizationListBadRequest with default headers values
func NewSlackSlackConfigurationForOrganizationListBadRequest() *SlackSlackConfigurationForOrganizationListBadRequest {
	return &SlackSlackConfigurationForOrganizationListBadRequest{}
}

/* SlackSlackConfigurationForOrganizationListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackSlackConfigurationForOrganizationListBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *SlackSlackConfigurationForOrganizationListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListBadRequest  %+v", 400, o.Payload)
}
func (o *SlackSlackConfigurationForOrganizationListBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *SlackSlackConfigurationForOrganizationListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackSlackConfigurationForOrganizationListUnauthorized creates a SlackSlackConfigurationForOrganizationListUnauthorized with default headers values
func NewSlackSlackConfigurationForOrganizationListUnauthorized() *SlackSlackConfigurationForOrganizationListUnauthorized {
	return &SlackSlackConfigurationForOrganizationListUnauthorized{}
}

/* SlackSlackConfigurationForOrganizationListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackSlackConfigurationForOrganizationListUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *SlackSlackConfigurationForOrganizationListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListUnauthorized  %+v", 401, o.Payload)
}
func (o *SlackSlackConfigurationForOrganizationListUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackSlackConfigurationForOrganizationListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackSlackConfigurationForOrganizationListForbidden creates a SlackSlackConfigurationForOrganizationListForbidden with default headers values
func NewSlackSlackConfigurationForOrganizationListForbidden() *SlackSlackConfigurationForOrganizationListForbidden {
	return &SlackSlackConfigurationForOrganizationListForbidden{}
}

/* SlackSlackConfigurationForOrganizationListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackSlackConfigurationForOrganizationListForbidden struct {
	Payload *models.ProblemDetails
}

func (o *SlackSlackConfigurationForOrganizationListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListForbidden  %+v", 403, o.Payload)
}
func (o *SlackSlackConfigurationForOrganizationListForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackSlackConfigurationForOrganizationListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackSlackConfigurationForOrganizationListNotFound creates a SlackSlackConfigurationForOrganizationListNotFound with default headers values
func NewSlackSlackConfigurationForOrganizationListNotFound() *SlackSlackConfigurationForOrganizationListNotFound {
	return &SlackSlackConfigurationForOrganizationListNotFound{}
}

/* SlackSlackConfigurationForOrganizationListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackSlackConfigurationForOrganizationListNotFound struct {
	Payload *models.ProblemDetails
}

func (o *SlackSlackConfigurationForOrganizationListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListNotFound  %+v", 404, o.Payload)
}
func (o *SlackSlackConfigurationForOrganizationListNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackSlackConfigurationForOrganizationListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackSlackConfigurationForOrganizationListInternalServerError creates a SlackSlackConfigurationForOrganizationListInternalServerError with default headers values
func NewSlackSlackConfigurationForOrganizationListInternalServerError() *SlackSlackConfigurationForOrganizationListInternalServerError {
	return &SlackSlackConfigurationForOrganizationListInternalServerError{}
}

/* SlackSlackConfigurationForOrganizationListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackSlackConfigurationForOrganizationListInternalServerError struct {
}

func (o *SlackSlackConfigurationForOrganizationListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack/list][%d] slackSlackConfigurationForOrganizationListInternalServerError ", 500)
}

func (o *SlackSlackConfigurationForOrganizationListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
