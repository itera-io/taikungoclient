// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlackUpdateReader is a Reader for the SlackUpdate structure.
type SlackUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackUpdateOK creates a SlackUpdateOK with default headers values
func NewSlackUpdateOK() *SlackUpdateOK {
	return &SlackUpdateOK{}
}

/*
SlackUpdateOK describes a response with status code 200, with default header values.

Success
*/
type SlackUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this slack update o k response has a 2xx status code
func (o *SlackUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this slack update o k response has a 3xx status code
func (o *SlackUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update o k response has a 4xx status code
func (o *SlackUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this slack update o k response has a 5xx status code
func (o *SlackUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this slack update o k response a status code equal to that given
func (o *SlackUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *SlackUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateOK  %+v", 200, o.Payload)
}

func (o *SlackUpdateOK) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateOK  %+v", 200, o.Payload)
}

func (o *SlackUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SlackUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpdateBadRequest creates a SlackUpdateBadRequest with default headers values
func NewSlackUpdateBadRequest() *SlackUpdateBadRequest {
	return &SlackUpdateBadRequest{}
}

/*
SlackUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackUpdateBadRequest struct {
	Payload []*SlackUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this slack update bad request response has a 2xx status code
func (o *SlackUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack update bad request response has a 3xx status code
func (o *SlackUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update bad request response has a 4xx status code
func (o *SlackUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack update bad request response has a 5xx status code
func (o *SlackUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this slack update bad request response a status code equal to that given
func (o *SlackUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SlackUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SlackUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SlackUpdateBadRequest) GetPayload() []*SlackUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *SlackUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpdateUnauthorized creates a SlackUpdateUnauthorized with default headers values
func NewSlackUpdateUnauthorized() *SlackUpdateUnauthorized {
	return &SlackUpdateUnauthorized{}
}

/*
SlackUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackUpdateUnauthorized struct {
	Payload *SlackUpdateUnauthorizedBody
}

// IsSuccess returns true when this slack update unauthorized response has a 2xx status code
func (o *SlackUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack update unauthorized response has a 3xx status code
func (o *SlackUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update unauthorized response has a 4xx status code
func (o *SlackUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack update unauthorized response has a 5xx status code
func (o *SlackUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this slack update unauthorized response a status code equal to that given
func (o *SlackUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SlackUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SlackUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SlackUpdateUnauthorized) GetPayload() *SlackUpdateUnauthorizedBody {
	return o.Payload
}

func (o *SlackUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpdateForbidden creates a SlackUpdateForbidden with default headers values
func NewSlackUpdateForbidden() *SlackUpdateForbidden {
	return &SlackUpdateForbidden{}
}

/*
SlackUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackUpdateForbidden struct {
	Payload *SlackUpdateForbiddenBody
}

// IsSuccess returns true when this slack update forbidden response has a 2xx status code
func (o *SlackUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack update forbidden response has a 3xx status code
func (o *SlackUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update forbidden response has a 4xx status code
func (o *SlackUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack update forbidden response has a 5xx status code
func (o *SlackUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this slack update forbidden response a status code equal to that given
func (o *SlackUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SlackUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SlackUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SlackUpdateForbidden) GetPayload() *SlackUpdateForbiddenBody {
	return o.Payload
}

func (o *SlackUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpdateNotFound creates a SlackUpdateNotFound with default headers values
func NewSlackUpdateNotFound() *SlackUpdateNotFound {
	return &SlackUpdateNotFound{}
}

/*
SlackUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackUpdateNotFound struct {
	Payload *SlackUpdateNotFoundBody
}

// IsSuccess returns true when this slack update not found response has a 2xx status code
func (o *SlackUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack update not found response has a 3xx status code
func (o *SlackUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update not found response has a 4xx status code
func (o *SlackUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack update not found response has a 5xx status code
func (o *SlackUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this slack update not found response a status code equal to that given
func (o *SlackUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SlackUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SlackUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SlackUpdateNotFound) GetPayload() *SlackUpdateNotFoundBody {
	return o.Payload
}

func (o *SlackUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpdateInternalServerError creates a SlackUpdateInternalServerError with default headers values
func NewSlackUpdateInternalServerError() *SlackUpdateInternalServerError {
	return &SlackUpdateInternalServerError{}
}

/*
SlackUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackUpdateInternalServerError struct {
}

// IsSuccess returns true when this slack update internal server error response has a 2xx status code
func (o *SlackUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack update internal server error response has a 3xx status code
func (o *SlackUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack update internal server error response has a 4xx status code
func (o *SlackUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this slack update internal server error response has a 5xx status code
func (o *SlackUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this slack update internal server error response a status code equal to that given
func (o *SlackUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SlackUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateInternalServerError ", 500)
}

func (o *SlackUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Slack/update/{id}][%d] slackUpdateInternalServerError ", 500)
}

func (o *SlackUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SlackUpdateBadRequestBodyItems0 slack update bad request body items0
swagger:model SlackUpdateBadRequestBodyItems0
*/
type SlackUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this slack update bad request body items0
func (o *SlackUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack update bad request body items0 based on context it is used
func (o *SlackUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SlackUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackUpdateBody slack update body
swagger:model SlackUpdateBody
*/
type SlackUpdateBody struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// slack type
	// Enum: [100 200]
	SlackType int32 `json:"slackType,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this slack update body
func (o *SlackUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSlackType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var slackUpdateBodyTypeSlackTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		slackUpdateBodyTypeSlackTypePropEnum = append(slackUpdateBodyTypeSlackTypePropEnum, v)
	}
}

// prop value enum
func (o *SlackUpdateBody) validateSlackTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, slackUpdateBodyTypeSlackTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SlackUpdateBody) validateSlackType(formats strfmt.Registry) error {
	if swag.IsZero(o.SlackType) { // not required
		return nil
	}

	// value enum
	if err := o.validateSlackTypeEnum("body"+"."+"slackType", "body", o.SlackType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this slack update body based on context it is used
func (o *SlackUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackUpdateBody) UnmarshalBinary(b []byte) error {
	var res SlackUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackUpdateForbiddenBody slack update forbidden body
swagger:model SlackUpdateForbiddenBody
*/
type SlackUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack update forbidden body
func (o *SlackUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack update forbidden body based on context it is used
func (o *SlackUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SlackUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackUpdateNotFoundBody slack update not found body
swagger:model SlackUpdateNotFoundBody
*/
type SlackUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack update not found body
func (o *SlackUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack update not found body based on context it is used
func (o *SlackUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SlackUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackUpdateUnauthorizedBody slack update unauthorized body
swagger:model SlackUpdateUnauthorizedBody
*/
type SlackUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack update unauthorized body
func (o *SlackUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack update unauthorized body based on context it is used
func (o *SlackUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SlackUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
