// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SlackListReader is a Reader for the SlackList structure.
type SlackListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackListOK creates a SlackListOK with default headers values
func NewSlackListOK() *SlackListOK {
	return &SlackListOK{}
}

/*
SlackListOK describes a response with status code 200, with default header values.

Success
*/
type SlackListOK struct {
	Payload *SlackListOKBody
}

// IsSuccess returns true when this slack list o k response has a 2xx status code
func (o *SlackListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this slack list o k response has a 3xx status code
func (o *SlackListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list o k response has a 4xx status code
func (o *SlackListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this slack list o k response has a 5xx status code
func (o *SlackListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this slack list o k response a status code equal to that given
func (o *SlackListOK) IsCode(code int) bool {
	return code == 200
}

func (o *SlackListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListOK  %+v", 200, o.Payload)
}

func (o *SlackListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListOK  %+v", 200, o.Payload)
}

func (o *SlackListOK) GetPayload() *SlackListOKBody {
	return o.Payload
}

func (o *SlackListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListBadRequest creates a SlackListBadRequest with default headers values
func NewSlackListBadRequest() *SlackListBadRequest {
	return &SlackListBadRequest{}
}

/*
SlackListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackListBadRequest struct {
	Payload []*SlackListBadRequestBodyItems0
}

// IsSuccess returns true when this slack list bad request response has a 2xx status code
func (o *SlackListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack list bad request response has a 3xx status code
func (o *SlackListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list bad request response has a 4xx status code
func (o *SlackListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack list bad request response has a 5xx status code
func (o *SlackListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this slack list bad request response a status code equal to that given
func (o *SlackListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SlackListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListBadRequest  %+v", 400, o.Payload)
}

func (o *SlackListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListBadRequest  %+v", 400, o.Payload)
}

func (o *SlackListBadRequest) GetPayload() []*SlackListBadRequestBodyItems0 {
	return o.Payload
}

func (o *SlackListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListUnauthorized creates a SlackListUnauthorized with default headers values
func NewSlackListUnauthorized() *SlackListUnauthorized {
	return &SlackListUnauthorized{}
}

/*
SlackListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackListUnauthorized struct {
	Payload *SlackListUnauthorizedBody
}

// IsSuccess returns true when this slack list unauthorized response has a 2xx status code
func (o *SlackListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack list unauthorized response has a 3xx status code
func (o *SlackListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list unauthorized response has a 4xx status code
func (o *SlackListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack list unauthorized response has a 5xx status code
func (o *SlackListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this slack list unauthorized response a status code equal to that given
func (o *SlackListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SlackListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListUnauthorized  %+v", 401, o.Payload)
}

func (o *SlackListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListUnauthorized  %+v", 401, o.Payload)
}

func (o *SlackListUnauthorized) GetPayload() *SlackListUnauthorizedBody {
	return o.Payload
}

func (o *SlackListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListForbidden creates a SlackListForbidden with default headers values
func NewSlackListForbidden() *SlackListForbidden {
	return &SlackListForbidden{}
}

/*
SlackListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackListForbidden struct {
	Payload *SlackListForbiddenBody
}

// IsSuccess returns true when this slack list forbidden response has a 2xx status code
func (o *SlackListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack list forbidden response has a 3xx status code
func (o *SlackListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list forbidden response has a 4xx status code
func (o *SlackListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack list forbidden response has a 5xx status code
func (o *SlackListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this slack list forbidden response a status code equal to that given
func (o *SlackListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SlackListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListForbidden  %+v", 403, o.Payload)
}

func (o *SlackListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListForbidden  %+v", 403, o.Payload)
}

func (o *SlackListForbidden) GetPayload() *SlackListForbiddenBody {
	return o.Payload
}

func (o *SlackListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListNotFound creates a SlackListNotFound with default headers values
func NewSlackListNotFound() *SlackListNotFound {
	return &SlackListNotFound{}
}

/*
SlackListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackListNotFound struct {
	Payload *SlackListNotFoundBody
}

// IsSuccess returns true when this slack list not found response has a 2xx status code
func (o *SlackListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack list not found response has a 3xx status code
func (o *SlackListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list not found response has a 4xx status code
func (o *SlackListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this slack list not found response has a 5xx status code
func (o *SlackListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this slack list not found response a status code equal to that given
func (o *SlackListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SlackListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListNotFound  %+v", 404, o.Payload)
}

func (o *SlackListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListNotFound  %+v", 404, o.Payload)
}

func (o *SlackListNotFound) GetPayload() *SlackListNotFoundBody {
	return o.Payload
}

func (o *SlackListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlackListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListInternalServerError creates a SlackListInternalServerError with default headers values
func NewSlackListInternalServerError() *SlackListInternalServerError {
	return &SlackListInternalServerError{}
}

/*
SlackListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackListInternalServerError struct {
}

// IsSuccess returns true when this slack list internal server error response has a 2xx status code
func (o *SlackListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this slack list internal server error response has a 3xx status code
func (o *SlackListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this slack list internal server error response has a 4xx status code
func (o *SlackListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this slack list internal server error response has a 5xx status code
func (o *SlackListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this slack list internal server error response a status code equal to that given
func (o *SlackListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SlackListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListInternalServerError ", 500)
}

func (o *SlackListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListInternalServerError ", 500)
}

func (o *SlackListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SlackListBadRequestBodyItems0 slack list bad request body items0
swagger:model SlackListBadRequestBodyItems0
*/
type SlackListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this slack list bad request body items0
func (o *SlackListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack list bad request body items0 based on context it is used
func (o *SlackListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res SlackListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackListForbiddenBody slack list forbidden body
swagger:model SlackListForbiddenBody
*/
type SlackListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack list forbidden body
func (o *SlackListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack list forbidden body based on context it is used
func (o *SlackListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SlackListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackListNotFoundBody slack list not found body
swagger:model SlackListNotFoundBody
*/
type SlackListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack list not found body
func (o *SlackListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack list not found body based on context it is used
func (o *SlackListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SlackListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackListOKBody slack list o k body
swagger:model SlackListOKBody
*/
type SlackListOKBody struct {

	// data
	Data []*SlackListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this slack list o k body
func (o *SlackListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlackListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slackListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slackListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this slack list o k body based on the context it is used
func (o *SlackListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlackListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slackListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slackListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SlackListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListOKBody) UnmarshalBinary(b []byte) error {
	var res SlackListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackListOKBodyDataItems0 slack list o k body data items0
swagger:model SlackListOKBodyDataItems0
*/
type SlackListOKBodyDataItems0 struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// slack type
	SlackType string `json:"slackType,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this slack list o k body data items0
func (o *SlackListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack list o k body data items0 based on context it is used
func (o *SlackListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res SlackListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SlackListUnauthorizedBody slack list unauthorized body
swagger:model SlackListUnauthorizedBody
*/
type SlackListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this slack list unauthorized body
func (o *SlackListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slack list unauthorized body based on context it is used
func (o *SlackListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlackListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlackListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SlackListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
