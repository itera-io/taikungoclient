// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SlackListReader is a Reader for the SlackList structure.
type SlackListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackListOK creates a SlackListOK with default headers values
func NewSlackListOK() *SlackListOK {
	return &SlackListOK{}
}

/* SlackListOK describes a response with status code 200, with default header values.

Success
*/
type SlackListOK struct {
	Payload *models.SlackConfigurationList
}

func (o *SlackListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListOK  %+v", 200, o.Payload)
}
func (o *SlackListOK) GetPayload() *models.SlackConfigurationList {
	return o.Payload
}

func (o *SlackListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SlackConfigurationList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListBadRequest creates a SlackListBadRequest with default headers values
func NewSlackListBadRequest() *SlackListBadRequest {
	return &SlackListBadRequest{}
}

/* SlackListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackListBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *SlackListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListBadRequest  %+v", 400, o.Payload)
}
func (o *SlackListBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *SlackListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListUnauthorized creates a SlackListUnauthorized with default headers values
func NewSlackListUnauthorized() *SlackListUnauthorized {
	return &SlackListUnauthorized{}
}

/* SlackListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackListUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *SlackListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListUnauthorized  %+v", 401, o.Payload)
}
func (o *SlackListUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListForbidden creates a SlackListForbidden with default headers values
func NewSlackListForbidden() *SlackListForbidden {
	return &SlackListForbidden{}
}

/* SlackListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackListForbidden struct {
	Payload *models.ProblemDetails
}

func (o *SlackListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListForbidden  %+v", 403, o.Payload)
}
func (o *SlackListForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListNotFound creates a SlackListNotFound with default headers values
func NewSlackListNotFound() *SlackListNotFound {
	return &SlackListNotFound{}
}

/* SlackListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackListNotFound struct {
	Payload *models.ProblemDetails
}

func (o *SlackListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListNotFound  %+v", 404, o.Payload)
}
func (o *SlackListNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackListInternalServerError creates a SlackListInternalServerError with default headers values
func NewSlackListInternalServerError() *SlackListInternalServerError {
	return &SlackListInternalServerError{}
}

/* SlackListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackListInternalServerError struct {
}

func (o *SlackListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Slack][%d] slackListInternalServerError ", 500)
}

func (o *SlackListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
