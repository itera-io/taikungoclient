// Code generated by go-swagger; DO NOT EDIT.

package slack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// SlackUpsertReader is a Reader for the SlackUpsert structure.
type SlackUpsertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlackUpsertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlackUpsertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSlackUpsertBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSlackUpsertUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSlackUpsertForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSlackUpsertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSlackUpsertInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSlackUpsertOK creates a SlackUpsertOK with default headers values
func NewSlackUpsertOK() *SlackUpsertOK {
	return &SlackUpsertOK{}
}

/* SlackUpsertOK describes a response with status code 200, with default header values.

Success
*/
type SlackUpsertOK struct {
	Payload int32
}

func (o *SlackUpsertOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertOK  %+v", 200, o.Payload)
}
func (o *SlackUpsertOK) GetPayload() int32 {
	return o.Payload
}

func (o *SlackUpsertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpsertBadRequest creates a SlackUpsertBadRequest with default headers values
func NewSlackUpsertBadRequest() *SlackUpsertBadRequest {
	return &SlackUpsertBadRequest{}
}

/* SlackUpsertBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SlackUpsertBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *SlackUpsertBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertBadRequest  %+v", 400, o.Payload)
}
func (o *SlackUpsertBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *SlackUpsertBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpsertUnauthorized creates a SlackUpsertUnauthorized with default headers values
func NewSlackUpsertUnauthorized() *SlackUpsertUnauthorized {
	return &SlackUpsertUnauthorized{}
}

/* SlackUpsertUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SlackUpsertUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *SlackUpsertUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertUnauthorized  %+v", 401, o.Payload)
}
func (o *SlackUpsertUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackUpsertUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpsertForbidden creates a SlackUpsertForbidden with default headers values
func NewSlackUpsertForbidden() *SlackUpsertForbidden {
	return &SlackUpsertForbidden{}
}

/* SlackUpsertForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SlackUpsertForbidden struct {
	Payload *models.ProblemDetails
}

func (o *SlackUpsertForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertForbidden  %+v", 403, o.Payload)
}
func (o *SlackUpsertForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackUpsertForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpsertNotFound creates a SlackUpsertNotFound with default headers values
func NewSlackUpsertNotFound() *SlackUpsertNotFound {
	return &SlackUpsertNotFound{}
}

/* SlackUpsertNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SlackUpsertNotFound struct {
	Payload *models.ProblemDetails
}

func (o *SlackUpsertNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertNotFound  %+v", 404, o.Payload)
}
func (o *SlackUpsertNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *SlackUpsertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlackUpsertInternalServerError creates a SlackUpsertInternalServerError with default headers values
func NewSlackUpsertInternalServerError() *SlackUpsertInternalServerError {
	return &SlackUpsertInternalServerError{}
}

/* SlackUpsertInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SlackUpsertInternalServerError struct {
}

func (o *SlackUpsertInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Slack][%d] slackUpsertInternalServerError ", 500)
}

func (o *SlackUpsertInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
