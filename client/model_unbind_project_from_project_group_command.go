/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UnbindProjectFromProjectGroupCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnbindProjectFromProjectGroupCommand{}

// UnbindProjectFromProjectGroupCommand struct for UnbindProjectFromProjectGroupCommand
type UnbindProjectFromProjectGroupCommand struct {
	ProjectGroupId *int32 `json:"projectGroupId,omitempty"`
	ProjectIds []int32 `json:"projectIds,omitempty"`
}

// NewUnbindProjectFromProjectGroupCommand instantiates a new UnbindProjectFromProjectGroupCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnbindProjectFromProjectGroupCommand() *UnbindProjectFromProjectGroupCommand {
	this := UnbindProjectFromProjectGroupCommand{}
	return &this
}

// NewUnbindProjectFromProjectGroupCommandWithDefaults instantiates a new UnbindProjectFromProjectGroupCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnbindProjectFromProjectGroupCommandWithDefaults() *UnbindProjectFromProjectGroupCommand {
	this := UnbindProjectFromProjectGroupCommand{}
	return &this
}

// GetProjectGroupId returns the ProjectGroupId field value if set, zero value otherwise.
func (o *UnbindProjectFromProjectGroupCommand) GetProjectGroupId() int32 {
	if o == nil || IsNil(o.ProjectGroupId) {
		var ret int32
		return ret
	}
	return *o.ProjectGroupId
}

// GetProjectGroupIdOk returns a tuple with the ProjectGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnbindProjectFromProjectGroupCommand) GetProjectGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectGroupId) {
		return nil, false
	}
	return o.ProjectGroupId, true
}

// HasProjectGroupId returns a boolean if a field has been set.
func (o *UnbindProjectFromProjectGroupCommand) HasProjectGroupId() bool {
	if o != nil && !IsNil(o.ProjectGroupId) {
		return true
	}

	return false
}

// SetProjectGroupId gets a reference to the given int32 and assigns it to the ProjectGroupId field.
func (o *UnbindProjectFromProjectGroupCommand) SetProjectGroupId(v int32) {
	o.ProjectGroupId = &v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnbindProjectFromProjectGroupCommand) GetProjectIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnbindProjectFromProjectGroupCommand) GetProjectIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *UnbindProjectFromProjectGroupCommand) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []int32 and assigns it to the ProjectIds field.
func (o *UnbindProjectFromProjectGroupCommand) SetProjectIds(v []int32) {
	o.ProjectIds = v
}

func (o UnbindProjectFromProjectGroupCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnbindProjectFromProjectGroupCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectGroupId) {
		toSerialize["projectGroupId"] = o.ProjectGroupId
	}
	if o.ProjectIds != nil {
		toSerialize["projectIds"] = o.ProjectIds
	}
	return toSerialize, nil
}

type NullableUnbindProjectFromProjectGroupCommand struct {
	value *UnbindProjectFromProjectGroupCommand
	isSet bool
}

func (v NullableUnbindProjectFromProjectGroupCommand) Get() *UnbindProjectFromProjectGroupCommand {
	return v.value
}

func (v *NullableUnbindProjectFromProjectGroupCommand) Set(val *UnbindProjectFromProjectGroupCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUnbindProjectFromProjectGroupCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUnbindProjectFromProjectGroupCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnbindProjectFromProjectGroupCommand(val *UnbindProjectFromProjectGroupCommand) *NullableUnbindProjectFromProjectGroupCommand {
	return &NullableUnbindProjectFromProjectGroupCommand{value: val, isSet: true}
}

func (v NullableUnbindProjectFromProjectGroupCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnbindProjectFromProjectGroupCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


