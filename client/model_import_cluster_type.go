/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ImportClusterType the model 'ImportClusterType'
type ImportClusterType string

// List of ImportClusterType
const (
	IMPORTCLUSTERTYPE_NONE ImportClusterType = "None"
	IMPORTCLUSTERTYPE_CLOUD_CREDENTIAL ImportClusterType = "CloudCredential"
	IMPORTCLUSTERTYPE_READ_ONLY ImportClusterType = "ReadOnly"
	IMPORTCLUSTERTYPE_FULLY_MANAGED ImportClusterType = "FullyManaged"
)

// All allowed values of ImportClusterType enum
var AllowedImportClusterTypeEnumValues = []ImportClusterType{
	"None",
	"CloudCredential",
	"ReadOnly",
	"FullyManaged",
}

func (v *ImportClusterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportClusterType(value)
	for _, existing := range AllowedImportClusterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImportClusterType", value)
}

// NewImportClusterTypeFromValue returns a pointer to a valid ImportClusterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImportClusterTypeFromValue(v string) (*ImportClusterType, error) {
	ev := ImportClusterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImportClusterType: valid values are %v", v, AllowedImportClusterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportClusterType) IsValid() bool {
	for _, existing := range AllowedImportClusterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportClusterType value
func (v ImportClusterType) Ptr() *ImportClusterType {
	return &v
}

type NullableImportClusterType struct {
	value *ImportClusterType
	isSet bool
}

func (v NullableImportClusterType) Get() *ImportClusterType {
	return v.value
}

func (v *NullableImportClusterType) Set(val *ImportClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableImportClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableImportClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportClusterType(val *ImportClusterType) *NullableImportClusterType {
	return &NullableImportClusterType{value: val, isSet: true}
}

func (v NullableImportClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

