/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdminUsersResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminUsersResponseData{}

// AdminUsersResponseData struct for AdminUsersResponseData
type AdminUsersResponseData struct {
	Id NullableString `json:"id"`
	Name NullableString `json:"name"`
	Email NullableString `json:"email"`
	Role UserRole `json:"role"`
	OrganizationName NullableString `json:"organizationName"`
	Owner bool `json:"owner"`
	Csm bool `json:"csm"`
}

type _AdminUsersResponseData AdminUsersResponseData

// NewAdminUsersResponseData instantiates a new AdminUsersResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUsersResponseData(id NullableString, name NullableString, email NullableString, role UserRole, organizationName NullableString, owner bool, csm bool) *AdminUsersResponseData {
	this := AdminUsersResponseData{}
	this.Id = id
	this.Name = name
	this.Email = email
	this.Role = role
	this.OrganizationName = organizationName
	this.Owner = owner
	this.Csm = csm
	return &this
}

// NewAdminUsersResponseDataWithDefaults instantiates a new AdminUsersResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUsersResponseDataWithDefaults() *AdminUsersResponseData {
	this := AdminUsersResponseData{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdminUsersResponseData) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminUsersResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *AdminUsersResponseData) SetId(v string) {
	o.Id.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdminUsersResponseData) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminUsersResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *AdminUsersResponseData) SetName(v string) {
	o.Name.Set(&v)
}

// GetEmail returns the Email field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdminUsersResponseData) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}

	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminUsersResponseData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// SetEmail sets field value
func (o *AdminUsersResponseData) SetEmail(v string) {
	o.Email.Set(&v)
}

// GetRole returns the Role field value
func (o *AdminUsersResponseData) GetRole() UserRole {
	if o == nil {
		var ret UserRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *AdminUsersResponseData) GetRoleOk() (*UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *AdminUsersResponseData) SetRole(v UserRole) {
	o.Role = v
}

// GetOrganizationName returns the OrganizationName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdminUsersResponseData) GetOrganizationName() string {
	if o == nil || o.OrganizationName.Get() == nil {
		var ret string
		return ret
	}

	return *o.OrganizationName.Get()
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminUsersResponseData) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationName.Get(), o.OrganizationName.IsSet()
}

// SetOrganizationName sets field value
func (o *AdminUsersResponseData) SetOrganizationName(v string) {
	o.OrganizationName.Set(&v)
}

// GetOwner returns the Owner field value
func (o *AdminUsersResponseData) GetOwner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *AdminUsersResponseData) GetOwnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *AdminUsersResponseData) SetOwner(v bool) {
	o.Owner = v
}

// GetCsm returns the Csm field value
func (o *AdminUsersResponseData) GetCsm() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Csm
}

// GetCsmOk returns a tuple with the Csm field value
// and a boolean to check if the value has been set.
func (o *AdminUsersResponseData) GetCsmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Csm, true
}

// SetCsm sets field value
func (o *AdminUsersResponseData) SetCsm(v bool) {
	o.Csm = v
}

func (o AdminUsersResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminUsersResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["email"] = o.Email.Get()
	toSerialize["role"] = o.Role
	toSerialize["organizationName"] = o.OrganizationName.Get()
	toSerialize["owner"] = o.Owner
	toSerialize["csm"] = o.Csm
	return toSerialize, nil
}

func (o *AdminUsersResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"email",
		"role",
		"organizationName",
		"owner",
		"csm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminUsersResponseData := _AdminUsersResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminUsersResponseData)

	if err != nil {
		return err
	}

	*o = AdminUsersResponseData(varAdminUsersResponseData)

	return err
}

type NullableAdminUsersResponseData struct {
	value *AdminUsersResponseData
	isSet bool
}

func (v NullableAdminUsersResponseData) Get() *AdminUsersResponseData {
	return v.value
}

func (v *NullableAdminUsersResponseData) Set(val *AdminUsersResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUsersResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUsersResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUsersResponseData(val *AdminUsersResponseData) *NullableAdminUsersResponseData {
	return &NullableAdminUsersResponseData{value: val, isSet: true}
}

func (v NullableAdminUsersResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUsersResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


