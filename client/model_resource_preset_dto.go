/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourcePresetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcePresetDto{}

// ResourcePresetDto struct for ResourcePresetDto
type ResourcePresetDto struct {
	Name NullableString `json:"name"`
	Cpu CpuLimitsDto `json:"cpu"`
	Ram RamLimitsDto `json:"ram"`
	EphemeralStorage EphemeralStorageLimitsDto `json:"ephemeralStorage"`
	WorkloadResources WorkloadResourceLimitsDto `json:"workloadResources"`
}

type _ResourcePresetDto ResourcePresetDto

// NewResourcePresetDto instantiates a new ResourcePresetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcePresetDto(name NullableString, cpu CpuLimitsDto, ram RamLimitsDto, ephemeralStorage EphemeralStorageLimitsDto, workloadResources WorkloadResourceLimitsDto) *ResourcePresetDto {
	this := ResourcePresetDto{}
	this.Name = name
	this.Cpu = cpu
	this.Ram = ram
	this.EphemeralStorage = ephemeralStorage
	this.WorkloadResources = workloadResources
	return &this
}

// NewResourcePresetDtoWithDefaults instantiates a new ResourcePresetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcePresetDtoWithDefaults() *ResourcePresetDto {
	this := ResourcePresetDto{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResourcePresetDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourcePresetDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ResourcePresetDto) SetName(v string) {
	o.Name.Set(&v)
}

// GetCpu returns the Cpu field value
func (o *ResourcePresetDto) GetCpu() CpuLimitsDto {
	if o == nil {
		var ret CpuLimitsDto
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *ResourcePresetDto) GetCpuOk() (*CpuLimitsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *ResourcePresetDto) SetCpu(v CpuLimitsDto) {
	o.Cpu = v
}

// GetRam returns the Ram field value
func (o *ResourcePresetDto) GetRam() RamLimitsDto {
	if o == nil {
		var ret RamLimitsDto
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *ResourcePresetDto) GetRamOk() (*RamLimitsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *ResourcePresetDto) SetRam(v RamLimitsDto) {
	o.Ram = v
}

// GetEphemeralStorage returns the EphemeralStorage field value
func (o *ResourcePresetDto) GetEphemeralStorage() EphemeralStorageLimitsDto {
	if o == nil {
		var ret EphemeralStorageLimitsDto
		return ret
	}

	return o.EphemeralStorage
}

// GetEphemeralStorageOk returns a tuple with the EphemeralStorage field value
// and a boolean to check if the value has been set.
func (o *ResourcePresetDto) GetEphemeralStorageOk() (*EphemeralStorageLimitsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EphemeralStorage, true
}

// SetEphemeralStorage sets field value
func (o *ResourcePresetDto) SetEphemeralStorage(v EphemeralStorageLimitsDto) {
	o.EphemeralStorage = v
}

// GetWorkloadResources returns the WorkloadResources field value
func (o *ResourcePresetDto) GetWorkloadResources() WorkloadResourceLimitsDto {
	if o == nil {
		var ret WorkloadResourceLimitsDto
		return ret
	}

	return o.WorkloadResources
}

// GetWorkloadResourcesOk returns a tuple with the WorkloadResources field value
// and a boolean to check if the value has been set.
func (o *ResourcePresetDto) GetWorkloadResourcesOk() (*WorkloadResourceLimitsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkloadResources, true
}

// SetWorkloadResources sets field value
func (o *ResourcePresetDto) SetWorkloadResources(v WorkloadResourceLimitsDto) {
	o.WorkloadResources = v
}

func (o ResourcePresetDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcePresetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	toSerialize["cpu"] = o.Cpu
	toSerialize["ram"] = o.Ram
	toSerialize["ephemeralStorage"] = o.EphemeralStorage
	toSerialize["workloadResources"] = o.WorkloadResources
	return toSerialize, nil
}

func (o *ResourcePresetDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cpu",
		"ram",
		"ephemeralStorage",
		"workloadResources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourcePresetDto := _ResourcePresetDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourcePresetDto)

	if err != nil {
		return err
	}

	*o = ResourcePresetDto(varResourcePresetDto)

	return err
}

type NullableResourcePresetDto struct {
	value *ResourcePresetDto
	isSet bool
}

func (v NullableResourcePresetDto) Get() *ResourcePresetDto {
	return v.value
}

func (v *NullableResourcePresetDto) Set(val *ResourcePresetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcePresetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcePresetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcePresetDto(val *ResourcePresetDto) *NullableResourcePresetDto {
	return &NullableResourcePresetDto{value: val, isSet: true}
}

func (v NullableResourcePresetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcePresetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


