/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GetToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetToken{}

// GetToken struct for GetToken
type GetToken struct {
	Token string `json:"token"`
	RefreshToken NullableString `json:"refreshToken,omitempty"`
	RefreshTokenExpireTime *time.Time `json:"refreshTokenExpireTime,omitempty"`
	TwoFaEnabled NullableBool `json:"twoFaEnabled,omitempty"`
	IsForcedToEnabled2Fa NullableBool `json:"isForcedToEnabled2Fa,omitempty"`
}

type _GetToken GetToken

// NewGetToken instantiates a new GetToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetToken(token string) *GetToken {
	this := GetToken{}
	this.Token = token
	return &this
}

// NewGetTokenWithDefaults instantiates a new GetToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTokenWithDefaults() *GetToken {
	this := GetToken{}
	return &this
}

// GetToken returns the Token field value
func (o *GetToken) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *GetToken) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *GetToken) SetToken(v string) {
	o.Token = v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetToken) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken.Get()) {
		var ret string
		return ret
	}
	return *o.RefreshToken.Get()
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetToken) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefreshToken.Get(), o.RefreshToken.IsSet()
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *GetToken) HasRefreshToken() bool {
	if o != nil && o.RefreshToken.IsSet() {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given NullableString and assigns it to the RefreshToken field.
func (o *GetToken) SetRefreshToken(v string) {
	o.RefreshToken.Set(&v)
}
// SetRefreshTokenNil sets the value for RefreshToken to be an explicit nil
func (o *GetToken) SetRefreshTokenNil() {
	o.RefreshToken.Set(nil)
}

// UnsetRefreshToken ensures that no value is present for RefreshToken, not even an explicit nil
func (o *GetToken) UnsetRefreshToken() {
	o.RefreshToken.Unset()
}

// GetRefreshTokenExpireTime returns the RefreshTokenExpireTime field value if set, zero value otherwise.
func (o *GetToken) GetRefreshTokenExpireTime() time.Time {
	if o == nil || IsNil(o.RefreshTokenExpireTime) {
		var ret time.Time
		return ret
	}
	return *o.RefreshTokenExpireTime
}

// GetRefreshTokenExpireTimeOk returns a tuple with the RefreshTokenExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetToken) GetRefreshTokenExpireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RefreshTokenExpireTime) {
		return nil, false
	}
	return o.RefreshTokenExpireTime, true
}

// HasRefreshTokenExpireTime returns a boolean if a field has been set.
func (o *GetToken) HasRefreshTokenExpireTime() bool {
	if o != nil && !IsNil(o.RefreshTokenExpireTime) {
		return true
	}

	return false
}

// SetRefreshTokenExpireTime gets a reference to the given time.Time and assigns it to the RefreshTokenExpireTime field.
func (o *GetToken) SetRefreshTokenExpireTime(v time.Time) {
	o.RefreshTokenExpireTime = &v
}

// GetTwoFaEnabled returns the TwoFaEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetToken) GetTwoFaEnabled() bool {
	if o == nil || IsNil(o.TwoFaEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.TwoFaEnabled.Get()
}

// GetTwoFaEnabledOk returns a tuple with the TwoFaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetToken) GetTwoFaEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TwoFaEnabled.Get(), o.TwoFaEnabled.IsSet()
}

// HasTwoFaEnabled returns a boolean if a field has been set.
func (o *GetToken) HasTwoFaEnabled() bool {
	if o != nil && o.TwoFaEnabled.IsSet() {
		return true
	}

	return false
}

// SetTwoFaEnabled gets a reference to the given NullableBool and assigns it to the TwoFaEnabled field.
func (o *GetToken) SetTwoFaEnabled(v bool) {
	o.TwoFaEnabled.Set(&v)
}
// SetTwoFaEnabledNil sets the value for TwoFaEnabled to be an explicit nil
func (o *GetToken) SetTwoFaEnabledNil() {
	o.TwoFaEnabled.Set(nil)
}

// UnsetTwoFaEnabled ensures that no value is present for TwoFaEnabled, not even an explicit nil
func (o *GetToken) UnsetTwoFaEnabled() {
	o.TwoFaEnabled.Unset()
}

// GetIsForcedToEnabled2Fa returns the IsForcedToEnabled2Fa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetToken) GetIsForcedToEnabled2Fa() bool {
	if o == nil || IsNil(o.IsForcedToEnabled2Fa.Get()) {
		var ret bool
		return ret
	}
	return *o.IsForcedToEnabled2Fa.Get()
}

// GetIsForcedToEnabled2FaOk returns a tuple with the IsForcedToEnabled2Fa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetToken) GetIsForcedToEnabled2FaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsForcedToEnabled2Fa.Get(), o.IsForcedToEnabled2Fa.IsSet()
}

// HasIsForcedToEnabled2Fa returns a boolean if a field has been set.
func (o *GetToken) HasIsForcedToEnabled2Fa() bool {
	if o != nil && o.IsForcedToEnabled2Fa.IsSet() {
		return true
	}

	return false
}

// SetIsForcedToEnabled2Fa gets a reference to the given NullableBool and assigns it to the IsForcedToEnabled2Fa field.
func (o *GetToken) SetIsForcedToEnabled2Fa(v bool) {
	o.IsForcedToEnabled2Fa.Set(&v)
}
// SetIsForcedToEnabled2FaNil sets the value for IsForcedToEnabled2Fa to be an explicit nil
func (o *GetToken) SetIsForcedToEnabled2FaNil() {
	o.IsForcedToEnabled2Fa.Set(nil)
}

// UnsetIsForcedToEnabled2Fa ensures that no value is present for IsForcedToEnabled2Fa, not even an explicit nil
func (o *GetToken) UnsetIsForcedToEnabled2Fa() {
	o.IsForcedToEnabled2Fa.Unset()
}

func (o GetToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	if o.RefreshToken.IsSet() {
		toSerialize["refreshToken"] = o.RefreshToken.Get()
	}
	if !IsNil(o.RefreshTokenExpireTime) {
		toSerialize["refreshTokenExpireTime"] = o.RefreshTokenExpireTime
	}
	if o.TwoFaEnabled.IsSet() {
		toSerialize["twoFaEnabled"] = o.TwoFaEnabled.Get()
	}
	if o.IsForcedToEnabled2Fa.IsSet() {
		toSerialize["isForcedToEnabled2Fa"] = o.IsForcedToEnabled2Fa.Get()
	}
	return toSerialize, nil
}

func (o *GetToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetToken := _GetToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetToken)

	if err != nil {
		return err
	}

	*o = GetToken(varGetToken)

	return err
}

type NullableGetToken struct {
	value *GetToken
	isSet bool
}

func (v NullableGetToken) Get() *GetToken {
	return v.value
}

func (v *NullableGetToken) Set(val *GetToken) {
	v.value = val
	v.isSet = true
}

func (v NullableGetToken) IsSet() bool {
	return v.isSet
}

func (v *NullableGetToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetToken(val *GetToken) *NullableGetToken {
	return &NullableGetToken{value: val, isSet: true}
}

func (v NullableGetToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


