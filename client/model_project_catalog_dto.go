/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectCatalogDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCatalogDto{}

// ProjectCatalogDto struct for ProjectCatalogDto
type ProjectCatalogDto struct {
	Id *int32 `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	KubernetesVersion NullableString `json:"kubernetesVersion,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
	MaintenanceModeEnabled *bool `json:"maintenanceModeEnabled,omitempty"`
	IsVirtualCluster *bool `json:"isVirtualCluster,omitempty"`
	CloudType *CloudType `json:"cloudType,omitempty"`
	Status *ProjectStatus `json:"status,omitempty"`
	Health *ProjectHealth `json:"health,omitempty"`
}

// NewProjectCatalogDto instantiates a new ProjectCatalogDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCatalogDto() *ProjectCatalogDto {
	this := ProjectCatalogDto{}
	return &this
}

// NewProjectCatalogDtoWithDefaults instantiates a new ProjectCatalogDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCatalogDtoWithDefaults() *ProjectCatalogDto {
	this := ProjectCatalogDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectCatalogDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectCatalogDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectCatalogDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProjectCatalogDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProjectCatalogDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProjectCatalogDto) UnsetName() {
	o.Name.Unset()
}

// GetKubernetesVersion returns the KubernetesVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectCatalogDto) GetKubernetesVersion() string {
	if o == nil || IsNil(o.KubernetesVersion.Get()) {
		var ret string
		return ret
	}
	return *o.KubernetesVersion.Get()
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectCatalogDto) GetKubernetesVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubernetesVersion.Get(), o.KubernetesVersion.IsSet()
}

// HasKubernetesVersion returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasKubernetesVersion() bool {
	if o != nil && o.KubernetesVersion.IsSet() {
		return true
	}

	return false
}

// SetKubernetesVersion gets a reference to the given NullableString and assigns it to the KubernetesVersion field.
func (o *ProjectCatalogDto) SetKubernetesVersion(v string) {
	o.KubernetesVersion.Set(&v)
}
// SetKubernetesVersionNil sets the value for KubernetesVersion to be an explicit nil
func (o *ProjectCatalogDto) SetKubernetesVersionNil() {
	o.KubernetesVersion.Set(nil)
}

// UnsetKubernetesVersion ensures that no value is present for KubernetesVersion, not even an explicit nil
func (o *ProjectCatalogDto) UnsetKubernetesVersion() {
	o.KubernetesVersion.Unset()
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *ProjectCatalogDto) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetMaintenanceModeEnabled returns the MaintenanceModeEnabled field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetMaintenanceModeEnabled() bool {
	if o == nil || IsNil(o.MaintenanceModeEnabled) {
		var ret bool
		return ret
	}
	return *o.MaintenanceModeEnabled
}

// GetMaintenanceModeEnabledOk returns a tuple with the MaintenanceModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetMaintenanceModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MaintenanceModeEnabled) {
		return nil, false
	}
	return o.MaintenanceModeEnabled, true
}

// HasMaintenanceModeEnabled returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasMaintenanceModeEnabled() bool {
	if o != nil && !IsNil(o.MaintenanceModeEnabled) {
		return true
	}

	return false
}

// SetMaintenanceModeEnabled gets a reference to the given bool and assigns it to the MaintenanceModeEnabled field.
func (o *ProjectCatalogDto) SetMaintenanceModeEnabled(v bool) {
	o.MaintenanceModeEnabled = &v
}

// GetIsVirtualCluster returns the IsVirtualCluster field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetIsVirtualCluster() bool {
	if o == nil || IsNil(o.IsVirtualCluster) {
		var ret bool
		return ret
	}
	return *o.IsVirtualCluster
}

// GetIsVirtualClusterOk returns a tuple with the IsVirtualCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetIsVirtualClusterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVirtualCluster) {
		return nil, false
	}
	return o.IsVirtualCluster, true
}

// HasIsVirtualCluster returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasIsVirtualCluster() bool {
	if o != nil && !IsNil(o.IsVirtualCluster) {
		return true
	}

	return false
}

// SetIsVirtualCluster gets a reference to the given bool and assigns it to the IsVirtualCluster field.
func (o *ProjectCatalogDto) SetIsVirtualCluster(v bool) {
	o.IsVirtualCluster = &v
}

// GetCloudType returns the CloudType field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetCloudType() CloudType {
	if o == nil || IsNil(o.CloudType) {
		var ret CloudType
		return ret
	}
	return *o.CloudType
}

// GetCloudTypeOk returns a tuple with the CloudType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetCloudTypeOk() (*CloudType, bool) {
	if o == nil || IsNil(o.CloudType) {
		return nil, false
	}
	return o.CloudType, true
}

// HasCloudType returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasCloudType() bool {
	if o != nil && !IsNil(o.CloudType) {
		return true
	}

	return false
}

// SetCloudType gets a reference to the given CloudType and assigns it to the CloudType field.
func (o *ProjectCatalogDto) SetCloudType(v CloudType) {
	o.CloudType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetStatus() ProjectStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProjectStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetStatusOk() (*ProjectStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProjectStatus and assigns it to the Status field.
func (o *ProjectCatalogDto) SetStatus(v ProjectStatus) {
	o.Status = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ProjectCatalogDto) GetHealth() ProjectHealth {
	if o == nil || IsNil(o.Health) {
		var ret ProjectHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCatalogDto) GetHealthOk() (*ProjectHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ProjectCatalogDto) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given ProjectHealth and assigns it to the Health field.
func (o *ProjectCatalogDto) SetHealth(v ProjectHealth) {
	o.Health = &v
}

func (o ProjectCatalogDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCatalogDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.KubernetesVersion.IsSet() {
		toSerialize["kubernetesVersion"] = o.KubernetesVersion.Get()
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.MaintenanceModeEnabled) {
		toSerialize["maintenanceModeEnabled"] = o.MaintenanceModeEnabled
	}
	if !IsNil(o.IsVirtualCluster) {
		toSerialize["isVirtualCluster"] = o.IsVirtualCluster
	}
	if !IsNil(o.CloudType) {
		toSerialize["cloudType"] = o.CloudType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	return toSerialize, nil
}

type NullableProjectCatalogDto struct {
	value *ProjectCatalogDto
	isSet bool
}

func (v NullableProjectCatalogDto) Get() *ProjectCatalogDto {
	return v.value
}

func (v *NullableProjectCatalogDto) Set(val *ProjectCatalogDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCatalogDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCatalogDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCatalogDto(val *ProjectCatalogDto) *NullableProjectCatalogDto {
	return &NullableProjectCatalogDto{value: val, isSet: true}
}

func (v NullableProjectCatalogDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCatalogDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


