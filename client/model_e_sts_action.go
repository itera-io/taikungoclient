/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// EStsAction the model 'EStsAction'
type EStsAction string

// List of EStsAction
const (
	ESTSACTION_RESTART EStsAction = "Restart"
	ESTSACTION_SCALE EStsAction = "Scale"
	ESTSACTION_ROLLBACK EStsAction = "Rollback"
)

// All allowed values of EStsAction enum
var AllowedEStsActionEnumValues = []EStsAction{
	"Restart",
	"Scale",
	"Rollback",
}

func (v *EStsAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EStsAction(value)
	for _, existing := range AllowedEStsActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EStsAction", value)
}

// NewEStsActionFromValue returns a pointer to a valid EStsAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEStsActionFromValue(v string) (*EStsAction, error) {
	ev := EStsAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EStsAction: valid values are %v", v, AllowedEStsActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EStsAction) IsValid() bool {
	for _, existing := range AllowedEStsActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EStsAction value
func (v EStsAction) Ptr() *EStsAction {
	return &v
}

type NullableEStsAction struct {
	value *EStsAction
	isSet bool
}

func (v NullableEStsAction) Get() *EStsAction {
	return v.value
}

func (v *NullableEStsAction) Set(val *EStsAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEStsAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEStsAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEStsAction(val *EStsAction) *NullableEStsAction {
	return &NullableEStsAction{value: val, isSet: true}
}

func (v NullableEStsAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEStsAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

