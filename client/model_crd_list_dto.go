/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CrdListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrdListDto{}

// CrdListDto struct for CrdListDto
type CrdListDto struct {
	MetadataName string `json:"metadataName"`
	SpecNameKind string `json:"specNameKind"`
	ListKind string `json:"listKind"`
	Group string `json:"group"`
	Labels interface{} `json:"labels"`
	Age NullableString `json:"age"`
}

type _CrdListDto CrdListDto

// NewCrdListDto instantiates a new CrdListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrdListDto(metadataName string, specNameKind string, listKind string, group string, labels interface{}, age NullableString) *CrdListDto {
	this := CrdListDto{}
	this.MetadataName = metadataName
	this.SpecNameKind = specNameKind
	this.ListKind = listKind
	this.Group = group
	this.Labels = labels
	this.Age = age
	return &this
}

// NewCrdListDtoWithDefaults instantiates a new CrdListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrdListDtoWithDefaults() *CrdListDto {
	this := CrdListDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *CrdListDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *CrdListDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *CrdListDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetSpecNameKind returns the SpecNameKind field value
func (o *CrdListDto) GetSpecNameKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecNameKind
}

// GetSpecNameKindOk returns a tuple with the SpecNameKind field value
// and a boolean to check if the value has been set.
func (o *CrdListDto) GetSpecNameKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecNameKind, true
}

// SetSpecNameKind sets field value
func (o *CrdListDto) SetSpecNameKind(v string) {
	o.SpecNameKind = v
}

// GetListKind returns the ListKind field value
func (o *CrdListDto) GetListKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListKind
}

// GetListKindOk returns a tuple with the ListKind field value
// and a boolean to check if the value has been set.
func (o *CrdListDto) GetListKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListKind, true
}

// SetListKind sets field value
func (o *CrdListDto) SetListKind(v string) {
	o.ListKind = v
}

// GetGroup returns the Group field value
func (o *CrdListDto) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *CrdListDto) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *CrdListDto) SetGroup(v string) {
	o.Group = v
}

// GetLabels returns the Labels field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CrdListDto) GetLabels() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CrdListDto) GetLabelsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *CrdListDto) SetLabels(v interface{}) {
	o.Labels = v
}

// GetAge returns the Age field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CrdListDto) GetAge() string {
	if o == nil || o.Age.Get() == nil {
		var ret string
		return ret
	}

	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CrdListDto) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// SetAge sets field value
func (o *CrdListDto) SetAge(v string) {
	o.Age.Set(&v)
}

func (o CrdListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrdListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["specNameKind"] = o.SpecNameKind
	toSerialize["listKind"] = o.ListKind
	toSerialize["group"] = o.Group
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["age"] = o.Age.Get()
	return toSerialize, nil
}

func (o *CrdListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"specNameKind",
		"listKind",
		"group",
		"labels",
		"age",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrdListDto := _CrdListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCrdListDto)

	if err != nil {
		return err
	}

	*o = CrdListDto(varCrdListDto)

	return err
}

type NullableCrdListDto struct {
	value *CrdListDto
	isSet bool
}

func (v NullableCrdListDto) Get() *CrdListDto {
	return v.value
}

func (v *NullableCrdListDto) Set(val *CrdListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCrdListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCrdListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrdListDto(val *CrdListDto) *NullableCrdListDto {
	return &NullableCrdListDto{value: val, isSet: true}
}

func (v NullableCrdListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrdListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


