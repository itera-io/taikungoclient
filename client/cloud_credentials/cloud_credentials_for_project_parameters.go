// Code generated by go-swagger; DO NOT EDIT.

package cloud_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCloudCredentialsForProjectParams creates a new CloudCredentialsForProjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudCredentialsForProjectParams() *CloudCredentialsForProjectParams {
	return &CloudCredentialsForProjectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudCredentialsForProjectParamsWithTimeout creates a new CloudCredentialsForProjectParams object
// with the ability to set a timeout on a request.
func NewCloudCredentialsForProjectParamsWithTimeout(timeout time.Duration) *CloudCredentialsForProjectParams {
	return &CloudCredentialsForProjectParams{
		timeout: timeout,
	}
}

// NewCloudCredentialsForProjectParamsWithContext creates a new CloudCredentialsForProjectParams object
// with the ability to set a context for a request.
func NewCloudCredentialsForProjectParamsWithContext(ctx context.Context) *CloudCredentialsForProjectParams {
	return &CloudCredentialsForProjectParams{
		Context: ctx,
	}
}

// NewCloudCredentialsForProjectParamsWithHTTPClient creates a new CloudCredentialsForProjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudCredentialsForProjectParamsWithHTTPClient(client *http.Client) *CloudCredentialsForProjectParams {
	return &CloudCredentialsForProjectParams{
		HTTPClient: client,
	}
}

/* CloudCredentialsForProjectParams contains all the parameters to send to the API endpoint
   for the cloud credentials for project operation.

   Typically these are written to a http.Request.
*/
type CloudCredentialsForProjectParams struct {

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// ProjectID.
	//
	// Format: int32
	ProjectID *int32

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud credentials for project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudCredentialsForProjectParams) WithDefaults() *CloudCredentialsForProjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud credentials for project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudCredentialsForProjectParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithTimeout(timeout time.Duration) *CloudCredentialsForProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithContext(ctx context.Context) *CloudCredentialsForProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithHTTPClient(client *http.Client) *CloudCredentialsForProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithLimit(limit *int32) *CloudCredentialsForProjectParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithOffset(offset *int32) *CloudCredentialsForProjectParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithProjectID adds the projectID to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithProjectID(projectID *int32) *CloudCredentialsForProjectParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetProjectID(projectID *int32) {
	o.ProjectID = projectID
}

// WithV adds the v to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) WithV(v string) *CloudCredentialsForProjectParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the cloud credentials for project params
func (o *CloudCredentialsForProjectParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *CloudCredentialsForProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID int32

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt32(qrProjectID)
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
