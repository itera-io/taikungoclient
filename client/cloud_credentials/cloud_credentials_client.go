// Code generated by go-swagger; DO NOT EDIT.

package cloud_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloudCredentialsAllFlavors(params *CloudCredentialsAllFlavorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsAllFlavorsOK, error)

	CloudCredentialsCloudCredentialsForOrganizationList(params *CloudCredentialsCloudCredentialsForOrganizationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsCloudCredentialsForOrganizationListOK, error)

	CloudCredentialsDashboardList(params *CloudCredentialsDashboardListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsDashboardListOK, error)

	CloudCredentialsDelete(params *CloudCredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsDeleteOK, *CloudCredentialsDeleteNoContent, error)

	CloudCredentialsLockManager(params *CloudCredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsLockManagerOK, error)

	CloudCredentialsMakeDefault(params *CloudCredentialsMakeDefaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsMakeDefaultOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CloudCredentialsAllFlavors retrieves all flavors
*/
func (a *Client) CloudCredentialsAllFlavors(params *CloudCredentialsAllFlavorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsAllFlavorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsAllFlavorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_AllFlavors",
		Method:             "GET",
		PathPattern:        "/api/v{v}/CloudCredentials/flavors/{cloudId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsAllFlavorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredentialsAllFlavorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloudCredentials_AllFlavors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudCredentialsCloudCredentialsForOrganizationList retrieves a list of cloud credentials by organization Id
*/
func (a *Client) CloudCredentialsCloudCredentialsForOrganizationList(params *CloudCredentialsCloudCredentialsForOrganizationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsCloudCredentialsForOrganizationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsCloudCredentialsForOrganizationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_CloudCredentialsForOrganizationList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/CloudCredentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsCloudCredentialsForOrganizationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredentialsCloudCredentialsForOrganizationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloudCredentials_CloudCredentialsForOrganizationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudCredentialsDashboardList retrieves all cloud credentials
*/
func (a *Client) CloudCredentialsDashboardList(params *CloudCredentialsDashboardListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsDashboardListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsDashboardListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_DashboardList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/CloudCredentials/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsDashboardListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredentialsDashboardListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloudCredentials_DashboardList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudCredentialsDelete removes cloud credential by cloud Id
*/
func (a *Client) CloudCredentialsDelete(params *CloudCredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsDeleteOK, *CloudCredentialsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/CloudCredentials/{cloudId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CloudCredentialsDeleteOK:
		return value, nil, nil
	case *CloudCredentialsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_credentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudCredentialsLockManager locks unlock cloud credential
*/
func (a *Client) CloudCredentialsLockManager(params *CloudCredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_LockManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/CloudCredentials/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredentialsLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloudCredentials_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudCredentialsMakeDefault makes cloud credentials default
*/
func (a *Client) CloudCredentialsMakeDefault(params *CloudCredentialsMakeDefaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudCredentialsMakeDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudCredentialsMakeDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudCredentials_MakeDefault",
		Method:             "POST",
		PathPattern:        "/api/v{v}/CloudCredentials/makedefault",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudCredentialsMakeDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudCredentialsMakeDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloudCredentials_MakeDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
