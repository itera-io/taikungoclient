// Code generated by go-swagger; DO NOT EDIT.

package ntp_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ntp servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ntp servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NtpServersCreate(params *NtpServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersCreateOK, error)

	NtpServersDelete(params *NtpServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersDeleteOK, *NtpServersDeleteNoContent, error)

	NtpServersEdit(params *NtpServersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersEditOK, error)

	NtpServersList(params *NtpServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NtpServersCreate creates access profile ntp server
*/
func (a *Client) NtpServersCreate(params *NtpServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNtpServersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NtpServers_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/NtpServers/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NtpServersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NtpServersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NtpServers_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NtpServersDelete deletes access profile ntp server
*/
func (a *Client) NtpServersDelete(params *NtpServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersDeleteOK, *NtpServersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNtpServersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NtpServers_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/NtpServers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NtpServersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NtpServersDeleteOK:
		return value, nil, nil
	case *NtpServersDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ntp_servers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NtpServersEdit edits access profile ntp server
*/
func (a *Client) NtpServersEdit(params *NtpServersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNtpServersEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NtpServers_Edit",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/NtpServers/edit/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NtpServersEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NtpServersEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NtpServers_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NtpServersList lists ntp servers by profile id
*/
func (a *Client) NtpServersList(params *NtpServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NtpServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNtpServersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NtpServers_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/NtpServers/list/{accessProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NtpServersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NtpServersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NtpServers_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
