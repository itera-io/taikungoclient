/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// EProjectResourceUnit the model 'EProjectResourceUnit'
type EProjectResourceUnit string

// List of EProjectResourceUnit
const (
	EPROJECTRESOURCEUNIT_CORES EProjectResourceUnit = "Cores"
	EPROJECTRESOURCEUNIT_BYTES EProjectResourceUnit = "Bytes"
)

// All allowed values of EProjectResourceUnit enum
var AllowedEProjectResourceUnitEnumValues = []EProjectResourceUnit{
	"Cores",
	"Bytes",
}

func (v *EProjectResourceUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EProjectResourceUnit(value)
	for _, existing := range AllowedEProjectResourceUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EProjectResourceUnit", value)
}

// NewEProjectResourceUnitFromValue returns a pointer to a valid EProjectResourceUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEProjectResourceUnitFromValue(v string) (*EProjectResourceUnit, error) {
	ev := EProjectResourceUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EProjectResourceUnit: valid values are %v", v, AllowedEProjectResourceUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EProjectResourceUnit) IsValid() bool {
	for _, existing := range AllowedEProjectResourceUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EProjectResourceUnit value
func (v EProjectResourceUnit) Ptr() *EProjectResourceUnit {
	return &v
}

type NullableEProjectResourceUnit struct {
	value *EProjectResourceUnit
	isSet bool
}

func (v NullableEProjectResourceUnit) Get() *EProjectResourceUnit {
	return v.value
}

func (v *NullableEProjectResourceUnit) Set(val *EProjectResourceUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableEProjectResourceUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableEProjectResourceUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEProjectResourceUnit(val *EProjectResourceUnit) *NullableEProjectResourceUnit {
	return &NullableEProjectResourceUnit{value: val, isSet: true}
}

func (v NullableEProjectResourceUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEProjectResourceUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

