// Code generated by go-swagger; DO NOT EDIT.

package taikun_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new taikun groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for taikun groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TaikunGroupsCreate(params *TaikunGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsCreateOK, error)

	TaikunGroupsDelete(params *TaikunGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsDeleteOK, *TaikunGroupsDeleteNoContent, error)

	TaikunGroupsList(params *TaikunGroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsListOK, error)

	TaikunGroupsUpdate(params *TaikunGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TaikunGroupsCreate adds taikun groups
*/
func (a *Client) TaikunGroupsCreate(params *TaikunGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaikunGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaikunGroups_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/TaikunGroups/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TaikunGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaikunGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TaikunGroups_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaikunGroupsDelete removes taikun group
*/
func (a *Client) TaikunGroupsDelete(params *TaikunGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsDeleteOK, *TaikunGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaikunGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaikunGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/TaikunGroups/{taikunGroupId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TaikunGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TaikunGroupsDeleteOK:
		return value, nil, nil
	case *TaikunGroupsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for taikun_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaikunGroupsList retrieves list of taikun groups
*/
func (a *Client) TaikunGroupsList(params *TaikunGroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaikunGroupsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaikunGroups_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/TaikunGroups/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TaikunGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaikunGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TaikunGroups_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TaikunGroupsUpdate updates taikun groups
*/
func (a *Client) TaikunGroupsUpdate(params *TaikunGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaikunGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaikunGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaikunGroups_Update",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/TaikunGroups/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TaikunGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaikunGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TaikunGroups_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
