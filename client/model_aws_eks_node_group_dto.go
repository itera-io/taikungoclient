/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AwsEksNodeGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEksNodeGroupDto{}

// AwsEksNodeGroupDto struct for AwsEksNodeGroupDto
type AwsEksNodeGroupDto struct {
	Name NullableString `json:"name,omitempty"`
	Role NullableString `json:"role,omitempty"`
	AmiType NullableString `json:"amiType,omitempty"`
	AmiReleaseVersion NullableString `json:"amiReleaseVersion,omitempty"`
	Arn NullableString `json:"arn,omitempty"`
	CapacityType NullableString `json:"capacityType,omitempty"`
	HealthIssues []string `json:"healthIssues,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Version NullableString `json:"version,omitempty"`
	Created NullableString `json:"created,omitempty"`
	DiskSize *int32 `json:"diskSize,omitempty"`
	DesiredSize *int32 `json:"desiredSize,omitempty"`
	MaxSize *int32 `json:"maxSize,omitempty"`
	MinSize *int32 `json:"minSize,omitempty"`
	InstanceTypes []string `json:"instanceTypes,omitempty"`
}

// NewAwsEksNodeGroupDto instantiates a new AwsEksNodeGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEksNodeGroupDto() *AwsEksNodeGroupDto {
	this := AwsEksNodeGroupDto{}
	return &this
}

// NewAwsEksNodeGroupDtoWithDefaults instantiates a new AwsEksNodeGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEksNodeGroupDtoWithDefaults() *AwsEksNodeGroupDto {
	this := AwsEksNodeGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AwsEksNodeGroupDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AwsEksNodeGroupDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetName() {
	o.Name.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *AwsEksNodeGroupDto) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *AwsEksNodeGroupDto) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetRole() {
	o.Role.Unset()
}

// GetAmiType returns the AmiType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetAmiType() string {
	if o == nil || IsNil(o.AmiType.Get()) {
		var ret string
		return ret
	}
	return *o.AmiType.Get()
}

// GetAmiTypeOk returns a tuple with the AmiType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetAmiTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmiType.Get(), o.AmiType.IsSet()
}

// HasAmiType returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasAmiType() bool {
	if o != nil && o.AmiType.IsSet() {
		return true
	}

	return false
}

// SetAmiType gets a reference to the given NullableString and assigns it to the AmiType field.
func (o *AwsEksNodeGroupDto) SetAmiType(v string) {
	o.AmiType.Set(&v)
}
// SetAmiTypeNil sets the value for AmiType to be an explicit nil
func (o *AwsEksNodeGroupDto) SetAmiTypeNil() {
	o.AmiType.Set(nil)
}

// UnsetAmiType ensures that no value is present for AmiType, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetAmiType() {
	o.AmiType.Unset()
}

// GetAmiReleaseVersion returns the AmiReleaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetAmiReleaseVersion() string {
	if o == nil || IsNil(o.AmiReleaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AmiReleaseVersion.Get()
}

// GetAmiReleaseVersionOk returns a tuple with the AmiReleaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetAmiReleaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmiReleaseVersion.Get(), o.AmiReleaseVersion.IsSet()
}

// HasAmiReleaseVersion returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasAmiReleaseVersion() bool {
	if o != nil && o.AmiReleaseVersion.IsSet() {
		return true
	}

	return false
}

// SetAmiReleaseVersion gets a reference to the given NullableString and assigns it to the AmiReleaseVersion field.
func (o *AwsEksNodeGroupDto) SetAmiReleaseVersion(v string) {
	o.AmiReleaseVersion.Set(&v)
}
// SetAmiReleaseVersionNil sets the value for AmiReleaseVersion to be an explicit nil
func (o *AwsEksNodeGroupDto) SetAmiReleaseVersionNil() {
	o.AmiReleaseVersion.Set(nil)
}

// UnsetAmiReleaseVersion ensures that no value is present for AmiReleaseVersion, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetAmiReleaseVersion() {
	o.AmiReleaseVersion.Unset()
}

// GetArn returns the Arn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetArn() string {
	if o == nil || IsNil(o.Arn.Get()) {
		var ret string
		return ret
	}
	return *o.Arn.Get()
}

// GetArnOk returns a tuple with the Arn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Arn.Get(), o.Arn.IsSet()
}

// HasArn returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasArn() bool {
	if o != nil && o.Arn.IsSet() {
		return true
	}

	return false
}

// SetArn gets a reference to the given NullableString and assigns it to the Arn field.
func (o *AwsEksNodeGroupDto) SetArn(v string) {
	o.Arn.Set(&v)
}
// SetArnNil sets the value for Arn to be an explicit nil
func (o *AwsEksNodeGroupDto) SetArnNil() {
	o.Arn.Set(nil)
}

// UnsetArn ensures that no value is present for Arn, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetArn() {
	o.Arn.Unset()
}

// GetCapacityType returns the CapacityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetCapacityType() string {
	if o == nil || IsNil(o.CapacityType.Get()) {
		var ret string
		return ret
	}
	return *o.CapacityType.Get()
}

// GetCapacityTypeOk returns a tuple with the CapacityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetCapacityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapacityType.Get(), o.CapacityType.IsSet()
}

// HasCapacityType returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasCapacityType() bool {
	if o != nil && o.CapacityType.IsSet() {
		return true
	}

	return false
}

// SetCapacityType gets a reference to the given NullableString and assigns it to the CapacityType field.
func (o *AwsEksNodeGroupDto) SetCapacityType(v string) {
	o.CapacityType.Set(&v)
}
// SetCapacityTypeNil sets the value for CapacityType to be an explicit nil
func (o *AwsEksNodeGroupDto) SetCapacityTypeNil() {
	o.CapacityType.Set(nil)
}

// UnsetCapacityType ensures that no value is present for CapacityType, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetCapacityType() {
	o.CapacityType.Unset()
}

// GetHealthIssues returns the HealthIssues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetHealthIssues() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HealthIssues
}

// GetHealthIssuesOk returns a tuple with the HealthIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetHealthIssuesOk() ([]string, bool) {
	if o == nil || IsNil(o.HealthIssues) {
		return nil, false
	}
	return o.HealthIssues, true
}

// HasHealthIssues returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasHealthIssues() bool {
	if o != nil && !IsNil(o.HealthIssues) {
		return true
	}

	return false
}

// SetHealthIssues gets a reference to the given []string and assigns it to the HealthIssues field.
func (o *AwsEksNodeGroupDto) SetHealthIssues(v []string) {
	o.HealthIssues = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *AwsEksNodeGroupDto) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AwsEksNodeGroupDto) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetStatus() {
	o.Status.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *AwsEksNodeGroupDto) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *AwsEksNodeGroupDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetVersion() {
	o.Version.Unset()
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetCreated() string {
	if o == nil || IsNil(o.Created.Get()) {
		var ret string
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableString and assigns it to the Created field.
func (o *AwsEksNodeGroupDto) SetCreated(v string) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *AwsEksNodeGroupDto) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *AwsEksNodeGroupDto) UnsetCreated() {
	o.Created.Unset()
}

// GetDiskSize returns the DiskSize field value if set, zero value otherwise.
func (o *AwsEksNodeGroupDto) GetDiskSize() int32 {
	if o == nil || IsNil(o.DiskSize) {
		var ret int32
		return ret
	}
	return *o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEksNodeGroupDto) GetDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskSize) {
		return nil, false
	}
	return o.DiskSize, true
}

// HasDiskSize returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasDiskSize() bool {
	if o != nil && !IsNil(o.DiskSize) {
		return true
	}

	return false
}

// SetDiskSize gets a reference to the given int32 and assigns it to the DiskSize field.
func (o *AwsEksNodeGroupDto) SetDiskSize(v int32) {
	o.DiskSize = &v
}

// GetDesiredSize returns the DesiredSize field value if set, zero value otherwise.
func (o *AwsEksNodeGroupDto) GetDesiredSize() int32 {
	if o == nil || IsNil(o.DesiredSize) {
		var ret int32
		return ret
	}
	return *o.DesiredSize
}

// GetDesiredSizeOk returns a tuple with the DesiredSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEksNodeGroupDto) GetDesiredSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DesiredSize) {
		return nil, false
	}
	return o.DesiredSize, true
}

// HasDesiredSize returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasDesiredSize() bool {
	if o != nil && !IsNil(o.DesiredSize) {
		return true
	}

	return false
}

// SetDesiredSize gets a reference to the given int32 and assigns it to the DesiredSize field.
func (o *AwsEksNodeGroupDto) SetDesiredSize(v int32) {
	o.DesiredSize = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *AwsEksNodeGroupDto) GetMaxSize() int32 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int32
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEksNodeGroupDto) GetMaxSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int32 and assigns it to the MaxSize field.
func (o *AwsEksNodeGroupDto) SetMaxSize(v int32) {
	o.MaxSize = &v
}

// GetMinSize returns the MinSize field value if set, zero value otherwise.
func (o *AwsEksNodeGroupDto) GetMinSize() int32 {
	if o == nil || IsNil(o.MinSize) {
		var ret int32
		return ret
	}
	return *o.MinSize
}

// GetMinSizeOk returns a tuple with the MinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEksNodeGroupDto) GetMinSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSize) {
		return nil, false
	}
	return o.MinSize, true
}

// HasMinSize returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasMinSize() bool {
	if o != nil && !IsNil(o.MinSize) {
		return true
	}

	return false
}

// SetMinSize gets a reference to the given int32 and assigns it to the MinSize field.
func (o *AwsEksNodeGroupDto) SetMinSize(v int32) {
	o.MinSize = &v
}

// GetInstanceTypes returns the InstanceTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEksNodeGroupDto) GetInstanceTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEksNodeGroupDto) GetInstanceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.InstanceTypes) {
		return nil, false
	}
	return o.InstanceTypes, true
}

// HasInstanceTypes returns a boolean if a field has been set.
func (o *AwsEksNodeGroupDto) HasInstanceTypes() bool {
	if o != nil && !IsNil(o.InstanceTypes) {
		return true
	}

	return false
}

// SetInstanceTypes gets a reference to the given []string and assigns it to the InstanceTypes field.
func (o *AwsEksNodeGroupDto) SetInstanceTypes(v []string) {
	o.InstanceTypes = v
}

func (o AwsEksNodeGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEksNodeGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.AmiType.IsSet() {
		toSerialize["amiType"] = o.AmiType.Get()
	}
	if o.AmiReleaseVersion.IsSet() {
		toSerialize["amiReleaseVersion"] = o.AmiReleaseVersion.Get()
	}
	if o.Arn.IsSet() {
		toSerialize["arn"] = o.Arn.Get()
	}
	if o.CapacityType.IsSet() {
		toSerialize["capacityType"] = o.CapacityType.Get()
	}
	if o.HealthIssues != nil {
		toSerialize["healthIssues"] = o.HealthIssues
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	if !IsNil(o.DiskSize) {
		toSerialize["diskSize"] = o.DiskSize
	}
	if !IsNil(o.DesiredSize) {
		toSerialize["desiredSize"] = o.DesiredSize
	}
	if !IsNil(o.MaxSize) {
		toSerialize["maxSize"] = o.MaxSize
	}
	if !IsNil(o.MinSize) {
		toSerialize["minSize"] = o.MinSize
	}
	if o.InstanceTypes != nil {
		toSerialize["instanceTypes"] = o.InstanceTypes
	}
	return toSerialize, nil
}

type NullableAwsEksNodeGroupDto struct {
	value *AwsEksNodeGroupDto
	isSet bool
}

func (v NullableAwsEksNodeGroupDto) Get() *AwsEksNodeGroupDto {
	return v.value
}

func (v *NullableAwsEksNodeGroupDto) Set(val *AwsEksNodeGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEksNodeGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEksNodeGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEksNodeGroupDto(val *AwsEksNodeGroupDto) *NullableAwsEksNodeGroupDto {
	return &NullableAwsEksNodeGroupDto{value: val, isSet: true}
}

func (v NullableAwsEksNodeGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEksNodeGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


