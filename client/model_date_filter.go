/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// DateFilter the model 'DateFilter'
type DateFilter string

// List of DateFilter
const (
	DATEFILTER_MONTHLY       DateFilter = "Monthly"
	DATEFILTER_THREE_MONTHLY DateFilter = "ThreeMonthly"
	DATEFILTER_SIX_MONTHLY   DateFilter = "SixMonthly"
	DATEFILTER_YEARLY        DateFilter = "Yearly"
)

// All allowed values of DateFilter enum
var AllowedDateFilterEnumValues = []DateFilter{
	"Monthly",
	"ThreeMonthly",
	"SixMonthly",
	"Yearly",
}

func (v *DateFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DateFilter(value)
	for _, existing := range AllowedDateFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DateFilter", value)
}

// NewDateFilterFromValue returns a pointer to a valid DateFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDateFilterFromValue(v string) (*DateFilter, error) {
	ev := DateFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DateFilter: valid values are %v", v, AllowedDateFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DateFilter) IsValid() bool {
	for _, existing := range AllowedDateFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DateFilter value
func (v DateFilter) Ptr() *DateFilter {
	return &v
}

type NullableDateFilter struct {
	value *DateFilter
	isSet bool
}

func (v NullableDateFilter) Get() *DateFilter {
	return v.value
}

func (v *NullableDateFilter) Set(val *DateFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDateFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDateFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateFilter(val *DateFilter) *NullableDateFilter {
	return &NullableDateFilter{value: val, isSet: true}
}

func (v NullableDateFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
