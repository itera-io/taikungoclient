/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the BindUsersToUserGroupCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindUsersToUserGroupCommand{}

// BindUsersToUserGroupCommand struct for BindUsersToUserGroupCommand
type BindUsersToUserGroupCommand struct {
	UserGroupId *int32 `json:"userGroupId,omitempty"`
	UserIds []string `json:"userIds,omitempty"`
}

// NewBindUsersToUserGroupCommand instantiates a new BindUsersToUserGroupCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindUsersToUserGroupCommand() *BindUsersToUserGroupCommand {
	this := BindUsersToUserGroupCommand{}
	return &this
}

// NewBindUsersToUserGroupCommandWithDefaults instantiates a new BindUsersToUserGroupCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindUsersToUserGroupCommandWithDefaults() *BindUsersToUserGroupCommand {
	this := BindUsersToUserGroupCommand{}
	return &this
}

// GetUserGroupId returns the UserGroupId field value if set, zero value otherwise.
func (o *BindUsersToUserGroupCommand) GetUserGroupId() int32 {
	if o == nil || IsNil(o.UserGroupId) {
		var ret int32
		return ret
	}
	return *o.UserGroupId
}

// GetUserGroupIdOk returns a tuple with the UserGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindUsersToUserGroupCommand) GetUserGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserGroupId) {
		return nil, false
	}
	return o.UserGroupId, true
}

// HasUserGroupId returns a boolean if a field has been set.
func (o *BindUsersToUserGroupCommand) HasUserGroupId() bool {
	if o != nil && !IsNil(o.UserGroupId) {
		return true
	}

	return false
}

// SetUserGroupId gets a reference to the given int32 and assigns it to the UserGroupId field.
func (o *BindUsersToUserGroupCommand) SetUserGroupId(v int32) {
	o.UserGroupId = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindUsersToUserGroupCommand) GetUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindUsersToUserGroupCommand) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *BindUsersToUserGroupCommand) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *BindUsersToUserGroupCommand) SetUserIds(v []string) {
	o.UserIds = v
}

func (o BindUsersToUserGroupCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindUsersToUserGroupCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserGroupId) {
		toSerialize["userGroupId"] = o.UserGroupId
	}
	if o.UserIds != nil {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableBindUsersToUserGroupCommand struct {
	value *BindUsersToUserGroupCommand
	isSet bool
}

func (v NullableBindUsersToUserGroupCommand) Get() *BindUsersToUserGroupCommand {
	return v.value
}

func (v *NullableBindUsersToUserGroupCommand) Set(val *BindUsersToUserGroupCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableBindUsersToUserGroupCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableBindUsersToUserGroupCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindUsersToUserGroupCommand(val *BindUsersToUserGroupCommand) *NullableBindUsersToUserGroupCommand {
	return &NullableBindUsersToUserGroupCommand{value: val, isSet: true}
}

func (v NullableBindUsersToUserGroupCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindUsersToUserGroupCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


