/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the Subresource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subresource{}

// Subresource struct for Subresource
type Subresource struct {
	Name           NullableString  `json:"name,omitempty"`
	Metadata       *Metadata       `json:"metadata,omitempty"`
	HourlyCost     NullableString  `json:"hourlyCost,omitempty"`
	MonthlyCost    NullableString  `json:"monthlyCost,omitempty"`
	CostComponents []CostComponent `json:"costComponents,omitempty"`
}

// NewSubresource instantiates a new Subresource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubresource() *Subresource {
	this := Subresource{}
	return &this
}

// NewSubresourceWithDefaults instantiates a new Subresource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubresourceWithDefaults() *Subresource {
	this := Subresource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subresource) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subresource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Subresource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Subresource) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Subresource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Subresource) UnsetName() {
	o.Name.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Subresource) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subresource) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Subresource) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *Subresource) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetHourlyCost returns the HourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subresource) GetHourlyCost() string {
	if o == nil || IsNil(o.HourlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.HourlyCost.Get()
}

// GetHourlyCostOk returns a tuple with the HourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subresource) GetHourlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyCost.Get(), o.HourlyCost.IsSet()
}

// HasHourlyCost returns a boolean if a field has been set.
func (o *Subresource) HasHourlyCost() bool {
	if o != nil && o.HourlyCost.IsSet() {
		return true
	}

	return false
}

// SetHourlyCost gets a reference to the given NullableString and assigns it to the HourlyCost field.
func (o *Subresource) SetHourlyCost(v string) {
	o.HourlyCost.Set(&v)
}

// SetHourlyCostNil sets the value for HourlyCost to be an explicit nil
func (o *Subresource) SetHourlyCostNil() {
	o.HourlyCost.Set(nil)
}

// UnsetHourlyCost ensures that no value is present for HourlyCost, not even an explicit nil
func (o *Subresource) UnsetHourlyCost() {
	o.HourlyCost.Unset()
}

// GetMonthlyCost returns the MonthlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subresource) GetMonthlyCost() string {
	if o == nil || IsNil(o.MonthlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.MonthlyCost.Get()
}

// GetMonthlyCostOk returns a tuple with the MonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subresource) GetMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonthlyCost.Get(), o.MonthlyCost.IsSet()
}

// HasMonthlyCost returns a boolean if a field has been set.
func (o *Subresource) HasMonthlyCost() bool {
	if o != nil && o.MonthlyCost.IsSet() {
		return true
	}

	return false
}

// SetMonthlyCost gets a reference to the given NullableString and assigns it to the MonthlyCost field.
func (o *Subresource) SetMonthlyCost(v string) {
	o.MonthlyCost.Set(&v)
}

// SetMonthlyCostNil sets the value for MonthlyCost to be an explicit nil
func (o *Subresource) SetMonthlyCostNil() {
	o.MonthlyCost.Set(nil)
}

// UnsetMonthlyCost ensures that no value is present for MonthlyCost, not even an explicit nil
func (o *Subresource) UnsetMonthlyCost() {
	o.MonthlyCost.Unset()
}

// GetCostComponents returns the CostComponents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subresource) GetCostComponents() []CostComponent {
	if o == nil {
		var ret []CostComponent
		return ret
	}
	return o.CostComponents
}

// GetCostComponentsOk returns a tuple with the CostComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subresource) GetCostComponentsOk() ([]CostComponent, bool) {
	if o == nil || IsNil(o.CostComponents) {
		return nil, false
	}
	return o.CostComponents, true
}

// HasCostComponents returns a boolean if a field has been set.
func (o *Subresource) HasCostComponents() bool {
	if o != nil && IsNil(o.CostComponents) {
		return true
	}

	return false
}

// SetCostComponents gets a reference to the given []CostComponent and assigns it to the CostComponents field.
func (o *Subresource) SetCostComponents(v []CostComponent) {
	o.CostComponents = v
}

func (o Subresource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subresource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if o.HourlyCost.IsSet() {
		toSerialize["hourlyCost"] = o.HourlyCost.Get()
	}
	if o.MonthlyCost.IsSet() {
		toSerialize["monthlyCost"] = o.MonthlyCost.Get()
	}
	if o.CostComponents != nil {
		toSerialize["costComponents"] = o.CostComponents
	}
	return toSerialize, nil
}

type NullableSubresource struct {
	value *Subresource
	isSet bool
}

func (v NullableSubresource) Get() *Subresource {
	return v.value
}

func (v *NullableSubresource) Set(val *Subresource) {
	v.value = val
	v.isSet = true
}

func (v NullableSubresource) IsSet() bool {
	return v.isSet
}

func (v *NullableSubresource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubresource(val *Subresource) *NullableSubresource {
	return &NullableSubresource{value: val, isSet: true}
}

func (v NullableSubresource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubresource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
