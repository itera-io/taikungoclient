/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectInfracost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectInfracost{}

// ProjectInfracost struct for ProjectInfracost
type ProjectInfracost struct {
	Name *string `json:"name,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Metadata *ProjectMetadata `json:"metadata,omitempty"`
	PastBreakdown *Breakdown `json:"pastBreakdown,omitempty"`
	Breakdown *Breakdown `json:"breakdown,omitempty"`
	Diff *Diff `json:"diff,omitempty"`
	Summary *Summary `json:"summary,omitempty"`
}

// NewProjectInfracost instantiates a new ProjectInfracost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectInfracost() *ProjectInfracost {
	this := ProjectInfracost{}
	return &this
}

// NewProjectInfracostWithDefaults instantiates a new ProjectInfracost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectInfracostWithDefaults() *ProjectInfracost {
	this := ProjectInfracost{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectInfracost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectInfracost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectInfracost) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ProjectInfracost) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ProjectInfracost) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ProjectInfracost) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ProjectInfracost) GetMetadata() ProjectMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ProjectMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetMetadataOk() (*ProjectMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProjectInfracost) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ProjectMetadata and assigns it to the Metadata field.
func (o *ProjectInfracost) SetMetadata(v ProjectMetadata) {
	o.Metadata = &v
}

// GetPastBreakdown returns the PastBreakdown field value if set, zero value otherwise.
func (o *ProjectInfracost) GetPastBreakdown() Breakdown {
	if o == nil || IsNil(o.PastBreakdown) {
		var ret Breakdown
		return ret
	}
	return *o.PastBreakdown
}

// GetPastBreakdownOk returns a tuple with the PastBreakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetPastBreakdownOk() (*Breakdown, bool) {
	if o == nil || IsNil(o.PastBreakdown) {
		return nil, false
	}
	return o.PastBreakdown, true
}

// HasPastBreakdown returns a boolean if a field has been set.
func (o *ProjectInfracost) HasPastBreakdown() bool {
	if o != nil && !IsNil(o.PastBreakdown) {
		return true
	}

	return false
}

// SetPastBreakdown gets a reference to the given Breakdown and assigns it to the PastBreakdown field.
func (o *ProjectInfracost) SetPastBreakdown(v Breakdown) {
	o.PastBreakdown = &v
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *ProjectInfracost) GetBreakdown() Breakdown {
	if o == nil || IsNil(o.Breakdown) {
		var ret Breakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetBreakdownOk() (*Breakdown, bool) {
	if o == nil || IsNil(o.Breakdown) {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *ProjectInfracost) HasBreakdown() bool {
	if o != nil && !IsNil(o.Breakdown) {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given Breakdown and assigns it to the Breakdown field.
func (o *ProjectInfracost) SetBreakdown(v Breakdown) {
	o.Breakdown = &v
}

// GetDiff returns the Diff field value if set, zero value otherwise.
func (o *ProjectInfracost) GetDiff() Diff {
	if o == nil || IsNil(o.Diff) {
		var ret Diff
		return ret
	}
	return *o.Diff
}

// GetDiffOk returns a tuple with the Diff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetDiffOk() (*Diff, bool) {
	if o == nil || IsNil(o.Diff) {
		return nil, false
	}
	return o.Diff, true
}

// HasDiff returns a boolean if a field has been set.
func (o *ProjectInfracost) HasDiff() bool {
	if o != nil && !IsNil(o.Diff) {
		return true
	}

	return false
}

// SetDiff gets a reference to the given Diff and assigns it to the Diff field.
func (o *ProjectInfracost) SetDiff(v Diff) {
	o.Diff = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ProjectInfracost) GetSummary() Summary {
	if o == nil || IsNil(o.Summary) {
		var ret Summary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfracost) GetSummaryOk() (*Summary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ProjectInfracost) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given Summary and assigns it to the Summary field.
func (o *ProjectInfracost) SetSummary(v Summary) {
	o.Summary = &v
}

func (o ProjectInfracost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectInfracost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.PastBreakdown) {
		toSerialize["pastBreakdown"] = o.PastBreakdown
	}
	if !IsNil(o.Breakdown) {
		toSerialize["breakdown"] = o.Breakdown
	}
	if !IsNil(o.Diff) {
		toSerialize["diff"] = o.Diff
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

type NullableProjectInfracost struct {
	value *ProjectInfracost
	isSet bool
}

func (v NullableProjectInfracost) Get() *ProjectInfracost {
	return v.value
}

func (v *NullableProjectInfracost) Set(val *ProjectInfracost) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectInfracost) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectInfracost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectInfracost(val *ProjectInfracost) *NullableProjectInfracost {
	return &NullableProjectInfracost{value: val, isSet: true}
}

func (v NullableProjectInfracost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectInfracost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


