/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AddProjectsToCatalogCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddProjectsToCatalogCommand{}

// AddProjectsToCatalogCommand struct for AddProjectsToCatalogCommand
type AddProjectsToCatalogCommand struct {
	Projects []int32 `json:"projects,omitempty"`
	CatalogId *int32 `json:"catalogId,omitempty"`
}

// NewAddProjectsToCatalogCommand instantiates a new AddProjectsToCatalogCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddProjectsToCatalogCommand() *AddProjectsToCatalogCommand {
	this := AddProjectsToCatalogCommand{}
	return &this
}

// NewAddProjectsToCatalogCommandWithDefaults instantiates a new AddProjectsToCatalogCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddProjectsToCatalogCommandWithDefaults() *AddProjectsToCatalogCommand {
	this := AddProjectsToCatalogCommand{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddProjectsToCatalogCommand) GetProjects() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddProjectsToCatalogCommand) GetProjectsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *AddProjectsToCatalogCommand) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []int32 and assigns it to the Projects field.
func (o *AddProjectsToCatalogCommand) SetProjects(v []int32) {
	o.Projects = v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *AddProjectsToCatalogCommand) GetCatalogId() int32 {
	if o == nil || IsNil(o.CatalogId) {
		var ret int32
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProjectsToCatalogCommand) GetCatalogIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *AddProjectsToCatalogCommand) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given int32 and assigns it to the CatalogId field.
func (o *AddProjectsToCatalogCommand) SetCatalogId(v int32) {
	o.CatalogId = &v
}

func (o AddProjectsToCatalogCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddProjectsToCatalogCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.CatalogId) {
		toSerialize["catalogId"] = o.CatalogId
	}
	return toSerialize, nil
}

type NullableAddProjectsToCatalogCommand struct {
	value *AddProjectsToCatalogCommand
	isSet bool
}

func (v NullableAddProjectsToCatalogCommand) Get() *AddProjectsToCatalogCommand {
	return v.value
}

func (v *NullableAddProjectsToCatalogCommand) Set(val *AddProjectsToCatalogCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableAddProjectsToCatalogCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableAddProjectsToCatalogCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddProjectsToCatalogCommand(val *AddProjectsToCatalogCommand) *NullableAddProjectsToCatalogCommand {
	return &NullableAddProjectsToCatalogCommand{value: val, isSet: true}
}

func (v NullableAddProjectsToCatalogCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddProjectsToCatalogCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


