/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the BridgeListCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgeListCommand{}

// BridgeListCommand struct for BridgeListCommand
type BridgeListCommand struct {
	Url *string `json:"url,omitempty"`
	TokenId *string `json:"tokenId,omitempty"`
	TokenSecret *string `json:"tokenSecret,omitempty"`
	Hypervisor *string `json:"hypervisor,omitempty"`
}

// NewBridgeListCommand instantiates a new BridgeListCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgeListCommand() *BridgeListCommand {
	this := BridgeListCommand{}
	return &this
}

// NewBridgeListCommandWithDefaults instantiates a new BridgeListCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgeListCommandWithDefaults() *BridgeListCommand {
	this := BridgeListCommand{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *BridgeListCommand) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeListCommand) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *BridgeListCommand) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *BridgeListCommand) SetUrl(v string) {
	o.Url = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *BridgeListCommand) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeListCommand) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *BridgeListCommand) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *BridgeListCommand) SetTokenId(v string) {
	o.TokenId = &v
}

// GetTokenSecret returns the TokenSecret field value if set, zero value otherwise.
func (o *BridgeListCommand) GetTokenSecret() string {
	if o == nil || IsNil(o.TokenSecret) {
		var ret string
		return ret
	}
	return *o.TokenSecret
}

// GetTokenSecretOk returns a tuple with the TokenSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeListCommand) GetTokenSecretOk() (*string, bool) {
	if o == nil || IsNil(o.TokenSecret) {
		return nil, false
	}
	return o.TokenSecret, true
}

// HasTokenSecret returns a boolean if a field has been set.
func (o *BridgeListCommand) HasTokenSecret() bool {
	if o != nil && !IsNil(o.TokenSecret) {
		return true
	}

	return false
}

// SetTokenSecret gets a reference to the given string and assigns it to the TokenSecret field.
func (o *BridgeListCommand) SetTokenSecret(v string) {
	o.TokenSecret = &v
}

// GetHypervisor returns the Hypervisor field value if set, zero value otherwise.
func (o *BridgeListCommand) GetHypervisor() string {
	if o == nil || IsNil(o.Hypervisor) {
		var ret string
		return ret
	}
	return *o.Hypervisor
}

// GetHypervisorOk returns a tuple with the Hypervisor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeListCommand) GetHypervisorOk() (*string, bool) {
	if o == nil || IsNil(o.Hypervisor) {
		return nil, false
	}
	return o.Hypervisor, true
}

// HasHypervisor returns a boolean if a field has been set.
func (o *BridgeListCommand) HasHypervisor() bool {
	if o != nil && !IsNil(o.Hypervisor) {
		return true
	}

	return false
}

// SetHypervisor gets a reference to the given string and assigns it to the Hypervisor field.
func (o *BridgeListCommand) SetHypervisor(v string) {
	o.Hypervisor = &v
}

func (o BridgeListCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgeListCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.TokenId) {
		toSerialize["tokenId"] = o.TokenId
	}
	if !IsNil(o.TokenSecret) {
		toSerialize["tokenSecret"] = o.TokenSecret
	}
	if !IsNil(o.Hypervisor) {
		toSerialize["hypervisor"] = o.Hypervisor
	}
	return toSerialize, nil
}

type NullableBridgeListCommand struct {
	value *BridgeListCommand
	isSet bool
}

func (v NullableBridgeListCommand) Get() *BridgeListCommand {
	return v.value
}

func (v *NullableBridgeListCommand) Set(val *BridgeListCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeListCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeListCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeListCommand(val *BridgeListCommand) *NullableBridgeListCommand {
	return &NullableBridgeListCommand{value: val, isSet: true}
}

func (v NullableBridgeListCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeListCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


