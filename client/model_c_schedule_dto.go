/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CScheduleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CScheduleDto{}

// CScheduleDto struct for CScheduleDto
type CScheduleDto struct {
	Status *Status `json:"status,omitempty"`
	MetadataName NullableString `json:"metadataName"`
	Namespace NullableString `json:"namespace"`
	CreatedAt NullableTime `json:"createdAt"`
	Schedule NullableString `json:"schedule"`
	Ttl NullableString `json:"ttl"`
	LastBackup NullableTime `json:"lastBackup"`
	Phase NullableString `json:"phase"`
	ExcludedNamespaces []string `json:"excludedNamespaces"`
	IncludedNamespaces []string `json:"includedNamespaces"`
}

type _CScheduleDto CScheduleDto

// NewCScheduleDto instantiates a new CScheduleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCScheduleDto(metadataName NullableString, namespace NullableString, createdAt NullableTime, schedule NullableString, ttl NullableString, lastBackup NullableTime, phase NullableString, excludedNamespaces []string, includedNamespaces []string) *CScheduleDto {
	this := CScheduleDto{}
	this.MetadataName = metadataName
	this.Namespace = namespace
	this.CreatedAt = createdAt
	this.Schedule = schedule
	this.Ttl = ttl
	this.LastBackup = lastBackup
	this.Phase = phase
	this.ExcludedNamespaces = excludedNamespaces
	this.IncludedNamespaces = includedNamespaces
	return &this
}

// NewCScheduleDtoWithDefaults instantiates a new CScheduleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCScheduleDtoWithDefaults() *CScheduleDto {
	this := CScheduleDto{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CScheduleDto) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CScheduleDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *CScheduleDto) SetStatus(v Status) {
	o.Status = &v
}

// GetMetadataName returns the MetadataName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CScheduleDto) GetMetadataName() string {
	if o == nil || o.MetadataName.Get() == nil {
		var ret string
		return ret
	}

	return *o.MetadataName.Get()
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataName.Get(), o.MetadataName.IsSet()
}

// SetMetadataName sets field value
func (o *CScheduleDto) SetMetadataName(v string) {
	o.MetadataName.Set(&v)
}

// GetNamespace returns the Namespace field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CScheduleDto) GetNamespace() string {
	if o == nil || o.Namespace.Get() == nil {
		var ret string
		return ret
	}

	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// SetNamespace sets field value
func (o *CScheduleDto) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CScheduleDto) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *CScheduleDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetSchedule returns the Schedule field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CScheduleDto) GetSchedule() string {
	if o == nil || o.Schedule.Get() == nil {
		var ret string
		return ret
	}

	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// SetSchedule sets field value
func (o *CScheduleDto) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// GetTtl returns the Ttl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CScheduleDto) GetTtl() string {
	if o == nil || o.Ttl.Get() == nil {
		var ret string
		return ret
	}

	return *o.Ttl.Get()
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetTtlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ttl.Get(), o.Ttl.IsSet()
}

// SetTtl sets field value
func (o *CScheduleDto) SetTtl(v string) {
	o.Ttl.Set(&v)
}

// GetLastBackup returns the LastBackup field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CScheduleDto) GetLastBackup() time.Time {
	if o == nil || o.LastBackup.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastBackup.Get()
}

// GetLastBackupOk returns a tuple with the LastBackup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetLastBackupOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastBackup.Get(), o.LastBackup.IsSet()
}

// SetLastBackup sets field value
func (o *CScheduleDto) SetLastBackup(v time.Time) {
	o.LastBackup.Set(&v)
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CScheduleDto) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *CScheduleDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

// GetExcludedNamespaces returns the ExcludedNamespaces field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *CScheduleDto) GetExcludedNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedNamespaces
}

// GetExcludedNamespacesOk returns a tuple with the ExcludedNamespaces field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetExcludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedNamespaces) {
		return nil, false
	}
	return o.ExcludedNamespaces, true
}

// SetExcludedNamespaces sets field value
func (o *CScheduleDto) SetExcludedNamespaces(v []string) {
	o.ExcludedNamespaces = v
}

// GetIncludedNamespaces returns the IncludedNamespaces field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *CScheduleDto) GetIncludedNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedNamespaces
}

// GetIncludedNamespacesOk returns a tuple with the IncludedNamespaces field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CScheduleDto) GetIncludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedNamespaces) {
		return nil, false
	}
	return o.IncludedNamespaces, true
}

// SetIncludedNamespaces sets field value
func (o *CScheduleDto) SetIncludedNamespaces(v []string) {
	o.IncludedNamespaces = v
}

func (o CScheduleDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CScheduleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["metadataName"] = o.MetadataName.Get()
	toSerialize["namespace"] = o.Namespace.Get()
	toSerialize["createdAt"] = o.CreatedAt.Get()
	toSerialize["schedule"] = o.Schedule.Get()
	toSerialize["ttl"] = o.Ttl.Get()
	toSerialize["lastBackup"] = o.LastBackup.Get()
	toSerialize["phase"] = o.Phase.Get()
	if o.ExcludedNamespaces != nil {
		toSerialize["excludedNamespaces"] = o.ExcludedNamespaces
	}
	if o.IncludedNamespaces != nil {
		toSerialize["includedNamespaces"] = o.IncludedNamespaces
	}
	return toSerialize, nil
}

func (o *CScheduleDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"namespace",
		"createdAt",
		"schedule",
		"ttl",
		"lastBackup",
		"phase",
		"excludedNamespaces",
		"includedNamespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCScheduleDto := _CScheduleDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCScheduleDto)

	if err != nil {
		return err
	}

	*o = CScheduleDto(varCScheduleDto)

	return err
}

type NullableCScheduleDto struct {
	value *CScheduleDto
	isSet bool
}

func (v NullableCScheduleDto) Get() *CScheduleDto {
	return v.value
}

func (v *NullableCScheduleDto) Set(val *CScheduleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCScheduleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCScheduleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCScheduleDto(val *CScheduleDto) *NullableCScheduleDto {
	return &NullableCScheduleDto{value: val, isSet: true}
}

func (v NullableCScheduleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCScheduleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


