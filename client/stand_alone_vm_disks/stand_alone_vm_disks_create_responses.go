// Code generated by go-swagger; DO NOT EDIT.

package stand_alone_vm_disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandAloneVMDisksCreateReader is a Reader for the StandAloneVMDisksCreate structure.
type StandAloneVMDisksCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneVMDisksCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneVMDisksCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneVMDisksCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneVMDisksCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneVMDisksCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneVMDisksCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneVMDisksCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneVMDisksCreateOK creates a StandAloneVMDisksCreateOK with default headers values
func NewStandAloneVMDisksCreateOK() *StandAloneVMDisksCreateOK {
	return &StandAloneVMDisksCreateOK{}
}

/*
StandAloneVMDisksCreateOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneVMDisksCreateOK struct {
	Payload *StandAloneVMDisksCreateOKBody
}

// IsSuccess returns true when this stand alone Vm disks create o k response has a 2xx status code
func (o *StandAloneVMDisksCreateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone Vm disks create o k response has a 3xx status code
func (o *StandAloneVMDisksCreateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create o k response has a 4xx status code
func (o *StandAloneVMDisksCreateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone Vm disks create o k response has a 5xx status code
func (o *StandAloneVMDisksCreateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks create o k response a status code equal to that given
func (o *StandAloneVMDisksCreateOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneVMDisksCreateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateOK  %+v", 200, o.Payload)
}

func (o *StandAloneVMDisksCreateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateOK  %+v", 200, o.Payload)
}

func (o *StandAloneVMDisksCreateOK) GetPayload() *StandAloneVMDisksCreateOKBody {
	return o.Payload
}

func (o *StandAloneVMDisksCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksCreateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksCreateBadRequest creates a StandAloneVMDisksCreateBadRequest with default headers values
func NewStandAloneVMDisksCreateBadRequest() *StandAloneVMDisksCreateBadRequest {
	return &StandAloneVMDisksCreateBadRequest{}
}

/*
StandAloneVMDisksCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneVMDisksCreateBadRequest struct {
	Payload []*StandAloneVMDisksCreateBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone Vm disks create bad request response has a 2xx status code
func (o *StandAloneVMDisksCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks create bad request response has a 3xx status code
func (o *StandAloneVMDisksCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create bad request response has a 4xx status code
func (o *StandAloneVMDisksCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks create bad request response has a 5xx status code
func (o *StandAloneVMDisksCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks create bad request response a status code equal to that given
func (o *StandAloneVMDisksCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneVMDisksCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneVMDisksCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneVMDisksCreateBadRequest) GetPayload() []*StandAloneVMDisksCreateBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneVMDisksCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksCreateUnauthorized creates a StandAloneVMDisksCreateUnauthorized with default headers values
func NewStandAloneVMDisksCreateUnauthorized() *StandAloneVMDisksCreateUnauthorized {
	return &StandAloneVMDisksCreateUnauthorized{}
}

/*
StandAloneVMDisksCreateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneVMDisksCreateUnauthorized struct {
	Payload *StandAloneVMDisksCreateUnauthorizedBody
}

// IsSuccess returns true when this stand alone Vm disks create unauthorized response has a 2xx status code
func (o *StandAloneVMDisksCreateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks create unauthorized response has a 3xx status code
func (o *StandAloneVMDisksCreateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create unauthorized response has a 4xx status code
func (o *StandAloneVMDisksCreateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks create unauthorized response has a 5xx status code
func (o *StandAloneVMDisksCreateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks create unauthorized response a status code equal to that given
func (o *StandAloneVMDisksCreateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneVMDisksCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneVMDisksCreateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneVMDisksCreateUnauthorized) GetPayload() *StandAloneVMDisksCreateUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneVMDisksCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksCreateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksCreateForbidden creates a StandAloneVMDisksCreateForbidden with default headers values
func NewStandAloneVMDisksCreateForbidden() *StandAloneVMDisksCreateForbidden {
	return &StandAloneVMDisksCreateForbidden{}
}

/*
StandAloneVMDisksCreateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneVMDisksCreateForbidden struct {
	Payload *StandAloneVMDisksCreateForbiddenBody
}

// IsSuccess returns true when this stand alone Vm disks create forbidden response has a 2xx status code
func (o *StandAloneVMDisksCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks create forbidden response has a 3xx status code
func (o *StandAloneVMDisksCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create forbidden response has a 4xx status code
func (o *StandAloneVMDisksCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks create forbidden response has a 5xx status code
func (o *StandAloneVMDisksCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks create forbidden response a status code equal to that given
func (o *StandAloneVMDisksCreateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneVMDisksCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneVMDisksCreateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneVMDisksCreateForbidden) GetPayload() *StandAloneVMDisksCreateForbiddenBody {
	return o.Payload
}

func (o *StandAloneVMDisksCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksCreateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksCreateNotFound creates a StandAloneVMDisksCreateNotFound with default headers values
func NewStandAloneVMDisksCreateNotFound() *StandAloneVMDisksCreateNotFound {
	return &StandAloneVMDisksCreateNotFound{}
}

/*
StandAloneVMDisksCreateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneVMDisksCreateNotFound struct {
	Payload *StandAloneVMDisksCreateNotFoundBody
}

// IsSuccess returns true when this stand alone Vm disks create not found response has a 2xx status code
func (o *StandAloneVMDisksCreateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks create not found response has a 3xx status code
func (o *StandAloneVMDisksCreateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create not found response has a 4xx status code
func (o *StandAloneVMDisksCreateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks create not found response has a 5xx status code
func (o *StandAloneVMDisksCreateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks create not found response a status code equal to that given
func (o *StandAloneVMDisksCreateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneVMDisksCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneVMDisksCreateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneVMDisksCreateNotFound) GetPayload() *StandAloneVMDisksCreateNotFoundBody {
	return o.Payload
}

func (o *StandAloneVMDisksCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksCreateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksCreateInternalServerError creates a StandAloneVMDisksCreateInternalServerError with default headers values
func NewStandAloneVMDisksCreateInternalServerError() *StandAloneVMDisksCreateInternalServerError {
	return &StandAloneVMDisksCreateInternalServerError{}
}

/*
StandAloneVMDisksCreateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneVMDisksCreateInternalServerError struct {
}

// IsSuccess returns true when this stand alone Vm disks create internal server error response has a 2xx status code
func (o *StandAloneVMDisksCreateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks create internal server error response has a 3xx status code
func (o *StandAloneVMDisksCreateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks create internal server error response has a 4xx status code
func (o *StandAloneVMDisksCreateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone Vm disks create internal server error response has a 5xx status code
func (o *StandAloneVMDisksCreateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone Vm disks create internal server error response a status code equal to that given
func (o *StandAloneVMDisksCreateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneVMDisksCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateInternalServerError ", 500)
}

func (o *StandAloneVMDisksCreateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/create][%d] standAloneVmDisksCreateInternalServerError ", 500)
}

func (o *StandAloneVMDisksCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneVMDisksCreateBadRequestBodyItems0 stand alone VM disks create bad request body items0
swagger:model StandAloneVMDisksCreateBadRequestBodyItems0
*/
type StandAloneVMDisksCreateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone VM disks create bad request body items0
func (o *StandAloneVMDisksCreateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create bad request body items0 based on context it is used
func (o *StandAloneVMDisksCreateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksCreateBody stand alone VM disks create body
swagger:model StandAloneVMDisksCreateBody
*/
type StandAloneVMDisksCreateBody struct {

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// lun Id
	LunID int32 `json:"lunId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// standalone Vm Id
	StandaloneVMID int32 `json:"standaloneVmId,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this stand alone VM disks create body
func (o *StandAloneVMDisksCreateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create body based on context it is used
func (o *StandAloneVMDisksCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksCreateForbiddenBody stand alone VM disks create forbidden body
swagger:model StandAloneVMDisksCreateForbiddenBody
*/
type StandAloneVMDisksCreateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks create forbidden body
func (o *StandAloneVMDisksCreateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create forbidden body based on context it is used
func (o *StandAloneVMDisksCreateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksCreateNotFoundBody stand alone VM disks create not found body
swagger:model StandAloneVMDisksCreateNotFoundBody
*/
type StandAloneVMDisksCreateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks create not found body
func (o *StandAloneVMDisksCreateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create not found body based on context it is used
func (o *StandAloneVMDisksCreateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksCreateOKBody stand alone VM disks create o k body
swagger:model StandAloneVMDisksCreateOKBody
*/
type StandAloneVMDisksCreateOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// is error
	IsError bool `json:"isError"`

	// message
	Message string `json:"message,omitempty"`

	// result
	Result interface{} `json:"result,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this stand alone VM disks create o k body
func (o *StandAloneVMDisksCreateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create o k body based on context it is used
func (o *StandAloneVMDisksCreateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateOKBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksCreateUnauthorizedBody stand alone VM disks create unauthorized body
swagger:model StandAloneVMDisksCreateUnauthorizedBody
*/
type StandAloneVMDisksCreateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks create unauthorized body
func (o *StandAloneVMDisksCreateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks create unauthorized body based on context it is used
func (o *StandAloneVMDisksCreateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksCreateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksCreateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksCreateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
