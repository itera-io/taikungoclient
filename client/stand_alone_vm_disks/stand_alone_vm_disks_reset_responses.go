// Code generated by go-swagger; DO NOT EDIT.

package stand_alone_vm_disks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandAloneVMDisksResetReader is a Reader for the StandAloneVMDisksReset structure.
type StandAloneVMDisksResetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StandAloneVMDisksResetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStandAloneVMDisksResetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStandAloneVMDisksResetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStandAloneVMDisksResetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStandAloneVMDisksResetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStandAloneVMDisksResetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStandAloneVMDisksResetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStandAloneVMDisksResetOK creates a StandAloneVMDisksResetOK with default headers values
func NewStandAloneVMDisksResetOK() *StandAloneVMDisksResetOK {
	return &StandAloneVMDisksResetOK{}
}

/*
StandAloneVMDisksResetOK describes a response with status code 200, with default header values.

Success
*/
type StandAloneVMDisksResetOK struct {
	Payload interface{}
}

// IsSuccess returns true when this stand alone Vm disks reset o k response has a 2xx status code
func (o *StandAloneVMDisksResetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stand alone Vm disks reset o k response has a 3xx status code
func (o *StandAloneVMDisksResetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset o k response has a 4xx status code
func (o *StandAloneVMDisksResetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone Vm disks reset o k response has a 5xx status code
func (o *StandAloneVMDisksResetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks reset o k response a status code equal to that given
func (o *StandAloneVMDisksResetOK) IsCode(code int) bool {
	return code == 200
}

func (o *StandAloneVMDisksResetOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetOK  %+v", 200, o.Payload)
}

func (o *StandAloneVMDisksResetOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetOK  %+v", 200, o.Payload)
}

func (o *StandAloneVMDisksResetOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StandAloneVMDisksResetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksResetBadRequest creates a StandAloneVMDisksResetBadRequest with default headers values
func NewStandAloneVMDisksResetBadRequest() *StandAloneVMDisksResetBadRequest {
	return &StandAloneVMDisksResetBadRequest{}
}

/*
StandAloneVMDisksResetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StandAloneVMDisksResetBadRequest struct {
	Payload []*StandAloneVMDisksResetBadRequestBodyItems0
}

// IsSuccess returns true when this stand alone Vm disks reset bad request response has a 2xx status code
func (o *StandAloneVMDisksResetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks reset bad request response has a 3xx status code
func (o *StandAloneVMDisksResetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset bad request response has a 4xx status code
func (o *StandAloneVMDisksResetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks reset bad request response has a 5xx status code
func (o *StandAloneVMDisksResetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks reset bad request response a status code equal to that given
func (o *StandAloneVMDisksResetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *StandAloneVMDisksResetBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneVMDisksResetBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetBadRequest  %+v", 400, o.Payload)
}

func (o *StandAloneVMDisksResetBadRequest) GetPayload() []*StandAloneVMDisksResetBadRequestBodyItems0 {
	return o.Payload
}

func (o *StandAloneVMDisksResetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksResetUnauthorized creates a StandAloneVMDisksResetUnauthorized with default headers values
func NewStandAloneVMDisksResetUnauthorized() *StandAloneVMDisksResetUnauthorized {
	return &StandAloneVMDisksResetUnauthorized{}
}

/*
StandAloneVMDisksResetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StandAloneVMDisksResetUnauthorized struct {
	Payload *StandAloneVMDisksResetUnauthorizedBody
}

// IsSuccess returns true when this stand alone Vm disks reset unauthorized response has a 2xx status code
func (o *StandAloneVMDisksResetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks reset unauthorized response has a 3xx status code
func (o *StandAloneVMDisksResetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset unauthorized response has a 4xx status code
func (o *StandAloneVMDisksResetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks reset unauthorized response has a 5xx status code
func (o *StandAloneVMDisksResetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks reset unauthorized response a status code equal to that given
func (o *StandAloneVMDisksResetUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *StandAloneVMDisksResetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneVMDisksResetUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetUnauthorized  %+v", 401, o.Payload)
}

func (o *StandAloneVMDisksResetUnauthorized) GetPayload() *StandAloneVMDisksResetUnauthorizedBody {
	return o.Payload
}

func (o *StandAloneVMDisksResetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksResetUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksResetForbidden creates a StandAloneVMDisksResetForbidden with default headers values
func NewStandAloneVMDisksResetForbidden() *StandAloneVMDisksResetForbidden {
	return &StandAloneVMDisksResetForbidden{}
}

/*
StandAloneVMDisksResetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StandAloneVMDisksResetForbidden struct {
	Payload *StandAloneVMDisksResetForbiddenBody
}

// IsSuccess returns true when this stand alone Vm disks reset forbidden response has a 2xx status code
func (o *StandAloneVMDisksResetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks reset forbidden response has a 3xx status code
func (o *StandAloneVMDisksResetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset forbidden response has a 4xx status code
func (o *StandAloneVMDisksResetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks reset forbidden response has a 5xx status code
func (o *StandAloneVMDisksResetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks reset forbidden response a status code equal to that given
func (o *StandAloneVMDisksResetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *StandAloneVMDisksResetForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneVMDisksResetForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetForbidden  %+v", 403, o.Payload)
}

func (o *StandAloneVMDisksResetForbidden) GetPayload() *StandAloneVMDisksResetForbiddenBody {
	return o.Payload
}

func (o *StandAloneVMDisksResetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksResetForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksResetNotFound creates a StandAloneVMDisksResetNotFound with default headers values
func NewStandAloneVMDisksResetNotFound() *StandAloneVMDisksResetNotFound {
	return &StandAloneVMDisksResetNotFound{}
}

/*
StandAloneVMDisksResetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StandAloneVMDisksResetNotFound struct {
	Payload *StandAloneVMDisksResetNotFoundBody
}

// IsSuccess returns true when this stand alone Vm disks reset not found response has a 2xx status code
func (o *StandAloneVMDisksResetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks reset not found response has a 3xx status code
func (o *StandAloneVMDisksResetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset not found response has a 4xx status code
func (o *StandAloneVMDisksResetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stand alone Vm disks reset not found response has a 5xx status code
func (o *StandAloneVMDisksResetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stand alone Vm disks reset not found response a status code equal to that given
func (o *StandAloneVMDisksResetNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *StandAloneVMDisksResetNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneVMDisksResetNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetNotFound  %+v", 404, o.Payload)
}

func (o *StandAloneVMDisksResetNotFound) GetPayload() *StandAloneVMDisksResetNotFoundBody {
	return o.Payload
}

func (o *StandAloneVMDisksResetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StandAloneVMDisksResetNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStandAloneVMDisksResetInternalServerError creates a StandAloneVMDisksResetInternalServerError with default headers values
func NewStandAloneVMDisksResetInternalServerError() *StandAloneVMDisksResetInternalServerError {
	return &StandAloneVMDisksResetInternalServerError{}
}

/*
StandAloneVMDisksResetInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type StandAloneVMDisksResetInternalServerError struct {
}

// IsSuccess returns true when this stand alone Vm disks reset internal server error response has a 2xx status code
func (o *StandAloneVMDisksResetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stand alone Vm disks reset internal server error response has a 3xx status code
func (o *StandAloneVMDisksResetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stand alone Vm disks reset internal server error response has a 4xx status code
func (o *StandAloneVMDisksResetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stand alone Vm disks reset internal server error response has a 5xx status code
func (o *StandAloneVMDisksResetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stand alone Vm disks reset internal server error response a status code equal to that given
func (o *StandAloneVMDisksResetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *StandAloneVMDisksResetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetInternalServerError ", 500)
}

func (o *StandAloneVMDisksResetInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/StandAloneVmDisks/reset][%d] standAloneVmDisksResetInternalServerError ", 500)
}

func (o *StandAloneVMDisksResetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
StandAloneVMDisksResetBadRequestBodyItems0 stand alone VM disks reset bad request body items0
swagger:model StandAloneVMDisksResetBadRequestBodyItems0
*/
type StandAloneVMDisksResetBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this stand alone VM disks reset bad request body items0
func (o *StandAloneVMDisksResetBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks reset bad request body items0 based on context it is used
func (o *StandAloneVMDisksResetBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksResetBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksResetBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksResetBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksResetBody stand alone VM disks reset body
swagger:model StandAloneVMDisksResetBody
*/
type StandAloneVMDisksResetBody struct {

	// disk ids
	DiskIds []int32 `json:"diskIds"`

	// stand alone Vm Id
	StandAloneVMID int32 `json:"standAloneVmId,omitempty"`

	// status
	// Enum: [100 200 300 400 500 600]
	Status int32 `json:"status,omitempty"`
}

// Validate validates this stand alone VM disks reset body
func (o *StandAloneVMDisksResetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var standAloneVmDisksResetBodyTypeStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,300,400,500,600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		standAloneVmDisksResetBodyTypeStatusPropEnum = append(standAloneVmDisksResetBodyTypeStatusPropEnum, v)
	}
}

// prop value enum
func (o *StandAloneVMDisksResetBody) validateStatusEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, standAloneVmDisksResetBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StandAloneVMDisksResetBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("body"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stand alone VM disks reset body based on context it is used
func (o *StandAloneVMDisksResetBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksResetBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksResetBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksResetBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksResetForbiddenBody stand alone VM disks reset forbidden body
swagger:model StandAloneVMDisksResetForbiddenBody
*/
type StandAloneVMDisksResetForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks reset forbidden body
func (o *StandAloneVMDisksResetForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks reset forbidden body based on context it is used
func (o *StandAloneVMDisksResetForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksResetForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksResetForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksResetForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksResetNotFoundBody stand alone VM disks reset not found body
swagger:model StandAloneVMDisksResetNotFoundBody
*/
type StandAloneVMDisksResetNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks reset not found body
func (o *StandAloneVMDisksResetNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks reset not found body based on context it is used
func (o *StandAloneVMDisksResetNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksResetNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksResetNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksResetNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
StandAloneVMDisksResetUnauthorizedBody stand alone VM disks reset unauthorized body
swagger:model StandAloneVMDisksResetUnauthorizedBody
*/
type StandAloneVMDisksResetUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stand alone VM disks reset unauthorized body
func (o *StandAloneVMDisksResetUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stand alone VM disks reset unauthorized body based on context it is used
func (o *StandAloneVMDisksResetUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StandAloneVMDisksResetUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StandAloneVMDisksResetUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res StandAloneVMDisksResetUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
