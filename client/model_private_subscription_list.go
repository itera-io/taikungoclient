/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the PrivateSubscriptionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateSubscriptionList{}

// PrivateSubscriptionList struct for PrivateSubscriptionList
type PrivateSubscriptionList struct {
	Data []ListForPartnersDto `json:"data,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
	IsEligibleToSwitch *bool `json:"isEligibleToSwitch,omitempty"`
	ActiveSubscriptionStatus *string `json:"activeSubscriptionStatus,omitempty"`
}

// NewPrivateSubscriptionList instantiates a new PrivateSubscriptionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateSubscriptionList() *PrivateSubscriptionList {
	this := PrivateSubscriptionList{}
	return &this
}

// NewPrivateSubscriptionListWithDefaults instantiates a new PrivateSubscriptionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateSubscriptionListWithDefaults() *PrivateSubscriptionList {
	this := PrivateSubscriptionList{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PrivateSubscriptionList) GetData() []ListForPartnersDto {
	if o == nil || IsNil(o.Data) {
		var ret []ListForPartnersDto
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSubscriptionList) GetDataOk() ([]ListForPartnersDto, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PrivateSubscriptionList) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ListForPartnersDto and assigns it to the Data field.
func (o *PrivateSubscriptionList) SetData(v []ListForPartnersDto) {
	o.Data = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *PrivateSubscriptionList) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSubscriptionList) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *PrivateSubscriptionList) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *PrivateSubscriptionList) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetIsEligibleToSwitch returns the IsEligibleToSwitch field value if set, zero value otherwise.
func (o *PrivateSubscriptionList) GetIsEligibleToSwitch() bool {
	if o == nil || IsNil(o.IsEligibleToSwitch) {
		var ret bool
		return ret
	}
	return *o.IsEligibleToSwitch
}

// GetIsEligibleToSwitchOk returns a tuple with the IsEligibleToSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSubscriptionList) GetIsEligibleToSwitchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEligibleToSwitch) {
		return nil, false
	}
	return o.IsEligibleToSwitch, true
}

// HasIsEligibleToSwitch returns a boolean if a field has been set.
func (o *PrivateSubscriptionList) HasIsEligibleToSwitch() bool {
	if o != nil && !IsNil(o.IsEligibleToSwitch) {
		return true
	}

	return false
}

// SetIsEligibleToSwitch gets a reference to the given bool and assigns it to the IsEligibleToSwitch field.
func (o *PrivateSubscriptionList) SetIsEligibleToSwitch(v bool) {
	o.IsEligibleToSwitch = &v
}

// GetActiveSubscriptionStatus returns the ActiveSubscriptionStatus field value if set, zero value otherwise.
func (o *PrivateSubscriptionList) GetActiveSubscriptionStatus() string {
	if o == nil || IsNil(o.ActiveSubscriptionStatus) {
		var ret string
		return ret
	}
	return *o.ActiveSubscriptionStatus
}

// GetActiveSubscriptionStatusOk returns a tuple with the ActiveSubscriptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSubscriptionList) GetActiveSubscriptionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveSubscriptionStatus) {
		return nil, false
	}
	return o.ActiveSubscriptionStatus, true
}

// HasActiveSubscriptionStatus returns a boolean if a field has been set.
func (o *PrivateSubscriptionList) HasActiveSubscriptionStatus() bool {
	if o != nil && !IsNil(o.ActiveSubscriptionStatus) {
		return true
	}

	return false
}

// SetActiveSubscriptionStatus gets a reference to the given string and assigns it to the ActiveSubscriptionStatus field.
func (o *PrivateSubscriptionList) SetActiveSubscriptionStatus(v string) {
	o.ActiveSubscriptionStatus = &v
}

func (o PrivateSubscriptionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateSubscriptionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.IsEligibleToSwitch) {
		toSerialize["isEligibleToSwitch"] = o.IsEligibleToSwitch
	}
	if !IsNil(o.ActiveSubscriptionStatus) {
		toSerialize["activeSubscriptionStatus"] = o.ActiveSubscriptionStatus
	}
	return toSerialize, nil
}

type NullablePrivateSubscriptionList struct {
	value *PrivateSubscriptionList
	isSet bool
}

func (v NullablePrivateSubscriptionList) Get() *PrivateSubscriptionList {
	return v.value
}

func (v *NullablePrivateSubscriptionList) Set(val *PrivateSubscriptionList) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateSubscriptionList) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateSubscriptionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateSubscriptionList(val *PrivateSubscriptionList) *NullablePrivateSubscriptionList {
	return &NullablePrivateSubscriptionList{value: val, isSet: true}
}

func (v NullablePrivateSubscriptionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateSubscriptionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


