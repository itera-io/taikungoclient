// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServersCreate(params *ServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersCreateOK, error)

	ServersDelete(params *ServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersDeleteOK, *ServersDeleteNoContent, error)

	ServersList(params *ServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersListOK, error)

	ServersReboot(params *ServersRebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersRebootOK, error)

	ServersShowServerStatus(params *ServersShowServerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersShowServerStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServersCreate creates a new server in the given project
*/
func (a *Client) ServersCreate(params *ServersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Servers_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Servers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Servers_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServersDelete deletes servers by project Id
*/
func (a *Client) ServersDelete(params *ServersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersDeleteOK, *ServersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Servers_Delete",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Servers/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ServersDeleteOK:
		return value, nil, nil
	case *ServersDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for servers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServersList lists all servers according to roles
*/
func (a *Client) ServersList(params *ServersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Servers_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Servers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Servers_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServersReboot reboots servers
*/
func (a *Client) ServersReboot(params *ServersRebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersRebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersRebootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Servers_Reboot",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Servers/reboot",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersRebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServersRebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Servers_Reboot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServersShowServerStatus shows server status
*/
func (a *Client) ServersShowServerStatus(params *ServersShowServerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServersShowServerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersShowServerStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Servers_ShowServerStatus",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Servers/status/{serverId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersShowServerStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServersShowServerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Servers_ShowServerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
