// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServersShowServerStatusReader is a Reader for the ServersShowServerStatus structure.
type ServersShowServerStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersShowServerStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServersShowServerStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServersShowServerStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServersShowServerStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServersShowServerStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewServersShowServerStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServersShowServerStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServersShowServerStatusOK creates a ServersShowServerStatusOK with default headers values
func NewServersShowServerStatusOK() *ServersShowServerStatusOK {
	return &ServersShowServerStatusOK{}
}

/*
ServersShowServerStatusOK describes a response with status code 200, with default header values.

Success
*/
type ServersShowServerStatusOK struct {
	Payload string
}

// IsSuccess returns true when this servers show server status o k response has a 2xx status code
func (o *ServersShowServerStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this servers show server status o k response has a 3xx status code
func (o *ServersShowServerStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status o k response has a 4xx status code
func (o *ServersShowServerStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers show server status o k response has a 5xx status code
func (o *ServersShowServerStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this servers show server status o k response a status code equal to that given
func (o *ServersShowServerStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *ServersShowServerStatusOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusOK  %+v", 200, o.Payload)
}

func (o *ServersShowServerStatusOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusOK  %+v", 200, o.Payload)
}

func (o *ServersShowServerStatusOK) GetPayload() string {
	return o.Payload
}

func (o *ServersShowServerStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersShowServerStatusBadRequest creates a ServersShowServerStatusBadRequest with default headers values
func NewServersShowServerStatusBadRequest() *ServersShowServerStatusBadRequest {
	return &ServersShowServerStatusBadRequest{}
}

/*
ServersShowServerStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServersShowServerStatusBadRequest struct {
	Payload []*ServersShowServerStatusBadRequestBodyItems0
}

// IsSuccess returns true when this servers show server status bad request response has a 2xx status code
func (o *ServersShowServerStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers show server status bad request response has a 3xx status code
func (o *ServersShowServerStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status bad request response has a 4xx status code
func (o *ServersShowServerStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers show server status bad request response has a 5xx status code
func (o *ServersShowServerStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this servers show server status bad request response a status code equal to that given
func (o *ServersShowServerStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ServersShowServerStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ServersShowServerStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ServersShowServerStatusBadRequest) GetPayload() []*ServersShowServerStatusBadRequestBodyItems0 {
	return o.Payload
}

func (o *ServersShowServerStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersShowServerStatusUnauthorized creates a ServersShowServerStatusUnauthorized with default headers values
func NewServersShowServerStatusUnauthorized() *ServersShowServerStatusUnauthorized {
	return &ServersShowServerStatusUnauthorized{}
}

/*
ServersShowServerStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServersShowServerStatusUnauthorized struct {
	Payload *ServersShowServerStatusUnauthorizedBody
}

// IsSuccess returns true when this servers show server status unauthorized response has a 2xx status code
func (o *ServersShowServerStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers show server status unauthorized response has a 3xx status code
func (o *ServersShowServerStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status unauthorized response has a 4xx status code
func (o *ServersShowServerStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers show server status unauthorized response has a 5xx status code
func (o *ServersShowServerStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this servers show server status unauthorized response a status code equal to that given
func (o *ServersShowServerStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ServersShowServerStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersShowServerStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersShowServerStatusUnauthorized) GetPayload() *ServersShowServerStatusUnauthorizedBody {
	return o.Payload
}

func (o *ServersShowServerStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersShowServerStatusUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersShowServerStatusForbidden creates a ServersShowServerStatusForbidden with default headers values
func NewServersShowServerStatusForbidden() *ServersShowServerStatusForbidden {
	return &ServersShowServerStatusForbidden{}
}

/*
ServersShowServerStatusForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServersShowServerStatusForbidden struct {
	Payload *ServersShowServerStatusForbiddenBody
}

// IsSuccess returns true when this servers show server status forbidden response has a 2xx status code
func (o *ServersShowServerStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers show server status forbidden response has a 3xx status code
func (o *ServersShowServerStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status forbidden response has a 4xx status code
func (o *ServersShowServerStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers show server status forbidden response has a 5xx status code
func (o *ServersShowServerStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this servers show server status forbidden response a status code equal to that given
func (o *ServersShowServerStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ServersShowServerStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusForbidden  %+v", 403, o.Payload)
}

func (o *ServersShowServerStatusForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusForbidden  %+v", 403, o.Payload)
}

func (o *ServersShowServerStatusForbidden) GetPayload() *ServersShowServerStatusForbiddenBody {
	return o.Payload
}

func (o *ServersShowServerStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersShowServerStatusForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersShowServerStatusNotFound creates a ServersShowServerStatusNotFound with default headers values
func NewServersShowServerStatusNotFound() *ServersShowServerStatusNotFound {
	return &ServersShowServerStatusNotFound{}
}

/*
ServersShowServerStatusNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ServersShowServerStatusNotFound struct {
	Payload *ServersShowServerStatusNotFoundBody
}

// IsSuccess returns true when this servers show server status not found response has a 2xx status code
func (o *ServersShowServerStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers show server status not found response has a 3xx status code
func (o *ServersShowServerStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status not found response has a 4xx status code
func (o *ServersShowServerStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers show server status not found response has a 5xx status code
func (o *ServersShowServerStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this servers show server status not found response a status code equal to that given
func (o *ServersShowServerStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ServersShowServerStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusNotFound  %+v", 404, o.Payload)
}

func (o *ServersShowServerStatusNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusNotFound  %+v", 404, o.Payload)
}

func (o *ServersShowServerStatusNotFound) GetPayload() *ServersShowServerStatusNotFoundBody {
	return o.Payload
}

func (o *ServersShowServerStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersShowServerStatusNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersShowServerStatusInternalServerError creates a ServersShowServerStatusInternalServerError with default headers values
func NewServersShowServerStatusInternalServerError() *ServersShowServerStatusInternalServerError {
	return &ServersShowServerStatusInternalServerError{}
}

/*
ServersShowServerStatusInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ServersShowServerStatusInternalServerError struct {
}

// IsSuccess returns true when this servers show server status internal server error response has a 2xx status code
func (o *ServersShowServerStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers show server status internal server error response has a 3xx status code
func (o *ServersShowServerStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers show server status internal server error response has a 4xx status code
func (o *ServersShowServerStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers show server status internal server error response has a 5xx status code
func (o *ServersShowServerStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this servers show server status internal server error response a status code equal to that given
func (o *ServersShowServerStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ServersShowServerStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusInternalServerError ", 500)
}

func (o *ServersShowServerStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Servers/status/{serverId}][%d] serversShowServerStatusInternalServerError ", 500)
}

func (o *ServersShowServerStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ServersShowServerStatusBadRequestBodyItems0 servers show server status bad request body items0
swagger:model ServersShowServerStatusBadRequestBodyItems0
*/
type ServersShowServerStatusBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this servers show server status bad request body items0
func (o *ServersShowServerStatusBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers show server status bad request body items0 based on context it is used
func (o *ServersShowServerStatusBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersShowServerStatusBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersShowServerStatusBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ServersShowServerStatusBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersShowServerStatusForbiddenBody servers show server status forbidden body
swagger:model ServersShowServerStatusForbiddenBody
*/
type ServersShowServerStatusForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers show server status forbidden body
func (o *ServersShowServerStatusForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers show server status forbidden body based on context it is used
func (o *ServersShowServerStatusForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersShowServerStatusForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersShowServerStatusForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ServersShowServerStatusForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersShowServerStatusNotFoundBody servers show server status not found body
swagger:model ServersShowServerStatusNotFoundBody
*/
type ServersShowServerStatusNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers show server status not found body
func (o *ServersShowServerStatusNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers show server status not found body based on context it is used
func (o *ServersShowServerStatusNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersShowServerStatusNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersShowServerStatusNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ServersShowServerStatusNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersShowServerStatusUnauthorizedBody servers show server status unauthorized body
swagger:model ServersShowServerStatusUnauthorizedBody
*/
type ServersShowServerStatusUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers show server status unauthorized body
func (o *ServersShowServerStatusUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers show server status unauthorized body based on context it is used
func (o *ServersShowServerStatusUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersShowServerStatusUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersShowServerStatusUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ServersShowServerStatusUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
