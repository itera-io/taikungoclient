// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServersConsoleReader is a Reader for the ServersConsole structure.
type ServersConsoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersConsoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServersConsoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServersConsoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServersConsoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServersConsoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewServersConsoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServersConsoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServersConsoleOK creates a ServersConsoleOK with default headers values
func NewServersConsoleOK() *ServersConsoleOK {
	return &ServersConsoleOK{}
}

/*
ServersConsoleOK describes a response with status code 200, with default header values.

Success
*/
type ServersConsoleOK struct {
	Payload string
}

// IsSuccess returns true when this servers console o k response has a 2xx status code
func (o *ServersConsoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this servers console o k response has a 3xx status code
func (o *ServersConsoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console o k response has a 4xx status code
func (o *ServersConsoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers console o k response has a 5xx status code
func (o *ServersConsoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this servers console o k response a status code equal to that given
func (o *ServersConsoleOK) IsCode(code int) bool {
	return code == 200
}

func (o *ServersConsoleOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleOK  %+v", 200, o.Payload)
}

func (o *ServersConsoleOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleOK  %+v", 200, o.Payload)
}

func (o *ServersConsoleOK) GetPayload() string {
	return o.Payload
}

func (o *ServersConsoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleBadRequest creates a ServersConsoleBadRequest with default headers values
func NewServersConsoleBadRequest() *ServersConsoleBadRequest {
	return &ServersConsoleBadRequest{}
}

/*
ServersConsoleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServersConsoleBadRequest struct {
	Payload []*ServersConsoleBadRequestBodyItems0
}

// IsSuccess returns true when this servers console bad request response has a 2xx status code
func (o *ServersConsoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers console bad request response has a 3xx status code
func (o *ServersConsoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console bad request response has a 4xx status code
func (o *ServersConsoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers console bad request response has a 5xx status code
func (o *ServersConsoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this servers console bad request response a status code equal to that given
func (o *ServersConsoleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ServersConsoleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleBadRequest  %+v", 400, o.Payload)
}

func (o *ServersConsoleBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleBadRequest  %+v", 400, o.Payload)
}

func (o *ServersConsoleBadRequest) GetPayload() []*ServersConsoleBadRequestBodyItems0 {
	return o.Payload
}

func (o *ServersConsoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleUnauthorized creates a ServersConsoleUnauthorized with default headers values
func NewServersConsoleUnauthorized() *ServersConsoleUnauthorized {
	return &ServersConsoleUnauthorized{}
}

/*
ServersConsoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServersConsoleUnauthorized struct {
	Payload *ServersConsoleUnauthorizedBody
}

// IsSuccess returns true when this servers console unauthorized response has a 2xx status code
func (o *ServersConsoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers console unauthorized response has a 3xx status code
func (o *ServersConsoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console unauthorized response has a 4xx status code
func (o *ServersConsoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers console unauthorized response has a 5xx status code
func (o *ServersConsoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this servers console unauthorized response a status code equal to that given
func (o *ServersConsoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ServersConsoleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersConsoleUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersConsoleUnauthorized) GetPayload() *ServersConsoleUnauthorizedBody {
	return o.Payload
}

func (o *ServersConsoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersConsoleUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleForbidden creates a ServersConsoleForbidden with default headers values
func NewServersConsoleForbidden() *ServersConsoleForbidden {
	return &ServersConsoleForbidden{}
}

/*
ServersConsoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServersConsoleForbidden struct {
	Payload *ServersConsoleForbiddenBody
}

// IsSuccess returns true when this servers console forbidden response has a 2xx status code
func (o *ServersConsoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers console forbidden response has a 3xx status code
func (o *ServersConsoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console forbidden response has a 4xx status code
func (o *ServersConsoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers console forbidden response has a 5xx status code
func (o *ServersConsoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this servers console forbidden response a status code equal to that given
func (o *ServersConsoleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ServersConsoleForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleForbidden  %+v", 403, o.Payload)
}

func (o *ServersConsoleForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleForbidden  %+v", 403, o.Payload)
}

func (o *ServersConsoleForbidden) GetPayload() *ServersConsoleForbiddenBody {
	return o.Payload
}

func (o *ServersConsoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersConsoleForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleNotFound creates a ServersConsoleNotFound with default headers values
func NewServersConsoleNotFound() *ServersConsoleNotFound {
	return &ServersConsoleNotFound{}
}

/*
ServersConsoleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ServersConsoleNotFound struct {
	Payload *ServersConsoleNotFoundBody
}

// IsSuccess returns true when this servers console not found response has a 2xx status code
func (o *ServersConsoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers console not found response has a 3xx status code
func (o *ServersConsoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console not found response has a 4xx status code
func (o *ServersConsoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers console not found response has a 5xx status code
func (o *ServersConsoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this servers console not found response a status code equal to that given
func (o *ServersConsoleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ServersConsoleNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleNotFound  %+v", 404, o.Payload)
}

func (o *ServersConsoleNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleNotFound  %+v", 404, o.Payload)
}

func (o *ServersConsoleNotFound) GetPayload() *ServersConsoleNotFoundBody {
	return o.Payload
}

func (o *ServersConsoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersConsoleNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleInternalServerError creates a ServersConsoleInternalServerError with default headers values
func NewServersConsoleInternalServerError() *ServersConsoleInternalServerError {
	return &ServersConsoleInternalServerError{}
}

/*
ServersConsoleInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ServersConsoleInternalServerError struct {
}

// IsSuccess returns true when this servers console internal server error response has a 2xx status code
func (o *ServersConsoleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers console internal server error response has a 3xx status code
func (o *ServersConsoleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers console internal server error response has a 4xx status code
func (o *ServersConsoleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers console internal server error response has a 5xx status code
func (o *ServersConsoleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this servers console internal server error response a status code equal to that given
func (o *ServersConsoleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ServersConsoleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleInternalServerError ", 500)
}

func (o *ServersConsoleInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleInternalServerError ", 500)
}

func (o *ServersConsoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ServersConsoleBadRequestBodyItems0 servers console bad request body items0
swagger:model ServersConsoleBadRequestBodyItems0
*/
type ServersConsoleBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this servers console bad request body items0
func (o *ServersConsoleBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers console bad request body items0 based on context it is used
func (o *ServersConsoleBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersConsoleBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersConsoleBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ServersConsoleBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersConsoleBody servers console body
swagger:model ServersConsoleBody
*/
type ServersConsoleBody struct {

	// server Id
	ServerID int32 `json:"serverId,omitempty"`
}

// Validate validates this servers console body
func (o *ServersConsoleBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers console body based on context it is used
func (o *ServersConsoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersConsoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersConsoleBody) UnmarshalBinary(b []byte) error {
	var res ServersConsoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersConsoleForbiddenBody servers console forbidden body
swagger:model ServersConsoleForbiddenBody
*/
type ServersConsoleForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers console forbidden body
func (o *ServersConsoleForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers console forbidden body based on context it is used
func (o *ServersConsoleForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersConsoleForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersConsoleForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ServersConsoleForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersConsoleNotFoundBody servers console not found body
swagger:model ServersConsoleNotFoundBody
*/
type ServersConsoleNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers console not found body
func (o *ServersConsoleNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers console not found body based on context it is used
func (o *ServersConsoleNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersConsoleNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersConsoleNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ServersConsoleNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersConsoleUnauthorizedBody servers console unauthorized body
swagger:model ServersConsoleUnauthorizedBody
*/
type ServersConsoleUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers console unauthorized body
func (o *ServersConsoleUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers console unauthorized body based on context it is used
func (o *ServersConsoleUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersConsoleUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersConsoleUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ServersConsoleUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
