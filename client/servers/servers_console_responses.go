// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// ServersConsoleReader is a Reader for the ServersConsole structure.
type ServersConsoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersConsoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServersConsoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServersConsoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServersConsoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServersConsoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewServersConsoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServersConsoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServersConsoleOK creates a ServersConsoleOK with default headers values
func NewServersConsoleOK() *ServersConsoleOK {
	return &ServersConsoleOK{}
}

/* ServersConsoleOK describes a response with status code 200, with default header values.

Success
*/
type ServersConsoleOK struct {
	Payload string
}

func (o *ServersConsoleOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleOK  %+v", 200, o.Payload)
}
func (o *ServersConsoleOK) GetPayload() string {
	return o.Payload
}

func (o *ServersConsoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleBadRequest creates a ServersConsoleBadRequest with default headers values
func NewServersConsoleBadRequest() *ServersConsoleBadRequest {
	return &ServersConsoleBadRequest{}
}

/* ServersConsoleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServersConsoleBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *ServersConsoleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleBadRequest  %+v", 400, o.Payload)
}
func (o *ServersConsoleBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *ServersConsoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleUnauthorized creates a ServersConsoleUnauthorized with default headers values
func NewServersConsoleUnauthorized() *ServersConsoleUnauthorized {
	return &ServersConsoleUnauthorized{}
}

/* ServersConsoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServersConsoleUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *ServersConsoleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleUnauthorized  %+v", 401, o.Payload)
}
func (o *ServersConsoleUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ServersConsoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleForbidden creates a ServersConsoleForbidden with default headers values
func NewServersConsoleForbidden() *ServersConsoleForbidden {
	return &ServersConsoleForbidden{}
}

/* ServersConsoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServersConsoleForbidden struct {
	Payload *models.ProblemDetails
}

func (o *ServersConsoleForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleForbidden  %+v", 403, o.Payload)
}
func (o *ServersConsoleForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ServersConsoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleNotFound creates a ServersConsoleNotFound with default headers values
func NewServersConsoleNotFound() *ServersConsoleNotFound {
	return &ServersConsoleNotFound{}
}

/* ServersConsoleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ServersConsoleNotFound struct {
	Payload *models.ProblemDetails
}

func (o *ServersConsoleNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleNotFound  %+v", 404, o.Payload)
}
func (o *ServersConsoleNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ServersConsoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersConsoleInternalServerError creates a ServersConsoleInternalServerError with default headers values
func NewServersConsoleInternalServerError() *ServersConsoleInternalServerError {
	return &ServersConsoleInternalServerError{}
}

/* ServersConsoleInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ServersConsoleInternalServerError struct {
}

func (o *ServersConsoleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers/console][%d] serversConsoleInternalServerError ", 500)
}

func (o *ServersConsoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
