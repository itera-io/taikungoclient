// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServersCreateReader is a Reader for the ServersCreate structure.
type ServersCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServersCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServersCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServersCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServersCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewServersCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServersCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServersCreateOK creates a ServersCreateOK with default headers values
func NewServersCreateOK() *ServersCreateOK {
	return &ServersCreateOK{}
}

/*
ServersCreateOK describes a response with status code 200, with default header values.

Success
*/
type ServersCreateOK struct {
	Payload *ServersCreateOKBody
}

// IsSuccess returns true when this servers create o k response has a 2xx status code
func (o *ServersCreateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this servers create o k response has a 3xx status code
func (o *ServersCreateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create o k response has a 4xx status code
func (o *ServersCreateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers create o k response has a 5xx status code
func (o *ServersCreateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this servers create o k response a status code equal to that given
func (o *ServersCreateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ServersCreateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateOK  %+v", 200, o.Payload)
}

func (o *ServersCreateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateOK  %+v", 200, o.Payload)
}

func (o *ServersCreateOK) GetPayload() *ServersCreateOKBody {
	return o.Payload
}

func (o *ServersCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersCreateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersCreateBadRequest creates a ServersCreateBadRequest with default headers values
func NewServersCreateBadRequest() *ServersCreateBadRequest {
	return &ServersCreateBadRequest{}
}

/*
ServersCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServersCreateBadRequest struct {
	Payload []*ServersCreateBadRequestBodyItems0
}

// IsSuccess returns true when this servers create bad request response has a 2xx status code
func (o *ServersCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers create bad request response has a 3xx status code
func (o *ServersCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create bad request response has a 4xx status code
func (o *ServersCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers create bad request response has a 5xx status code
func (o *ServersCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this servers create bad request response a status code equal to that given
func (o *ServersCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ServersCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateBadRequest  %+v", 400, o.Payload)
}

func (o *ServersCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateBadRequest  %+v", 400, o.Payload)
}

func (o *ServersCreateBadRequest) GetPayload() []*ServersCreateBadRequestBodyItems0 {
	return o.Payload
}

func (o *ServersCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersCreateUnauthorized creates a ServersCreateUnauthorized with default headers values
func NewServersCreateUnauthorized() *ServersCreateUnauthorized {
	return &ServersCreateUnauthorized{}
}

/*
ServersCreateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServersCreateUnauthorized struct {
	Payload *ServersCreateUnauthorizedBody
}

// IsSuccess returns true when this servers create unauthorized response has a 2xx status code
func (o *ServersCreateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers create unauthorized response has a 3xx status code
func (o *ServersCreateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create unauthorized response has a 4xx status code
func (o *ServersCreateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers create unauthorized response has a 5xx status code
func (o *ServersCreateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this servers create unauthorized response a status code equal to that given
func (o *ServersCreateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ServersCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersCreateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *ServersCreateUnauthorized) GetPayload() *ServersCreateUnauthorizedBody {
	return o.Payload
}

func (o *ServersCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersCreateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersCreateForbidden creates a ServersCreateForbidden with default headers values
func NewServersCreateForbidden() *ServersCreateForbidden {
	return &ServersCreateForbidden{}
}

/*
ServersCreateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServersCreateForbidden struct {
	Payload *ServersCreateForbiddenBody
}

// IsSuccess returns true when this servers create forbidden response has a 2xx status code
func (o *ServersCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers create forbidden response has a 3xx status code
func (o *ServersCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create forbidden response has a 4xx status code
func (o *ServersCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers create forbidden response has a 5xx status code
func (o *ServersCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this servers create forbidden response a status code equal to that given
func (o *ServersCreateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ServersCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateForbidden  %+v", 403, o.Payload)
}

func (o *ServersCreateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateForbidden  %+v", 403, o.Payload)
}

func (o *ServersCreateForbidden) GetPayload() *ServersCreateForbiddenBody {
	return o.Payload
}

func (o *ServersCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersCreateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersCreateNotFound creates a ServersCreateNotFound with default headers values
func NewServersCreateNotFound() *ServersCreateNotFound {
	return &ServersCreateNotFound{}
}

/*
ServersCreateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ServersCreateNotFound struct {
	Payload *ServersCreateNotFoundBody
}

// IsSuccess returns true when this servers create not found response has a 2xx status code
func (o *ServersCreateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers create not found response has a 3xx status code
func (o *ServersCreateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create not found response has a 4xx status code
func (o *ServersCreateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this servers create not found response has a 5xx status code
func (o *ServersCreateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this servers create not found response a status code equal to that given
func (o *ServersCreateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ServersCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateNotFound  %+v", 404, o.Payload)
}

func (o *ServersCreateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateNotFound  %+v", 404, o.Payload)
}

func (o *ServersCreateNotFound) GetPayload() *ServersCreateNotFoundBody {
	return o.Payload
}

func (o *ServersCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServersCreateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersCreateInternalServerError creates a ServersCreateInternalServerError with default headers values
func NewServersCreateInternalServerError() *ServersCreateInternalServerError {
	return &ServersCreateInternalServerError{}
}

/*
ServersCreateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ServersCreateInternalServerError struct {
}

// IsSuccess returns true when this servers create internal server error response has a 2xx status code
func (o *ServersCreateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this servers create internal server error response has a 3xx status code
func (o *ServersCreateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this servers create internal server error response has a 4xx status code
func (o *ServersCreateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this servers create internal server error response has a 5xx status code
func (o *ServersCreateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this servers create internal server error response a status code equal to that given
func (o *ServersCreateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ServersCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateInternalServerError ", 500)
}

func (o *ServersCreateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Servers][%d] serversCreateInternalServerError ", 500)
}

func (o *ServersCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ServersCreateBadRequestBodyItems0 servers create bad request body items0
swagger:model ServersCreateBadRequestBodyItems0
*/
type ServersCreateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this servers create bad request body items0
func (o *ServersCreateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create bad request body items0 based on context it is used
func (o *ServersCreateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ServersCreateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateBody servers create body
swagger:model ServersCreateBody
*/
type ServersCreateBody struct {

	// autoscaling group
	AutoscalingGroup string `json:"autoscalingGroup,omitempty"`

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// count
	Count int32 `json:"count,omitempty"`

	// disk size
	DiskSize int64 `json:"diskSize,omitempty"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// kubernetes node labels
	KubernetesNodeLabels []*ServersCreateParamsBodyKubernetesNodeLabelsItems0 `json:"kubernetesNodeLabels"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// role
	// Enum: [100 200 300 400]
	Role int32 `json:"role,omitempty"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice float64 `json:"spotPrice,omitempty"`
}

// Validate validates this servers create body
func (o *ServersCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKubernetesNodeLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServersCreateBody) validateKubernetesNodeLabels(formats strfmt.Registry) error {
	if swag.IsZero(o.KubernetesNodeLabels) { // not required
		return nil
	}

	for i := 0; i < len(o.KubernetesNodeLabels); i++ {
		if swag.IsZero(o.KubernetesNodeLabels[i]) { // not required
			continue
		}

		if o.KubernetesNodeLabels[i] != nil {
			if err := o.KubernetesNodeLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serversCreateBodyTypeRolePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,300,400]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serversCreateBodyTypeRolePropEnum = append(serversCreateBodyTypeRolePropEnum, v)
	}
}

// prop value enum
func (o *ServersCreateBody) validateRoleEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, serversCreateBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ServersCreateBody) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this servers create body based on the context it is used
func (o *ServersCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKubernetesNodeLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServersCreateBody) contextValidateKubernetesNodeLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KubernetesNodeLabels); i++ {

		if o.KubernetesNodeLabels[i] != nil {
			if err := o.KubernetesNodeLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateBody) UnmarshalBinary(b []byte) error {
	var res ServersCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateForbiddenBody servers create forbidden body
swagger:model ServersCreateForbiddenBody
*/
type ServersCreateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers create forbidden body
func (o *ServersCreateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create forbidden body based on context it is used
func (o *ServersCreateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ServersCreateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateNotFoundBody servers create not found body
swagger:model ServersCreateNotFoundBody
*/
type ServersCreateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers create not found body
func (o *ServersCreateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create not found body based on context it is used
func (o *ServersCreateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ServersCreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateOKBody servers create o k body
swagger:model ServersCreateOKBody
*/
type ServersCreateOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// is error
	IsError bool `json:"isError"`

	// message
	Message string `json:"message,omitempty"`

	// result
	Result interface{} `json:"result,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this servers create o k body
func (o *ServersCreateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create o k body based on context it is used
func (o *ServersCreateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateOKBody) UnmarshalBinary(b []byte) error {
	var res ServersCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateParamsBodyKubernetesNodeLabelsItems0 servers create params body kubernetes node labels items0
swagger:model ServersCreateParamsBodyKubernetesNodeLabelsItems0
*/
type ServersCreateParamsBodyKubernetesNodeLabelsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this servers create params body kubernetes node labels items0
func (o *ServersCreateParamsBodyKubernetesNodeLabelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create params body kubernetes node labels items0 based on context it is used
func (o *ServersCreateParamsBodyKubernetesNodeLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateParamsBodyKubernetesNodeLabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateParamsBodyKubernetesNodeLabelsItems0) UnmarshalBinary(b []byte) error {
	var res ServersCreateParamsBodyKubernetesNodeLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServersCreateUnauthorizedBody servers create unauthorized body
swagger:model ServersCreateUnauthorizedBody
*/
type ServersCreateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this servers create unauthorized body
func (o *ServersCreateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers create unauthorized body based on context it is used
func (o *ServersCreateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ServersCreateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServersCreateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ServersCreateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
