// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServersListParams creates a new ServersListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServersListParams() *ServersListParams {
	return &ServersListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServersListParamsWithTimeout creates a new ServersListParams object
// with the ability to set a timeout on a request.
func NewServersListParamsWithTimeout(timeout time.Duration) *ServersListParams {
	return &ServersListParams{
		timeout: timeout,
	}
}

// NewServersListParamsWithContext creates a new ServersListParams object
// with the ability to set a context for a request.
func NewServersListParamsWithContext(ctx context.Context) *ServersListParams {
	return &ServersListParams{
		Context: ctx,
	}
}

// NewServersListParamsWithHTTPClient creates a new ServersListParams object
// with the ability to set a custom HTTPClient for a request.
func NewServersListParamsWithHTTPClient(client *http.Client) *ServersListParams {
	return &ServersListParams{
		HTTPClient: client,
	}
}

/* ServersListParams contains all the parameters to send to the API endpoint
   for the servers list operation.

   Typically these are written to a http.Request.
*/
type ServersListParams struct {

	// EndCPU.
	//
	// Format: int32
	EndCPU *int32

	// EndDiskSize.
	//
	// Format: int64
	EndDiskSize *int64

	// EndRAM.
	//
	// Format: double
	EndRAM *float64

	// FilterBy.
	FilterBy *string

	// ID.
	//
	// Format: int32
	ID *int32

	/* Limit.

	   Limits user size (by default 50)

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Skip elements

	   Format: int32
	*/
	Offset *int32

	// OrganizationID.
	//
	// Format: int32
	OrganizationID *int32

	// ProjectID.
	//
	// Format: int32
	ProjectID *int32

	// Search.
	Search *string

	// SortBy.
	SortBy *string

	// SortDirection.
	SortDirection *string

	// StartCPU.
	//
	// Format: int32
	StartCPU *int32

	// StartDiskSize.
	//
	// Format: int64
	StartDiskSize *int64

	// StartRAM.
	//
	// Format: double
	StartRAM *float64

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the servers list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServersListParams) WithDefaults() *ServersListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the servers list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServersListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the servers list params
func (o *ServersListParams) WithTimeout(timeout time.Duration) *ServersListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the servers list params
func (o *ServersListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the servers list params
func (o *ServersListParams) WithContext(ctx context.Context) *ServersListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the servers list params
func (o *ServersListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the servers list params
func (o *ServersListParams) WithHTTPClient(client *http.Client) *ServersListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the servers list params
func (o *ServersListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndCPU adds the endCPU to the servers list params
func (o *ServersListParams) WithEndCPU(endCPU *int32) *ServersListParams {
	o.SetEndCPU(endCPU)
	return o
}

// SetEndCPU adds the endCpu to the servers list params
func (o *ServersListParams) SetEndCPU(endCPU *int32) {
	o.EndCPU = endCPU
}

// WithEndDiskSize adds the endDiskSize to the servers list params
func (o *ServersListParams) WithEndDiskSize(endDiskSize *int64) *ServersListParams {
	o.SetEndDiskSize(endDiskSize)
	return o
}

// SetEndDiskSize adds the endDiskSize to the servers list params
func (o *ServersListParams) SetEndDiskSize(endDiskSize *int64) {
	o.EndDiskSize = endDiskSize
}

// WithEndRAM adds the endRAM to the servers list params
func (o *ServersListParams) WithEndRAM(endRAM *float64) *ServersListParams {
	o.SetEndRAM(endRAM)
	return o
}

// SetEndRAM adds the endRam to the servers list params
func (o *ServersListParams) SetEndRAM(endRAM *float64) {
	o.EndRAM = endRAM
}

// WithFilterBy adds the filterBy to the servers list params
func (o *ServersListParams) WithFilterBy(filterBy *string) *ServersListParams {
	o.SetFilterBy(filterBy)
	return o
}

// SetFilterBy adds the filterBy to the servers list params
func (o *ServersListParams) SetFilterBy(filterBy *string) {
	o.FilterBy = filterBy
}

// WithID adds the id to the servers list params
func (o *ServersListParams) WithID(id *int32) *ServersListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the servers list params
func (o *ServersListParams) SetID(id *int32) {
	o.ID = id
}

// WithLimit adds the limit to the servers list params
func (o *ServersListParams) WithLimit(limit *int32) *ServersListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the servers list params
func (o *ServersListParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the servers list params
func (o *ServersListParams) WithOffset(offset *int32) *ServersListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the servers list params
func (o *ServersListParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the servers list params
func (o *ServersListParams) WithOrganizationID(organizationID *int32) *ServersListParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the servers list params
func (o *ServersListParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithProjectID adds the projectID to the servers list params
func (o *ServersListParams) WithProjectID(projectID *int32) *ServersListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the servers list params
func (o *ServersListParams) SetProjectID(projectID *int32) {
	o.ProjectID = projectID
}

// WithSearch adds the search to the servers list params
func (o *ServersListParams) WithSearch(search *string) *ServersListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the servers list params
func (o *ServersListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSortBy adds the sortBy to the servers list params
func (o *ServersListParams) WithSortBy(sortBy *string) *ServersListParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the servers list params
func (o *ServersListParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDirection adds the sortDirection to the servers list params
func (o *ServersListParams) WithSortDirection(sortDirection *string) *ServersListParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the servers list params
func (o *ServersListParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithStartCPU adds the startCPU to the servers list params
func (o *ServersListParams) WithStartCPU(startCPU *int32) *ServersListParams {
	o.SetStartCPU(startCPU)
	return o
}

// SetStartCPU adds the startCpu to the servers list params
func (o *ServersListParams) SetStartCPU(startCPU *int32) {
	o.StartCPU = startCPU
}

// WithStartDiskSize adds the startDiskSize to the servers list params
func (o *ServersListParams) WithStartDiskSize(startDiskSize *int64) *ServersListParams {
	o.SetStartDiskSize(startDiskSize)
	return o
}

// SetStartDiskSize adds the startDiskSize to the servers list params
func (o *ServersListParams) SetStartDiskSize(startDiskSize *int64) {
	o.StartDiskSize = startDiskSize
}

// WithStartRAM adds the startRAM to the servers list params
func (o *ServersListParams) WithStartRAM(startRAM *float64) *ServersListParams {
	o.SetStartRAM(startRAM)
	return o
}

// SetStartRAM adds the startRam to the servers list params
func (o *ServersListParams) SetStartRAM(startRAM *float64) {
	o.StartRAM = startRAM
}

// WithV adds the v to the servers list params
func (o *ServersListParams) WithV(v string) *ServersListParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the servers list params
func (o *ServersListParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *ServersListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndCPU != nil {

		// query param endCpu
		var qrEndCPU int32

		if o.EndCPU != nil {
			qrEndCPU = *o.EndCPU
		}
		qEndCPU := swag.FormatInt32(qrEndCPU)
		if qEndCPU != "" {

			if err := r.SetQueryParam("endCpu", qEndCPU); err != nil {
				return err
			}
		}
	}

	if o.EndDiskSize != nil {

		// query param endDiskSize
		var qrEndDiskSize int64

		if o.EndDiskSize != nil {
			qrEndDiskSize = *o.EndDiskSize
		}
		qEndDiskSize := swag.FormatInt64(qrEndDiskSize)
		if qEndDiskSize != "" {

			if err := r.SetQueryParam("endDiskSize", qEndDiskSize); err != nil {
				return err
			}
		}
	}

	if o.EndRAM != nil {

		// query param endRam
		var qrEndRAM float64

		if o.EndRAM != nil {
			qrEndRAM = *o.EndRAM
		}
		qEndRAM := swag.FormatFloat64(qrEndRAM)
		if qEndRAM != "" {

			if err := r.SetQueryParam("endRam", qEndRAM); err != nil {
				return err
			}
		}
	}

	if o.FilterBy != nil {

		// query param filterBy
		var qrFilterBy string

		if o.FilterBy != nil {
			qrFilterBy = *o.FilterBy
		}
		qFilterBy := qrFilterBy
		if qFilterBy != "" {

			if err := r.SetQueryParam("filterBy", qFilterBy); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int32

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt32(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID int32

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt32(qrProjectID)
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortDirection != nil {

		// query param sortDirection
		var qrSortDirection string

		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {

			if err := r.SetQueryParam("sortDirection", qSortDirection); err != nil {
				return err
			}
		}
	}

	if o.StartCPU != nil {

		// query param startCpu
		var qrStartCPU int32

		if o.StartCPU != nil {
			qrStartCPU = *o.StartCPU
		}
		qStartCPU := swag.FormatInt32(qrStartCPU)
		if qStartCPU != "" {

			if err := r.SetQueryParam("startCpu", qStartCPU); err != nil {
				return err
			}
		}
	}

	if o.StartDiskSize != nil {

		// query param startDiskSize
		var qrStartDiskSize int64

		if o.StartDiskSize != nil {
			qrStartDiskSize = *o.StartDiskSize
		}
		qStartDiskSize := swag.FormatInt64(qrStartDiskSize)
		if qStartDiskSize != "" {

			if err := r.SetQueryParam("startDiskSize", qStartDiskSize); err != nil {
				return err
			}
		}
	}

	if o.StartRAM != nil {

		// query param startRam
		var qrStartRAM float64

		if o.StartRAM != nil {
			qrStartRAM = *o.StartRAM
		}
		qStartRAM := swag.FormatFloat64(qrStartRAM)
		if qStartRAM != "" {

			if err := r.SetQueryParam("startRam", qStartRAM); err != nil {
				return err
			}
		}
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
