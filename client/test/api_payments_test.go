/*
Taikun - WebApi

Testing PaymentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	openapiclient "github.com/itera-io/taikungoclient/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_taikuncore_PaymentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PaymentsAPIService PaymentBillingInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PaymentsAPI.PaymentBillingInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentCardinfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PaymentsAPI.PaymentCardinfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentClear", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PaymentsAPI.PaymentClear(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentCreateCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PaymentsAPI.PaymentCreateCustomer(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentFinalPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PaymentsAPI.PaymentFinalPrice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentGetStripeInvoices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subscriptionId string

		resp, httpRes, err := apiClient.PaymentsAPI.PaymentGetStripeInvoices(context.Background(), subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentPay", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PaymentsAPI.PaymentPay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentUpdateCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PaymentsAPI.PaymentUpdateCard(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentsAPIService PaymentWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PaymentsAPI.PaymentWebhook(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
