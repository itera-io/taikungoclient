/*
Taikun - WebApi

Testing CloudCredentialAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	openapiclient "github.com/itera-io/taikungoclient/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_taikuncore_CloudCredentialAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CloudCredentialAPIService CloudcredentialsAllFlavors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsAllFlavors(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsDashboardList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsDashboardList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudId int32

		httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsDelete(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsExceeded", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsExceeded(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsForCli", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsForCli(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsForProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsLockManager", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsLockManager(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsMakeDefault", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsMakeDefault(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CloudCredentialAPIService CloudcredentialsOrgList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CloudCredentialAPI.CloudcredentialsOrgList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
