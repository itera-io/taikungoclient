/*
Taikun - WebApi

Testing CheckerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	openapiclient "github.com/itera-io/taikungoclient/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_taikuncore_CheckerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CheckerAPIService CheckerArtifact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerArtifact(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerAws", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerAws(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerAzure", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerAzure(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerAzureQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerAzureQuota(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerCidr", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerCidr(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerCron", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerCron(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerDns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerDns(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerDuplicateName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CheckerAPI.CheckerDuplicateName(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerGoogle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CheckerAPI.CheckerGoogle(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerKeycloak", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerKeycloak(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerKubeConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CheckerAPI.CheckerKubeConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerNode(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerNtp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerNtp(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerOpenAi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerOpenAi(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerOpenstack", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerOpenstack(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerOpenstackTaikunImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.CheckerAPI.CheckerOpenstackTaikunImage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerOpenstackTaikunLbImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.CheckerAPI.CheckerOpenstackTaikunLbImage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerOrganization(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerPrometheus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerPrometheus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerProxmox", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerProxmox(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerS3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerS3(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerSsh", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerSsh(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerTanzu", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerTanzu(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CheckerAPIService CheckerYaml", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.CheckerAPI.CheckerYaml(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
