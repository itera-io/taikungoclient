/*
Taikun - WebApi

Testing StandaloneAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	openapiclient "github.com/itera-io/taikungoclient/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_taikuncore_StandaloneAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StandaloneAPIService StandaloneCommit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneCommit(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StandaloneAPI.StandaloneCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.StandaloneAPI.StandaloneDetails(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneForPoller", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StandaloneAPI.StandaloneForPoller(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneIpManagement", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneIpManagement(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StandaloneAPI.StandaloneList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneProjectDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.StandaloneAPI.StandaloneProjectDetails(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandalonePurge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandalonePurge(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneRepair", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneRepair(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneReset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneReset(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneUpdate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StandaloneAPIService StandaloneUpdateFlavor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.StandaloneAPI.StandaloneUpdateFlavor(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
