/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CommonDropdownIsBoundDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonDropdownIsBoundDto{}

// CommonDropdownIsBoundDto struct for CommonDropdownIsBoundDto
type CommonDropdownIsBoundDto struct {
	Id      *int32         `json:"id,omitempty"`
	Name    NullableString `json:"name,omitempty"`
	IsBound *bool          `json:"isBound,omitempty"`
}

// NewCommonDropdownIsBoundDto instantiates a new CommonDropdownIsBoundDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonDropdownIsBoundDto() *CommonDropdownIsBoundDto {
	this := CommonDropdownIsBoundDto{}
	return &this
}

// NewCommonDropdownIsBoundDtoWithDefaults instantiates a new CommonDropdownIsBoundDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonDropdownIsBoundDtoWithDefaults() *CommonDropdownIsBoundDto {
	this := CommonDropdownIsBoundDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonDropdownIsBoundDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDropdownIsBoundDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonDropdownIsBoundDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CommonDropdownIsBoundDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDropdownIsBoundDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDropdownIsBoundDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CommonDropdownIsBoundDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CommonDropdownIsBoundDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *CommonDropdownIsBoundDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CommonDropdownIsBoundDto) UnsetName() {
	o.Name.Unset()
}

// GetIsBound returns the IsBound field value if set, zero value otherwise.
func (o *CommonDropdownIsBoundDto) GetIsBound() bool {
	if o == nil || IsNil(o.IsBound) {
		var ret bool
		return ret
	}
	return *o.IsBound
}

// GetIsBoundOk returns a tuple with the IsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDropdownIsBoundDto) GetIsBoundOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBound) {
		return nil, false
	}
	return o.IsBound, true
}

// HasIsBound returns a boolean if a field has been set.
func (o *CommonDropdownIsBoundDto) HasIsBound() bool {
	if o != nil && !IsNil(o.IsBound) {
		return true
	}

	return false
}

// SetIsBound gets a reference to the given bool and assigns it to the IsBound field.
func (o *CommonDropdownIsBoundDto) SetIsBound(v bool) {
	o.IsBound = &v
}

func (o CommonDropdownIsBoundDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonDropdownIsBoundDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.IsBound) {
		toSerialize["isBound"] = o.IsBound
	}
	return toSerialize, nil
}

type NullableCommonDropdownIsBoundDto struct {
	value *CommonDropdownIsBoundDto
	isSet bool
}

func (v NullableCommonDropdownIsBoundDto) Get() *CommonDropdownIsBoundDto {
	return v.value
}

func (v *NullableCommonDropdownIsBoundDto) Set(val *CommonDropdownIsBoundDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonDropdownIsBoundDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonDropdownIsBoundDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonDropdownIsBoundDto(val *CommonDropdownIsBoundDto) *NullableCommonDropdownIsBoundDto {
	return &NullableCommonDropdownIsBoundDto{value: val, isSet: true}
}

func (v NullableCommonDropdownIsBoundDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonDropdownIsBoundDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
