/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectListForAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectListForAlert{}

// ProjectListForAlert struct for ProjectListForAlert
type ProjectListForAlert struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Token *string `json:"token,omitempty"`
	Status *string `json:"status,omitempty"`
	OrganizationId *int32 `json:"organizationId,omitempty"`
	Health *string `json:"health,omitempty"`
	IsKubernetes *bool `json:"isKubernetes,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
	IsMonitoringEnabled *bool `json:"isMonitoringEnabled,omitempty"`
	HasKubeConfigFile *bool `json:"hasKubeConfigFile,omitempty"`
	MonitoringCredential *MonitoringCredentialsListDto `json:"monitoringCredential,omitempty"`
	KubernetesAlerts []KubernetesAlertDtoForPoller `json:"kubernetesAlerts,omitempty"`
}

// NewProjectListForAlert instantiates a new ProjectListForAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectListForAlert() *ProjectListForAlert {
	this := ProjectListForAlert{}
	return &this
}

// NewProjectListForAlertWithDefaults instantiates a new ProjectListForAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectListForAlertWithDefaults() *ProjectListForAlert {
	this := ProjectListForAlert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectListForAlert) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectListForAlert) SetName(v string) {
	o.Name = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ProjectListForAlert) SetToken(v string) {
	o.Token = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProjectListForAlert) SetStatus(v string) {
	o.Status = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetOrganizationId() int32 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret int32
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetOrganizationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given int32 and assigns it to the OrganizationId field.
func (o *ProjectListForAlert) SetOrganizationId(v int32) {
	o.OrganizationId = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetHealth() string {
	if o == nil || IsNil(o.Health) {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetHealthOk() (*string, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *ProjectListForAlert) SetHealth(v string) {
	o.Health = &v
}

// GetIsKubernetes returns the IsKubernetes field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetIsKubernetes() bool {
	if o == nil || IsNil(o.IsKubernetes) {
		var ret bool
		return ret
	}
	return *o.IsKubernetes
}

// GetIsKubernetesOk returns a tuple with the IsKubernetes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetIsKubernetesOk() (*bool, bool) {
	if o == nil || IsNil(o.IsKubernetes) {
		return nil, false
	}
	return o.IsKubernetes, true
}

// HasIsKubernetes returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasIsKubernetes() bool {
	if o != nil && !IsNil(o.IsKubernetes) {
		return true
	}

	return false
}

// SetIsKubernetes gets a reference to the given bool and assigns it to the IsKubernetes field.
func (o *ProjectListForAlert) SetIsKubernetes(v bool) {
	o.IsKubernetes = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *ProjectListForAlert) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsMonitoringEnabled returns the IsMonitoringEnabled field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetIsMonitoringEnabled() bool {
	if o == nil || IsNil(o.IsMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.IsMonitoringEnabled
}

// GetIsMonitoringEnabledOk returns a tuple with the IsMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetIsMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMonitoringEnabled) {
		return nil, false
	}
	return o.IsMonitoringEnabled, true
}

// HasIsMonitoringEnabled returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasIsMonitoringEnabled() bool {
	if o != nil && !IsNil(o.IsMonitoringEnabled) {
		return true
	}

	return false
}

// SetIsMonitoringEnabled gets a reference to the given bool and assigns it to the IsMonitoringEnabled field.
func (o *ProjectListForAlert) SetIsMonitoringEnabled(v bool) {
	o.IsMonitoringEnabled = &v
}

// GetHasKubeConfigFile returns the HasKubeConfigFile field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetHasKubeConfigFile() bool {
	if o == nil || IsNil(o.HasKubeConfigFile) {
		var ret bool
		return ret
	}
	return *o.HasKubeConfigFile
}

// GetHasKubeConfigFileOk returns a tuple with the HasKubeConfigFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetHasKubeConfigFileOk() (*bool, bool) {
	if o == nil || IsNil(o.HasKubeConfigFile) {
		return nil, false
	}
	return o.HasKubeConfigFile, true
}

// HasHasKubeConfigFile returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasHasKubeConfigFile() bool {
	if o != nil && !IsNil(o.HasKubeConfigFile) {
		return true
	}

	return false
}

// SetHasKubeConfigFile gets a reference to the given bool and assigns it to the HasKubeConfigFile field.
func (o *ProjectListForAlert) SetHasKubeConfigFile(v bool) {
	o.HasKubeConfigFile = &v
}

// GetMonitoringCredential returns the MonitoringCredential field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetMonitoringCredential() MonitoringCredentialsListDto {
	if o == nil || IsNil(o.MonitoringCredential) {
		var ret MonitoringCredentialsListDto
		return ret
	}
	return *o.MonitoringCredential
}

// GetMonitoringCredentialOk returns a tuple with the MonitoringCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetMonitoringCredentialOk() (*MonitoringCredentialsListDto, bool) {
	if o == nil || IsNil(o.MonitoringCredential) {
		return nil, false
	}
	return o.MonitoringCredential, true
}

// HasMonitoringCredential returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasMonitoringCredential() bool {
	if o != nil && !IsNil(o.MonitoringCredential) {
		return true
	}

	return false
}

// SetMonitoringCredential gets a reference to the given MonitoringCredentialsListDto and assigns it to the MonitoringCredential field.
func (o *ProjectListForAlert) SetMonitoringCredential(v MonitoringCredentialsListDto) {
	o.MonitoringCredential = &v
}

// GetKubernetesAlerts returns the KubernetesAlerts field value if set, zero value otherwise.
func (o *ProjectListForAlert) GetKubernetesAlerts() []KubernetesAlertDtoForPoller {
	if o == nil || IsNil(o.KubernetesAlerts) {
		var ret []KubernetesAlertDtoForPoller
		return ret
	}
	return o.KubernetesAlerts
}

// GetKubernetesAlertsOk returns a tuple with the KubernetesAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectListForAlert) GetKubernetesAlertsOk() ([]KubernetesAlertDtoForPoller, bool) {
	if o == nil || IsNil(o.KubernetesAlerts) {
		return nil, false
	}
	return o.KubernetesAlerts, true
}

// HasKubernetesAlerts returns a boolean if a field has been set.
func (o *ProjectListForAlert) HasKubernetesAlerts() bool {
	if o != nil && !IsNil(o.KubernetesAlerts) {
		return true
	}

	return false
}

// SetKubernetesAlerts gets a reference to the given []KubernetesAlertDtoForPoller and assigns it to the KubernetesAlerts field.
func (o *ProjectListForAlert) SetKubernetesAlerts(v []KubernetesAlertDtoForPoller) {
	o.KubernetesAlerts = v
}

func (o ProjectListForAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectListForAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.IsKubernetes) {
		toSerialize["isKubernetes"] = o.IsKubernetes
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.IsMonitoringEnabled) {
		toSerialize["isMonitoringEnabled"] = o.IsMonitoringEnabled
	}
	if !IsNil(o.HasKubeConfigFile) {
		toSerialize["hasKubeConfigFile"] = o.HasKubeConfigFile
	}
	if !IsNil(o.MonitoringCredential) {
		toSerialize["monitoringCredential"] = o.MonitoringCredential
	}
	if !IsNil(o.KubernetesAlerts) {
		toSerialize["kubernetesAlerts"] = o.KubernetesAlerts
	}
	return toSerialize, nil
}

type NullableProjectListForAlert struct {
	value *ProjectListForAlert
	isSet bool
}

func (v NullableProjectListForAlert) Get() *ProjectListForAlert {
	return v.value
}

func (v *NullableProjectListForAlert) Set(val *ProjectListForAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectListForAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectListForAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectListForAlert(val *ProjectListForAlert) *NullableProjectListForAlert {
	return &NullableProjectListForAlert{value: val, isSet: true}
}

func (v NullableProjectListForAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectListForAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


