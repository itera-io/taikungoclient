/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescribeKubernetesResourceCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeKubernetesResourceCommand{}

// DescribeKubernetesResourceCommand struct for DescribeKubernetesResourceCommand
type DescribeKubernetesResourceCommand struct {
	ProjectId int32 `json:"projectId"`
	Name string `json:"name"`
	Namespace NullableString `json:"namespace,omitempty"`
	Kind EKubernetesResource `json:"kind"`
}

type _DescribeKubernetesResourceCommand DescribeKubernetesResourceCommand

// NewDescribeKubernetesResourceCommand instantiates a new DescribeKubernetesResourceCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeKubernetesResourceCommand(projectId int32, name string, kind EKubernetesResource) *DescribeKubernetesResourceCommand {
	this := DescribeKubernetesResourceCommand{}
	this.ProjectId = projectId
	this.Name = name
	this.Kind = kind
	return &this
}

// NewDescribeKubernetesResourceCommandWithDefaults instantiates a new DescribeKubernetesResourceCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeKubernetesResourceCommandWithDefaults() *DescribeKubernetesResourceCommand {
	this := DescribeKubernetesResourceCommand{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *DescribeKubernetesResourceCommand) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *DescribeKubernetesResourceCommand) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *DescribeKubernetesResourceCommand) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetName returns the Name field value
func (o *DescribeKubernetesResourceCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DescribeKubernetesResourceCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DescribeKubernetesResourceCommand) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DescribeKubernetesResourceCommand) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DescribeKubernetesResourceCommand) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *DescribeKubernetesResourceCommand) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *DescribeKubernetesResourceCommand) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *DescribeKubernetesResourceCommand) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *DescribeKubernetesResourceCommand) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetKind returns the Kind field value
func (o *DescribeKubernetesResourceCommand) GetKind() EKubernetesResource {
	if o == nil {
		var ret EKubernetesResource
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *DescribeKubernetesResourceCommand) GetKindOk() (*EKubernetesResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *DescribeKubernetesResourceCommand) SetKind(v EKubernetesResource) {
	o.Kind = v
}

func (o DescribeKubernetesResourceCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeKubernetesResourceCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["name"] = o.Name
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	toSerialize["kind"] = o.Kind
	return toSerialize, nil
}

func (o *DescribeKubernetesResourceCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"name",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeKubernetesResourceCommand := _DescribeKubernetesResourceCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeKubernetesResourceCommand)

	if err != nil {
		return err
	}

	*o = DescribeKubernetesResourceCommand(varDescribeKubernetesResourceCommand)

	return err
}

type NullableDescribeKubernetesResourceCommand struct {
	value *DescribeKubernetesResourceCommand
	isSet bool
}

func (v NullableDescribeKubernetesResourceCommand) Get() *DescribeKubernetesResourceCommand {
	return v.value
}

func (v *NullableDescribeKubernetesResourceCommand) Set(val *DescribeKubernetesResourceCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeKubernetesResourceCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeKubernetesResourceCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeKubernetesResourceCommand(val *DescribeKubernetesResourceCommand) *NullableDescribeKubernetesResourceCommand {
	return &NullableDescribeKubernetesResourceCommand{value: val, isSet: true}
}

func (v NullableDescribeKubernetesResourceCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeKubernetesResourceCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


