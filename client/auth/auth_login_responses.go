// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthLoginReader is a Reader for the AuthLogin structure.
type AuthLoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthLoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthLoginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthLoginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthLoginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthLoginOK creates a AuthLoginOK with default headers values
func NewAuthLoginOK() *AuthLoginOK {
	return &AuthLoginOK{}
}

/*
AuthLoginOK describes a response with status code 200, with default header values.

Success
*/
type AuthLoginOK struct {
	Payload *AuthLoginOKBody
}

// IsSuccess returns true when this auth login o k response has a 2xx status code
func (o *AuthLoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth login o k response has a 3xx status code
func (o *AuthLoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login o k response has a 4xx status code
func (o *AuthLoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth login o k response has a 5xx status code
func (o *AuthLoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login o k response a status code equal to that given
func (o *AuthLoginOK) IsCode(code int) bool {
	return code == 200
}

func (o *AuthLoginOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginOK  %+v", 200, o.Payload)
}

func (o *AuthLoginOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginOK  %+v", 200, o.Payload)
}

func (o *AuthLoginOK) GetPayload() *AuthLoginOKBody {
	return o.Payload
}

func (o *AuthLoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthLoginOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginBadRequest creates a AuthLoginBadRequest with default headers values
func NewAuthLoginBadRequest() *AuthLoginBadRequest {
	return &AuthLoginBadRequest{}
}

/*
AuthLoginBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthLoginBadRequest struct {
	Payload []*AuthLoginBadRequestBodyItems0
}

// IsSuccess returns true when this auth login bad request response has a 2xx status code
func (o *AuthLoginBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login bad request response has a 3xx status code
func (o *AuthLoginBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login bad request response has a 4xx status code
func (o *AuthLoginBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth login bad request response has a 5xx status code
func (o *AuthLoginBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login bad request response a status code equal to that given
func (o *AuthLoginBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AuthLoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginBadRequest  %+v", 400, o.Payload)
}

func (o *AuthLoginBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginBadRequest  %+v", 400, o.Payload)
}

func (o *AuthLoginBadRequest) GetPayload() []*AuthLoginBadRequestBodyItems0 {
	return o.Payload
}

func (o *AuthLoginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginUnauthorized creates a AuthLoginUnauthorized with default headers values
func NewAuthLoginUnauthorized() *AuthLoginUnauthorized {
	return &AuthLoginUnauthorized{}
}

/*
AuthLoginUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AuthLoginUnauthorized struct {
	Payload *AuthLoginUnauthorizedBody
}

// IsSuccess returns true when this auth login unauthorized response has a 2xx status code
func (o *AuthLoginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login unauthorized response has a 3xx status code
func (o *AuthLoginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login unauthorized response has a 4xx status code
func (o *AuthLoginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth login unauthorized response has a 5xx status code
func (o *AuthLoginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login unauthorized response a status code equal to that given
func (o *AuthLoginUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AuthLoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthLoginUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthLoginUnauthorized) GetPayload() *AuthLoginUnauthorizedBody {
	return o.Payload
}

func (o *AuthLoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthLoginUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginForbidden creates a AuthLoginForbidden with default headers values
func NewAuthLoginForbidden() *AuthLoginForbidden {
	return &AuthLoginForbidden{}
}

/*
AuthLoginForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthLoginForbidden struct {
	Payload *AuthLoginForbiddenBody
}

// IsSuccess returns true when this auth login forbidden response has a 2xx status code
func (o *AuthLoginForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login forbidden response has a 3xx status code
func (o *AuthLoginForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login forbidden response has a 4xx status code
func (o *AuthLoginForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth login forbidden response has a 5xx status code
func (o *AuthLoginForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login forbidden response a status code equal to that given
func (o *AuthLoginForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AuthLoginForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginForbidden  %+v", 403, o.Payload)
}

func (o *AuthLoginForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginForbidden  %+v", 403, o.Payload)
}

func (o *AuthLoginForbidden) GetPayload() *AuthLoginForbiddenBody {
	return o.Payload
}

func (o *AuthLoginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthLoginForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginNotFound creates a AuthLoginNotFound with default headers values
func NewAuthLoginNotFound() *AuthLoginNotFound {
	return &AuthLoginNotFound{}
}

/*
AuthLoginNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AuthLoginNotFound struct {
	Payload *AuthLoginNotFoundBody
}

// IsSuccess returns true when this auth login not found response has a 2xx status code
func (o *AuthLoginNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login not found response has a 3xx status code
func (o *AuthLoginNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login not found response has a 4xx status code
func (o *AuthLoginNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth login not found response has a 5xx status code
func (o *AuthLoginNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this auth login not found response a status code equal to that given
func (o *AuthLoginNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AuthLoginNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginNotFound  %+v", 404, o.Payload)
}

func (o *AuthLoginNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginNotFound  %+v", 404, o.Payload)
}

func (o *AuthLoginNotFound) GetPayload() *AuthLoginNotFoundBody {
	return o.Payload
}

func (o *AuthLoginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthLoginNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthLoginInternalServerError creates a AuthLoginInternalServerError with default headers values
func NewAuthLoginInternalServerError() *AuthLoginInternalServerError {
	return &AuthLoginInternalServerError{}
}

/*
AuthLoginInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AuthLoginInternalServerError struct {
}

// IsSuccess returns true when this auth login internal server error response has a 2xx status code
func (o *AuthLoginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth login internal server error response has a 3xx status code
func (o *AuthLoginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth login internal server error response has a 4xx status code
func (o *AuthLoginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth login internal server error response has a 5xx status code
func (o *AuthLoginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth login internal server error response a status code equal to that given
func (o *AuthLoginInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AuthLoginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginInternalServerError ", 500)
}

func (o *AuthLoginInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/login][%d] authLoginInternalServerError ", 500)
}

func (o *AuthLoginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AuthLoginBadRequestBodyItems0 auth login bad request body items0
swagger:model AuthLoginBadRequestBodyItems0
*/
type AuthLoginBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this auth login bad request body items0
func (o *AuthLoginBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth login bad request body items0 based on context it is used
func (o *AuthLoginBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AuthLoginBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthLoginBody auth login body
swagger:model AuthLoginBody
*/
type AuthLoginBody struct {

	// access key
	AccessKey string `json:"accessKey,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// secret key
	SecretKey string `json:"secretKey,omitempty"`
}

// Validate validates this auth login body
func (o *AuthLoginBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth login body based on context it is used
func (o *AuthLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthLoginForbiddenBody auth login forbidden body
swagger:model AuthLoginForbiddenBody
*/
type AuthLoginForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth login forbidden body
func (o *AuthLoginForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth login forbidden body based on context it is used
func (o *AuthLoginForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthLoginNotFoundBody auth login not found body
swagger:model AuthLoginNotFoundBody
*/
type AuthLoginNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth login not found body
func (o *AuthLoginNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth login not found body based on context it is used
func (o *AuthLoginNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthLoginOKBody auth login o k body
swagger:model AuthLoginOKBody
*/
type AuthLoginOKBody struct {

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// refresh token expire time
	// Format: date-time
	RefreshTokenExpireTime *strfmt.DateTime `json:"refreshTokenExpireTime,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this auth login o k body
func (o *AuthLoginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRefreshTokenExpireTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthLoginOKBody) validateRefreshTokenExpireTime(formats strfmt.Registry) error {
	if swag.IsZero(o.RefreshTokenExpireTime) { // not required
		return nil
	}

	if err := validate.FormatOf("authLoginOK"+"."+"refreshTokenExpireTime", "body", "date-time", o.RefreshTokenExpireTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth login o k body based on context it is used
func (o *AuthLoginOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginOKBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthLoginUnauthorizedBody auth login unauthorized body
swagger:model AuthLoginUnauthorizedBody
*/
type AuthLoginUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth login unauthorized body
func (o *AuthLoginUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth login unauthorized body based on context it is used
func (o *AuthLoginUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
