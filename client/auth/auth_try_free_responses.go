// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AuthTryFreeReader is a Reader for the AuthTryFree structure.
type AuthTryFreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthTryFreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthTryFreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthTryFreeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthTryFreeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthTryFreeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthTryFreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthTryFreeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthTryFreeOK creates a AuthTryFreeOK with default headers values
func NewAuthTryFreeOK() *AuthTryFreeOK {
	return &AuthTryFreeOK{}
}

/*
AuthTryFreeOK describes a response with status code 200, with default header values.

Success
*/
type AuthTryFreeOK struct {
}

// IsSuccess returns true when this auth try free o k response has a 2xx status code
func (o *AuthTryFreeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth try free o k response has a 3xx status code
func (o *AuthTryFreeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free o k response has a 4xx status code
func (o *AuthTryFreeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth try free o k response has a 5xx status code
func (o *AuthTryFreeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth try free o k response a status code equal to that given
func (o *AuthTryFreeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth try free o k response
func (o *AuthTryFreeOK) Code() int {
	return 200
}

func (o *AuthTryFreeOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeOK ", 200)
}

func (o *AuthTryFreeOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeOK ", 200)
}

func (o *AuthTryFreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthTryFreeBadRequest creates a AuthTryFreeBadRequest with default headers values
func NewAuthTryFreeBadRequest() *AuthTryFreeBadRequest {
	return &AuthTryFreeBadRequest{}
}

/*
AuthTryFreeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthTryFreeBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this auth try free bad request response has a 2xx status code
func (o *AuthTryFreeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth try free bad request response has a 3xx status code
func (o *AuthTryFreeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free bad request response has a 4xx status code
func (o *AuthTryFreeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth try free bad request response has a 5xx status code
func (o *AuthTryFreeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth try free bad request response a status code equal to that given
func (o *AuthTryFreeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the auth try free bad request response
func (o *AuthTryFreeBadRequest) Code() int {
	return 400
}

func (o *AuthTryFreeBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeBadRequest  %+v", 400, o.Payload)
}

func (o *AuthTryFreeBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeBadRequest  %+v", 400, o.Payload)
}

func (o *AuthTryFreeBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthTryFreeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthTryFreeUnauthorized creates a AuthTryFreeUnauthorized with default headers values
func NewAuthTryFreeUnauthorized() *AuthTryFreeUnauthorized {
	return &AuthTryFreeUnauthorized{}
}

/*
AuthTryFreeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AuthTryFreeUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this auth try free unauthorized response has a 2xx status code
func (o *AuthTryFreeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth try free unauthorized response has a 3xx status code
func (o *AuthTryFreeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free unauthorized response has a 4xx status code
func (o *AuthTryFreeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth try free unauthorized response has a 5xx status code
func (o *AuthTryFreeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth try free unauthorized response a status code equal to that given
func (o *AuthTryFreeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the auth try free unauthorized response
func (o *AuthTryFreeUnauthorized) Code() int {
	return 401
}

func (o *AuthTryFreeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthTryFreeUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthTryFreeUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthTryFreeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthTryFreeForbidden creates a AuthTryFreeForbidden with default headers values
func NewAuthTryFreeForbidden() *AuthTryFreeForbidden {
	return &AuthTryFreeForbidden{}
}

/*
AuthTryFreeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthTryFreeForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this auth try free forbidden response has a 2xx status code
func (o *AuthTryFreeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth try free forbidden response has a 3xx status code
func (o *AuthTryFreeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free forbidden response has a 4xx status code
func (o *AuthTryFreeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth try free forbidden response has a 5xx status code
func (o *AuthTryFreeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this auth try free forbidden response a status code equal to that given
func (o *AuthTryFreeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the auth try free forbidden response
func (o *AuthTryFreeForbidden) Code() int {
	return 403
}

func (o *AuthTryFreeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeForbidden  %+v", 403, o.Payload)
}

func (o *AuthTryFreeForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeForbidden  %+v", 403, o.Payload)
}

func (o *AuthTryFreeForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthTryFreeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthTryFreeNotFound creates a AuthTryFreeNotFound with default headers values
func NewAuthTryFreeNotFound() *AuthTryFreeNotFound {
	return &AuthTryFreeNotFound{}
}

/*
AuthTryFreeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AuthTryFreeNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this auth try free not found response has a 2xx status code
func (o *AuthTryFreeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth try free not found response has a 3xx status code
func (o *AuthTryFreeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free not found response has a 4xx status code
func (o *AuthTryFreeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth try free not found response has a 5xx status code
func (o *AuthTryFreeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this auth try free not found response a status code equal to that given
func (o *AuthTryFreeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the auth try free not found response
func (o *AuthTryFreeNotFound) Code() int {
	return 404
}

func (o *AuthTryFreeNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeNotFound  %+v", 404, o.Payload)
}

func (o *AuthTryFreeNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeNotFound  %+v", 404, o.Payload)
}

func (o *AuthTryFreeNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *AuthTryFreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthTryFreeInternalServerError creates a AuthTryFreeInternalServerError with default headers values
func NewAuthTryFreeInternalServerError() *AuthTryFreeInternalServerError {
	return &AuthTryFreeInternalServerError{}
}

/*
AuthTryFreeInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AuthTryFreeInternalServerError struct {
}

// IsSuccess returns true when this auth try free internal server error response has a 2xx status code
func (o *AuthTryFreeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth try free internal server error response has a 3xx status code
func (o *AuthTryFreeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth try free internal server error response has a 4xx status code
func (o *AuthTryFreeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth try free internal server error response has a 5xx status code
func (o *AuthTryFreeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth try free internal server error response a status code equal to that given
func (o *AuthTryFreeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the auth try free internal server error response
func (o *AuthTryFreeInternalServerError) Code() int {
	return 500
}

func (o *AuthTryFreeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeInternalServerError ", 500)
}

func (o *AuthTryFreeInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/trial][%d] authTryFreeInternalServerError ", 500)
}

func (o *AuthTryFreeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
