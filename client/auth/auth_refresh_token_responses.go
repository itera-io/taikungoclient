// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthRefreshTokenReader is a Reader for the AuthRefreshToken structure.
type AuthRefreshTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthRefreshTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthRefreshTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthRefreshTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthRefreshTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthRefreshTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthRefreshTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuthRefreshTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthRefreshTokenOK creates a AuthRefreshTokenOK with default headers values
func NewAuthRefreshTokenOK() *AuthRefreshTokenOK {
	return &AuthRefreshTokenOK{}
}

/*
AuthRefreshTokenOK describes a response with status code 200, with default header values.

Success
*/
type AuthRefreshTokenOK struct {
	Payload *AuthRefreshTokenOKBody
}

// IsSuccess returns true when this auth refresh token o k response has a 2xx status code
func (o *AuthRefreshTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth refresh token o k response has a 3xx status code
func (o *AuthRefreshTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token o k response has a 4xx status code
func (o *AuthRefreshTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth refresh token o k response has a 5xx status code
func (o *AuthRefreshTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth refresh token o k response a status code equal to that given
func (o *AuthRefreshTokenOK) IsCode(code int) bool {
	return code == 200
}

func (o *AuthRefreshTokenOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenOK  %+v", 200, o.Payload)
}

func (o *AuthRefreshTokenOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenOK  %+v", 200, o.Payload)
}

func (o *AuthRefreshTokenOK) GetPayload() *AuthRefreshTokenOKBody {
	return o.Payload
}

func (o *AuthRefreshTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthRefreshTokenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthRefreshTokenBadRequest creates a AuthRefreshTokenBadRequest with default headers values
func NewAuthRefreshTokenBadRequest() *AuthRefreshTokenBadRequest {
	return &AuthRefreshTokenBadRequest{}
}

/*
AuthRefreshTokenBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthRefreshTokenBadRequest struct {
	Payload []*AuthRefreshTokenBadRequestBodyItems0
}

// IsSuccess returns true when this auth refresh token bad request response has a 2xx status code
func (o *AuthRefreshTokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth refresh token bad request response has a 3xx status code
func (o *AuthRefreshTokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token bad request response has a 4xx status code
func (o *AuthRefreshTokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth refresh token bad request response has a 5xx status code
func (o *AuthRefreshTokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth refresh token bad request response a status code equal to that given
func (o *AuthRefreshTokenBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AuthRefreshTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenBadRequest  %+v", 400, o.Payload)
}

func (o *AuthRefreshTokenBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenBadRequest  %+v", 400, o.Payload)
}

func (o *AuthRefreshTokenBadRequest) GetPayload() []*AuthRefreshTokenBadRequestBodyItems0 {
	return o.Payload
}

func (o *AuthRefreshTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthRefreshTokenUnauthorized creates a AuthRefreshTokenUnauthorized with default headers values
func NewAuthRefreshTokenUnauthorized() *AuthRefreshTokenUnauthorized {
	return &AuthRefreshTokenUnauthorized{}
}

/*
AuthRefreshTokenUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AuthRefreshTokenUnauthorized struct {
	Payload *AuthRefreshTokenUnauthorizedBody
}

// IsSuccess returns true when this auth refresh token unauthorized response has a 2xx status code
func (o *AuthRefreshTokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth refresh token unauthorized response has a 3xx status code
func (o *AuthRefreshTokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token unauthorized response has a 4xx status code
func (o *AuthRefreshTokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth refresh token unauthorized response has a 5xx status code
func (o *AuthRefreshTokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth refresh token unauthorized response a status code equal to that given
func (o *AuthRefreshTokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AuthRefreshTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthRefreshTokenUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthRefreshTokenUnauthorized) GetPayload() *AuthRefreshTokenUnauthorizedBody {
	return o.Payload
}

func (o *AuthRefreshTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthRefreshTokenUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthRefreshTokenForbidden creates a AuthRefreshTokenForbidden with default headers values
func NewAuthRefreshTokenForbidden() *AuthRefreshTokenForbidden {
	return &AuthRefreshTokenForbidden{}
}

/*
AuthRefreshTokenForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthRefreshTokenForbidden struct {
	Payload *AuthRefreshTokenForbiddenBody
}

// IsSuccess returns true when this auth refresh token forbidden response has a 2xx status code
func (o *AuthRefreshTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth refresh token forbidden response has a 3xx status code
func (o *AuthRefreshTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token forbidden response has a 4xx status code
func (o *AuthRefreshTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth refresh token forbidden response has a 5xx status code
func (o *AuthRefreshTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this auth refresh token forbidden response a status code equal to that given
func (o *AuthRefreshTokenForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AuthRefreshTokenForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenForbidden  %+v", 403, o.Payload)
}

func (o *AuthRefreshTokenForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenForbidden  %+v", 403, o.Payload)
}

func (o *AuthRefreshTokenForbidden) GetPayload() *AuthRefreshTokenForbiddenBody {
	return o.Payload
}

func (o *AuthRefreshTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthRefreshTokenForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthRefreshTokenNotFound creates a AuthRefreshTokenNotFound with default headers values
func NewAuthRefreshTokenNotFound() *AuthRefreshTokenNotFound {
	return &AuthRefreshTokenNotFound{}
}

/*
AuthRefreshTokenNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AuthRefreshTokenNotFound struct {
	Payload *AuthRefreshTokenNotFoundBody
}

// IsSuccess returns true when this auth refresh token not found response has a 2xx status code
func (o *AuthRefreshTokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth refresh token not found response has a 3xx status code
func (o *AuthRefreshTokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token not found response has a 4xx status code
func (o *AuthRefreshTokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth refresh token not found response has a 5xx status code
func (o *AuthRefreshTokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this auth refresh token not found response a status code equal to that given
func (o *AuthRefreshTokenNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AuthRefreshTokenNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenNotFound  %+v", 404, o.Payload)
}

func (o *AuthRefreshTokenNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenNotFound  %+v", 404, o.Payload)
}

func (o *AuthRefreshTokenNotFound) GetPayload() *AuthRefreshTokenNotFoundBody {
	return o.Payload
}

func (o *AuthRefreshTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AuthRefreshTokenNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthRefreshTokenInternalServerError creates a AuthRefreshTokenInternalServerError with default headers values
func NewAuthRefreshTokenInternalServerError() *AuthRefreshTokenInternalServerError {
	return &AuthRefreshTokenInternalServerError{}
}

/*
AuthRefreshTokenInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AuthRefreshTokenInternalServerError struct {
}

// IsSuccess returns true when this auth refresh token internal server error response has a 2xx status code
func (o *AuthRefreshTokenInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth refresh token internal server error response has a 3xx status code
func (o *AuthRefreshTokenInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth refresh token internal server error response has a 4xx status code
func (o *AuthRefreshTokenInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth refresh token internal server error response has a 5xx status code
func (o *AuthRefreshTokenInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this auth refresh token internal server error response a status code equal to that given
func (o *AuthRefreshTokenInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AuthRefreshTokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenInternalServerError ", 500)
}

func (o *AuthRefreshTokenInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Auth/refresh][%d] authRefreshTokenInternalServerError ", 500)
}

func (o *AuthRefreshTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AuthRefreshTokenBadRequestBodyItems0 auth refresh token bad request body items0
swagger:model AuthRefreshTokenBadRequestBodyItems0
*/
type AuthRefreshTokenBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this auth refresh token bad request body items0
func (o *AuthRefreshTokenBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth refresh token bad request body items0 based on context it is used
func (o *AuthRefreshTokenBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthRefreshTokenBody auth refresh token body
swagger:model AuthRefreshTokenBody
*/
type AuthRefreshTokenBody struct {

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this auth refresh token body
func (o *AuthRefreshTokenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth refresh token body based on context it is used
func (o *AuthRefreshTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenBody) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthRefreshTokenForbiddenBody auth refresh token forbidden body
swagger:model AuthRefreshTokenForbiddenBody
*/
type AuthRefreshTokenForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth refresh token forbidden body
func (o *AuthRefreshTokenForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth refresh token forbidden body based on context it is used
func (o *AuthRefreshTokenForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthRefreshTokenNotFoundBody auth refresh token not found body
swagger:model AuthRefreshTokenNotFoundBody
*/
type AuthRefreshTokenNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth refresh token not found body
func (o *AuthRefreshTokenNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth refresh token not found body based on context it is used
func (o *AuthRefreshTokenNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthRefreshTokenOKBody auth refresh token o k body
swagger:model AuthRefreshTokenOKBody
*/
type AuthRefreshTokenOKBody struct {

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// refresh token expire time
	// Format: date-time
	RefreshTokenExpireTime *strfmt.DateTime `json:"refreshTokenExpireTime,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this auth refresh token o k body
func (o *AuthRefreshTokenOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRefreshTokenExpireTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthRefreshTokenOKBody) validateRefreshTokenExpireTime(formats strfmt.Registry) error {
	if swag.IsZero(o.RefreshTokenExpireTime) { // not required
		return nil
	}

	if err := validate.FormatOf("authRefreshTokenOK"+"."+"refreshTokenExpireTime", "body", "date-time", o.RefreshTokenExpireTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth refresh token o k body based on context it is used
func (o *AuthRefreshTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenOKBody) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AuthRefreshTokenUnauthorizedBody auth refresh token unauthorized body
swagger:model AuthRefreshTokenUnauthorizedBody
*/
type AuthRefreshTokenUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this auth refresh token unauthorized body
func (o *AuthRefreshTokenUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth refresh token unauthorized body based on context it is used
func (o *AuthRefreshTokenUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthRefreshTokenUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthRefreshTokenUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AuthRefreshTokenUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
