/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DeleteVmDiskCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteVmDiskCommand{}

// DeleteVmDiskCommand struct for DeleteVmDiskCommand
type DeleteVmDiskCommand struct {
	StandaloneVmId *int32 `json:"standaloneVmId,omitempty"`
	VmDiskIds []int32 `json:"vmDiskIds,omitempty"`
}

// NewDeleteVmDiskCommand instantiates a new DeleteVmDiskCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteVmDiskCommand() *DeleteVmDiskCommand {
	this := DeleteVmDiskCommand{}
	return &this
}

// NewDeleteVmDiskCommandWithDefaults instantiates a new DeleteVmDiskCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteVmDiskCommandWithDefaults() *DeleteVmDiskCommand {
	this := DeleteVmDiskCommand{}
	return &this
}

// GetStandaloneVmId returns the StandaloneVmId field value if set, zero value otherwise.
func (o *DeleteVmDiskCommand) GetStandaloneVmId() int32 {
	if o == nil || IsNil(o.StandaloneVmId) {
		var ret int32
		return ret
	}
	return *o.StandaloneVmId
}

// GetStandaloneVmIdOk returns a tuple with the StandaloneVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteVmDiskCommand) GetStandaloneVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StandaloneVmId) {
		return nil, false
	}
	return o.StandaloneVmId, true
}

// HasStandaloneVmId returns a boolean if a field has been set.
func (o *DeleteVmDiskCommand) HasStandaloneVmId() bool {
	if o != nil && !IsNil(o.StandaloneVmId) {
		return true
	}

	return false
}

// SetStandaloneVmId gets a reference to the given int32 and assigns it to the StandaloneVmId field.
func (o *DeleteVmDiskCommand) SetStandaloneVmId(v int32) {
	o.StandaloneVmId = &v
}

// GetVmDiskIds returns the VmDiskIds field value if set, zero value otherwise.
func (o *DeleteVmDiskCommand) GetVmDiskIds() []int32 {
	if o == nil || IsNil(o.VmDiskIds) {
		var ret []int32
		return ret
	}
	return o.VmDiskIds
}

// GetVmDiskIdsOk returns a tuple with the VmDiskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteVmDiskCommand) GetVmDiskIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VmDiskIds) {
		return nil, false
	}
	return o.VmDiskIds, true
}

// HasVmDiskIds returns a boolean if a field has been set.
func (o *DeleteVmDiskCommand) HasVmDiskIds() bool {
	if o != nil && !IsNil(o.VmDiskIds) {
		return true
	}

	return false
}

// SetVmDiskIds gets a reference to the given []int32 and assigns it to the VmDiskIds field.
func (o *DeleteVmDiskCommand) SetVmDiskIds(v []int32) {
	o.VmDiskIds = v
}

func (o DeleteVmDiskCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteVmDiskCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StandaloneVmId) {
		toSerialize["standaloneVmId"] = o.StandaloneVmId
	}
	if !IsNil(o.VmDiskIds) {
		toSerialize["vmDiskIds"] = o.VmDiskIds
	}
	return toSerialize, nil
}

type NullableDeleteVmDiskCommand struct {
	value *DeleteVmDiskCommand
	isSet bool
}

func (v NullableDeleteVmDiskCommand) Get() *DeleteVmDiskCommand {
	return v.value
}

func (v *NullableDeleteVmDiskCommand) Set(val *DeleteVmDiskCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteVmDiskCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteVmDiskCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteVmDiskCommand(val *DeleteVmDiskCommand) *NullableDeleteVmDiskCommand {
	return &NullableDeleteVmDiskCommand{value: val, isSet: true}
}

func (v NullableDeleteVmDiskCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteVmDiskCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


