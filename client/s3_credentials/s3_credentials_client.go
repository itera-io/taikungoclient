// Code generated by go-swagger; DO NOT EDIT.

package s3_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s3 credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s3 credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	S3CredentialsBackupCredentialsForOrganizationList(params *S3CredentialsBackupCredentialsForOrganizationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsBackupCredentialsForOrganizationListOK, error)

	S3CredentialsCreate(params *S3CredentialsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsCreateOK, error)

	S3CredentialsDelete(params *S3CredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsDeleteOK, *S3CredentialsDeleteNoContent, error)

	S3CredentialsList(params *S3CredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsListOK, error)

	S3CredentialsLockManager(params *S3CredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsLockManagerOK, error)

	S3CredentialsMakeDefault(params *S3CredentialsMakeDefaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsMakeDefaultOK, error)

	S3CredentialsUpdate(params *S3CredentialsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
S3CredentialsBackupCredentialsForOrganizationList retrieves all s3 credentials for organization
*/
func (a *Client) S3CredentialsBackupCredentialsForOrganizationList(params *S3CredentialsBackupCredentialsForOrganizationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsBackupCredentialsForOrganizationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsBackupCredentialsForOrganizationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_BackupCredentialsForOrganizationList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/S3Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsBackupCredentialsForOrganizationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsBackupCredentialsForOrganizationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_BackupCredentialsForOrganizationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsCreate adds s3 credential
*/
func (a *Client) S3CredentialsCreate(params *S3CredentialsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/S3Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsDelete removes s3 credentials by Id
*/
func (a *Client) S3CredentialsDelete(params *S3CredentialsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsDeleteOK, *S3CredentialsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/S3Credentials/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *S3CredentialsDeleteOK:
		return value, nil, nil
	case *S3CredentialsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s3_credentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsList retrieves all s3 credentials
*/
func (a *Client) S3CredentialsList(params *S3CredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/S3Credentials/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsLockManager locks unlock s3 credentials
*/
func (a *Client) S3CredentialsLockManager(params *S3CredentialsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_LockManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/S3Credentials/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsMakeDefault makes backup credentials default
*/
func (a *Client) S3CredentialsMakeDefault(params *S3CredentialsMakeDefaultParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsMakeDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsMakeDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_MakeDefault",
		Method:             "POST",
		PathPattern:        "/api/v{v}/S3Credentials/makedefault",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsMakeDefaultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsMakeDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_MakeDefault: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
S3CredentialsUpdate updates s3 credential
*/
func (a *Client) S3CredentialsUpdate(params *S3CredentialsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*S3CredentialsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS3CredentialsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "S3Credentials_Update",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/S3Credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &S3CredentialsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S3CredentialsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for S3Credentials_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
