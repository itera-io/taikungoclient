/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AlertLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertLabels{}

// AlertLabels struct for AlertLabels
type AlertLabels struct {
	Alertname NullableString `json:"alertname,omitempty"`
	Condition NullableString `json:"condition,omitempty"`
	Container NullableString `json:"container,omitempty"`
	Endpoint NullableString `json:"endpoint,omitempty"`
	Instance NullableString `json:"instance,omitempty"`
	Job NullableString `json:"job,omitempty"`
	Namespace NullableString `json:"namespace,omitempty"`
	Node NullableString `json:"node,omitempty"`
	Pod NullableString `json:"pod,omitempty"`
	Service NullableString `json:"service,omitempty"`
	Severity NullableString `json:"severity,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Daemonset NullableString `json:"daemonset,omitempty"`
}

// NewAlertLabels instantiates a new AlertLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertLabels() *AlertLabels {
	this := AlertLabels{}
	return &this
}

// NewAlertLabelsWithDefaults instantiates a new AlertLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertLabelsWithDefaults() *AlertLabels {
	this := AlertLabels{}
	return &this
}

// GetAlertname returns the Alertname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetAlertname() string {
	if o == nil || IsNil(o.Alertname.Get()) {
		var ret string
		return ret
	}
	return *o.Alertname.Get()
}

// GetAlertnameOk returns a tuple with the Alertname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetAlertnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alertname.Get(), o.Alertname.IsSet()
}

// HasAlertname returns a boolean if a field has been set.
func (o *AlertLabels) HasAlertname() bool {
	if o != nil && o.Alertname.IsSet() {
		return true
	}

	return false
}

// SetAlertname gets a reference to the given NullableString and assigns it to the Alertname field.
func (o *AlertLabels) SetAlertname(v string) {
	o.Alertname.Set(&v)
}
// SetAlertnameNil sets the value for Alertname to be an explicit nil
func (o *AlertLabels) SetAlertnameNil() {
	o.Alertname.Set(nil)
}

// UnsetAlertname ensures that no value is present for Alertname, not even an explicit nil
func (o *AlertLabels) UnsetAlertname() {
	o.Alertname.Unset()
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetCondition() string {
	if o == nil || IsNil(o.Condition.Get()) {
		var ret string
		return ret
	}
	return *o.Condition.Get()
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Condition.Get(), o.Condition.IsSet()
}

// HasCondition returns a boolean if a field has been set.
func (o *AlertLabels) HasCondition() bool {
	if o != nil && o.Condition.IsSet() {
		return true
	}

	return false
}

// SetCondition gets a reference to the given NullableString and assigns it to the Condition field.
func (o *AlertLabels) SetCondition(v string) {
	o.Condition.Set(&v)
}
// SetConditionNil sets the value for Condition to be an explicit nil
func (o *AlertLabels) SetConditionNil() {
	o.Condition.Set(nil)
}

// UnsetCondition ensures that no value is present for Condition, not even an explicit nil
func (o *AlertLabels) UnsetCondition() {
	o.Condition.Unset()
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetContainer() string {
	if o == nil || IsNil(o.Container.Get()) {
		var ret string
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *AlertLabels) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableString and assigns it to the Container field.
func (o *AlertLabels) SetContainer(v string) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *AlertLabels) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *AlertLabels) UnsetContainer() {
	o.Container.Unset()
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint.Get()) {
		var ret string
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *AlertLabels) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableString and assigns it to the Endpoint field.
func (o *AlertLabels) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *AlertLabels) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *AlertLabels) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetInstance() string {
	if o == nil || IsNil(o.Instance.Get()) {
		var ret string
		return ret
	}
	return *o.Instance.Get()
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instance.Get(), o.Instance.IsSet()
}

// HasInstance returns a boolean if a field has been set.
func (o *AlertLabels) HasInstance() bool {
	if o != nil && o.Instance.IsSet() {
		return true
	}

	return false
}

// SetInstance gets a reference to the given NullableString and assigns it to the Instance field.
func (o *AlertLabels) SetInstance(v string) {
	o.Instance.Set(&v)
}
// SetInstanceNil sets the value for Instance to be an explicit nil
func (o *AlertLabels) SetInstanceNil() {
	o.Instance.Set(nil)
}

// UnsetInstance ensures that no value is present for Instance, not even an explicit nil
func (o *AlertLabels) UnsetInstance() {
	o.Instance.Unset()
}

// GetJob returns the Job field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetJob() string {
	if o == nil || IsNil(o.Job.Get()) {
		var ret string
		return ret
	}
	return *o.Job.Get()
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetJobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Job.Get(), o.Job.IsSet()
}

// HasJob returns a boolean if a field has been set.
func (o *AlertLabels) HasJob() bool {
	if o != nil && o.Job.IsSet() {
		return true
	}

	return false
}

// SetJob gets a reference to the given NullableString and assigns it to the Job field.
func (o *AlertLabels) SetJob(v string) {
	o.Job.Set(&v)
}
// SetJobNil sets the value for Job to be an explicit nil
func (o *AlertLabels) SetJobNil() {
	o.Job.Set(nil)
}

// UnsetJob ensures that no value is present for Job, not even an explicit nil
func (o *AlertLabels) UnsetJob() {
	o.Job.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *AlertLabels) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *AlertLabels) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *AlertLabels) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *AlertLabels) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetNode() string {
	if o == nil || IsNil(o.Node.Get()) {
		var ret string
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *AlertLabels) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableString and assigns it to the Node field.
func (o *AlertLabels) SetNode(v string) {
	o.Node.Set(&v)
}
// SetNodeNil sets the value for Node to be an explicit nil
func (o *AlertLabels) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *AlertLabels) UnsetNode() {
	o.Node.Unset()
}

// GetPod returns the Pod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetPod() string {
	if o == nil || IsNil(o.Pod.Get()) {
		var ret string
		return ret
	}
	return *o.Pod.Get()
}

// GetPodOk returns a tuple with the Pod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetPodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pod.Get(), o.Pod.IsSet()
}

// HasPod returns a boolean if a field has been set.
func (o *AlertLabels) HasPod() bool {
	if o != nil && o.Pod.IsSet() {
		return true
	}

	return false
}

// SetPod gets a reference to the given NullableString and assigns it to the Pod field.
func (o *AlertLabels) SetPod(v string) {
	o.Pod.Set(&v)
}
// SetPodNil sets the value for Pod to be an explicit nil
func (o *AlertLabels) SetPodNil() {
	o.Pod.Set(nil)
}

// UnsetPod ensures that no value is present for Pod, not even an explicit nil
func (o *AlertLabels) UnsetPod() {
	o.Pod.Unset()
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetService() string {
	if o == nil || IsNil(o.Service.Get()) {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *AlertLabels) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *AlertLabels) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *AlertLabels) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *AlertLabels) UnsetService() {
	o.Service.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *AlertLabels) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *AlertLabels) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *AlertLabels) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *AlertLabels) UnsetSeverity() {
	o.Severity.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AlertLabels) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *AlertLabels) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AlertLabels) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AlertLabels) UnsetStatus() {
	o.Status.Unset()
}

// GetDaemonset returns the Daemonset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertLabels) GetDaemonset() string {
	if o == nil || IsNil(o.Daemonset.Get()) {
		var ret string
		return ret
	}
	return *o.Daemonset.Get()
}

// GetDaemonsetOk returns a tuple with the Daemonset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertLabels) GetDaemonsetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Daemonset.Get(), o.Daemonset.IsSet()
}

// HasDaemonset returns a boolean if a field has been set.
func (o *AlertLabels) HasDaemonset() bool {
	if o != nil && o.Daemonset.IsSet() {
		return true
	}

	return false
}

// SetDaemonset gets a reference to the given NullableString and assigns it to the Daemonset field.
func (o *AlertLabels) SetDaemonset(v string) {
	o.Daemonset.Set(&v)
}
// SetDaemonsetNil sets the value for Daemonset to be an explicit nil
func (o *AlertLabels) SetDaemonsetNil() {
	o.Daemonset.Set(nil)
}

// UnsetDaemonset ensures that no value is present for Daemonset, not even an explicit nil
func (o *AlertLabels) UnsetDaemonset() {
	o.Daemonset.Unset()
}

func (o AlertLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Alertname.IsSet() {
		toSerialize["alertname"] = o.Alertname.Get()
	}
	if o.Condition.IsSet() {
		toSerialize["condition"] = o.Condition.Get()
	}
	if o.Container.IsSet() {
		toSerialize["container"] = o.Container.Get()
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.Instance.IsSet() {
		toSerialize["instance"] = o.Instance.Get()
	}
	if o.Job.IsSet() {
		toSerialize["job"] = o.Job.Get()
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.Node.IsSet() {
		toSerialize["node"] = o.Node.Get()
	}
	if o.Pod.IsSet() {
		toSerialize["pod"] = o.Pod.Get()
	}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Daemonset.IsSet() {
		toSerialize["daemonset"] = o.Daemonset.Get()
	}
	return toSerialize, nil
}

type NullableAlertLabels struct {
	value *AlertLabels
	isSet bool
}

func (v NullableAlertLabels) Get() *AlertLabels {
	return v.value
}

func (v *NullableAlertLabels) Set(val *AlertLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertLabels(val *AlertLabels) *NullableAlertLabels {
	return &NullableAlertLabels{value: val, isSet: true}
}

func (v NullableAlertLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


