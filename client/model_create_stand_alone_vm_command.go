/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CreateStandAloneVmCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStandAloneVmCommand{}

// CreateStandAloneVmCommand struct for CreateStandAloneVmCommand
type CreateStandAloneVmCommand struct {
	Name                NullableString          `json:"name,omitempty"`
	FlavorName          NullableString          `json:"flavorName,omitempty"`
	VolumeSize          *int64                  `json:"volumeSize,omitempty"`
	VolumeType          NullableString          `json:"volumeType,omitempty"`
	Username            NullableString          `json:"username,omitempty"`
	Password            NullableString          `json:"password,omitempty"`
	PublicIpEnabled     *bool                   `json:"publicIpEnabled,omitempty"`
	Image               NullableString          `json:"image,omitempty"`
	CloudInit           NullableString          `json:"cloudInit,omitempty"`
	StandAloneProfileId *int32                  `json:"standAloneProfileId,omitempty"`
	ProjectId           *int32                  `json:"projectId,omitempty"`
	Count               *int32                  `json:"count,omitempty"`
	SpotPrice           NullableFloat64         `json:"spotPrice,omitempty"`
	SpotInstance        *bool                   `json:"spotInstance,omitempty"`
	AvailabilityZone    NullableString          `json:"availabilityZone,omitempty"`
	Hypervisor          NullableString          `json:"hypervisor,omitempty"`
	StandAloneVmDisks   []StandAloneVmDiskDto   `json:"standAloneVmDisks,omitempty"`
	StandAloneMetaDatas []StandAloneMetaDataDto `json:"standAloneMetaDatas,omitempty"`
}

// NewCreateStandAloneVmCommand instantiates a new CreateStandAloneVmCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStandAloneVmCommand() *CreateStandAloneVmCommand {
	this := CreateStandAloneVmCommand{}
	return &this
}

// NewCreateStandAloneVmCommandWithDefaults instantiates a new CreateStandAloneVmCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStandAloneVmCommandWithDefaults() *CreateStandAloneVmCommand {
	this := CreateStandAloneVmCommand{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateStandAloneVmCommand) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateStandAloneVmCommand) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetName() {
	o.Name.Unset()
}

// GetFlavorName returns the FlavorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetFlavorName() string {
	if o == nil || IsNil(o.FlavorName.Get()) {
		var ret string
		return ret
	}
	return *o.FlavorName.Get()
}

// GetFlavorNameOk returns a tuple with the FlavorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetFlavorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlavorName.Get(), o.FlavorName.IsSet()
}

// HasFlavorName returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasFlavorName() bool {
	if o != nil && o.FlavorName.IsSet() {
		return true
	}

	return false
}

// SetFlavorName gets a reference to the given NullableString and assigns it to the FlavorName field.
func (o *CreateStandAloneVmCommand) SetFlavorName(v string) {
	o.FlavorName.Set(&v)
}

// SetFlavorNameNil sets the value for FlavorName to be an explicit nil
func (o *CreateStandAloneVmCommand) SetFlavorNameNil() {
	o.FlavorName.Set(nil)
}

// UnsetFlavorName ensures that no value is present for FlavorName, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetFlavorName() {
	o.FlavorName.Unset()
}

// GetVolumeSize returns the VolumeSize field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetVolumeSize() int64 {
	if o == nil || IsNil(o.VolumeSize) {
		var ret int64
		return ret
	}
	return *o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetVolumeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.VolumeSize) {
		return nil, false
	}
	return o.VolumeSize, true
}

// HasVolumeSize returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasVolumeSize() bool {
	if o != nil && !IsNil(o.VolumeSize) {
		return true
	}

	return false
}

// SetVolumeSize gets a reference to the given int64 and assigns it to the VolumeSize field.
func (o *CreateStandAloneVmCommand) SetVolumeSize(v int64) {
	o.VolumeSize = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType.Get()) {
		var ret string
		return ret
	}
	return *o.VolumeType.Get()
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeType.Get(), o.VolumeType.IsSet()
}

// HasVolumeType returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasVolumeType() bool {
	if o != nil && o.VolumeType.IsSet() {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given NullableString and assigns it to the VolumeType field.
func (o *CreateStandAloneVmCommand) SetVolumeType(v string) {
	o.VolumeType.Set(&v)
}

// SetVolumeTypeNil sets the value for VolumeType to be an explicit nil
func (o *CreateStandAloneVmCommand) SetVolumeTypeNil() {
	o.VolumeType.Set(nil)
}

// UnsetVolumeType ensures that no value is present for VolumeType, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetVolumeType() {
	o.VolumeType.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *CreateStandAloneVmCommand) SetUsername(v string) {
	o.Username.Set(&v)
}

// SetUsernameNil sets the value for Username to be an explicit nil
func (o *CreateStandAloneVmCommand) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateStandAloneVmCommand) SetPassword(v string) {
	o.Password.Set(&v)
}

// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateStandAloneVmCommand) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetPassword() {
	o.Password.Unset()
}

// GetPublicIpEnabled returns the PublicIpEnabled field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetPublicIpEnabled() bool {
	if o == nil || IsNil(o.PublicIpEnabled) {
		var ret bool
		return ret
	}
	return *o.PublicIpEnabled
}

// GetPublicIpEnabledOk returns a tuple with the PublicIpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetPublicIpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicIpEnabled) {
		return nil, false
	}
	return o.PublicIpEnabled, true
}

// HasPublicIpEnabled returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasPublicIpEnabled() bool {
	if o != nil && !IsNil(o.PublicIpEnabled) {
		return true
	}

	return false
}

// SetPublicIpEnabled gets a reference to the given bool and assigns it to the PublicIpEnabled field.
func (o *CreateStandAloneVmCommand) SetPublicIpEnabled(v bool) {
	o.PublicIpEnabled = &v
}

// GetImage returns the Image field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetImage() string {
	if o == nil || IsNil(o.Image.Get()) {
		var ret string
		return ret
	}
	return *o.Image.Get()
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image.Get(), o.Image.IsSet()
}

// HasImage returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasImage() bool {
	if o != nil && o.Image.IsSet() {
		return true
	}

	return false
}

// SetImage gets a reference to the given NullableString and assigns it to the Image field.
func (o *CreateStandAloneVmCommand) SetImage(v string) {
	o.Image.Set(&v)
}

// SetImageNil sets the value for Image to be an explicit nil
func (o *CreateStandAloneVmCommand) SetImageNil() {
	o.Image.Set(nil)
}

// UnsetImage ensures that no value is present for Image, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetImage() {
	o.Image.Unset()
}

// GetCloudInit returns the CloudInit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetCloudInit() string {
	if o == nil || IsNil(o.CloudInit.Get()) {
		var ret string
		return ret
	}
	return *o.CloudInit.Get()
}

// GetCloudInitOk returns a tuple with the CloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetCloudInitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudInit.Get(), o.CloudInit.IsSet()
}

// HasCloudInit returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasCloudInit() bool {
	if o != nil && o.CloudInit.IsSet() {
		return true
	}

	return false
}

// SetCloudInit gets a reference to the given NullableString and assigns it to the CloudInit field.
func (o *CreateStandAloneVmCommand) SetCloudInit(v string) {
	o.CloudInit.Set(&v)
}

// SetCloudInitNil sets the value for CloudInit to be an explicit nil
func (o *CreateStandAloneVmCommand) SetCloudInitNil() {
	o.CloudInit.Set(nil)
}

// UnsetCloudInit ensures that no value is present for CloudInit, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetCloudInit() {
	o.CloudInit.Unset()
}

// GetStandAloneProfileId returns the StandAloneProfileId field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetStandAloneProfileId() int32 {
	if o == nil || IsNil(o.StandAloneProfileId) {
		var ret int32
		return ret
	}
	return *o.StandAloneProfileId
}

// GetStandAloneProfileIdOk returns a tuple with the StandAloneProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetStandAloneProfileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StandAloneProfileId) {
		return nil, false
	}
	return o.StandAloneProfileId, true
}

// HasStandAloneProfileId returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasStandAloneProfileId() bool {
	if o != nil && !IsNil(o.StandAloneProfileId) {
		return true
	}

	return false
}

// SetStandAloneProfileId gets a reference to the given int32 and assigns it to the StandAloneProfileId field.
func (o *CreateStandAloneVmCommand) SetStandAloneProfileId(v int32) {
	o.StandAloneProfileId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *CreateStandAloneVmCommand) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *CreateStandAloneVmCommand) SetCount(v int32) {
	o.Count = &v
}

// GetSpotPrice returns the SpotPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetSpotPrice() float64 {
	if o == nil || IsNil(o.SpotPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.SpotPrice.Get()
}

// GetSpotPriceOk returns a tuple with the SpotPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetSpotPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpotPrice.Get(), o.SpotPrice.IsSet()
}

// HasSpotPrice returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasSpotPrice() bool {
	if o != nil && o.SpotPrice.IsSet() {
		return true
	}

	return false
}

// SetSpotPrice gets a reference to the given NullableFloat64 and assigns it to the SpotPrice field.
func (o *CreateStandAloneVmCommand) SetSpotPrice(v float64) {
	o.SpotPrice.Set(&v)
}

// SetSpotPriceNil sets the value for SpotPrice to be an explicit nil
func (o *CreateStandAloneVmCommand) SetSpotPriceNil() {
	o.SpotPrice.Set(nil)
}

// UnsetSpotPrice ensures that no value is present for SpotPrice, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetSpotPrice() {
	o.SpotPrice.Unset()
}

// GetSpotInstance returns the SpotInstance field value if set, zero value otherwise.
func (o *CreateStandAloneVmCommand) GetSpotInstance() bool {
	if o == nil || IsNil(o.SpotInstance) {
		var ret bool
		return ret
	}
	return *o.SpotInstance
}

// GetSpotInstanceOk returns a tuple with the SpotInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneVmCommand) GetSpotInstanceOk() (*bool, bool) {
	if o == nil || IsNil(o.SpotInstance) {
		return nil, false
	}
	return o.SpotInstance, true
}

// HasSpotInstance returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasSpotInstance() bool {
	if o != nil && !IsNil(o.SpotInstance) {
		return true
	}

	return false
}

// SetSpotInstance gets a reference to the given bool and assigns it to the SpotInstance field.
func (o *CreateStandAloneVmCommand) SetSpotInstance(v bool) {
	o.SpotInstance = &v
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetAvailabilityZone() string {
	if o == nil || IsNil(o.AvailabilityZone.Get()) {
		var ret string
		return ret
	}
	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given NullableString and assigns it to the AvailabilityZone field.
func (o *CreateStandAloneVmCommand) SetAvailabilityZone(v string) {
	o.AvailabilityZone.Set(&v)
}

// SetAvailabilityZoneNil sets the value for AvailabilityZone to be an explicit nil
func (o *CreateStandAloneVmCommand) SetAvailabilityZoneNil() {
	o.AvailabilityZone.Set(nil)
}

// UnsetAvailabilityZone ensures that no value is present for AvailabilityZone, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetAvailabilityZone() {
	o.AvailabilityZone.Unset()
}

// GetHypervisor returns the Hypervisor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetHypervisor() string {
	if o == nil || IsNil(o.Hypervisor.Get()) {
		var ret string
		return ret
	}
	return *o.Hypervisor.Get()
}

// GetHypervisorOk returns a tuple with the Hypervisor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetHypervisorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hypervisor.Get(), o.Hypervisor.IsSet()
}

// HasHypervisor returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasHypervisor() bool {
	if o != nil && o.Hypervisor.IsSet() {
		return true
	}

	return false
}

// SetHypervisor gets a reference to the given NullableString and assigns it to the Hypervisor field.
func (o *CreateStandAloneVmCommand) SetHypervisor(v string) {
	o.Hypervisor.Set(&v)
}

// SetHypervisorNil sets the value for Hypervisor to be an explicit nil
func (o *CreateStandAloneVmCommand) SetHypervisorNil() {
	o.Hypervisor.Set(nil)
}

// UnsetHypervisor ensures that no value is present for Hypervisor, not even an explicit nil
func (o *CreateStandAloneVmCommand) UnsetHypervisor() {
	o.Hypervisor.Unset()
}

// GetStandAloneVmDisks returns the StandAloneVmDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetStandAloneVmDisks() []StandAloneVmDiskDto {
	if o == nil {
		var ret []StandAloneVmDiskDto
		return ret
	}
	return o.StandAloneVmDisks
}

// GetStandAloneVmDisksOk returns a tuple with the StandAloneVmDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetStandAloneVmDisksOk() ([]StandAloneVmDiskDto, bool) {
	if o == nil || IsNil(o.StandAloneVmDisks) {
		return nil, false
	}
	return o.StandAloneVmDisks, true
}

// HasStandAloneVmDisks returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasStandAloneVmDisks() bool {
	if o != nil && IsNil(o.StandAloneVmDisks) {
		return true
	}

	return false
}

// SetStandAloneVmDisks gets a reference to the given []StandAloneVmDiskDto and assigns it to the StandAloneVmDisks field.
func (o *CreateStandAloneVmCommand) SetStandAloneVmDisks(v []StandAloneVmDiskDto) {
	o.StandAloneVmDisks = v
}

// GetStandAloneMetaDatas returns the StandAloneMetaDatas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStandAloneVmCommand) GetStandAloneMetaDatas() []StandAloneMetaDataDto {
	if o == nil {
		var ret []StandAloneMetaDataDto
		return ret
	}
	return o.StandAloneMetaDatas
}

// GetStandAloneMetaDatasOk returns a tuple with the StandAloneMetaDatas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStandAloneVmCommand) GetStandAloneMetaDatasOk() ([]StandAloneMetaDataDto, bool) {
	if o == nil || IsNil(o.StandAloneMetaDatas) {
		return nil, false
	}
	return o.StandAloneMetaDatas, true
}

// HasStandAloneMetaDatas returns a boolean if a field has been set.
func (o *CreateStandAloneVmCommand) HasStandAloneMetaDatas() bool {
	if o != nil && IsNil(o.StandAloneMetaDatas) {
		return true
	}

	return false
}

// SetStandAloneMetaDatas gets a reference to the given []StandAloneMetaDataDto and assigns it to the StandAloneMetaDatas field.
func (o *CreateStandAloneVmCommand) SetStandAloneMetaDatas(v []StandAloneMetaDataDto) {
	o.StandAloneMetaDatas = v
}

func (o CreateStandAloneVmCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStandAloneVmCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.FlavorName.IsSet() {
		toSerialize["flavorName"] = o.FlavorName.Get()
	}
	if !IsNil(o.VolumeSize) {
		toSerialize["volumeSize"] = o.VolumeSize
	}
	if o.VolumeType.IsSet() {
		toSerialize["volumeType"] = o.VolumeType.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if !IsNil(o.PublicIpEnabled) {
		toSerialize["publicIpEnabled"] = o.PublicIpEnabled
	}
	if o.Image.IsSet() {
		toSerialize["image"] = o.Image.Get()
	}
	if o.CloudInit.IsSet() {
		toSerialize["cloudInit"] = o.CloudInit.Get()
	}
	if !IsNil(o.StandAloneProfileId) {
		toSerialize["standAloneProfileId"] = o.StandAloneProfileId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if o.SpotPrice.IsSet() {
		toSerialize["spotPrice"] = o.SpotPrice.Get()
	}
	if !IsNil(o.SpotInstance) {
		toSerialize["spotInstance"] = o.SpotInstance
	}
	if o.AvailabilityZone.IsSet() {
		toSerialize["availabilityZone"] = o.AvailabilityZone.Get()
	}
	if o.Hypervisor.IsSet() {
		toSerialize["hypervisor"] = o.Hypervisor.Get()
	}
	if o.StandAloneVmDisks != nil {
		toSerialize["standAloneVmDisks"] = o.StandAloneVmDisks
	}
	if o.StandAloneMetaDatas != nil {
		toSerialize["standAloneMetaDatas"] = o.StandAloneMetaDatas
	}
	return toSerialize, nil
}

type NullableCreateStandAloneVmCommand struct {
	value *CreateStandAloneVmCommand
	isSet bool
}

func (v NullableCreateStandAloneVmCommand) Get() *CreateStandAloneVmCommand {
	return v.value
}

func (v *NullableCreateStandAloneVmCommand) Set(val *CreateStandAloneVmCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStandAloneVmCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStandAloneVmCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStandAloneVmCommand(val *CreateStandAloneVmCommand) *NullableCreateStandAloneVmCommand {
	return &NullableCreateStandAloneVmCommand{value: val, isSet: true}
}

func (v NullableCreateStandAloneVmCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStandAloneVmCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
