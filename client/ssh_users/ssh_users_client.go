// Code generated by go-swagger; DO NOT EDIT.

package ssh_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ssh users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ssh users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SSHUsersCreate(params *SSHUsersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersCreateOK, error)

	SSHUsersDelete(params *SSHUsersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersDeleteOK, error)

	SSHUsersEdit(params *SSHUsersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersEditOK, error)

	SSHUsersList(params *SSHUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SSHUsersCreate creates access profile ssh user
*/
func (a *Client) SSHUsersCreate(params *SSHUsersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSSHUsersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SshUsers_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SshUsers/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SSHUsersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SSHUsersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SshUsers_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SSHUsersDelete deletes access profile ssh user
*/
func (a *Client) SSHUsersDelete(params *SSHUsersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSSHUsersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SshUsers_Delete",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SshUsers/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SSHUsersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SSHUsersDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SshUsers_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SSHUsersEdit edits access profile ssh user
*/
func (a *Client) SSHUsersEdit(params *SSHUsersEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSSHUsersEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SshUsers_Edit",
		Method:             "POST",
		PathPattern:        "/api/v{v}/SshUsers/edit",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SSHUsersEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SSHUsersEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SshUsers_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SSHUsersList lists ssh users by profile id
*/
func (a *Client) SSHUsersList(params *SSHUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SSHUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSSHUsersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SshUsers_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/SshUsers/list/{accessProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SSHUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SSHUsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SshUsers_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
