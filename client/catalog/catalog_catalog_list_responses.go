// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogCatalogListReader is a Reader for the CatalogCatalogList structure.
type CatalogCatalogListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogCatalogListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogCatalogListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogCatalogListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogCatalogListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogCatalogListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogCatalogListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogCatalogListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogCatalogListOK creates a CatalogCatalogListOK with default headers values
func NewCatalogCatalogListOK() *CatalogCatalogListOK {
	return &CatalogCatalogListOK{}
}

/*
CatalogCatalogListOK describes a response with status code 200, with default header values.

Success
*/
type CatalogCatalogListOK struct {
	Payload *CatalogCatalogListOKBody
}

// IsSuccess returns true when this catalog catalog list o k response has a 2xx status code
func (o *CatalogCatalogListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog catalog list o k response has a 3xx status code
func (o *CatalogCatalogListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list o k response has a 4xx status code
func (o *CatalogCatalogListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog catalog list o k response has a 5xx status code
func (o *CatalogCatalogListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog catalog list o k response a status code equal to that given
func (o *CatalogCatalogListOK) IsCode(code int) bool {
	return code == 200
}

func (o *CatalogCatalogListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListOK  %+v", 200, o.Payload)
}

func (o *CatalogCatalogListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListOK  %+v", 200, o.Payload)
}

func (o *CatalogCatalogListOK) GetPayload() *CatalogCatalogListOKBody {
	return o.Payload
}

func (o *CatalogCatalogListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogCatalogListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListBadRequest creates a CatalogCatalogListBadRequest with default headers values
func NewCatalogCatalogListBadRequest() *CatalogCatalogListBadRequest {
	return &CatalogCatalogListBadRequest{}
}

/*
CatalogCatalogListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogCatalogListBadRequest struct {
	Payload []*CatalogCatalogListBadRequestBodyItems0
}

// IsSuccess returns true when this catalog catalog list bad request response has a 2xx status code
func (o *CatalogCatalogListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog catalog list bad request response has a 3xx status code
func (o *CatalogCatalogListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list bad request response has a 4xx status code
func (o *CatalogCatalogListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog catalog list bad request response has a 5xx status code
func (o *CatalogCatalogListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog catalog list bad request response a status code equal to that given
func (o *CatalogCatalogListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CatalogCatalogListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogCatalogListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogCatalogListBadRequest) GetPayload() []*CatalogCatalogListBadRequestBodyItems0 {
	return o.Payload
}

func (o *CatalogCatalogListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListUnauthorized creates a CatalogCatalogListUnauthorized with default headers values
func NewCatalogCatalogListUnauthorized() *CatalogCatalogListUnauthorized {
	return &CatalogCatalogListUnauthorized{}
}

/*
CatalogCatalogListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogCatalogListUnauthorized struct {
	Payload *CatalogCatalogListUnauthorizedBody
}

// IsSuccess returns true when this catalog catalog list unauthorized response has a 2xx status code
func (o *CatalogCatalogListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog catalog list unauthorized response has a 3xx status code
func (o *CatalogCatalogListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list unauthorized response has a 4xx status code
func (o *CatalogCatalogListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog catalog list unauthorized response has a 5xx status code
func (o *CatalogCatalogListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog catalog list unauthorized response a status code equal to that given
func (o *CatalogCatalogListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CatalogCatalogListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogCatalogListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogCatalogListUnauthorized) GetPayload() *CatalogCatalogListUnauthorizedBody {
	return o.Payload
}

func (o *CatalogCatalogListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogCatalogListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListForbidden creates a CatalogCatalogListForbidden with default headers values
func NewCatalogCatalogListForbidden() *CatalogCatalogListForbidden {
	return &CatalogCatalogListForbidden{}
}

/*
CatalogCatalogListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogCatalogListForbidden struct {
	Payload *CatalogCatalogListForbiddenBody
}

// IsSuccess returns true when this catalog catalog list forbidden response has a 2xx status code
func (o *CatalogCatalogListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog catalog list forbidden response has a 3xx status code
func (o *CatalogCatalogListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list forbidden response has a 4xx status code
func (o *CatalogCatalogListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog catalog list forbidden response has a 5xx status code
func (o *CatalogCatalogListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog catalog list forbidden response a status code equal to that given
func (o *CatalogCatalogListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CatalogCatalogListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListForbidden  %+v", 403, o.Payload)
}

func (o *CatalogCatalogListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListForbidden  %+v", 403, o.Payload)
}

func (o *CatalogCatalogListForbidden) GetPayload() *CatalogCatalogListForbiddenBody {
	return o.Payload
}

func (o *CatalogCatalogListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogCatalogListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListNotFound creates a CatalogCatalogListNotFound with default headers values
func NewCatalogCatalogListNotFound() *CatalogCatalogListNotFound {
	return &CatalogCatalogListNotFound{}
}

/*
CatalogCatalogListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogCatalogListNotFound struct {
	Payload *CatalogCatalogListNotFoundBody
}

// IsSuccess returns true when this catalog catalog list not found response has a 2xx status code
func (o *CatalogCatalogListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog catalog list not found response has a 3xx status code
func (o *CatalogCatalogListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list not found response has a 4xx status code
func (o *CatalogCatalogListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog catalog list not found response has a 5xx status code
func (o *CatalogCatalogListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog catalog list not found response a status code equal to that given
func (o *CatalogCatalogListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CatalogCatalogListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListNotFound  %+v", 404, o.Payload)
}

func (o *CatalogCatalogListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListNotFound  %+v", 404, o.Payload)
}

func (o *CatalogCatalogListNotFound) GetPayload() *CatalogCatalogListNotFoundBody {
	return o.Payload
}

func (o *CatalogCatalogListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogCatalogListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListInternalServerError creates a CatalogCatalogListInternalServerError with default headers values
func NewCatalogCatalogListInternalServerError() *CatalogCatalogListInternalServerError {
	return &CatalogCatalogListInternalServerError{}
}

/*
CatalogCatalogListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogCatalogListInternalServerError struct {
}

// IsSuccess returns true when this catalog catalog list internal server error response has a 2xx status code
func (o *CatalogCatalogListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog catalog list internal server error response has a 3xx status code
func (o *CatalogCatalogListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog catalog list internal server error response has a 4xx status code
func (o *CatalogCatalogListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog catalog list internal server error response has a 5xx status code
func (o *CatalogCatalogListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog catalog list internal server error response a status code equal to that given
func (o *CatalogCatalogListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CatalogCatalogListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListInternalServerError ", 500)
}

func (o *CatalogCatalogListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListInternalServerError ", 500)
}

func (o *CatalogCatalogListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CatalogCatalogListBadRequestBodyItems0 catalog catalog list bad request body items0
swagger:model CatalogCatalogListBadRequestBodyItems0
*/
type CatalogCatalogListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this catalog catalog list bad request body items0
func (o *CatalogCatalogListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list bad request body items0 based on context it is used
func (o *CatalogCatalogListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListForbiddenBody catalog catalog list forbidden body
swagger:model CatalogCatalogListForbiddenBody
*/
type CatalogCatalogListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog catalog list forbidden body
func (o *CatalogCatalogListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list forbidden body based on context it is used
func (o *CatalogCatalogListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListNotFoundBody catalog catalog list not found body
swagger:model CatalogCatalogListNotFoundBody
*/
type CatalogCatalogListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog catalog list not found body
func (o *CatalogCatalogListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list not found body based on context it is used
func (o *CatalogCatalogListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBody catalog catalog list o k body
swagger:model CatalogCatalogListOKBody
*/
type CatalogCatalogListOKBody struct {

	// data
	Data []*CatalogCatalogListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this catalog catalog list o k body
func (o *CatalogCatalogListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("catalogCatalogListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("catalogCatalogListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this catalog catalog list o k body based on the context it is used
func (o *CatalogCatalogListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("catalogCatalogListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("catalogCatalogListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBody) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBodyDataItems0 catalog catalog list o k body data items0
swagger:model CatalogCatalogListOKBodyDataItems0
*/
type CatalogCatalogListOKBodyDataItems0 struct {

	// bound applications
	BoundApplications []*CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0 `json:"boundApplications"`

	// bound projects
	BoundProjects []*CatalogCatalogListOKBodyDataItems0BoundProjectsItems0 `json:"boundProjects"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// package ids
	PackageIds []string `json:"packageIds"`
}

// Validate validates this catalog catalog list o k body data items0
func (o *CatalogCatalogListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBoundApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBoundProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0) validateBoundApplications(formats strfmt.Registry) error {
	if swag.IsZero(o.BoundApplications) { // not required
		return nil
	}

	for i := 0; i < len(o.BoundApplications); i++ {
		if swag.IsZero(o.BoundApplications[i]) { // not required
			continue
		}

		if o.BoundApplications[i] != nil {
			if err := o.BoundApplications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundApplications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundApplications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0) validateBoundProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.BoundProjects) { // not required
		return nil
	}

	for i := 0; i < len(o.BoundProjects); i++ {
		if swag.IsZero(o.BoundProjects[i]) { // not required
			continue
		}

		if o.BoundProjects[i] != nil {
			if err := o.BoundProjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this catalog catalog list o k body data items0 based on the context it is used
func (o *CatalogCatalogListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBoundApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBoundProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0) contextValidateBoundApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BoundApplications); i++ {

		if o.BoundApplications[i] != nil {
			if err := o.BoundApplications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundApplications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundApplications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0) contextValidateBoundProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BoundProjects); i++ {

		if o.BoundProjects[i] != nil {
			if err := o.BoundProjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0 catalog catalog list o k body data items0 bound applications items0
swagger:model CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0
*/
type CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0 struct {

	// app version
	AppVersion string `json:"appVersion,omitempty"`

	// catalog app Id
	CatalogAppID int32 `json:"catalogAppId,omitempty"`

	// deprecated
	Deprecated bool `json:"deprecated"`

	// description
	Description string `json:"description,omitempty"`

	// installed instance count
	InstalledInstanceCount int32 `json:"installedInstanceCount,omitempty"`

	// logo image Id
	LogoImageID string `json:"logoImageId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// normalized name
	NormalizedName string `json:"normalizedName,omitempty"`

	// package Id
	PackageID string `json:"packageId,omitempty"`

	// repository
	Repository *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository `json:"repository,omitempty"`

	// security report summary
	SecurityReportSummary *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary `json:"securityReportSummary,omitempty"`

	// signed
	Signed bool `json:"signed"`

	// stars
	Stars int64 `json:"stars,omitempty"`

	// ts
	Ts string `json:"ts,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this catalog catalog list o k body data items0 bound applications items0
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityReportSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) validateRepository(formats strfmt.Registry) error {
	if swag.IsZero(o.Repository) { // not required
		return nil
	}

	if o.Repository != nil {
		if err := o.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) validateSecurityReportSummary(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityReportSummary) { // not required
		return nil
	}

	if o.SecurityReportSummary != nil {
		if err := o.SecurityReportSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReportSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReportSummary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this catalog catalog list o k body data items0 bound applications items0 based on the context it is used
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSecurityReportSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) contextValidateRepository(ctx context.Context, formats strfmt.Registry) error {

	if o.Repository != nil {
		if err := o.Repository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) contextValidateSecurityReportSummary(ctx context.Context, formats strfmt.Registry) error {

	if o.SecurityReportSummary != nil {
		if err := o.SecurityReportSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReportSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReportSummary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository catalog catalog list o k body data items0 bound applications items0 repository
swagger:model CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository
*/
type CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository struct {

	// kind
	Kind int64 `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// official
	Official bool `json:"official"`

	// organization display name
	OrganizationDisplayName string `json:"organizationDisplayName,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// repository Id
	RepositoryID string `json:"repositoryId,omitempty"`

	// scanner disabled
	ScannerDisabled bool `json:"scannerDisabled"`

	// url
	URL string `json:"url,omitempty"`

	// verified publisher
	VerifiedPublisher bool `json:"verifiedPublisher"`
}

// Validate validates this catalog catalog list o k body data items0 bound applications items0 repository
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list o k body data items0 bound applications items0 repository based on context it is used
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary catalog catalog list o k body data items0 bound applications items0 security report summary
swagger:model CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary
*/
type CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary struct {

	// critical
	Critical int64 `json:"critical,omitempty"`

	// high
	High int64 `json:"high,omitempty"`

	// low
	Low int64 `json:"low,omitempty"`

	// medium
	Medium int64 `json:"medium,omitempty"`

	// unknown
	Unknown int64 `json:"unknown,omitempty"`
}

// Validate validates this catalog catalog list o k body data items0 bound applications items0 security report summary
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list o k body data items0 bound applications items0 security report summary based on context it is used
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBodyDataItems0BoundApplicationsItems0SecurityReportSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListOKBodyDataItems0BoundProjectsItems0 catalog catalog list o k body data items0 bound projects items0
swagger:model CatalogCatalogListOKBodyDataItems0BoundProjectsItems0
*/
type CatalogCatalogListOKBodyDataItems0BoundProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this catalog catalog list o k body data items0 bound projects items0
func (o *CatalogCatalogListOKBodyDataItems0BoundProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list o k body data items0 bound projects items0 based on context it is used
func (o *CatalogCatalogListOKBodyDataItems0BoundProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListOKBodyDataItems0BoundProjectsItems0) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListOKBodyDataItems0BoundProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogCatalogListUnauthorizedBody catalog catalog list unauthorized body
swagger:model CatalogCatalogListUnauthorizedBody
*/
type CatalogCatalogListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog catalog list unauthorized body
func (o *CatalogCatalogListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog catalog list unauthorized body based on context it is used
func (o *CatalogCatalogListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogCatalogListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogCatalogListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CatalogCatalogListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
