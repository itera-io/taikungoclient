// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CatalogCatalogListReader is a Reader for the CatalogCatalogList structure.
type CatalogCatalogListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogCatalogListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogCatalogListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogCatalogListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogCatalogListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogCatalogListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogCatalogListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogCatalogListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogCatalogListOK creates a CatalogCatalogListOK with default headers values
func NewCatalogCatalogListOK() *CatalogCatalogListOK {
	return &CatalogCatalogListOK{}
}

/* CatalogCatalogListOK describes a response with status code 200, with default header values.

Success
*/
type CatalogCatalogListOK struct {
	Payload *models.CatalogList
}

func (o *CatalogCatalogListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListOK  %+v", 200, o.Payload)
}
func (o *CatalogCatalogListOK) GetPayload() *models.CatalogList {
	return o.Payload
}

func (o *CatalogCatalogListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListBadRequest creates a CatalogCatalogListBadRequest with default headers values
func NewCatalogCatalogListBadRequest() *CatalogCatalogListBadRequest {
	return &CatalogCatalogListBadRequest{}
}

/* CatalogCatalogListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogCatalogListBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *CatalogCatalogListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListBadRequest  %+v", 400, o.Payload)
}
func (o *CatalogCatalogListBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *CatalogCatalogListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListUnauthorized creates a CatalogCatalogListUnauthorized with default headers values
func NewCatalogCatalogListUnauthorized() *CatalogCatalogListUnauthorized {
	return &CatalogCatalogListUnauthorized{}
}

/* CatalogCatalogListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogCatalogListUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *CatalogCatalogListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListUnauthorized  %+v", 401, o.Payload)
}
func (o *CatalogCatalogListUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CatalogCatalogListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListForbidden creates a CatalogCatalogListForbidden with default headers values
func NewCatalogCatalogListForbidden() *CatalogCatalogListForbidden {
	return &CatalogCatalogListForbidden{}
}

/* CatalogCatalogListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogCatalogListForbidden struct {
	Payload *models.ProblemDetails
}

func (o *CatalogCatalogListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListForbidden  %+v", 403, o.Payload)
}
func (o *CatalogCatalogListForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CatalogCatalogListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListNotFound creates a CatalogCatalogListNotFound with default headers values
func NewCatalogCatalogListNotFound() *CatalogCatalogListNotFound {
	return &CatalogCatalogListNotFound{}
}

/* CatalogCatalogListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogCatalogListNotFound struct {
	Payload *models.ProblemDetails
}

func (o *CatalogCatalogListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListNotFound  %+v", 404, o.Payload)
}
func (o *CatalogCatalogListNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *CatalogCatalogListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogCatalogListInternalServerError creates a CatalogCatalogListInternalServerError with default headers values
func NewCatalogCatalogListInternalServerError() *CatalogCatalogListInternalServerError {
	return &CatalogCatalogListInternalServerError{}
}

/* CatalogCatalogListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogCatalogListInternalServerError struct {
}

func (o *CatalogCatalogListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/list][%d] catalogCatalogListInternalServerError ", 500)
}

func (o *CatalogCatalogListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
