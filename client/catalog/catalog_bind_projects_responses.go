// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogBindProjectsReader is a Reader for the CatalogBindProjects structure.
type CatalogBindProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogBindProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogBindProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogBindProjectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogBindProjectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogBindProjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogBindProjectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogBindProjectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogBindProjectsOK creates a CatalogBindProjectsOK with default headers values
func NewCatalogBindProjectsOK() *CatalogBindProjectsOK {
	return &CatalogBindProjectsOK{}
}

/*
CatalogBindProjectsOK describes a response with status code 200, with default header values.

Success
*/
type CatalogBindProjectsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog bind projects o k response has a 2xx status code
func (o *CatalogBindProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog bind projects o k response has a 3xx status code
func (o *CatalogBindProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects o k response has a 4xx status code
func (o *CatalogBindProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog bind projects o k response has a 5xx status code
func (o *CatalogBindProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog bind projects o k response a status code equal to that given
func (o *CatalogBindProjectsOK) IsCode(code int) bool {
	return code == 200
}

func (o *CatalogBindProjectsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsOK  %+v", 200, o.Payload)
}

func (o *CatalogBindProjectsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsOK  %+v", 200, o.Payload)
}

func (o *CatalogBindProjectsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogBindProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogBindProjectsBadRequest creates a CatalogBindProjectsBadRequest with default headers values
func NewCatalogBindProjectsBadRequest() *CatalogBindProjectsBadRequest {
	return &CatalogBindProjectsBadRequest{}
}

/*
CatalogBindProjectsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogBindProjectsBadRequest struct {
	Payload []*CatalogBindProjectsBadRequestBodyItems0
}

// IsSuccess returns true when this catalog bind projects bad request response has a 2xx status code
func (o *CatalogBindProjectsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog bind projects bad request response has a 3xx status code
func (o *CatalogBindProjectsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects bad request response has a 4xx status code
func (o *CatalogBindProjectsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog bind projects bad request response has a 5xx status code
func (o *CatalogBindProjectsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog bind projects bad request response a status code equal to that given
func (o *CatalogBindProjectsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CatalogBindProjectsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogBindProjectsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogBindProjectsBadRequest) GetPayload() []*CatalogBindProjectsBadRequestBodyItems0 {
	return o.Payload
}

func (o *CatalogBindProjectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogBindProjectsUnauthorized creates a CatalogBindProjectsUnauthorized with default headers values
func NewCatalogBindProjectsUnauthorized() *CatalogBindProjectsUnauthorized {
	return &CatalogBindProjectsUnauthorized{}
}

/*
CatalogBindProjectsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogBindProjectsUnauthorized struct {
	Payload *CatalogBindProjectsUnauthorizedBody
}

// IsSuccess returns true when this catalog bind projects unauthorized response has a 2xx status code
func (o *CatalogBindProjectsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog bind projects unauthorized response has a 3xx status code
func (o *CatalogBindProjectsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects unauthorized response has a 4xx status code
func (o *CatalogBindProjectsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog bind projects unauthorized response has a 5xx status code
func (o *CatalogBindProjectsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog bind projects unauthorized response a status code equal to that given
func (o *CatalogBindProjectsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CatalogBindProjectsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogBindProjectsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogBindProjectsUnauthorized) GetPayload() *CatalogBindProjectsUnauthorizedBody {
	return o.Payload
}

func (o *CatalogBindProjectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogBindProjectsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogBindProjectsForbidden creates a CatalogBindProjectsForbidden with default headers values
func NewCatalogBindProjectsForbidden() *CatalogBindProjectsForbidden {
	return &CatalogBindProjectsForbidden{}
}

/*
CatalogBindProjectsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogBindProjectsForbidden struct {
	Payload *CatalogBindProjectsForbiddenBody
}

// IsSuccess returns true when this catalog bind projects forbidden response has a 2xx status code
func (o *CatalogBindProjectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog bind projects forbidden response has a 3xx status code
func (o *CatalogBindProjectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects forbidden response has a 4xx status code
func (o *CatalogBindProjectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog bind projects forbidden response has a 5xx status code
func (o *CatalogBindProjectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog bind projects forbidden response a status code equal to that given
func (o *CatalogBindProjectsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CatalogBindProjectsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsForbidden  %+v", 403, o.Payload)
}

func (o *CatalogBindProjectsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsForbidden  %+v", 403, o.Payload)
}

func (o *CatalogBindProjectsForbidden) GetPayload() *CatalogBindProjectsForbiddenBody {
	return o.Payload
}

func (o *CatalogBindProjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogBindProjectsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogBindProjectsNotFound creates a CatalogBindProjectsNotFound with default headers values
func NewCatalogBindProjectsNotFound() *CatalogBindProjectsNotFound {
	return &CatalogBindProjectsNotFound{}
}

/*
CatalogBindProjectsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogBindProjectsNotFound struct {
	Payload *CatalogBindProjectsNotFoundBody
}

// IsSuccess returns true when this catalog bind projects not found response has a 2xx status code
func (o *CatalogBindProjectsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog bind projects not found response has a 3xx status code
func (o *CatalogBindProjectsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects not found response has a 4xx status code
func (o *CatalogBindProjectsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog bind projects not found response has a 5xx status code
func (o *CatalogBindProjectsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog bind projects not found response a status code equal to that given
func (o *CatalogBindProjectsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CatalogBindProjectsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsNotFound  %+v", 404, o.Payload)
}

func (o *CatalogBindProjectsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsNotFound  %+v", 404, o.Payload)
}

func (o *CatalogBindProjectsNotFound) GetPayload() *CatalogBindProjectsNotFoundBody {
	return o.Payload
}

func (o *CatalogBindProjectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CatalogBindProjectsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogBindProjectsInternalServerError creates a CatalogBindProjectsInternalServerError with default headers values
func NewCatalogBindProjectsInternalServerError() *CatalogBindProjectsInternalServerError {
	return &CatalogBindProjectsInternalServerError{}
}

/*
CatalogBindProjectsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogBindProjectsInternalServerError struct {
}

// IsSuccess returns true when this catalog bind projects internal server error response has a 2xx status code
func (o *CatalogBindProjectsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog bind projects internal server error response has a 3xx status code
func (o *CatalogBindProjectsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog bind projects internal server error response has a 4xx status code
func (o *CatalogBindProjectsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog bind projects internal server error response has a 5xx status code
func (o *CatalogBindProjectsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog bind projects internal server error response a status code equal to that given
func (o *CatalogBindProjectsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CatalogBindProjectsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsInternalServerError ", 500)
}

func (o *CatalogBindProjectsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/bind-project][%d] catalogBindProjectsInternalServerError ", 500)
}

func (o *CatalogBindProjectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CatalogBindProjectsBadRequestBodyItems0 catalog bind projects bad request body items0
swagger:model CatalogBindProjectsBadRequestBodyItems0
*/
type CatalogBindProjectsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this catalog bind projects bad request body items0
func (o *CatalogBindProjectsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog bind projects bad request body items0 based on context it is used
func (o *CatalogBindProjectsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogBindProjectsBody catalog bind projects body
swagger:model CatalogBindProjectsBody
*/
type CatalogBindProjectsBody struct {

	// catalog Id
	CatalogID int32 `json:"catalogId,omitempty"`

	// projects
	Projects []*CatalogBindProjectsParamsBodyProjectsItems0 `json:"projects"`
}

// Validate validates this catalog bind projects body
func (o *CatalogBindProjectsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogBindProjectsBody) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this catalog bind projects body based on the context it is used
func (o *CatalogBindProjectsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CatalogBindProjectsBody) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsBody) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogBindProjectsForbiddenBody catalog bind projects forbidden body
swagger:model CatalogBindProjectsForbiddenBody
*/
type CatalogBindProjectsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog bind projects forbidden body
func (o *CatalogBindProjectsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog bind projects forbidden body based on context it is used
func (o *CatalogBindProjectsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogBindProjectsNotFoundBody catalog bind projects not found body
swagger:model CatalogBindProjectsNotFoundBody
*/
type CatalogBindProjectsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog bind projects not found body
func (o *CatalogBindProjectsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog bind projects not found body based on context it is used
func (o *CatalogBindProjectsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogBindProjectsParamsBodyProjectsItems0 catalog bind projects params body projects items0
swagger:model CatalogBindProjectsParamsBodyProjectsItems0
*/
type CatalogBindProjectsParamsBodyProjectsItems0 struct {

	// is bound
	IsBound bool `json:"isBound"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`
}

// Validate validates this catalog bind projects params body projects items0
func (o *CatalogBindProjectsParamsBodyProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog bind projects params body projects items0 based on context it is used
func (o *CatalogBindProjectsParamsBodyProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsParamsBodyProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsParamsBodyProjectsItems0) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsParamsBodyProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CatalogBindProjectsUnauthorizedBody catalog bind projects unauthorized body
swagger:model CatalogBindProjectsUnauthorizedBody
*/
type CatalogBindProjectsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this catalog bind projects unauthorized body
func (o *CatalogBindProjectsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog bind projects unauthorized body based on context it is used
func (o *CatalogBindProjectsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CatalogBindProjectsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CatalogBindProjectsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CatalogBindProjectsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
