// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CatalogLockManagerReader is a Reader for the CatalogLockManager structure.
type CatalogLockManagerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogLockManagerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogLockManagerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogLockManagerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogLockManagerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogLockManagerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogLockManagerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogLockManagerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogLockManagerOK creates a CatalogLockManagerOK with default headers values
func NewCatalogLockManagerOK() *CatalogLockManagerOK {
	return &CatalogLockManagerOK{}
}

/*
CatalogLockManagerOK describes a response with status code 200, with default header values.

Success
*/
type CatalogLockManagerOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this catalog lock manager o k response has a 2xx status code
func (o *CatalogLockManagerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog lock manager o k response has a 3xx status code
func (o *CatalogLockManagerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager o k response has a 4xx status code
func (o *CatalogLockManagerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog lock manager o k response has a 5xx status code
func (o *CatalogLockManagerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog lock manager o k response a status code equal to that given
func (o *CatalogLockManagerOK) IsCode(code int) bool {
	return code == 200
}

func (o *CatalogLockManagerOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerOK  %+v", 200, o.Payload)
}

func (o *CatalogLockManagerOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerOK  %+v", 200, o.Payload)
}

func (o *CatalogLockManagerOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CatalogLockManagerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogLockManagerBadRequest creates a CatalogLockManagerBadRequest with default headers values
func NewCatalogLockManagerBadRequest() *CatalogLockManagerBadRequest {
	return &CatalogLockManagerBadRequest{}
}

/*
CatalogLockManagerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogLockManagerBadRequest struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog lock manager bad request response has a 2xx status code
func (o *CatalogLockManagerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog lock manager bad request response has a 3xx status code
func (o *CatalogLockManagerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager bad request response has a 4xx status code
func (o *CatalogLockManagerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog lock manager bad request response has a 5xx status code
func (o *CatalogLockManagerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog lock manager bad request response a status code equal to that given
func (o *CatalogLockManagerBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CatalogLockManagerBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogLockManagerBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogLockManagerBadRequest) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogLockManagerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogLockManagerUnauthorized creates a CatalogLockManagerUnauthorized with default headers values
func NewCatalogLockManagerUnauthorized() *CatalogLockManagerUnauthorized {
	return &CatalogLockManagerUnauthorized{}
}

/*
CatalogLockManagerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogLockManagerUnauthorized struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog lock manager unauthorized response has a 2xx status code
func (o *CatalogLockManagerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog lock manager unauthorized response has a 3xx status code
func (o *CatalogLockManagerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager unauthorized response has a 4xx status code
func (o *CatalogLockManagerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog lock manager unauthorized response has a 5xx status code
func (o *CatalogLockManagerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog lock manager unauthorized response a status code equal to that given
func (o *CatalogLockManagerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CatalogLockManagerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogLockManagerUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogLockManagerUnauthorized) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogLockManagerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogLockManagerForbidden creates a CatalogLockManagerForbidden with default headers values
func NewCatalogLockManagerForbidden() *CatalogLockManagerForbidden {
	return &CatalogLockManagerForbidden{}
}

/*
CatalogLockManagerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogLockManagerForbidden struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog lock manager forbidden response has a 2xx status code
func (o *CatalogLockManagerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog lock manager forbidden response has a 3xx status code
func (o *CatalogLockManagerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager forbidden response has a 4xx status code
func (o *CatalogLockManagerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog lock manager forbidden response has a 5xx status code
func (o *CatalogLockManagerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog lock manager forbidden response a status code equal to that given
func (o *CatalogLockManagerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CatalogLockManagerForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerForbidden  %+v", 403, o.Payload)
}

func (o *CatalogLockManagerForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerForbidden  %+v", 403, o.Payload)
}

func (o *CatalogLockManagerForbidden) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogLockManagerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogLockManagerNotFound creates a CatalogLockManagerNotFound with default headers values
func NewCatalogLockManagerNotFound() *CatalogLockManagerNotFound {
	return &CatalogLockManagerNotFound{}
}

/*
CatalogLockManagerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogLockManagerNotFound struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog lock manager not found response has a 2xx status code
func (o *CatalogLockManagerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog lock manager not found response has a 3xx status code
func (o *CatalogLockManagerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager not found response has a 4xx status code
func (o *CatalogLockManagerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog lock manager not found response has a 5xx status code
func (o *CatalogLockManagerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog lock manager not found response a status code equal to that given
func (o *CatalogLockManagerNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CatalogLockManagerNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerNotFound  %+v", 404, o.Payload)
}

func (o *CatalogLockManagerNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerNotFound  %+v", 404, o.Payload)
}

func (o *CatalogLockManagerNotFound) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogLockManagerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogLockManagerInternalServerError creates a CatalogLockManagerInternalServerError with default headers values
func NewCatalogLockManagerInternalServerError() *CatalogLockManagerInternalServerError {
	return &CatalogLockManagerInternalServerError{}
}

/*
CatalogLockManagerInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogLockManagerInternalServerError struct {
}

// IsSuccess returns true when this catalog lock manager internal server error response has a 2xx status code
func (o *CatalogLockManagerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog lock manager internal server error response has a 3xx status code
func (o *CatalogLockManagerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog lock manager internal server error response has a 4xx status code
func (o *CatalogLockManagerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog lock manager internal server error response has a 5xx status code
func (o *CatalogLockManagerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog lock manager internal server error response a status code equal to that given
func (o *CatalogLockManagerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CatalogLockManagerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerInternalServerError ", 500)
}

func (o *CatalogLockManagerInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/lockmanager][%d] catalogLockManagerInternalServerError ", 500)
}

func (o *CatalogLockManagerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
