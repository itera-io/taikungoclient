// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CatalogListReader is a Reader for the CatalogList structure.
type CatalogListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogListOK creates a CatalogListOK with default headers values
func NewCatalogListOK() *CatalogListOK {
	return &CatalogListOK{}
}

/*
CatalogListOK describes a response with status code 200, with default header values.

Success
*/
type CatalogListOK struct {
	Payload *models.AvailablePackagesList
}

// IsSuccess returns true when this catalog list o k response has a 2xx status code
func (o *CatalogListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog list o k response has a 3xx status code
func (o *CatalogListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list o k response has a 4xx status code
func (o *CatalogListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog list o k response has a 5xx status code
func (o *CatalogListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog list o k response a status code equal to that given
func (o *CatalogListOK) IsCode(code int) bool {
	return code == 200
}

func (o *CatalogListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListOK  %+v", 200, o.Payload)
}

func (o *CatalogListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListOK  %+v", 200, o.Payload)
}

func (o *CatalogListOK) GetPayload() *models.AvailablePackagesList {
	return o.Payload
}

func (o *CatalogListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailablePackagesList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogListBadRequest creates a CatalogListBadRequest with default headers values
func NewCatalogListBadRequest() *CatalogListBadRequest {
	return &CatalogListBadRequest{}
}

/*
CatalogListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogListBadRequest struct {
	Payload *models.ValidationProblemDetails
}

// IsSuccess returns true when this catalog list bad request response has a 2xx status code
func (o *CatalogListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog list bad request response has a 3xx status code
func (o *CatalogListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list bad request response has a 4xx status code
func (o *CatalogListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog list bad request response has a 5xx status code
func (o *CatalogListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog list bad request response a status code equal to that given
func (o *CatalogListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CatalogListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogListBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *CatalogListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogListUnauthorized creates a CatalogListUnauthorized with default headers values
func NewCatalogListUnauthorized() *CatalogListUnauthorized {
	return &CatalogListUnauthorized{}
}

/*
CatalogListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogListUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog list unauthorized response has a 2xx status code
func (o *CatalogListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog list unauthorized response has a 3xx status code
func (o *CatalogListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list unauthorized response has a 4xx status code
func (o *CatalogListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog list unauthorized response has a 5xx status code
func (o *CatalogListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog list unauthorized response a status code equal to that given
func (o *CatalogListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CatalogListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogListForbidden creates a CatalogListForbidden with default headers values
func NewCatalogListForbidden() *CatalogListForbidden {
	return &CatalogListForbidden{}
}

/*
CatalogListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogListForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog list forbidden response has a 2xx status code
func (o *CatalogListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog list forbidden response has a 3xx status code
func (o *CatalogListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list forbidden response has a 4xx status code
func (o *CatalogListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog list forbidden response has a 5xx status code
func (o *CatalogListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog list forbidden response a status code equal to that given
func (o *CatalogListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CatalogListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListForbidden  %+v", 403, o.Payload)
}

func (o *CatalogListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListForbidden  %+v", 403, o.Payload)
}

func (o *CatalogListForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogListNotFound creates a CatalogListNotFound with default headers values
func NewCatalogListNotFound() *CatalogListNotFound {
	return &CatalogListNotFound{}
}

/*
CatalogListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogListNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog list not found response has a 2xx status code
func (o *CatalogListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog list not found response has a 3xx status code
func (o *CatalogListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list not found response has a 4xx status code
func (o *CatalogListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog list not found response has a 5xx status code
func (o *CatalogListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog list not found response a status code equal to that given
func (o *CatalogListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CatalogListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListNotFound  %+v", 404, o.Payload)
}

func (o *CatalogListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListNotFound  %+v", 404, o.Payload)
}

func (o *CatalogListNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogListInternalServerError creates a CatalogListInternalServerError with default headers values
func NewCatalogListInternalServerError() *CatalogListInternalServerError {
	return &CatalogListInternalServerError{}
}

/*
CatalogListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogListInternalServerError struct {
}

// IsSuccess returns true when this catalog list internal server error response has a 2xx status code
func (o *CatalogListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog list internal server error response has a 3xx status code
func (o *CatalogListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog list internal server error response has a 4xx status code
func (o *CatalogListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog list internal server error response has a 5xx status code
func (o *CatalogListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog list internal server error response a status code equal to that given
func (o *CatalogListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CatalogListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListInternalServerError ", 500)
}

func (o *CatalogListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Catalog/available/packages][%d] catalogListInternalServerError ", 500)
}

func (o *CatalogListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
