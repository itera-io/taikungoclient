// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CatalogAvailableVersionsReader is a Reader for the CatalogAvailableVersions structure.
type CatalogAvailableVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogAvailableVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogAvailableVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogAvailableVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogAvailableVersionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogAvailableVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogAvailableVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogAvailableVersionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogAvailableVersionsOK creates a CatalogAvailableVersionsOK with default headers values
func NewCatalogAvailableVersionsOK() *CatalogAvailableVersionsOK {
	return &CatalogAvailableVersionsOK{}
}

/*
CatalogAvailableVersionsOK describes a response with status code 200, with default header values.

Success
*/
type CatalogAvailableVersionsOK struct {
	Payload []string
}

// IsSuccess returns true when this catalog available versions o k response has a 2xx status code
func (o *CatalogAvailableVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog available versions o k response has a 3xx status code
func (o *CatalogAvailableVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions o k response has a 4xx status code
func (o *CatalogAvailableVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog available versions o k response has a 5xx status code
func (o *CatalogAvailableVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog available versions o k response a status code equal to that given
func (o *CatalogAvailableVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the catalog available versions o k response
func (o *CatalogAvailableVersionsOK) Code() int {
	return 200
}

func (o *CatalogAvailableVersionsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsOK  %+v", 200, o.Payload)
}

func (o *CatalogAvailableVersionsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsOK  %+v", 200, o.Payload)
}

func (o *CatalogAvailableVersionsOK) GetPayload() []string {
	return o.Payload
}

func (o *CatalogAvailableVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogAvailableVersionsBadRequest creates a CatalogAvailableVersionsBadRequest with default headers values
func NewCatalogAvailableVersionsBadRequest() *CatalogAvailableVersionsBadRequest {
	return &CatalogAvailableVersionsBadRequest{}
}

/*
CatalogAvailableVersionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogAvailableVersionsBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog available versions bad request response has a 2xx status code
func (o *CatalogAvailableVersionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog available versions bad request response has a 3xx status code
func (o *CatalogAvailableVersionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions bad request response has a 4xx status code
func (o *CatalogAvailableVersionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog available versions bad request response has a 5xx status code
func (o *CatalogAvailableVersionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog available versions bad request response a status code equal to that given
func (o *CatalogAvailableVersionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the catalog available versions bad request response
func (o *CatalogAvailableVersionsBadRequest) Code() int {
	return 400
}

func (o *CatalogAvailableVersionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogAvailableVersionsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogAvailableVersionsBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogAvailableVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogAvailableVersionsUnauthorized creates a CatalogAvailableVersionsUnauthorized with default headers values
func NewCatalogAvailableVersionsUnauthorized() *CatalogAvailableVersionsUnauthorized {
	return &CatalogAvailableVersionsUnauthorized{}
}

/*
CatalogAvailableVersionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogAvailableVersionsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog available versions unauthorized response has a 2xx status code
func (o *CatalogAvailableVersionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog available versions unauthorized response has a 3xx status code
func (o *CatalogAvailableVersionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions unauthorized response has a 4xx status code
func (o *CatalogAvailableVersionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog available versions unauthorized response has a 5xx status code
func (o *CatalogAvailableVersionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog available versions unauthorized response a status code equal to that given
func (o *CatalogAvailableVersionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the catalog available versions unauthorized response
func (o *CatalogAvailableVersionsUnauthorized) Code() int {
	return 401
}

func (o *CatalogAvailableVersionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogAvailableVersionsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogAvailableVersionsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogAvailableVersionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogAvailableVersionsForbidden creates a CatalogAvailableVersionsForbidden with default headers values
func NewCatalogAvailableVersionsForbidden() *CatalogAvailableVersionsForbidden {
	return &CatalogAvailableVersionsForbidden{}
}

/*
CatalogAvailableVersionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogAvailableVersionsForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog available versions forbidden response has a 2xx status code
func (o *CatalogAvailableVersionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog available versions forbidden response has a 3xx status code
func (o *CatalogAvailableVersionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions forbidden response has a 4xx status code
func (o *CatalogAvailableVersionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog available versions forbidden response has a 5xx status code
func (o *CatalogAvailableVersionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog available versions forbidden response a status code equal to that given
func (o *CatalogAvailableVersionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the catalog available versions forbidden response
func (o *CatalogAvailableVersionsForbidden) Code() int {
	return 403
}

func (o *CatalogAvailableVersionsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsForbidden  %+v", 403, o.Payload)
}

func (o *CatalogAvailableVersionsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsForbidden  %+v", 403, o.Payload)
}

func (o *CatalogAvailableVersionsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogAvailableVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogAvailableVersionsNotFound creates a CatalogAvailableVersionsNotFound with default headers values
func NewCatalogAvailableVersionsNotFound() *CatalogAvailableVersionsNotFound {
	return &CatalogAvailableVersionsNotFound{}
}

/*
CatalogAvailableVersionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogAvailableVersionsNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this catalog available versions not found response has a 2xx status code
func (o *CatalogAvailableVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog available versions not found response has a 3xx status code
func (o *CatalogAvailableVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions not found response has a 4xx status code
func (o *CatalogAvailableVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog available versions not found response has a 5xx status code
func (o *CatalogAvailableVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog available versions not found response a status code equal to that given
func (o *CatalogAvailableVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the catalog available versions not found response
func (o *CatalogAvailableVersionsNotFound) Code() int {
	return 404
}

func (o *CatalogAvailableVersionsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsNotFound  %+v", 404, o.Payload)
}

func (o *CatalogAvailableVersionsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsNotFound  %+v", 404, o.Payload)
}

func (o *CatalogAvailableVersionsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CatalogAvailableVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogAvailableVersionsInternalServerError creates a CatalogAvailableVersionsInternalServerError with default headers values
func NewCatalogAvailableVersionsInternalServerError() *CatalogAvailableVersionsInternalServerError {
	return &CatalogAvailableVersionsInternalServerError{}
}

/*
CatalogAvailableVersionsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogAvailableVersionsInternalServerError struct {
}

// IsSuccess returns true when this catalog available versions internal server error response has a 2xx status code
func (o *CatalogAvailableVersionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog available versions internal server error response has a 3xx status code
func (o *CatalogAvailableVersionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog available versions internal server error response has a 4xx status code
func (o *CatalogAvailableVersionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog available versions internal server error response has a 5xx status code
func (o *CatalogAvailableVersionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog available versions internal server error response a status code equal to that given
func (o *CatalogAvailableVersionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the catalog available versions internal server error response
func (o *CatalogAvailableVersionsInternalServerError) Code() int {
	return 500
}

func (o *CatalogAvailableVersionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsInternalServerError ", 500)
}

func (o *CatalogAvailableVersionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Catalog/available/versions][%d] catalogAvailableVersionsInternalServerError ", 500)
}

func (o *CatalogAvailableVersionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
