// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// CatalogEditCatalogReader is a Reader for the CatalogEditCatalog structure.
type CatalogEditCatalogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CatalogEditCatalogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCatalogEditCatalogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCatalogEditCatalogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCatalogEditCatalogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCatalogEditCatalogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCatalogEditCatalogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCatalogEditCatalogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCatalogEditCatalogOK creates a CatalogEditCatalogOK with default headers values
func NewCatalogEditCatalogOK() *CatalogEditCatalogOK {
	return &CatalogEditCatalogOK{}
}

/*
CatalogEditCatalogOK describes a response with status code 200, with default header values.

Success
*/
type CatalogEditCatalogOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this catalog edit catalog o k response has a 2xx status code
func (o *CatalogEditCatalogOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this catalog edit catalog o k response has a 3xx status code
func (o *CatalogEditCatalogOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog o k response has a 4xx status code
func (o *CatalogEditCatalogOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog edit catalog o k response has a 5xx status code
func (o *CatalogEditCatalogOK) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog edit catalog o k response a status code equal to that given
func (o *CatalogEditCatalogOK) IsCode(code int) bool {
	return code == 200
}

func (o *CatalogEditCatalogOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogOK  %+v", 200, o.Payload)
}

func (o *CatalogEditCatalogOK) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogOK  %+v", 200, o.Payload)
}

func (o *CatalogEditCatalogOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *CatalogEditCatalogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogEditCatalogBadRequest creates a CatalogEditCatalogBadRequest with default headers values
func NewCatalogEditCatalogBadRequest() *CatalogEditCatalogBadRequest {
	return &CatalogEditCatalogBadRequest{}
}

/*
CatalogEditCatalogBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CatalogEditCatalogBadRequest struct {
	Payload []*models.Error
}

// IsSuccess returns true when this catalog edit catalog bad request response has a 2xx status code
func (o *CatalogEditCatalogBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog edit catalog bad request response has a 3xx status code
func (o *CatalogEditCatalogBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog bad request response has a 4xx status code
func (o *CatalogEditCatalogBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog edit catalog bad request response has a 5xx status code
func (o *CatalogEditCatalogBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog edit catalog bad request response a status code equal to that given
func (o *CatalogEditCatalogBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CatalogEditCatalogBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogEditCatalogBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogBadRequest  %+v", 400, o.Payload)
}

func (o *CatalogEditCatalogBadRequest) GetPayload() []*models.Error {
	return o.Payload
}

func (o *CatalogEditCatalogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogEditCatalogUnauthorized creates a CatalogEditCatalogUnauthorized with default headers values
func NewCatalogEditCatalogUnauthorized() *CatalogEditCatalogUnauthorized {
	return &CatalogEditCatalogUnauthorized{}
}

/*
CatalogEditCatalogUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CatalogEditCatalogUnauthorized struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog edit catalog unauthorized response has a 2xx status code
func (o *CatalogEditCatalogUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog edit catalog unauthorized response has a 3xx status code
func (o *CatalogEditCatalogUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog unauthorized response has a 4xx status code
func (o *CatalogEditCatalogUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog edit catalog unauthorized response has a 5xx status code
func (o *CatalogEditCatalogUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog edit catalog unauthorized response a status code equal to that given
func (o *CatalogEditCatalogUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CatalogEditCatalogUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogEditCatalogUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogUnauthorized  %+v", 401, o.Payload)
}

func (o *CatalogEditCatalogUnauthorized) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogEditCatalogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogEditCatalogForbidden creates a CatalogEditCatalogForbidden with default headers values
func NewCatalogEditCatalogForbidden() *CatalogEditCatalogForbidden {
	return &CatalogEditCatalogForbidden{}
}

/*
CatalogEditCatalogForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CatalogEditCatalogForbidden struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog edit catalog forbidden response has a 2xx status code
func (o *CatalogEditCatalogForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog edit catalog forbidden response has a 3xx status code
func (o *CatalogEditCatalogForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog forbidden response has a 4xx status code
func (o *CatalogEditCatalogForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog edit catalog forbidden response has a 5xx status code
func (o *CatalogEditCatalogForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog edit catalog forbidden response a status code equal to that given
func (o *CatalogEditCatalogForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CatalogEditCatalogForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogForbidden  %+v", 403, o.Payload)
}

func (o *CatalogEditCatalogForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogForbidden  %+v", 403, o.Payload)
}

func (o *CatalogEditCatalogForbidden) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogEditCatalogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogEditCatalogNotFound creates a CatalogEditCatalogNotFound with default headers values
func NewCatalogEditCatalogNotFound() *CatalogEditCatalogNotFound {
	return &CatalogEditCatalogNotFound{}
}

/*
CatalogEditCatalogNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CatalogEditCatalogNotFound struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this catalog edit catalog not found response has a 2xx status code
func (o *CatalogEditCatalogNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog edit catalog not found response has a 3xx status code
func (o *CatalogEditCatalogNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog not found response has a 4xx status code
func (o *CatalogEditCatalogNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this catalog edit catalog not found response has a 5xx status code
func (o *CatalogEditCatalogNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this catalog edit catalog not found response a status code equal to that given
func (o *CatalogEditCatalogNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CatalogEditCatalogNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogNotFound  %+v", 404, o.Payload)
}

func (o *CatalogEditCatalogNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogNotFound  %+v", 404, o.Payload)
}

func (o *CatalogEditCatalogNotFound) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *CatalogEditCatalogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCatalogEditCatalogInternalServerError creates a CatalogEditCatalogInternalServerError with default headers values
func NewCatalogEditCatalogInternalServerError() *CatalogEditCatalogInternalServerError {
	return &CatalogEditCatalogInternalServerError{}
}

/*
CatalogEditCatalogInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CatalogEditCatalogInternalServerError struct {
}

// IsSuccess returns true when this catalog edit catalog internal server error response has a 2xx status code
func (o *CatalogEditCatalogInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this catalog edit catalog internal server error response has a 3xx status code
func (o *CatalogEditCatalogInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this catalog edit catalog internal server error response has a 4xx status code
func (o *CatalogEditCatalogInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this catalog edit catalog internal server error response has a 5xx status code
func (o *CatalogEditCatalogInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this catalog edit catalog internal server error response a status code equal to that given
func (o *CatalogEditCatalogInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CatalogEditCatalogInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogInternalServerError ", 500)
}

func (o *CatalogEditCatalogInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Catalog/edit-catalog][%d] catalogEditCatalogInternalServerError ", 500)
}

func (o *CatalogEditCatalogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
