// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectsCommit(params *ProjectsCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCommitOK, error)

	ProjectsCreate(params *ProjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCreateOK, error)

	ProjectsDelete(params *ProjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteOK, *ProjectsDeleteNoContent, error)

	ProjectsDeleteWholeProject(params *ProjectsDeleteWholeProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteWholeProjectOK, *ProjectsDeleteWholeProjectNoContent, error)

	ProjectsDescribe(params *ProjectsDescribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDescribeOK, error)

	ProjectsDetails(params *ProjectsDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDetailsOK, error)

	ProjectsEdit(params *ProjectsEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsEditOK, error)

	ProjectsEditHealthStatus(params *ProjectsEditHealthStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsEditHealthStatusOK, error)

	ProjectsExtendLifeTime(params *ProjectsExtendLifeTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsExtendLifeTimeOK, error)

	ProjectsFullSpotWorkersOperations(params *ProjectsFullSpotWorkersOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsFullSpotWorkersOperationsOK, error)

	ProjectsList(params *ProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListOK, error)

	ProjectsListForBilling(params *ProjectsListForBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListForBillingOK, error)

	ProjectsListForPoller(params *ProjectsListForPollerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListForPollerOK, error)

	ProjectsListSelector(params *ProjectsListSelectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListSelectorOK, error)

	ProjectsListWithAlerts(params *ProjectsListWithAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListWithAlertsOK, error)

	ProjectsLockManager(params *ProjectsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsLockManagerOK, error)

	ProjectsLokiLogs(params *ProjectsLokiLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsLokiLogsOK, error)

	ProjectsMonitoringOperations(params *ProjectsMonitoringOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsMonitoringOperationsOK, error)

	ProjectsProjectActionButtonVisibility(params *ProjectsProjectActionButtonVisibilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsProjectActionButtonVisibilityOK, error)

	ProjectsProjectMonitoringAlerts(params *ProjectsProjectMonitoringAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsProjectMonitoringAlertsOK, error)

	ProjectsPrometheusMetrics(params *ProjectsPrometheusMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPrometheusMetricsOK, error)

	ProjectsPurge(params *ProjectsPurgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPurgeOK, error)

	ProjectsPurgeWholeProject(params *ProjectsPurgeWholeProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPurgeWholeProjectOK, error)

	ProjectsRepair(params *ProjectsRepairParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsRepairOK, error)

	ProjectsResetProjectStatus(params *ProjectsResetProjectStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsResetProjectStatusOK, error)

	ProjectsSpotVmsOperations(params *ProjectsSpotVmsOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsSpotVmsOperationsOK, error)

	ProjectsSpotWorkersOperations(params *ProjectsSpotWorkersOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsSpotWorkersOperationsOK, error)

	ProjectsUpgrade(params *ProjectsUpgradeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsUpgradeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProjectsCommit commits changes for the given project the changes will then be applied and the project will be updated the project must be in the r e a d y state
*/
func (a *Client) ProjectsCommit(params *ProjectsCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Commit",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/commit/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Commit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsCreate creates a new project
*/
func (a *Client) ProjectsCreate(params *ProjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsDelete deletes the project the project must be empty no server and in r e a d y state
*/
func (a *Client) ProjectsDelete(params *ProjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteOK, *ProjectsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Delete",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsDeleteOK:
		return value, nil, nil
	case *ProjectsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsDeleteWholeProject deletes whole project by project Id
*/
func (a *Client) ProjectsDeleteWholeProject(params *ProjectsDeleteWholeProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteWholeProjectOK, *ProjectsDeleteWholeProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteWholeProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_DeleteWholeProject",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/deletewholeproject",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDeleteWholeProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsDeleteWholeProjectOK:
		return value, nil, nil
	case *ProjectsDeleteWholeProjectNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsDescribe describes project by Id
*/
func (a *Client) ProjectsDescribe(params *ProjectsDescribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDescribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Describe",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/describe/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDescribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsDescribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Describe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsDetails retrieves details of the project by Id
*/
func (a *Client) ProjectsDetails(params *ProjectsDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Details",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsEdit updates project by Id for poller
*/
func (a *Client) ProjectsEdit(params *ProjectsEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Edit",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/update/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsEditHealthStatus updates health status of the project by Id
*/
func (a *Client) ProjectsEditHealthStatus(params *ProjectsEditHealthStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsEditHealthStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsEditHealthStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_EditHealthStatus",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/updatehealth/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsEditHealthStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsEditHealthStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_EditHealthStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsExtendLifeTime extends life time of project
*/
func (a *Client) ProjectsExtendLifeTime(params *ProjectsExtendLifeTimeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsExtendLifeTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsExtendLifeTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ExtendLifeTime",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/extend/lifetime",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsExtendLifeTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsExtendLifeTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ExtendLifeTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsFullSpotWorkersOperations fulls spot operations enable disable
*/
func (a *Client) ProjectsFullSpotWorkersOperations(params *ProjectsFullSpotWorkersOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsFullSpotWorkersOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFullSpotWorkersOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_FullSpotWorkersOperations",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/toggle-full-spot",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFullSpotWorkersOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsFullSpotWorkersOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_FullSpotWorkersOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsList retrieves a list of projects
*/
func (a *Client) ProjectsList(params *ProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsListForBilling retrieves projects for billing
*/
func (a *Client) ProjectsListForBilling(params *ProjectsListForBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListForBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListForBillingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ListForBilling",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/forbilling",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListForBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsListForBillingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ListForBilling: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsListForPoller retrieves a list of projects for poller only available for admins
*/
func (a *Client) ProjectsListForPoller(params *ProjectsListForPollerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListForPollerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListForPollerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ListForPoller",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/forpoller",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListForPollerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsListForPollerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ListForPoller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsListSelector lists of projects with dropdown
*/
func (a *Client) ProjectsListSelector(params *ProjectsListSelectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ListSelector",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListSelectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsListSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ListSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsListWithAlerts retrieves a list of projects for alert poller only available for admins
*/
func (a *Client) ProjectsListWithAlerts(params *ProjectsListWithAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsListWithAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListWithAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ListWithAlerts",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/foralerting",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListWithAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsListWithAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ListWithAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsLockManager locks unlock project
*/
func (a *Client) ProjectsLockManager(params *ProjectsLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_LockManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsLokiLogs retrieves loki logs
*/
func (a *Client) ProjectsLokiLogs(params *ProjectsLokiLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsLokiLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsLokiLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_LokiLogs",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/lokilogs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsLokiLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsLokiLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_LokiLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsMonitoringOperations monitorings operations enable disable
*/
func (a *Client) ProjectsMonitoringOperations(params *ProjectsMonitoringOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsMonitoringOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsMonitoringOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_MonitoringOperations",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/monitoring",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsMonitoringOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsMonitoringOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_MonitoringOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsProjectActionButtonVisibility visibilities of project actions
*/
func (a *Client) ProjectsProjectActionButtonVisibility(params *ProjectsProjectActionButtonVisibilityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsProjectActionButtonVisibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectActionButtonVisibilityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ProjectActionButtonVisibility",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Projects/visibility/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsProjectActionButtonVisibilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectActionButtonVisibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ProjectActionButtonVisibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsProjectMonitoringAlerts monitorings alerts for project
*/
func (a *Client) ProjectsProjectMonitoringAlerts(params *ProjectsProjectMonitoringAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsProjectMonitoringAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectMonitoringAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ProjectMonitoringAlerts",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/monitoringalerts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsProjectMonitoringAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsProjectMonitoringAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ProjectMonitoringAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsPrometheusMetrics prometheus metrics data project
*/
func (a *Client) ProjectsPrometheusMetrics(params *ProjectsPrometheusMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPrometheusMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPrometheusMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_PrometheusMetrics",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/prometheusmetrics",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsPrometheusMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPrometheusMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_PrometheusMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsPurge purges a list of servers from project by project Id
*/
func (a *Client) ProjectsPurge(params *ProjectsPurgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPurgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPurgeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Purge",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/purge",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsPurgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPurgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Purge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsPurgeWholeProject purges a whole project by project Id
*/
func (a *Client) ProjectsPurgeWholeProject(params *ProjectsPurgeWholeProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsPurgeWholeProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPurgeWholeProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_PurgeWholeProject",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/purgewholeproject",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsPurgeWholeProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsPurgeWholeProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_PurgeWholeProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsRepair repairs project by Id
*/
func (a *Client) ProjectsRepair(params *ProjectsRepairParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsRepairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRepairParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Repair",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/repair/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRepairReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsRepairOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Repair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsResetProjectStatus changes the project status for the given project only available for admin
*/
func (a *Client) ProjectsResetProjectStatus(params *ProjectsResetProjectStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsResetProjectStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsResetProjectStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_ResetProjectStatus",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/reset",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsResetProjectStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsResetProjectStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_ResetProjectStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsSpotVmsOperations spots vm s operations enable disable
*/
func (a *Client) ProjectsSpotVmsOperations(params *ProjectsSpotVmsOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsSpotVmsOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSpotVmsOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_SpotVmsOperations",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/toggle-spot-vms",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSpotVmsOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsSpotVmsOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_SpotVmsOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsSpotWorkersOperations spots worker s operations enable disable
*/
func (a *Client) ProjectsSpotWorkersOperations(params *ProjectsSpotWorkersOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsSpotWorkersOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSpotWorkersOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_SpotWorkersOperations",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/toggle-spot-workers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSpotWorkersOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsSpotWorkersOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_SpotWorkersOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectsUpgrade upgrades the project s kubernetes to the next available version project must be r e a d y
*/
func (a *Client) ProjectsUpgrade(params *ProjectsUpgradeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Upgrade",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Projects/upgrade/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsUpgradeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Projects_Upgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
