// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectsListForPollerReader is a Reader for the ProjectsListForPoller structure.
type ProjectsListForPollerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsListForPollerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsListForPollerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsListForPollerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsListForPollerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsListForPollerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsListForPollerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsListForPollerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsListForPollerOK creates a ProjectsListForPollerOK with default headers values
func NewProjectsListForPollerOK() *ProjectsListForPollerOK {
	return &ProjectsListForPollerOK{}
}

/*
ProjectsListForPollerOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsListForPollerOK struct {
	Payload *ProjectsListForPollerOKBody
}

// IsSuccess returns true when this projects list for poller o k response has a 2xx status code
func (o *ProjectsListForPollerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects list for poller o k response has a 3xx status code
func (o *ProjectsListForPollerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller o k response has a 4xx status code
func (o *ProjectsListForPollerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list for poller o k response has a 5xx status code
func (o *ProjectsListForPollerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for poller o k response a status code equal to that given
func (o *ProjectsListForPollerOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsListForPollerOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerOK  %+v", 200, o.Payload)
}

func (o *ProjectsListForPollerOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerOK  %+v", 200, o.Payload)
}

func (o *ProjectsListForPollerOK) GetPayload() *ProjectsListForPollerOKBody {
	return o.Payload
}

func (o *ProjectsListForPollerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForPollerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForPollerBadRequest creates a ProjectsListForPollerBadRequest with default headers values
func NewProjectsListForPollerBadRequest() *ProjectsListForPollerBadRequest {
	return &ProjectsListForPollerBadRequest{}
}

/*
ProjectsListForPollerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsListForPollerBadRequest struct {
	Payload []*ProjectsListForPollerBadRequestBodyItems0
}

// IsSuccess returns true when this projects list for poller bad request response has a 2xx status code
func (o *ProjectsListForPollerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for poller bad request response has a 3xx status code
func (o *ProjectsListForPollerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller bad request response has a 4xx status code
func (o *ProjectsListForPollerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for poller bad request response has a 5xx status code
func (o *ProjectsListForPollerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for poller bad request response a status code equal to that given
func (o *ProjectsListForPollerBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsListForPollerBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListForPollerBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListForPollerBadRequest) GetPayload() []*ProjectsListForPollerBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectsListForPollerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForPollerUnauthorized creates a ProjectsListForPollerUnauthorized with default headers values
func NewProjectsListForPollerUnauthorized() *ProjectsListForPollerUnauthorized {
	return &ProjectsListForPollerUnauthorized{}
}

/*
ProjectsListForPollerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsListForPollerUnauthorized struct {
	Payload *ProjectsListForPollerUnauthorizedBody
}

// IsSuccess returns true when this projects list for poller unauthorized response has a 2xx status code
func (o *ProjectsListForPollerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for poller unauthorized response has a 3xx status code
func (o *ProjectsListForPollerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller unauthorized response has a 4xx status code
func (o *ProjectsListForPollerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for poller unauthorized response has a 5xx status code
func (o *ProjectsListForPollerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for poller unauthorized response a status code equal to that given
func (o *ProjectsListForPollerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsListForPollerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListForPollerUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListForPollerUnauthorized) GetPayload() *ProjectsListForPollerUnauthorizedBody {
	return o.Payload
}

func (o *ProjectsListForPollerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForPollerUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForPollerForbidden creates a ProjectsListForPollerForbidden with default headers values
func NewProjectsListForPollerForbidden() *ProjectsListForPollerForbidden {
	return &ProjectsListForPollerForbidden{}
}

/*
ProjectsListForPollerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsListForPollerForbidden struct {
	Payload *ProjectsListForPollerForbiddenBody
}

// IsSuccess returns true when this projects list for poller forbidden response has a 2xx status code
func (o *ProjectsListForPollerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for poller forbidden response has a 3xx status code
func (o *ProjectsListForPollerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller forbidden response has a 4xx status code
func (o *ProjectsListForPollerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for poller forbidden response has a 5xx status code
func (o *ProjectsListForPollerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for poller forbidden response a status code equal to that given
func (o *ProjectsListForPollerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsListForPollerForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForPollerForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForPollerForbidden) GetPayload() *ProjectsListForPollerForbiddenBody {
	return o.Payload
}

func (o *ProjectsListForPollerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForPollerForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForPollerNotFound creates a ProjectsListForPollerNotFound with default headers values
func NewProjectsListForPollerNotFound() *ProjectsListForPollerNotFound {
	return &ProjectsListForPollerNotFound{}
}

/*
ProjectsListForPollerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsListForPollerNotFound struct {
	Payload *ProjectsListForPollerNotFoundBody
}

// IsSuccess returns true when this projects list for poller not found response has a 2xx status code
func (o *ProjectsListForPollerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for poller not found response has a 3xx status code
func (o *ProjectsListForPollerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller not found response has a 4xx status code
func (o *ProjectsListForPollerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for poller not found response has a 5xx status code
func (o *ProjectsListForPollerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for poller not found response a status code equal to that given
func (o *ProjectsListForPollerNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsListForPollerNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListForPollerNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListForPollerNotFound) GetPayload() *ProjectsListForPollerNotFoundBody {
	return o.Payload
}

func (o *ProjectsListForPollerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForPollerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForPollerInternalServerError creates a ProjectsListForPollerInternalServerError with default headers values
func NewProjectsListForPollerInternalServerError() *ProjectsListForPollerInternalServerError {
	return &ProjectsListForPollerInternalServerError{}
}

/*
ProjectsListForPollerInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsListForPollerInternalServerError struct {
}

// IsSuccess returns true when this projects list for poller internal server error response has a 2xx status code
func (o *ProjectsListForPollerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for poller internal server error response has a 3xx status code
func (o *ProjectsListForPollerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for poller internal server error response has a 4xx status code
func (o *ProjectsListForPollerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list for poller internal server error response has a 5xx status code
func (o *ProjectsListForPollerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects list for poller internal server error response a status code equal to that given
func (o *ProjectsListForPollerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsListForPollerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerInternalServerError ", 500)
}

func (o *ProjectsListForPollerInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forpoller][%d] projectsListForPollerInternalServerError ", 500)
}

func (o *ProjectsListForPollerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectsListForPollerBadRequestBodyItems0 projects list for poller bad request body items0
swagger:model ProjectsListForPollerBadRequestBodyItems0
*/
type ProjectsListForPollerBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this projects list for poller bad request body items0
func (o *ProjectsListForPollerBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller bad request body items0 based on context it is used
func (o *ProjectsListForPollerBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerForbiddenBody projects list for poller forbidden body
swagger:model ProjectsListForPollerForbiddenBody
*/
type ProjectsListForPollerForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for poller forbidden body
func (o *ProjectsListForPollerForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller forbidden body based on context it is used
func (o *ProjectsListForPollerForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerNotFoundBody projects list for poller not found body
swagger:model ProjectsListForPollerNotFoundBody
*/
type ProjectsListForPollerNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for poller not found body
func (o *ProjectsListForPollerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller not found body based on context it is used
func (o *ProjectsListForPollerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBody projects list for poller o k body
swagger:model ProjectsListForPollerOKBody
*/
type ProjectsListForPollerOKBody struct {

	// data
	Data []*ProjectsListForPollerOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this projects list for poller o k body
func (o *ProjectsListForPollerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectsListForPollerOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectsListForPollerOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list for poller o k body based on the context it is used
func (o *ProjectsListForPollerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectsListForPollerOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectsListForPollerOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0 projects list for poller o k body data items0
swagger:model ProjectsListForPollerOKBodyDataItems0
*/
type ProjectsListForPollerOKBodyDataItems0 struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// access profiles
	AccessProfiles *ProjectsListForPollerOKBodyDataItems0AccessProfiles `json:"accessProfiles,omitempty"`

	// availability zones
	AvailabilityZones []string `json:"availabilityZones"`

	// aws project a z subnets
	AwsProjectAZSubnets []*ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0 `json:"awsProjectAZSubnets"`

	// bastion
	Bastion int32 `json:"bastion,omitempty"`

	// bound users
	BoundUsers []*ProjectsListForPollerOKBodyDataItems0BoundUsersItems0 `json:"boundUsers"`

	// cidr
	Cidr string `json:"cidr,omitempty"`

	// cloud credential Id
	CloudCredentialID int32 `json:"cloudCredentialId,omitempty"`

	// cloud credential name
	CloudCredentialName string `json:"cloudCredentialName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// flavors
	Flavors []string `json:"flavors"`

	// google project Id
	GoogleProjectID string `json:"googleProjectId,omitempty"`

	// has kube config file
	HasKubeConfigFile bool `json:"hasKubeConfigFile"`

	// has selected flavors
	HasSelectedFlavors bool `json:"hasSelectedFlavors"`

	// health
	Health string `json:"health,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade"`

	// is autoscaling enabled
	IsAutoscalingEnabled bool `json:"isAutoscalingEnabled"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled"`

	// is delete cluster
	IsDeleteCluster bool `json:"isDeleteCluster"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes"`

	// is kubevap enabled
	IsKubevapEnabled bool `json:"isKubevapEnabled"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// is opa enabled
	IsOpaEnabled bool `json:"isOpaEnabled"`

	// job Url
	JobURL string `json:"jobUrl,omitempty"`

	// kubernetes alerts
	KubernetesAlerts []*ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0 `json:"kubernetesAlerts"`

	// kubernetes current version
	KubernetesCurrentVersion string `json:"kubernetesCurrentVersion,omitempty"`

	// kubernetes profiles
	KubernetesProfiles *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles `json:"kubernetesProfiles,omitempty"`

	// kubernetes target version
	KubernetesTargetVersion string `json:"kubernetesTargetVersion,omitempty"`

	// kubespray current version
	KubesprayCurrentVersion string `json:"kubesprayCurrentVersion,omitempty"`

	// kubespray target version
	KubesprayTargetVersion string `json:"kubesprayTargetVersion,omitempty"`

	// kubevap enabeled kubernetes versions
	KubevapEnabeledKubernetesVersions []string `json:"kubevapEnabeledKubernetesVersions"`

	// master
	Master int32 `json:"master,omitempty"`

	// master ready
	MasterReady int32 `json:"masterReady,omitempty"`

	// monitoring credential
	MonitoringCredential *ProjectsListForPollerOKBodyDataItems0MonitoringCredential `json:"monitoringCredential,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// net mask
	NetMask int32 `json:"netMask,omitempty"`

	// opa profile revision
	OpaProfileRevision int32 `json:"opaProfileRevision,omitempty"`

	// opa profiles
	OpaProfiles *ProjectsListForPollerOKBodyDataItems0OpaProfiles `json:"opaProfiles,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// partner Id
	PartnerID int32 `json:"partnerId,omitempty"`

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// quota Id
	QuotaID int32 `json:"quotaId,omitempty"`

	// router Id end range
	RouterIDEndRange int32 `json:"routerIdEndRange,omitempty"`

	// router Id start range
	RouterIDStartRange int32 `json:"routerIdStartRange,omitempty"`

	// s3 access key Id
	S3AccessKeyID string `json:"s3AccessKeyId,omitempty"`

	// s3 bucket name
	S3BucketName string `json:"s3BucketName,omitempty"`

	// s3 endpoint
	S3Endpoint string `json:"s3Endpoint,omitempty"`

	// s3 region
	S3Region string `json:"s3Region,omitempty"`

	// s3 secret key
	S3SecretKey string `json:"s3SecretKey,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// taikun l b flavor
	TaikunLBFlavor string `json:"taikunLBFlavor,omitempty"`

	// taikun l b private key
	TaikunLBPrivateKey string `json:"taikunLBPrivateKey,omitempty"`

	// taikun l b public key
	TaikunLBPublicKey string `json:"taikunLBPublicKey,omitempty"`

	// taikun private SSH key
	TaikunPrivateSSHKey string `json:"taikunPrivateSSHKey,omitempty"`

	// taikun public SSH key
	TaikunPublicSSHKey string `json:"taikunPublicSSHKey,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// topic name
	TopicName string `json:"topicName,omitempty"`

	// total servers count
	TotalServersCount int32 `json:"totalServersCount,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this projects list for poller o k body data items0
func (o *ProjectsListForPollerOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAwsProjectAZSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBoundUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKubernetesAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKubernetesProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMonitoringCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOpaProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateAccessProfiles(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessProfiles) { // not required
		return nil
	}

	if o.AccessProfiles != nil {
		if err := o.AccessProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateAwsProjectAZSubnets(formats strfmt.Registry) error {
	if swag.IsZero(o.AwsProjectAZSubnets) { // not required
		return nil
	}

	for i := 0; i < len(o.AwsProjectAZSubnets); i++ {
		if swag.IsZero(o.AwsProjectAZSubnets[i]) { // not required
			continue
		}

		if o.AwsProjectAZSubnets[i] != nil {
			if err := o.AwsProjectAZSubnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateBoundUsers(formats strfmt.Registry) error {
	if swag.IsZero(o.BoundUsers) { // not required
		return nil
	}

	for i := 0; i < len(o.BoundUsers); i++ {
		if swag.IsZero(o.BoundUsers[i]) { // not required
			continue
		}

		if o.BoundUsers[i] != nil {
			if err := o.BoundUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateKubernetesAlerts(formats strfmt.Registry) error {
	if swag.IsZero(o.KubernetesAlerts) { // not required
		return nil
	}

	for i := 0; i < len(o.KubernetesAlerts); i++ {
		if swag.IsZero(o.KubernetesAlerts[i]) { // not required
			continue
		}

		if o.KubernetesAlerts[i] != nil {
			if err := o.KubernetesAlerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateKubernetesProfiles(formats strfmt.Registry) error {
	if swag.IsZero(o.KubernetesProfiles) { // not required
		return nil
	}

	if o.KubernetesProfiles != nil {
		if err := o.KubernetesProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateMonitoringCredential(formats strfmt.Registry) error {
	if swag.IsZero(o.MonitoringCredential) { // not required
		return nil
	}

	if o.MonitoringCredential != nil {
		if err := o.MonitoringCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringCredential")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateOpaProfiles(formats strfmt.Registry) error {
	if swag.IsZero(o.OpaProfiles) { // not required
		return nil
	}

	if o.OpaProfiles != nil {
		if err := o.OpaProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opaProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opaProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this projects list for poller o k body data items0 based on the context it is used
func (o *ProjectsListForPollerOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccessProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAwsProjectAZSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBoundUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKubernetesAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKubernetesProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMonitoringCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOpaProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateAccessProfiles(ctx context.Context, formats strfmt.Registry) error {

	if o.AccessProfiles != nil {
		if err := o.AccessProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateAwsProjectAZSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AwsProjectAZSubnets); i++ {

		if o.AwsProjectAZSubnets[i] != nil {
			if err := o.AwsProjectAZSubnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateBoundUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BoundUsers); i++ {

		if o.BoundUsers[i] != nil {
			if err := o.BoundUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateKubernetesAlerts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.KubernetesAlerts); i++ {

		if o.KubernetesAlerts[i] != nil {
			if err := o.KubernetesAlerts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateKubernetesProfiles(ctx context.Context, formats strfmt.Registry) error {

	if o.KubernetesProfiles != nil {
		if err := o.KubernetesProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProfiles")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateMonitoringCredential(ctx context.Context, formats strfmt.Registry) error {

	if o.MonitoringCredential != nil {
		if err := o.MonitoringCredential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringCredential")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0) contextValidateOpaProfiles(ctx context.Context, formats strfmt.Registry) error {

	if o.OpaProfiles != nil {
		if err := o.OpaProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opaProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opaProfiles")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AccessProfiles projects list for poller o k body data items0 access profiles
swagger:model ProjectsListForPollerOKBodyDataItems0AccessProfiles
*/
type ProjectsListForPollerOKBodyDataItems0AccessProfiles struct {

	// allowed hosts
	AllowedHosts []*ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0 `json:"allowedHosts"`

	// dns servers
	DNSServers []*ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0 `json:"dnsServers"`

	// http proxy
	HTTPProxy string `json:"httpProxy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ntp servers
	NtpServers []*ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0 `json:"ntpServers"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// ssh users
	SSHUsers []*ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0 `json:"sshUsers"`
}

// Validate validates this projects list for poller o k body data items0 access profiles
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSSHUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) validateAllowedHosts(formats strfmt.Registry) error {
	if swag.IsZero(o.AllowedHosts) { // not required
		return nil
	}

	for i := 0; i < len(o.AllowedHosts); i++ {
		if swag.IsZero(o.AllowedHosts[i]) { // not required
			continue
		}

		if o.AllowedHosts[i] != nil {
			if err := o.AllowedHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(o.DNSServers) { // not required
		return nil
	}

	for i := 0; i < len(o.DNSServers); i++ {
		if swag.IsZero(o.DNSServers[i]) { // not required
			continue
		}

		if o.DNSServers[i] != nil {
			if err := o.DNSServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) validateNtpServers(formats strfmt.Registry) error {
	if swag.IsZero(o.NtpServers) { // not required
		return nil
	}

	for i := 0; i < len(o.NtpServers); i++ {
		if swag.IsZero(o.NtpServers[i]) { // not required
			continue
		}

		if o.NtpServers[i] != nil {
			if err := o.NtpServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) validateSSHUsers(formats strfmt.Registry) error {
	if swag.IsZero(o.SSHUsers) { // not required
		return nil
	}

	for i := 0; i < len(o.SSHUsers); i++ {
		if swag.IsZero(o.SSHUsers[i]) { // not required
			continue
		}

		if o.SSHUsers[i] != nil {
			if err := o.SSHUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list for poller o k body data items0 access profiles based on the context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAllowedHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNtpServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSSHUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) contextValidateAllowedHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AllowedHosts); i++ {

		if o.AllowedHosts[i] != nil {
			if err := o.AllowedHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DNSServers); i++ {

		if o.DNSServers[i] != nil {
			if err := o.DNSServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) contextValidateNtpServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NtpServers); i++ {

		if o.NtpServers[i] != nil {
			if err := o.NtpServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) contextValidateSSHUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SSHUsers); i++ {

		if o.SSHUsers[i] != nil {
			if err := o.SSHUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AccessProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0 projects list for poller o k body data items0 access profiles allowed hosts items0
swagger:model ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0
*/
type ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0 struct {

	// access profile Id
	AccessProfileID int32 `json:"accessProfileId,omitempty"`

	// access profile name
	AccessProfileName string `json:"accessProfileName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mask bits
	MaskBits int32 `json:"maskBits,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 access profiles allowed hosts items0
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 access profiles allowed hosts items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AccessProfilesAllowedHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0 projects list for poller o k body data items0 access profiles DNS servers items0
swagger:model ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0
*/
type ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 access profiles DNS servers items0
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 access profiles DNS servers items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AccessProfilesDNSServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0 projects list for poller o k body data items0 access profiles ntp servers items0
swagger:model ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0
*/
type ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 access profiles ntp servers items0
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 access profiles ntp servers items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AccessProfilesNtpServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0 projects list for poller o k body data items0 access profiles SSH users items0
swagger:model ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0
*/
type ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"isDeleted"`

	// name
	Name string `json:"name,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 access profiles SSH users items0
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 access profiles SSH users items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AccessProfilesSSHUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0 projects list for poller o k body data items0 aws project a z subnets items0
swagger:model ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0
*/
type ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0 struct {

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 aws project a z subnets items0
func (o *ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 aws project a z subnets items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0AwsProjectAZSubnetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0BoundUsersItems0 projects list for poller o k body data items0 bound users items0
swagger:model ProjectsListForPollerOKBodyDataItems0BoundUsersItems0
*/
type ProjectsListForPollerOKBodyDataItems0BoundUsersItems0 struct {

	// user Id
	UserID string `json:"userId,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 bound users items0
func (o *ProjectsListForPollerOKBodyDataItems0BoundUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 bound users items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0BoundUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0BoundUsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0BoundUsersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0BoundUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0 projects list for poller o k body data items0 kubernetes alerts items0
swagger:model ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0
*/
type ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// end at
	EndAt string `json:"endAt,omitempty"`

	// fingerprint
	Fingerprint string `json:"fingerprint,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is silenced
	IsSilenced bool `json:"isSilenced"`

	// is solved
	IsSolved bool `json:"isSolved"`

	// labels
	Labels interface{} `json:"labels,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// silence reason
	SilenceReason string `json:"silenceReason,omitempty"`

	// starts at
	StartsAt string `json:"startsAt,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 kubernetes alerts items0
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 kubernetes alerts items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0KubernetesAlertsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0KubernetesProfiles projects list for poller o k body data items0 kubernetes profiles
swagger:model ProjectsListForPollerOKBodyDataItems0KubernetesProfiles
*/
type ProjectsListForPollerOKBodyDataItems0KubernetesProfiles struct {

	// allow scheduling on master
	AllowSchedulingOnMaster bool `json:"allowSchedulingOnMaster"`

	// cni
	Cni string `json:"cni,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// expose node port on bastion
	ExposeNodePortOnBastion bool `json:"exposeNodePortOnBastion"`

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// octavia enabled
	OctaviaEnabled bool `json:"octaviaEnabled"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// projects
	Projects []*ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0 `json:"projects"`

	// taikun l b enabled
	TaikunLBEnabled bool `json:"taikunLBEnabled"`

	// unique cluster name
	UniqueClusterName bool `json:"uniqueClusterName"`
}

// Validate validates this projects list for poller o k body data items0 kubernetes profiles
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list for poller o k body data items0 kubernetes profiles based on the context it is used
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0KubernetesProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0 projects list for poller o k body data items0 kubernetes profiles projects items0
swagger:model ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0
*/
type ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 kubernetes profiles projects items0
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 kubernetes profiles projects items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0KubernetesProfilesProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0MonitoringCredential projects list for poller o k body data items0 monitoring credential
swagger:model ProjectsListForPollerOKBodyDataItems0MonitoringCredential
*/
type ProjectsListForPollerOKBodyDataItems0MonitoringCredential struct {

	// alert manager Url
	AlertManagerURL string `json:"alertManagerUrl,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// loki Url
	LokiURL string `json:"lokiUrl,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// prometheus Url
	PrometheusURL string `json:"prometheusUrl,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 monitoring credential
func (o *ProjectsListForPollerOKBodyDataItems0MonitoringCredential) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 monitoring credential based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0MonitoringCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0MonitoringCredential) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0MonitoringCredential) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0MonitoringCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0OpaProfiles projects list for poller o k body data items0 opa profiles
swagger:model ProjectsListForPollerOKBodyDataItems0OpaProfiles
*/
type ProjectsListForPollerOKBodyDataItems0OpaProfiles struct {

	// allowed repo
	AllowedRepo []string `json:"allowedRepo"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// forbid Http ingress
	ForbidHTTPIngress bool `json:"forbidHttpIngress"`

	// forbid node port
	ForbidNodePort bool `json:"forbidNodePort"`

	// forbid specific tags
	ForbidSpecificTags []string `json:"forbidSpecificTags"`

	// id
	ID int32 `json:"id,omitempty"`

	// ingress whitelist
	IngressWhitelist []string `json:"ingressWhitelist"`

	// is default
	IsDefault bool `json:"isDefault"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// projects
	Projects []*ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0 `json:"projects"`

	// require probe
	RequireProbe bool `json:"requireProbe"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// unique ingresses
	UniqueIngresses bool `json:"uniqueIngresses"`

	// unique service selector
	UniqueServiceSelector bool `json:"uniqueServiceSelector"`
}

// Validate validates this projects list for poller o k body data items0 opa profiles
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list for poller o k body data items0 opa profiles based on the context it is used
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0OpaProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0 projects list for poller o k body data items0 opa profiles projects items0
swagger:model ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0
*/
type ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this projects list for poller o k body data items0 opa profiles projects items0
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller o k body data items0 opa profiles projects items0 based on context it is used
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerOKBodyDataItems0OpaProfilesProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForPollerUnauthorizedBody projects list for poller unauthorized body
swagger:model ProjectsListForPollerUnauthorizedBody
*/
type ProjectsListForPollerUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for poller unauthorized body
func (o *ProjectsListForPollerUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for poller unauthorized body based on context it is used
func (o *ProjectsListForPollerUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForPollerUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForPollerUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForPollerUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
