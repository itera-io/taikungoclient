// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// ProjectsCommitReader is a Reader for the ProjectsCommit structure.
type ProjectsCommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsCommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsCommitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsCommitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsCommitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsCommitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsCommitOK creates a ProjectsCommitOK with default headers values
func NewProjectsCommitOK() *ProjectsCommitOK {
	return &ProjectsCommitOK{}
}

/*
ProjectsCommitOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsCommitOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this projects commit o k response has a 2xx status code
func (o *ProjectsCommitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects commit o k response has a 3xx status code
func (o *ProjectsCommitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit o k response has a 4xx status code
func (o *ProjectsCommitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects commit o k response has a 5xx status code
func (o *ProjectsCommitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects commit o k response a status code equal to that given
func (o *ProjectsCommitOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsCommitOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitOK  %+v", 200, o.Payload)
}

func (o *ProjectsCommitOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitOK  %+v", 200, o.Payload)
}

func (o *ProjectsCommitOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *ProjectsCommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCommitBadRequest creates a ProjectsCommitBadRequest with default headers values
func NewProjectsCommitBadRequest() *ProjectsCommitBadRequest {
	return &ProjectsCommitBadRequest{}
}

/*
ProjectsCommitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsCommitBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this projects commit bad request response has a 2xx status code
func (o *ProjectsCommitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects commit bad request response has a 3xx status code
func (o *ProjectsCommitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit bad request response has a 4xx status code
func (o *ProjectsCommitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects commit bad request response has a 5xx status code
func (o *ProjectsCommitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects commit bad request response a status code equal to that given
func (o *ProjectsCommitBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsCommitBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsCommitBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsCommitBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsCommitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCommitUnauthorized creates a ProjectsCommitUnauthorized with default headers values
func NewProjectsCommitUnauthorized() *ProjectsCommitUnauthorized {
	return &ProjectsCommitUnauthorized{}
}

/*
ProjectsCommitUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsCommitUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this projects commit unauthorized response has a 2xx status code
func (o *ProjectsCommitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects commit unauthorized response has a 3xx status code
func (o *ProjectsCommitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit unauthorized response has a 4xx status code
func (o *ProjectsCommitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects commit unauthorized response has a 5xx status code
func (o *ProjectsCommitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects commit unauthorized response a status code equal to that given
func (o *ProjectsCommitUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsCommitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsCommitUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsCommitUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProjectsCommitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCommitForbidden creates a ProjectsCommitForbidden with default headers values
func NewProjectsCommitForbidden() *ProjectsCommitForbidden {
	return &ProjectsCommitForbidden{}
}

/*
ProjectsCommitForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsCommitForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this projects commit forbidden response has a 2xx status code
func (o *ProjectsCommitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects commit forbidden response has a 3xx status code
func (o *ProjectsCommitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit forbidden response has a 4xx status code
func (o *ProjectsCommitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects commit forbidden response has a 5xx status code
func (o *ProjectsCommitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects commit forbidden response a status code equal to that given
func (o *ProjectsCommitForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsCommitForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsCommitForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsCommitForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProjectsCommitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCommitNotFound creates a ProjectsCommitNotFound with default headers values
func NewProjectsCommitNotFound() *ProjectsCommitNotFound {
	return &ProjectsCommitNotFound{}
}

/*
ProjectsCommitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsCommitNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this projects commit not found response has a 2xx status code
func (o *ProjectsCommitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects commit not found response has a 3xx status code
func (o *ProjectsCommitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit not found response has a 4xx status code
func (o *ProjectsCommitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects commit not found response has a 5xx status code
func (o *ProjectsCommitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects commit not found response a status code equal to that given
func (o *ProjectsCommitNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsCommitNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsCommitNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsCommitNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProjectsCommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCommitInternalServerError creates a ProjectsCommitInternalServerError with default headers values
func NewProjectsCommitInternalServerError() *ProjectsCommitInternalServerError {
	return &ProjectsCommitInternalServerError{}
}

/*
ProjectsCommitInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsCommitInternalServerError struct {
}

// IsSuccess returns true when this projects commit internal server error response has a 2xx status code
func (o *ProjectsCommitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects commit internal server error response has a 3xx status code
func (o *ProjectsCommitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects commit internal server error response has a 4xx status code
func (o *ProjectsCommitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects commit internal server error response has a 5xx status code
func (o *ProjectsCommitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects commit internal server error response a status code equal to that given
func (o *ProjectsCommitInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsCommitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitInternalServerError ", 500)
}

func (o *ProjectsCommitInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/commit/{projectId}][%d] projectsCommitInternalServerError ", 500)
}

func (o *ProjectsCommitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
