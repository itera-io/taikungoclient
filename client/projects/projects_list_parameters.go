// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProjectsListParams creates a new ProjectsListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProjectsListParams() *ProjectsListParams {
	return &ProjectsListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsListParamsWithTimeout creates a new ProjectsListParams object
// with the ability to set a timeout on a request.
func NewProjectsListParamsWithTimeout(timeout time.Duration) *ProjectsListParams {
	return &ProjectsListParams{
		timeout: timeout,
	}
}

// NewProjectsListParamsWithContext creates a new ProjectsListParams object
// with the ability to set a context for a request.
func NewProjectsListParamsWithContext(ctx context.Context) *ProjectsListParams {
	return &ProjectsListParams{
		Context: ctx,
	}
}

// NewProjectsListParamsWithHTTPClient creates a new ProjectsListParams object
// with the ability to set a custom HTTPClient for a request.
func NewProjectsListParamsWithHTTPClient(client *http.Client) *ProjectsListParams {
	return &ProjectsListParams{
		HTTPClient: client,
	}
}

/* ProjectsListParams contains all the parameters to send to the API endpoint
   for the projects list operation.

   Typically these are written to a http.Request.
*/
type ProjectsListParams struct {

	/* Limit.

	   Limits user size (by default 50)

	   Format: int32
	*/
	Limit *int32

	/* Offset.

	   Page number

	   Format: int32
	*/
	Offset *int32

	// OrganizationID.
	//
	// Format: int32
	OrganizationID *int32

	/* Search.

	   Keyword for searching
	*/
	Search *string

	// SearchID.
	SearchID *string

	// SortBy.
	SortBy *string

	// SortDirection.
	SortDirection *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the projects list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectsListParams) WithDefaults() *ProjectsListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the projects list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectsListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the projects list params
func (o *ProjectsListParams) WithTimeout(timeout time.Duration) *ProjectsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects list params
func (o *ProjectsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects list params
func (o *ProjectsListParams) WithContext(ctx context.Context) *ProjectsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects list params
func (o *ProjectsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects list params
func (o *ProjectsListParams) WithHTTPClient(client *http.Client) *ProjectsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects list params
func (o *ProjectsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the projects list params
func (o *ProjectsListParams) WithLimit(limit *int32) *ProjectsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the projects list params
func (o *ProjectsListParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the projects list params
func (o *ProjectsListParams) WithOffset(offset *int32) *ProjectsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the projects list params
func (o *ProjectsListParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationID adds the organizationID to the projects list params
func (o *ProjectsListParams) WithOrganizationID(organizationID *int32) *ProjectsListParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the projects list params
func (o *ProjectsListParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithSearch adds the search to the projects list params
func (o *ProjectsListParams) WithSearch(search *string) *ProjectsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the projects list params
func (o *ProjectsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSearchID adds the searchID to the projects list params
func (o *ProjectsListParams) WithSearchID(searchID *string) *ProjectsListParams {
	o.SetSearchID(searchID)
	return o
}

// SetSearchID adds the searchId to the projects list params
func (o *ProjectsListParams) SetSearchID(searchID *string) {
	o.SearchID = searchID
}

// WithSortBy adds the sortBy to the projects list params
func (o *ProjectsListParams) WithSortBy(sortBy *string) *ProjectsListParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the projects list params
func (o *ProjectsListParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDirection adds the sortDirection to the projects list params
func (o *ProjectsListParams) WithSortDirection(sortDirection *string) *ProjectsListParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the projects list params
func (o *ProjectsListParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithUpdatedAt adds the updatedAt to the projects list params
func (o *ProjectsListParams) WithUpdatedAt(updatedAt *strfmt.DateTime) *ProjectsListParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the projects list params
func (o *ProjectsListParams) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WithV adds the v to the projects list params
func (o *ProjectsListParams) WithV(v string) *ProjectsListParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the projects list params
func (o *ProjectsListParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SearchID != nil {

		// query param searchId
		var qrSearchID string

		if o.SearchID != nil {
			qrSearchID = *o.SearchID
		}
		qSearchID := qrSearchID
		if qSearchID != "" {

			if err := r.SetQueryParam("searchId", qSearchID); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortDirection != nil {

		// query param sortDirection
		var qrSortDirection string

		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {

			if err := r.SetQueryParam("sortDirection", qSortDirection); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
