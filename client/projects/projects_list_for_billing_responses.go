// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectsListForBillingReader is a Reader for the ProjectsListForBilling structure.
type ProjectsListForBillingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsListForBillingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsListForBillingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsListForBillingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsListForBillingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsListForBillingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsListForBillingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsListForBillingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsListForBillingOK creates a ProjectsListForBillingOK with default headers values
func NewProjectsListForBillingOK() *ProjectsListForBillingOK {
	return &ProjectsListForBillingOK{}
}

/*
ProjectsListForBillingOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsListForBillingOK struct {
	Payload []*ProjectsListForBillingOKBodyItems0
}

// IsSuccess returns true when this projects list for billing o k response has a 2xx status code
func (o *ProjectsListForBillingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects list for billing o k response has a 3xx status code
func (o *ProjectsListForBillingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing o k response has a 4xx status code
func (o *ProjectsListForBillingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list for billing o k response has a 5xx status code
func (o *ProjectsListForBillingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for billing o k response a status code equal to that given
func (o *ProjectsListForBillingOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsListForBillingOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingOK  %+v", 200, o.Payload)
}

func (o *ProjectsListForBillingOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingOK  %+v", 200, o.Payload)
}

func (o *ProjectsListForBillingOK) GetPayload() []*ProjectsListForBillingOKBodyItems0 {
	return o.Payload
}

func (o *ProjectsListForBillingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForBillingBadRequest creates a ProjectsListForBillingBadRequest with default headers values
func NewProjectsListForBillingBadRequest() *ProjectsListForBillingBadRequest {
	return &ProjectsListForBillingBadRequest{}
}

/*
ProjectsListForBillingBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsListForBillingBadRequest struct {
	Payload []*ProjectsListForBillingBadRequestBodyItems0
}

// IsSuccess returns true when this projects list for billing bad request response has a 2xx status code
func (o *ProjectsListForBillingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for billing bad request response has a 3xx status code
func (o *ProjectsListForBillingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing bad request response has a 4xx status code
func (o *ProjectsListForBillingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for billing bad request response has a 5xx status code
func (o *ProjectsListForBillingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for billing bad request response a status code equal to that given
func (o *ProjectsListForBillingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsListForBillingBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListForBillingBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsListForBillingBadRequest) GetPayload() []*ProjectsListForBillingBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectsListForBillingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForBillingUnauthorized creates a ProjectsListForBillingUnauthorized with default headers values
func NewProjectsListForBillingUnauthorized() *ProjectsListForBillingUnauthorized {
	return &ProjectsListForBillingUnauthorized{}
}

/*
ProjectsListForBillingUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsListForBillingUnauthorized struct {
	Payload *ProjectsListForBillingUnauthorizedBody
}

// IsSuccess returns true when this projects list for billing unauthorized response has a 2xx status code
func (o *ProjectsListForBillingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for billing unauthorized response has a 3xx status code
func (o *ProjectsListForBillingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing unauthorized response has a 4xx status code
func (o *ProjectsListForBillingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for billing unauthorized response has a 5xx status code
func (o *ProjectsListForBillingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for billing unauthorized response a status code equal to that given
func (o *ProjectsListForBillingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsListForBillingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListForBillingUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsListForBillingUnauthorized) GetPayload() *ProjectsListForBillingUnauthorizedBody {
	return o.Payload
}

func (o *ProjectsListForBillingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForBillingUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForBillingForbidden creates a ProjectsListForBillingForbidden with default headers values
func NewProjectsListForBillingForbidden() *ProjectsListForBillingForbidden {
	return &ProjectsListForBillingForbidden{}
}

/*
ProjectsListForBillingForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsListForBillingForbidden struct {
	Payload *ProjectsListForBillingForbiddenBody
}

// IsSuccess returns true when this projects list for billing forbidden response has a 2xx status code
func (o *ProjectsListForBillingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for billing forbidden response has a 3xx status code
func (o *ProjectsListForBillingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing forbidden response has a 4xx status code
func (o *ProjectsListForBillingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for billing forbidden response has a 5xx status code
func (o *ProjectsListForBillingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for billing forbidden response a status code equal to that given
func (o *ProjectsListForBillingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsListForBillingForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForBillingForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsListForBillingForbidden) GetPayload() *ProjectsListForBillingForbiddenBody {
	return o.Payload
}

func (o *ProjectsListForBillingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForBillingForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForBillingNotFound creates a ProjectsListForBillingNotFound with default headers values
func NewProjectsListForBillingNotFound() *ProjectsListForBillingNotFound {
	return &ProjectsListForBillingNotFound{}
}

/*
ProjectsListForBillingNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsListForBillingNotFound struct {
	Payload *ProjectsListForBillingNotFoundBody
}

// IsSuccess returns true when this projects list for billing not found response has a 2xx status code
func (o *ProjectsListForBillingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for billing not found response has a 3xx status code
func (o *ProjectsListForBillingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing not found response has a 4xx status code
func (o *ProjectsListForBillingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects list for billing not found response has a 5xx status code
func (o *ProjectsListForBillingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects list for billing not found response a status code equal to that given
func (o *ProjectsListForBillingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsListForBillingNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListForBillingNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsListForBillingNotFound) GetPayload() *ProjectsListForBillingNotFoundBody {
	return o.Payload
}

func (o *ProjectsListForBillingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsListForBillingNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsListForBillingInternalServerError creates a ProjectsListForBillingInternalServerError with default headers values
func NewProjectsListForBillingInternalServerError() *ProjectsListForBillingInternalServerError {
	return &ProjectsListForBillingInternalServerError{}
}

/*
ProjectsListForBillingInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsListForBillingInternalServerError struct {
}

// IsSuccess returns true when this projects list for billing internal server error response has a 2xx status code
func (o *ProjectsListForBillingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects list for billing internal server error response has a 3xx status code
func (o *ProjectsListForBillingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects list for billing internal server error response has a 4xx status code
func (o *ProjectsListForBillingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects list for billing internal server error response has a 5xx status code
func (o *ProjectsListForBillingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects list for billing internal server error response a status code equal to that given
func (o *ProjectsListForBillingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsListForBillingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingInternalServerError ", 500)
}

func (o *ProjectsListForBillingInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Projects/forbilling][%d] projectsListForBillingInternalServerError ", 500)
}

func (o *ProjectsListForBillingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectsListForBillingBadRequestBodyItems0 projects list for billing bad request body items0
swagger:model ProjectsListForBillingBadRequestBodyItems0
*/
type ProjectsListForBillingBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this projects list for billing bad request body items0
func (o *ProjectsListForBillingBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing bad request body items0 based on context it is used
func (o *ProjectsListForBillingBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingForbiddenBody projects list for billing forbidden body
swagger:model ProjectsListForBillingForbiddenBody
*/
type ProjectsListForBillingForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for billing forbidden body
func (o *ProjectsListForBillingForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing forbidden body based on context it is used
func (o *ProjectsListForBillingForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingNotFoundBody projects list for billing not found body
swagger:model ProjectsListForBillingNotFoundBody
*/
type ProjectsListForBillingNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for billing not found body
func (o *ProjectsListForBillingNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing not found body based on context it is used
func (o *ProjectsListForBillingNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingOKBodyItems0 projects list for billing o k body items0
swagger:model ProjectsListForBillingOKBodyItems0
*/
type ProjectsListForBillingOKBodyItems0 struct {

	// billing enabled
	BillingEnabled bool `json:"billingEnabled"`

	// billing start date
	// Format: date-time
	BillingStartDate *strfmt.DateTime `json:"billingStartDate,omitempty"`

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// servers
	Servers []*ProjectsListForBillingOKBodyItems0ServersItems0 `json:"servers"`

	// standalone vms
	StandaloneVms []*ProjectsListForBillingOKBodyItems0StandaloneVmsItems0 `json:"standaloneVms"`
}

// Validate validates this projects list for billing o k body items0
func (o *ProjectsListForBillingOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStandaloneVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) validateBillingStartDate(formats strfmt.Registry) error {
	if swag.IsZero(o.BillingStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("billingStartDate", "body", "date-time", o.BillingStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) validateServers(formats strfmt.Registry) error {
	if swag.IsZero(o.Servers) { // not required
		return nil
	}

	for i := 0; i < len(o.Servers); i++ {
		if swag.IsZero(o.Servers[i]) { // not required
			continue
		}

		if o.Servers[i] != nil {
			if err := o.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) validateStandaloneVms(formats strfmt.Registry) error {
	if swag.IsZero(o.StandaloneVms) { // not required
		return nil
	}

	for i := 0; i < len(o.StandaloneVms); i++ {
		if swag.IsZero(o.StandaloneVms[i]) { // not required
			continue
		}

		if o.StandaloneVms[i] != nil {
			if err := o.StandaloneVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this projects list for billing o k body items0 based on the context it is used
func (o *ProjectsListForBillingOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStandaloneVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Servers); i++ {

		if o.Servers[i] != nil {
			if err := o.Servers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsListForBillingOKBodyItems0) contextValidateStandaloneVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.StandaloneVms); i++ {

		if o.StandaloneVms[i] != nil {
			if err := o.StandaloneVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingOKBodyItems0ServersItems0 projects list for billing o k body items0 servers items0
swagger:model ProjectsListForBillingOKBodyItems0ServersItems0
*/
type ProjectsListForBillingOKBodyItems0ServersItems0 struct {

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`
}

// Validate validates this projects list for billing o k body items0 servers items0
func (o *ProjectsListForBillingOKBodyItems0ServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing o k body items0 servers items0 based on context it is used
func (o *ProjectsListForBillingOKBodyItems0ServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0ServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0ServersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingOKBodyItems0ServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingOKBodyItems0StandaloneVmsItems0 projects list for billing o k body items0 standalone vms items0
swagger:model ProjectsListForBillingOKBodyItems0StandaloneVmsItems0
*/
type ProjectsListForBillingOKBodyItems0StandaloneVmsItems0 struct {

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`
}

// Validate validates this projects list for billing o k body items0 standalone vms items0
func (o *ProjectsListForBillingOKBodyItems0StandaloneVmsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing o k body items0 standalone vms items0 based on context it is used
func (o *ProjectsListForBillingOKBodyItems0StandaloneVmsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0StandaloneVmsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingOKBodyItems0StandaloneVmsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingOKBodyItems0StandaloneVmsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsListForBillingUnauthorizedBody projects list for billing unauthorized body
swagger:model ProjectsListForBillingUnauthorizedBody
*/
type ProjectsListForBillingUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects list for billing unauthorized body
func (o *ProjectsListForBillingUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects list for billing unauthorized body based on context it is used
func (o *ProjectsListForBillingUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsListForBillingUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsListForBillingUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectsListForBillingUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
