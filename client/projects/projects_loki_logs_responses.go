// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectsLokiLogsReader is a Reader for the ProjectsLokiLogs structure.
type ProjectsLokiLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsLokiLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsLokiLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsLokiLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsLokiLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsLokiLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsLokiLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsLokiLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsLokiLogsOK creates a ProjectsLokiLogsOK with default headers values
func NewProjectsLokiLogsOK() *ProjectsLokiLogsOK {
	return &ProjectsLokiLogsOK{}
}

/*
ProjectsLokiLogsOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsLokiLogsOK struct {
}

// IsSuccess returns true when this projects loki logs o k response has a 2xx status code
func (o *ProjectsLokiLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects loki logs o k response has a 3xx status code
func (o *ProjectsLokiLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs o k response has a 4xx status code
func (o *ProjectsLokiLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects loki logs o k response has a 5xx status code
func (o *ProjectsLokiLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects loki logs o k response a status code equal to that given
func (o *ProjectsLokiLogsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsLokiLogsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsOK ", 200)
}

func (o *ProjectsLokiLogsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsOK ", 200)
}

func (o *ProjectsLokiLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProjectsLokiLogsBadRequest creates a ProjectsLokiLogsBadRequest with default headers values
func NewProjectsLokiLogsBadRequest() *ProjectsLokiLogsBadRequest {
	return &ProjectsLokiLogsBadRequest{}
}

/*
ProjectsLokiLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsLokiLogsBadRequest struct {
	Payload []*ProjectsLokiLogsBadRequestBodyItems0
}

// IsSuccess returns true when this projects loki logs bad request response has a 2xx status code
func (o *ProjectsLokiLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects loki logs bad request response has a 3xx status code
func (o *ProjectsLokiLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs bad request response has a 4xx status code
func (o *ProjectsLokiLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects loki logs bad request response has a 5xx status code
func (o *ProjectsLokiLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects loki logs bad request response a status code equal to that given
func (o *ProjectsLokiLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsLokiLogsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsLokiLogsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsLokiLogsBadRequest) GetPayload() []*ProjectsLokiLogsBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectsLokiLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLokiLogsUnauthorized creates a ProjectsLokiLogsUnauthorized with default headers values
func NewProjectsLokiLogsUnauthorized() *ProjectsLokiLogsUnauthorized {
	return &ProjectsLokiLogsUnauthorized{}
}

/*
ProjectsLokiLogsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsLokiLogsUnauthorized struct {
	Payload *ProjectsLokiLogsUnauthorizedBody
}

// IsSuccess returns true when this projects loki logs unauthorized response has a 2xx status code
func (o *ProjectsLokiLogsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects loki logs unauthorized response has a 3xx status code
func (o *ProjectsLokiLogsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs unauthorized response has a 4xx status code
func (o *ProjectsLokiLogsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects loki logs unauthorized response has a 5xx status code
func (o *ProjectsLokiLogsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects loki logs unauthorized response a status code equal to that given
func (o *ProjectsLokiLogsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsLokiLogsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsLokiLogsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsLokiLogsUnauthorized) GetPayload() *ProjectsLokiLogsUnauthorizedBody {
	return o.Payload
}

func (o *ProjectsLokiLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLokiLogsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLokiLogsForbidden creates a ProjectsLokiLogsForbidden with default headers values
func NewProjectsLokiLogsForbidden() *ProjectsLokiLogsForbidden {
	return &ProjectsLokiLogsForbidden{}
}

/*
ProjectsLokiLogsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsLokiLogsForbidden struct {
	Payload *ProjectsLokiLogsForbiddenBody
}

// IsSuccess returns true when this projects loki logs forbidden response has a 2xx status code
func (o *ProjectsLokiLogsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects loki logs forbidden response has a 3xx status code
func (o *ProjectsLokiLogsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs forbidden response has a 4xx status code
func (o *ProjectsLokiLogsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects loki logs forbidden response has a 5xx status code
func (o *ProjectsLokiLogsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects loki logs forbidden response a status code equal to that given
func (o *ProjectsLokiLogsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsLokiLogsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsLokiLogsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsLokiLogsForbidden) GetPayload() *ProjectsLokiLogsForbiddenBody {
	return o.Payload
}

func (o *ProjectsLokiLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLokiLogsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLokiLogsNotFound creates a ProjectsLokiLogsNotFound with default headers values
func NewProjectsLokiLogsNotFound() *ProjectsLokiLogsNotFound {
	return &ProjectsLokiLogsNotFound{}
}

/*
ProjectsLokiLogsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsLokiLogsNotFound struct {
	Payload *ProjectsLokiLogsNotFoundBody
}

// IsSuccess returns true when this projects loki logs not found response has a 2xx status code
func (o *ProjectsLokiLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects loki logs not found response has a 3xx status code
func (o *ProjectsLokiLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs not found response has a 4xx status code
func (o *ProjectsLokiLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects loki logs not found response has a 5xx status code
func (o *ProjectsLokiLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects loki logs not found response a status code equal to that given
func (o *ProjectsLokiLogsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsLokiLogsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsLokiLogsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsLokiLogsNotFound) GetPayload() *ProjectsLokiLogsNotFoundBody {
	return o.Payload
}

func (o *ProjectsLokiLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLokiLogsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLokiLogsInternalServerError creates a ProjectsLokiLogsInternalServerError with default headers values
func NewProjectsLokiLogsInternalServerError() *ProjectsLokiLogsInternalServerError {
	return &ProjectsLokiLogsInternalServerError{}
}

/*
ProjectsLokiLogsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsLokiLogsInternalServerError struct {
}

// IsSuccess returns true when this projects loki logs internal server error response has a 2xx status code
func (o *ProjectsLokiLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects loki logs internal server error response has a 3xx status code
func (o *ProjectsLokiLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects loki logs internal server error response has a 4xx status code
func (o *ProjectsLokiLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects loki logs internal server error response has a 5xx status code
func (o *ProjectsLokiLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects loki logs internal server error response a status code equal to that given
func (o *ProjectsLokiLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsLokiLogsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsInternalServerError ", 500)
}

func (o *ProjectsLokiLogsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lokilogs][%d] projectsLokiLogsInternalServerError ", 500)
}

func (o *ProjectsLokiLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectsLokiLogsBadRequestBodyItems0 projects loki logs bad request body items0
swagger:model ProjectsLokiLogsBadRequestBodyItems0
*/
type ProjectsLokiLogsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this projects loki logs bad request body items0
func (o *ProjectsLokiLogsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs bad request body items0 based on context it is used
func (o *ProjectsLokiLogsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsBody projects loki logs body
swagger:model ProjectsLokiLogsBody
*/
type ProjectsLokiLogsBody struct {

	// can download
	CanDownload bool `json:"canDownload"`

	// direction
	Direction string `json:"direction,omitempty"`

	// end
	// Format: date-time
	End *strfmt.DateTime `json:"end,omitempty"`

	// filters
	Filters []*ProjectsLokiLogsParamsBodyFiltersItems0 `json:"filters"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// parameters
	Parameters []*ProjectsLokiLogsParamsBodyParametersItems0 `json:"parameters"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// start
	// Format: date-time
	Start *strfmt.DateTime `json:"start,omitempty"`
}

// Validate validates this projects loki logs body
func (o *ProjectsLokiLogsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsLokiLogsBody) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsLokiLogsBody) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(o.Filters) { // not required
		return nil
	}

	for i := 0; i < len(o.Filters); i++ {
		if swag.IsZero(o.Filters[i]) { // not required
			continue
		}

		if o.Filters[i] != nil {
			if err := o.Filters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsLokiLogsBody) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(o.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(o.Parameters); i++ {
		if swag.IsZero(o.Parameters[i]) { // not required
			continue
		}

		if o.Parameters[i] != nil {
			if err := o.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsLokiLogsBody) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this projects loki logs body based on the context it is used
func (o *ProjectsLokiLogsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsLokiLogsBody) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Filters); i++ {

		if o.Filters[i] != nil {
			if err := o.Filters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsLokiLogsBody) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Parameters); i++ {

		if o.Parameters[i] != nil {
			if err := o.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsForbiddenBody projects loki logs forbidden body
swagger:model ProjectsLokiLogsForbiddenBody
*/
type ProjectsLokiLogsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects loki logs forbidden body
func (o *ProjectsLokiLogsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs forbidden body based on context it is used
func (o *ProjectsLokiLogsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsNotFoundBody projects loki logs not found body
swagger:model ProjectsLokiLogsNotFoundBody
*/
type ProjectsLokiLogsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects loki logs not found body
func (o *ProjectsLokiLogsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs not found body based on context it is used
func (o *ProjectsLokiLogsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsParamsBodyFiltersItems0 projects loki logs params body filters items0
swagger:model ProjectsLokiLogsParamsBodyFiltersItems0
*/
type ProjectsLokiLogsParamsBodyFiltersItems0 struct {

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this projects loki logs params body filters items0
func (o *ProjectsLokiLogsParamsBodyFiltersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs params body filters items0 based on context it is used
func (o *ProjectsLokiLogsParamsBodyFiltersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsParamsBodyFiltersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsParamsBodyFiltersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsParamsBodyFiltersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsParamsBodyParametersItems0 projects loki logs params body parameters items0
swagger:model ProjectsLokiLogsParamsBodyParametersItems0
*/
type ProjectsLokiLogsParamsBodyParametersItems0 struct {

	// label
	Label string `json:"label,omitempty"`

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this projects loki logs params body parameters items0
func (o *ProjectsLokiLogsParamsBodyParametersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs params body parameters items0 based on context it is used
func (o *ProjectsLokiLogsParamsBodyParametersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsParamsBodyParametersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsParamsBodyParametersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsParamsBodyParametersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLokiLogsUnauthorizedBody projects loki logs unauthorized body
swagger:model ProjectsLokiLogsUnauthorizedBody
*/
type ProjectsLokiLogsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects loki logs unauthorized body
func (o *ProjectsLokiLogsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects loki logs unauthorized body based on context it is used
func (o *ProjectsLokiLogsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLokiLogsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLokiLogsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLokiLogsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
