// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectsLockManagerReader is a Reader for the ProjectsLockManager structure.
type ProjectsLockManagerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsLockManagerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsLockManagerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectsLockManagerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectsLockManagerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsLockManagerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsLockManagerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsLockManagerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectsLockManagerOK creates a ProjectsLockManagerOK with default headers values
func NewProjectsLockManagerOK() *ProjectsLockManagerOK {
	return &ProjectsLockManagerOK{}
}

/*
ProjectsLockManagerOK describes a response with status code 200, with default header values.

Success
*/
type ProjectsLockManagerOK struct {
	Payload interface{}
}

// IsSuccess returns true when this projects lock manager o k response has a 2xx status code
func (o *ProjectsLockManagerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects lock manager o k response has a 3xx status code
func (o *ProjectsLockManagerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager o k response has a 4xx status code
func (o *ProjectsLockManagerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects lock manager o k response has a 5xx status code
func (o *ProjectsLockManagerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects lock manager o k response a status code equal to that given
func (o *ProjectsLockManagerOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsLockManagerOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerOK  %+v", 200, o.Payload)
}

func (o *ProjectsLockManagerOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerOK  %+v", 200, o.Payload)
}

func (o *ProjectsLockManagerOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsLockManagerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLockManagerBadRequest creates a ProjectsLockManagerBadRequest with default headers values
func NewProjectsLockManagerBadRequest() *ProjectsLockManagerBadRequest {
	return &ProjectsLockManagerBadRequest{}
}

/*
ProjectsLockManagerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectsLockManagerBadRequest struct {
	Payload []*ProjectsLockManagerBadRequestBodyItems0
}

// IsSuccess returns true when this projects lock manager bad request response has a 2xx status code
func (o *ProjectsLockManagerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects lock manager bad request response has a 3xx status code
func (o *ProjectsLockManagerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager bad request response has a 4xx status code
func (o *ProjectsLockManagerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects lock manager bad request response has a 5xx status code
func (o *ProjectsLockManagerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this projects lock manager bad request response a status code equal to that given
func (o *ProjectsLockManagerBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectsLockManagerBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsLockManagerBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsLockManagerBadRequest) GetPayload() []*ProjectsLockManagerBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectsLockManagerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLockManagerUnauthorized creates a ProjectsLockManagerUnauthorized with default headers values
func NewProjectsLockManagerUnauthorized() *ProjectsLockManagerUnauthorized {
	return &ProjectsLockManagerUnauthorized{}
}

/*
ProjectsLockManagerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectsLockManagerUnauthorized struct {
	Payload *ProjectsLockManagerUnauthorizedBody
}

// IsSuccess returns true when this projects lock manager unauthorized response has a 2xx status code
func (o *ProjectsLockManagerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects lock manager unauthorized response has a 3xx status code
func (o *ProjectsLockManagerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager unauthorized response has a 4xx status code
func (o *ProjectsLockManagerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects lock manager unauthorized response has a 5xx status code
func (o *ProjectsLockManagerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects lock manager unauthorized response a status code equal to that given
func (o *ProjectsLockManagerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsLockManagerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsLockManagerUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsLockManagerUnauthorized) GetPayload() *ProjectsLockManagerUnauthorizedBody {
	return o.Payload
}

func (o *ProjectsLockManagerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLockManagerUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLockManagerForbidden creates a ProjectsLockManagerForbidden with default headers values
func NewProjectsLockManagerForbidden() *ProjectsLockManagerForbidden {
	return &ProjectsLockManagerForbidden{}
}

/*
ProjectsLockManagerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectsLockManagerForbidden struct {
	Payload *ProjectsLockManagerForbiddenBody
}

// IsSuccess returns true when this projects lock manager forbidden response has a 2xx status code
func (o *ProjectsLockManagerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects lock manager forbidden response has a 3xx status code
func (o *ProjectsLockManagerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager forbidden response has a 4xx status code
func (o *ProjectsLockManagerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects lock manager forbidden response has a 5xx status code
func (o *ProjectsLockManagerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects lock manager forbidden response a status code equal to that given
func (o *ProjectsLockManagerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsLockManagerForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsLockManagerForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsLockManagerForbidden) GetPayload() *ProjectsLockManagerForbiddenBody {
	return o.Payload
}

func (o *ProjectsLockManagerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLockManagerForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLockManagerNotFound creates a ProjectsLockManagerNotFound with default headers values
func NewProjectsLockManagerNotFound() *ProjectsLockManagerNotFound {
	return &ProjectsLockManagerNotFound{}
}

/*
ProjectsLockManagerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectsLockManagerNotFound struct {
	Payload *ProjectsLockManagerNotFoundBody
}

// IsSuccess returns true when this projects lock manager not found response has a 2xx status code
func (o *ProjectsLockManagerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects lock manager not found response has a 3xx status code
func (o *ProjectsLockManagerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager not found response has a 4xx status code
func (o *ProjectsLockManagerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects lock manager not found response has a 5xx status code
func (o *ProjectsLockManagerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects lock manager not found response a status code equal to that given
func (o *ProjectsLockManagerNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsLockManagerNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsLockManagerNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsLockManagerNotFound) GetPayload() *ProjectsLockManagerNotFoundBody {
	return o.Payload
}

func (o *ProjectsLockManagerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectsLockManagerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsLockManagerInternalServerError creates a ProjectsLockManagerInternalServerError with default headers values
func NewProjectsLockManagerInternalServerError() *ProjectsLockManagerInternalServerError {
	return &ProjectsLockManagerInternalServerError{}
}

/*
ProjectsLockManagerInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectsLockManagerInternalServerError struct {
}

// IsSuccess returns true when this projects lock manager internal server error response has a 2xx status code
func (o *ProjectsLockManagerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects lock manager internal server error response has a 3xx status code
func (o *ProjectsLockManagerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects lock manager internal server error response has a 4xx status code
func (o *ProjectsLockManagerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects lock manager internal server error response has a 5xx status code
func (o *ProjectsLockManagerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects lock manager internal server error response a status code equal to that given
func (o *ProjectsLockManagerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsLockManagerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerInternalServerError ", 500)
}

func (o *ProjectsLockManagerInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Projects/lockmanager][%d] projectsLockManagerInternalServerError ", 500)
}

func (o *ProjectsLockManagerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectsLockManagerBadRequestBodyItems0 projects lock manager bad request body items0
swagger:model ProjectsLockManagerBadRequestBodyItems0
*/
type ProjectsLockManagerBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this projects lock manager bad request body items0
func (o *ProjectsLockManagerBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects lock manager bad request body items0 based on context it is used
func (o *ProjectsLockManagerBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLockManagerBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLockManagerBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsLockManagerBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLockManagerForbiddenBody projects lock manager forbidden body
swagger:model ProjectsLockManagerForbiddenBody
*/
type ProjectsLockManagerForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects lock manager forbidden body
func (o *ProjectsLockManagerForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects lock manager forbidden body based on context it is used
func (o *ProjectsLockManagerForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLockManagerForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLockManagerForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLockManagerForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLockManagerNotFoundBody projects lock manager not found body
swagger:model ProjectsLockManagerNotFoundBody
*/
type ProjectsLockManagerNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects lock manager not found body
func (o *ProjectsLockManagerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects lock manager not found body based on context it is used
func (o *ProjectsLockManagerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLockManagerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLockManagerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLockManagerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectsLockManagerUnauthorizedBody projects lock manager unauthorized body
swagger:model ProjectsLockManagerUnauthorizedBody
*/
type ProjectsLockManagerUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this projects lock manager unauthorized body
func (o *ProjectsLockManagerUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects lock manager unauthorized body based on context it is used
func (o *ProjectsLockManagerUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsLockManagerUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsLockManagerUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectsLockManagerUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
