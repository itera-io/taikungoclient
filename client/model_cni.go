/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// CNI the model 'CNI'
type CNI string

// List of CNI
const (
	CNI_DEFAULT CNI = "Default"
	CNI_CALICO CNI = "Calico"
	CNI_FLANNEL CNI = "Flannel"
)

// All allowed values of CNI enum
var AllowedCNIEnumValues = []CNI{
	"Default",
	"Calico",
	"Flannel",
}

func (v *CNI) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CNI(value)
	for _, existing := range AllowedCNIEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CNI", value)
}

// NewCNIFromValue returns a pointer to a valid CNI
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCNIFromValue(v string) (*CNI, error) {
	ev := CNI(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CNI: valid values are %v", v, AllowedCNIEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CNI) IsValid() bool {
	for _, existing := range AllowedCNIEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CNI value
func (v CNI) Ptr() *CNI {
	return &v
}

type NullableCNI struct {
	value *CNI
	isSet bool
}

func (v NullableCNI) Get() *CNI {
	return v.value
}

func (v *NullableCNI) Set(val *CNI) {
	v.value = val
	v.isSet = true
}

func (v NullableCNI) IsSet() bool {
	return v.isSet
}

func (v *NullableCNI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCNI(val *CNI) *NullableCNI {
	return &NullableCNI{value: val, isSet: true}
}

func (v NullableCNI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCNI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

