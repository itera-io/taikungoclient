// Code generated by go-swagger; DO NOT EDIT.

package allowed_host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// AllowedHostEditReader is a Reader for the AllowedHostEdit structure.
type AllowedHostEditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllowedHostEditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllowedHostEditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllowedHostEditBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAllowedHostEditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAllowedHostEditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllowedHostEditNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAllowedHostEditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAllowedHostEditOK creates a AllowedHostEditOK with default headers values
func NewAllowedHostEditOK() *AllowedHostEditOK {
	return &AllowedHostEditOK{}
}

/* AllowedHostEditOK describes a response with status code 200, with default header values.

Success
*/
type AllowedHostEditOK struct {
	Payload models.Unit
}

func (o *AllowedHostEditOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditOK  %+v", 200, o.Payload)
}
func (o *AllowedHostEditOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *AllowedHostEditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowedHostEditBadRequest creates a AllowedHostEditBadRequest with default headers values
func NewAllowedHostEditBadRequest() *AllowedHostEditBadRequest {
	return &AllowedHostEditBadRequest{}
}

/* AllowedHostEditBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AllowedHostEditBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *AllowedHostEditBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditBadRequest  %+v", 400, o.Payload)
}
func (o *AllowedHostEditBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *AllowedHostEditBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowedHostEditUnauthorized creates a AllowedHostEditUnauthorized with default headers values
func NewAllowedHostEditUnauthorized() *AllowedHostEditUnauthorized {
	return &AllowedHostEditUnauthorized{}
}

/* AllowedHostEditUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AllowedHostEditUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *AllowedHostEditUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditUnauthorized  %+v", 401, o.Payload)
}
func (o *AllowedHostEditUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *AllowedHostEditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowedHostEditForbidden creates a AllowedHostEditForbidden with default headers values
func NewAllowedHostEditForbidden() *AllowedHostEditForbidden {
	return &AllowedHostEditForbidden{}
}

/* AllowedHostEditForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AllowedHostEditForbidden struct {
	Payload *models.ProblemDetails
}

func (o *AllowedHostEditForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditForbidden  %+v", 403, o.Payload)
}
func (o *AllowedHostEditForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *AllowedHostEditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowedHostEditNotFound creates a AllowedHostEditNotFound with default headers values
func NewAllowedHostEditNotFound() *AllowedHostEditNotFound {
	return &AllowedHostEditNotFound{}
}

/* AllowedHostEditNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AllowedHostEditNotFound struct {
	Payload *models.ProblemDetails
}

func (o *AllowedHostEditNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditNotFound  %+v", 404, o.Payload)
}
func (o *AllowedHostEditNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *AllowedHostEditNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowedHostEditInternalServerError creates a AllowedHostEditInternalServerError with default headers values
func NewAllowedHostEditInternalServerError() *AllowedHostEditInternalServerError {
	return &AllowedHostEditInternalServerError{}
}

/* AllowedHostEditInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AllowedHostEditInternalServerError struct {
}

func (o *AllowedHostEditInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/AllowedHost/edit/{id}][%d] allowedHostEditInternalServerError ", 500)
}

func (o *AllowedHostEditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
