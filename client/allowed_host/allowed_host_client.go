// Code generated by go-swagger; DO NOT EDIT.

package allowed_host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new allowed host API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for allowed host API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AllowedHostCreate(params *AllowedHostCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostCreateOK, error)

	AllowedHostDelete(params *AllowedHostDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostDeleteOK, *AllowedHostDeleteNoContent, error)

	AllowedHostEdit(params *AllowedHostEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostEditOK, error)

	AllowedHostList(params *AllowedHostListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AllowedHostCreate creates access profile allowed host
*/
func (a *Client) AllowedHostCreate(params *AllowedHostCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedHostCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllowedHost_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/AllowedHost/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowedHostCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowedHostCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AllowedHost_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllowedHostDelete deletes access profile allowed host
*/
func (a *Client) AllowedHostDelete(params *AllowedHostDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostDeleteOK, *AllowedHostDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedHostDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllowedHost_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/AllowedHost/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowedHostDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AllowedHostDeleteOK:
		return value, nil, nil
	case *AllowedHostDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for allowed_host: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllowedHostEdit edits access profile allowed host
*/
func (a *Client) AllowedHostEdit(params *AllowedHostEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedHostEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllowedHost_Edit",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/AllowedHost/edit/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowedHostEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowedHostEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AllowedHost_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AllowedHostList lists allowed hosts by access profile id
*/
func (a *Client) AllowedHostList(params *AllowedHostListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowedHostListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedHostListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllowedHost_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/AllowedHost/list/{accessProfileId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowedHostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowedHostListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AllowedHost_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
