/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DatastoreSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreSummary{}

// DatastoreSummary struct for DatastoreSummary
type DatastoreSummary struct {
	Capacity *int64 `json:"capacity,omitempty"`
	Datastore *string `json:"datastore,omitempty"`
	FreeSpace *int64 `json:"freeSpace,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewDatastoreSummary instantiates a new DatastoreSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreSummary() *DatastoreSummary {
	this := DatastoreSummary{}
	return &this
}

// NewDatastoreSummaryWithDefaults instantiates a new DatastoreSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreSummaryWithDefaults() *DatastoreSummary {
	this := DatastoreSummary{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *DatastoreSummary) GetCapacity() int64 {
	if o == nil || IsNil(o.Capacity) {
		var ret int64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *DatastoreSummary) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int64 and assigns it to the Capacity field.
func (o *DatastoreSummary) SetCapacity(v int64) {
	o.Capacity = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *DatastoreSummary) GetDatastore() string {
	if o == nil || IsNil(o.Datastore) {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetDatastoreOk() (*string, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *DatastoreSummary) HasDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *DatastoreSummary) SetDatastore(v string) {
	o.Datastore = &v
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise.
func (o *DatastoreSummary) GetFreeSpace() int64 {
	if o == nil || IsNil(o.FreeSpace) {
		var ret int64
		return ret
	}
	return *o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetFreeSpaceOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeSpace) {
		return nil, false
	}
	return o.FreeSpace, true
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *DatastoreSummary) HasFreeSpace() bool {
	if o != nil && !IsNil(o.FreeSpace) {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given int64 and assigns it to the FreeSpace field.
func (o *DatastoreSummary) SetFreeSpace(v int64) {
	o.FreeSpace = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatastoreSummary) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatastoreSummary) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatastoreSummary) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatastoreSummary) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatastoreSummary) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatastoreSummary) SetType(v string) {
	o.Type = &v
}

func (o DatastoreSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !IsNil(o.FreeSpace) {
		toSerialize["freeSpace"] = o.FreeSpace
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDatastoreSummary struct {
	value *DatastoreSummary
	isSet bool
}

func (v NullableDatastoreSummary) Get() *DatastoreSummary {
	return v.value
}

func (v *NullableDatastoreSummary) Set(val *DatastoreSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreSummary(val *DatastoreSummary) *NullableDatastoreSummary {
	return &NullableDatastoreSummary{value: val, isSet: true}
}

func (v NullableDatastoreSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


