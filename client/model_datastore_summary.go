/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DatastoreSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreSummary{}

// DatastoreSummary struct for DatastoreSummary
type DatastoreSummary struct {
	Capacity *int32 `json:"capacity,omitempty"`
	Datastore NullableString `json:"datastore,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Type NullableString `json:"type,omitempty"`
}

// NewDatastoreSummary instantiates a new DatastoreSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreSummary() *DatastoreSummary {
	this := DatastoreSummary{}
	return &this
}

// NewDatastoreSummaryWithDefaults instantiates a new DatastoreSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreSummaryWithDefaults() *DatastoreSummary {
	this := DatastoreSummary{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *DatastoreSummary) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreSummary) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *DatastoreSummary) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *DatastoreSummary) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreSummary) GetDatastore() string {
	if o == nil || IsNil(o.Datastore.Get()) {
		var ret string
		return ret
	}
	return *o.Datastore.Get()
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreSummary) GetDatastoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Datastore.Get(), o.Datastore.IsSet()
}

// HasDatastore returns a boolean if a field has been set.
func (o *DatastoreSummary) HasDatastore() bool {
	if o != nil && o.Datastore.IsSet() {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given NullableString and assigns it to the Datastore field.
func (o *DatastoreSummary) SetDatastore(v string) {
	o.Datastore.Set(&v)
}
// SetDatastoreNil sets the value for Datastore to be an explicit nil
func (o *DatastoreSummary) SetDatastoreNil() {
	o.Datastore.Set(nil)
}

// UnsetDatastore ensures that no value is present for Datastore, not even an explicit nil
func (o *DatastoreSummary) UnsetDatastore() {
	o.Datastore.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreSummary) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreSummary) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DatastoreSummary) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DatastoreSummary) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DatastoreSummary) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DatastoreSummary) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreSummary) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreSummary) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DatastoreSummary) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DatastoreSummary) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DatastoreSummary) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DatastoreSummary) UnsetType() {
	o.Type.Unset()
}

func (o DatastoreSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if o.Datastore.IsSet() {
		toSerialize["datastore"] = o.Datastore.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableDatastoreSummary struct {
	value *DatastoreSummary
	isSet bool
}

func (v NullableDatastoreSummary) Get() *DatastoreSummary {
	return v.value
}

func (v *NullableDatastoreSummary) Set(val *DatastoreSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreSummary(val *DatastoreSummary) *NullableDatastoreSummary {
	return &NullableDatastoreSummary{value: val, isSet: true}
}

func (v NullableDatastoreSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


