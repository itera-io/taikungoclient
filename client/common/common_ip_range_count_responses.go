// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CommonIPRangeCountReader is a Reader for the CommonIPRangeCount structure.
type CommonIPRangeCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommonIPRangeCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommonIPRangeCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommonIPRangeCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCommonIPRangeCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCommonIPRangeCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommonIPRangeCountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommonIPRangeCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCommonIPRangeCountOK creates a CommonIPRangeCountOK with default headers values
func NewCommonIPRangeCountOK() *CommonIPRangeCountOK {
	return &CommonIPRangeCountOK{}
}

/*
CommonIPRangeCountOK describes a response with status code 200, with default header values.

Success
*/
type CommonIPRangeCountOK struct {
	Payload int32
}

// IsSuccess returns true when this common Ip range count o k response has a 2xx status code
func (o *CommonIPRangeCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this common Ip range count o k response has a 3xx status code
func (o *CommonIPRangeCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count o k response has a 4xx status code
func (o *CommonIPRangeCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip range count o k response has a 5xx status code
func (o *CommonIPRangeCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range count o k response a status code equal to that given
func (o *CommonIPRangeCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the common Ip range count o k response
func (o *CommonIPRangeCountOK) Code() int {
	return 200
}

func (o *CommonIPRangeCountOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountOK  %+v", 200, o.Payload)
}

func (o *CommonIPRangeCountOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountOK  %+v", 200, o.Payload)
}

func (o *CommonIPRangeCountOK) GetPayload() int32 {
	return o.Payload
}

func (o *CommonIPRangeCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeCountBadRequest creates a CommonIPRangeCountBadRequest with default headers values
func NewCommonIPRangeCountBadRequest() *CommonIPRangeCountBadRequest {
	return &CommonIPRangeCountBadRequest{}
}

/*
CommonIPRangeCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CommonIPRangeCountBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range count bad request response has a 2xx status code
func (o *CommonIPRangeCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range count bad request response has a 3xx status code
func (o *CommonIPRangeCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count bad request response has a 4xx status code
func (o *CommonIPRangeCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range count bad request response has a 5xx status code
func (o *CommonIPRangeCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range count bad request response a status code equal to that given
func (o *CommonIPRangeCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the common Ip range count bad request response
func (o *CommonIPRangeCountBadRequest) Code() int {
	return 400
}

func (o *CommonIPRangeCountBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPRangeCountBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPRangeCountBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeCountUnauthorized creates a CommonIPRangeCountUnauthorized with default headers values
func NewCommonIPRangeCountUnauthorized() *CommonIPRangeCountUnauthorized {
	return &CommonIPRangeCountUnauthorized{}
}

/*
CommonIPRangeCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CommonIPRangeCountUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range count unauthorized response has a 2xx status code
func (o *CommonIPRangeCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range count unauthorized response has a 3xx status code
func (o *CommonIPRangeCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count unauthorized response has a 4xx status code
func (o *CommonIPRangeCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range count unauthorized response has a 5xx status code
func (o *CommonIPRangeCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range count unauthorized response a status code equal to that given
func (o *CommonIPRangeCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the common Ip range count unauthorized response
func (o *CommonIPRangeCountUnauthorized) Code() int {
	return 401
}

func (o *CommonIPRangeCountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPRangeCountUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPRangeCountUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeCountForbidden creates a CommonIPRangeCountForbidden with default headers values
func NewCommonIPRangeCountForbidden() *CommonIPRangeCountForbidden {
	return &CommonIPRangeCountForbidden{}
}

/*
CommonIPRangeCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CommonIPRangeCountForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range count forbidden response has a 2xx status code
func (o *CommonIPRangeCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range count forbidden response has a 3xx status code
func (o *CommonIPRangeCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count forbidden response has a 4xx status code
func (o *CommonIPRangeCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range count forbidden response has a 5xx status code
func (o *CommonIPRangeCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range count forbidden response a status code equal to that given
func (o *CommonIPRangeCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the common Ip range count forbidden response
func (o *CommonIPRangeCountForbidden) Code() int {
	return 403
}

func (o *CommonIPRangeCountForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPRangeCountForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPRangeCountForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeCountNotFound creates a CommonIPRangeCountNotFound with default headers values
func NewCommonIPRangeCountNotFound() *CommonIPRangeCountNotFound {
	return &CommonIPRangeCountNotFound{}
}

/*
CommonIPRangeCountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CommonIPRangeCountNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range count not found response has a 2xx status code
func (o *CommonIPRangeCountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range count not found response has a 3xx status code
func (o *CommonIPRangeCountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count not found response has a 4xx status code
func (o *CommonIPRangeCountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range count not found response has a 5xx status code
func (o *CommonIPRangeCountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range count not found response a status code equal to that given
func (o *CommonIPRangeCountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the common Ip range count not found response
func (o *CommonIPRangeCountNotFound) Code() int {
	return 404
}

func (o *CommonIPRangeCountNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPRangeCountNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPRangeCountNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeCountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeCountInternalServerError creates a CommonIPRangeCountInternalServerError with default headers values
func NewCommonIPRangeCountInternalServerError() *CommonIPRangeCountInternalServerError {
	return &CommonIPRangeCountInternalServerError{}
}

/*
CommonIPRangeCountInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CommonIPRangeCountInternalServerError struct {
}

// IsSuccess returns true when this common Ip range count internal server error response has a 2xx status code
func (o *CommonIPRangeCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range count internal server error response has a 3xx status code
func (o *CommonIPRangeCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range count internal server error response has a 4xx status code
func (o *CommonIPRangeCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip range count internal server error response has a 5xx status code
func (o *CommonIPRangeCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this common Ip range count internal server error response a status code equal to that given
func (o *CommonIPRangeCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the common Ip range count internal server error response
func (o *CommonIPRangeCountInternalServerError) Code() int {
	return 500
}

func (o *CommonIPRangeCountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountInternalServerError ", 500)
}

func (o *CommonIPRangeCountInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-count][%d] commonIpRangeCountInternalServerError ", 500)
}

func (o *CommonIPRangeCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
