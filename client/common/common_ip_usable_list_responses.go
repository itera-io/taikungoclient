// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CommonIPUsableListReader is a Reader for the CommonIPUsableList structure.
type CommonIPUsableListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommonIPUsableListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommonIPUsableListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommonIPUsableListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCommonIPUsableListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCommonIPUsableListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommonIPUsableListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommonIPUsableListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCommonIPUsableListOK creates a CommonIPUsableListOK with default headers values
func NewCommonIPUsableListOK() *CommonIPUsableListOK {
	return &CommonIPUsableListOK{}
}

/*
CommonIPUsableListOK describes a response with status code 200, with default header values.

Success
*/
type CommonIPUsableListOK struct {
	Payload []string
}

// IsSuccess returns true when this common Ip usable list o k response has a 2xx status code
func (o *CommonIPUsableListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this common Ip usable list o k response has a 3xx status code
func (o *CommonIPUsableListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list o k response has a 4xx status code
func (o *CommonIPUsableListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip usable list o k response has a 5xx status code
func (o *CommonIPUsableListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip usable list o k response a status code equal to that given
func (o *CommonIPUsableListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the common Ip usable list o k response
func (o *CommonIPUsableListOK) Code() int {
	return 200
}

func (o *CommonIPUsableListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListOK  %+v", 200, o.Payload)
}

func (o *CommonIPUsableListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListOK  %+v", 200, o.Payload)
}

func (o *CommonIPUsableListOK) GetPayload() []string {
	return o.Payload
}

func (o *CommonIPUsableListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPUsableListBadRequest creates a CommonIPUsableListBadRequest with default headers values
func NewCommonIPUsableListBadRequest() *CommonIPUsableListBadRequest {
	return &CommonIPUsableListBadRequest{}
}

/*
CommonIPUsableListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CommonIPUsableListBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip usable list bad request response has a 2xx status code
func (o *CommonIPUsableListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip usable list bad request response has a 3xx status code
func (o *CommonIPUsableListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list bad request response has a 4xx status code
func (o *CommonIPUsableListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip usable list bad request response has a 5xx status code
func (o *CommonIPUsableListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip usable list bad request response a status code equal to that given
func (o *CommonIPUsableListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the common Ip usable list bad request response
func (o *CommonIPUsableListBadRequest) Code() int {
	return 400
}

func (o *CommonIPUsableListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPUsableListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPUsableListBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPUsableListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPUsableListUnauthorized creates a CommonIPUsableListUnauthorized with default headers values
func NewCommonIPUsableListUnauthorized() *CommonIPUsableListUnauthorized {
	return &CommonIPUsableListUnauthorized{}
}

/*
CommonIPUsableListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CommonIPUsableListUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip usable list unauthorized response has a 2xx status code
func (o *CommonIPUsableListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip usable list unauthorized response has a 3xx status code
func (o *CommonIPUsableListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list unauthorized response has a 4xx status code
func (o *CommonIPUsableListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip usable list unauthorized response has a 5xx status code
func (o *CommonIPUsableListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip usable list unauthorized response a status code equal to that given
func (o *CommonIPUsableListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the common Ip usable list unauthorized response
func (o *CommonIPUsableListUnauthorized) Code() int {
	return 401
}

func (o *CommonIPUsableListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPUsableListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPUsableListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPUsableListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPUsableListForbidden creates a CommonIPUsableListForbidden with default headers values
func NewCommonIPUsableListForbidden() *CommonIPUsableListForbidden {
	return &CommonIPUsableListForbidden{}
}

/*
CommonIPUsableListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CommonIPUsableListForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip usable list forbidden response has a 2xx status code
func (o *CommonIPUsableListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip usable list forbidden response has a 3xx status code
func (o *CommonIPUsableListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list forbidden response has a 4xx status code
func (o *CommonIPUsableListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip usable list forbidden response has a 5xx status code
func (o *CommonIPUsableListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip usable list forbidden response a status code equal to that given
func (o *CommonIPUsableListForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the common Ip usable list forbidden response
func (o *CommonIPUsableListForbidden) Code() int {
	return 403
}

func (o *CommonIPUsableListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPUsableListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPUsableListForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPUsableListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPUsableListNotFound creates a CommonIPUsableListNotFound with default headers values
func NewCommonIPUsableListNotFound() *CommonIPUsableListNotFound {
	return &CommonIPUsableListNotFound{}
}

/*
CommonIPUsableListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CommonIPUsableListNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip usable list not found response has a 2xx status code
func (o *CommonIPUsableListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip usable list not found response has a 3xx status code
func (o *CommonIPUsableListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list not found response has a 4xx status code
func (o *CommonIPUsableListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip usable list not found response has a 5xx status code
func (o *CommonIPUsableListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip usable list not found response a status code equal to that given
func (o *CommonIPUsableListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the common Ip usable list not found response
func (o *CommonIPUsableListNotFound) Code() int {
	return 404
}

func (o *CommonIPUsableListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPUsableListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPUsableListNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPUsableListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPUsableListInternalServerError creates a CommonIPUsableListInternalServerError with default headers values
func NewCommonIPUsableListInternalServerError() *CommonIPUsableListInternalServerError {
	return &CommonIPUsableListInternalServerError{}
}

/*
CommonIPUsableListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CommonIPUsableListInternalServerError struct {
}

// IsSuccess returns true when this common Ip usable list internal server error response has a 2xx status code
func (o *CommonIPUsableListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip usable list internal server error response has a 3xx status code
func (o *CommonIPUsableListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip usable list internal server error response has a 4xx status code
func (o *CommonIPUsableListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip usable list internal server error response has a 5xx status code
func (o *CommonIPUsableListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this common Ip usable list internal server error response a status code equal to that given
func (o *CommonIPUsableListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the common Ip usable list internal server error response
func (o *CommonIPUsableListInternalServerError) Code() int {
	return 500
}

func (o *CommonIPUsableListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListInternalServerError ", 500)
}

func (o *CommonIPUsableListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-usable-list][%d] commonIpUsableListInternalServerError ", 500)
}

func (o *CommonIPUsableListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
