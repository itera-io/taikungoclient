// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CommonIPRangeListReader is a Reader for the CommonIPRangeList structure.
type CommonIPRangeListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommonIPRangeListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommonIPRangeListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommonIPRangeListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCommonIPRangeListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCommonIPRangeListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommonIPRangeListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommonIPRangeListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCommonIPRangeListOK creates a CommonIPRangeListOK with default headers values
func NewCommonIPRangeListOK() *CommonIPRangeListOK {
	return &CommonIPRangeListOK{}
}

/*
CommonIPRangeListOK describes a response with status code 200, with default header values.

Success
*/
type CommonIPRangeListOK struct {
	Payload []string
}

// IsSuccess returns true when this common Ip range list o k response has a 2xx status code
func (o *CommonIPRangeListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this common Ip range list o k response has a 3xx status code
func (o *CommonIPRangeListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list o k response has a 4xx status code
func (o *CommonIPRangeListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip range list o k response has a 5xx status code
func (o *CommonIPRangeListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range list o k response a status code equal to that given
func (o *CommonIPRangeListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the common Ip range list o k response
func (o *CommonIPRangeListOK) Code() int {
	return 200
}

func (o *CommonIPRangeListOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListOK  %+v", 200, o.Payload)
}

func (o *CommonIPRangeListOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListOK  %+v", 200, o.Payload)
}

func (o *CommonIPRangeListOK) GetPayload() []string {
	return o.Payload
}

func (o *CommonIPRangeListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeListBadRequest creates a CommonIPRangeListBadRequest with default headers values
func NewCommonIPRangeListBadRequest() *CommonIPRangeListBadRequest {
	return &CommonIPRangeListBadRequest{}
}

/*
CommonIPRangeListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CommonIPRangeListBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range list bad request response has a 2xx status code
func (o *CommonIPRangeListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range list bad request response has a 3xx status code
func (o *CommonIPRangeListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list bad request response has a 4xx status code
func (o *CommonIPRangeListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range list bad request response has a 5xx status code
func (o *CommonIPRangeListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range list bad request response a status code equal to that given
func (o *CommonIPRangeListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the common Ip range list bad request response
func (o *CommonIPRangeListBadRequest) Code() int {
	return 400
}

func (o *CommonIPRangeListBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPRangeListBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonIPRangeListBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeListUnauthorized creates a CommonIPRangeListUnauthorized with default headers values
func NewCommonIPRangeListUnauthorized() *CommonIPRangeListUnauthorized {
	return &CommonIPRangeListUnauthorized{}
}

/*
CommonIPRangeListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CommonIPRangeListUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range list unauthorized response has a 2xx status code
func (o *CommonIPRangeListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range list unauthorized response has a 3xx status code
func (o *CommonIPRangeListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list unauthorized response has a 4xx status code
func (o *CommonIPRangeListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range list unauthorized response has a 5xx status code
func (o *CommonIPRangeListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range list unauthorized response a status code equal to that given
func (o *CommonIPRangeListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the common Ip range list unauthorized response
func (o *CommonIPRangeListUnauthorized) Code() int {
	return 401
}

func (o *CommonIPRangeListUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPRangeListUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonIPRangeListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeListForbidden creates a CommonIPRangeListForbidden with default headers values
func NewCommonIPRangeListForbidden() *CommonIPRangeListForbidden {
	return &CommonIPRangeListForbidden{}
}

/*
CommonIPRangeListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CommonIPRangeListForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range list forbidden response has a 2xx status code
func (o *CommonIPRangeListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range list forbidden response has a 3xx status code
func (o *CommonIPRangeListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list forbidden response has a 4xx status code
func (o *CommonIPRangeListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range list forbidden response has a 5xx status code
func (o *CommonIPRangeListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range list forbidden response a status code equal to that given
func (o *CommonIPRangeListForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the common Ip range list forbidden response
func (o *CommonIPRangeListForbidden) Code() int {
	return 403
}

func (o *CommonIPRangeListForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPRangeListForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListForbidden  %+v", 403, o.Payload)
}

func (o *CommonIPRangeListForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeListNotFound creates a CommonIPRangeListNotFound with default headers values
func NewCommonIPRangeListNotFound() *CommonIPRangeListNotFound {
	return &CommonIPRangeListNotFound{}
}

/*
CommonIPRangeListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CommonIPRangeListNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this common Ip range list not found response has a 2xx status code
func (o *CommonIPRangeListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range list not found response has a 3xx status code
func (o *CommonIPRangeListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list not found response has a 4xx status code
func (o *CommonIPRangeListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this common Ip range list not found response has a 5xx status code
func (o *CommonIPRangeListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this common Ip range list not found response a status code equal to that given
func (o *CommonIPRangeListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the common Ip range list not found response
func (o *CommonIPRangeListNotFound) Code() int {
	return 404
}

func (o *CommonIPRangeListNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPRangeListNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListNotFound  %+v", 404, o.Payload)
}

func (o *CommonIPRangeListNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *CommonIPRangeListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonIPRangeListInternalServerError creates a CommonIPRangeListInternalServerError with default headers values
func NewCommonIPRangeListInternalServerError() *CommonIPRangeListInternalServerError {
	return &CommonIPRangeListInternalServerError{}
}

/*
CommonIPRangeListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CommonIPRangeListInternalServerError struct {
}

// IsSuccess returns true when this common Ip range list internal server error response has a 2xx status code
func (o *CommonIPRangeListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common Ip range list internal server error response has a 3xx status code
func (o *CommonIPRangeListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common Ip range list internal server error response has a 4xx status code
func (o *CommonIPRangeListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this common Ip range list internal server error response has a 5xx status code
func (o *CommonIPRangeListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this common Ip range list internal server error response a status code equal to that given
func (o *CommonIPRangeListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the common Ip range list internal server error response
func (o *CommonIPRangeListInternalServerError) Code() int {
	return 500
}

func (o *CommonIPRangeListInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListInternalServerError ", 500)
}

func (o *CommonIPRangeListInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Common/ip-range-list][%d] commonIpRangeListInternalServerError ", 500)
}

func (o *CommonIPRangeListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
