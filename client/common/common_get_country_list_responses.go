// Code generated by go-swagger; DO NOT EDIT.

package common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonGetCountryListReader is a Reader for the CommonGetCountryList structure.
type CommonGetCountryListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommonGetCountryListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommonGetCountryListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommonGetCountryListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCommonGetCountryListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCommonGetCountryListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommonGetCountryListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommonGetCountryListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCommonGetCountryListOK creates a CommonGetCountryListOK with default headers values
func NewCommonGetCountryListOK() *CommonGetCountryListOK {
	return &CommonGetCountryListOK{}
}

/*
CommonGetCountryListOK describes a response with status code 200, with default header values.

Success
*/
type CommonGetCountryListOK struct {
	Payload []*CommonGetCountryListOKBodyItems0
}

// IsSuccess returns true when this common get country list o k response has a 2xx status code
func (o *CommonGetCountryListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this common get country list o k response has a 3xx status code
func (o *CommonGetCountryListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list o k response has a 4xx status code
func (o *CommonGetCountryListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this common get country list o k response has a 5xx status code
func (o *CommonGetCountryListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this common get country list o k response a status code equal to that given
func (o *CommonGetCountryListOK) IsCode(code int) bool {
	return code == 200
}

func (o *CommonGetCountryListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListOK  %+v", 200, o.Payload)
}

func (o *CommonGetCountryListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListOK  %+v", 200, o.Payload)
}

func (o *CommonGetCountryListOK) GetPayload() []*CommonGetCountryListOKBodyItems0 {
	return o.Payload
}

func (o *CommonGetCountryListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonGetCountryListBadRequest creates a CommonGetCountryListBadRequest with default headers values
func NewCommonGetCountryListBadRequest() *CommonGetCountryListBadRequest {
	return &CommonGetCountryListBadRequest{}
}

/*
CommonGetCountryListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CommonGetCountryListBadRequest struct {
	Payload []*CommonGetCountryListBadRequestBodyItems0
}

// IsSuccess returns true when this common get country list bad request response has a 2xx status code
func (o *CommonGetCountryListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common get country list bad request response has a 3xx status code
func (o *CommonGetCountryListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list bad request response has a 4xx status code
func (o *CommonGetCountryListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this common get country list bad request response has a 5xx status code
func (o *CommonGetCountryListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this common get country list bad request response a status code equal to that given
func (o *CommonGetCountryListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CommonGetCountryListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonGetCountryListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListBadRequest  %+v", 400, o.Payload)
}

func (o *CommonGetCountryListBadRequest) GetPayload() []*CommonGetCountryListBadRequestBodyItems0 {
	return o.Payload
}

func (o *CommonGetCountryListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonGetCountryListUnauthorized creates a CommonGetCountryListUnauthorized with default headers values
func NewCommonGetCountryListUnauthorized() *CommonGetCountryListUnauthorized {
	return &CommonGetCountryListUnauthorized{}
}

/*
CommonGetCountryListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CommonGetCountryListUnauthorized struct {
	Payload *CommonGetCountryListUnauthorizedBody
}

// IsSuccess returns true when this common get country list unauthorized response has a 2xx status code
func (o *CommonGetCountryListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common get country list unauthorized response has a 3xx status code
func (o *CommonGetCountryListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list unauthorized response has a 4xx status code
func (o *CommonGetCountryListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this common get country list unauthorized response has a 5xx status code
func (o *CommonGetCountryListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this common get country list unauthorized response a status code equal to that given
func (o *CommonGetCountryListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CommonGetCountryListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonGetCountryListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListUnauthorized  %+v", 401, o.Payload)
}

func (o *CommonGetCountryListUnauthorized) GetPayload() *CommonGetCountryListUnauthorizedBody {
	return o.Payload
}

func (o *CommonGetCountryListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommonGetCountryListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonGetCountryListForbidden creates a CommonGetCountryListForbidden with default headers values
func NewCommonGetCountryListForbidden() *CommonGetCountryListForbidden {
	return &CommonGetCountryListForbidden{}
}

/*
CommonGetCountryListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CommonGetCountryListForbidden struct {
	Payload *CommonGetCountryListForbiddenBody
}

// IsSuccess returns true when this common get country list forbidden response has a 2xx status code
func (o *CommonGetCountryListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common get country list forbidden response has a 3xx status code
func (o *CommonGetCountryListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list forbidden response has a 4xx status code
func (o *CommonGetCountryListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this common get country list forbidden response has a 5xx status code
func (o *CommonGetCountryListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this common get country list forbidden response a status code equal to that given
func (o *CommonGetCountryListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CommonGetCountryListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListForbidden  %+v", 403, o.Payload)
}

func (o *CommonGetCountryListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListForbidden  %+v", 403, o.Payload)
}

func (o *CommonGetCountryListForbidden) GetPayload() *CommonGetCountryListForbiddenBody {
	return o.Payload
}

func (o *CommonGetCountryListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommonGetCountryListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonGetCountryListNotFound creates a CommonGetCountryListNotFound with default headers values
func NewCommonGetCountryListNotFound() *CommonGetCountryListNotFound {
	return &CommonGetCountryListNotFound{}
}

/*
CommonGetCountryListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CommonGetCountryListNotFound struct {
	Payload *CommonGetCountryListNotFoundBody
}

// IsSuccess returns true when this common get country list not found response has a 2xx status code
func (o *CommonGetCountryListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common get country list not found response has a 3xx status code
func (o *CommonGetCountryListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list not found response has a 4xx status code
func (o *CommonGetCountryListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this common get country list not found response has a 5xx status code
func (o *CommonGetCountryListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this common get country list not found response a status code equal to that given
func (o *CommonGetCountryListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CommonGetCountryListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListNotFound  %+v", 404, o.Payload)
}

func (o *CommonGetCountryListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListNotFound  %+v", 404, o.Payload)
}

func (o *CommonGetCountryListNotFound) GetPayload() *CommonGetCountryListNotFoundBody {
	return o.Payload
}

func (o *CommonGetCountryListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommonGetCountryListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommonGetCountryListInternalServerError creates a CommonGetCountryListInternalServerError with default headers values
func NewCommonGetCountryListInternalServerError() *CommonGetCountryListInternalServerError {
	return &CommonGetCountryListInternalServerError{}
}

/*
CommonGetCountryListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CommonGetCountryListInternalServerError struct {
}

// IsSuccess returns true when this common get country list internal server error response has a 2xx status code
func (o *CommonGetCountryListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this common get country list internal server error response has a 3xx status code
func (o *CommonGetCountryListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this common get country list internal server error response has a 4xx status code
func (o *CommonGetCountryListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this common get country list internal server error response has a 5xx status code
func (o *CommonGetCountryListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this common get country list internal server error response a status code equal to that given
func (o *CommonGetCountryListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CommonGetCountryListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListInternalServerError ", 500)
}

func (o *CommonGetCountryListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Common/countries][%d] commonGetCountryListInternalServerError ", 500)
}

func (o *CommonGetCountryListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CommonGetCountryListBadRequestBodyItems0 common get country list bad request body items0
swagger:model CommonGetCountryListBadRequestBodyItems0
*/
type CommonGetCountryListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this common get country list bad request body items0
func (o *CommonGetCountryListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common get country list bad request body items0 based on context it is used
func (o *CommonGetCountryListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommonGetCountryListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommonGetCountryListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CommonGetCountryListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommonGetCountryListForbiddenBody common get country list forbidden body
swagger:model CommonGetCountryListForbiddenBody
*/
type CommonGetCountryListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this common get country list forbidden body
func (o *CommonGetCountryListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common get country list forbidden body based on context it is used
func (o *CommonGetCountryListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommonGetCountryListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommonGetCountryListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CommonGetCountryListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommonGetCountryListNotFoundBody common get country list not found body
swagger:model CommonGetCountryListNotFoundBody
*/
type CommonGetCountryListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this common get country list not found body
func (o *CommonGetCountryListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common get country list not found body based on context it is used
func (o *CommonGetCountryListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommonGetCountryListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommonGetCountryListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CommonGetCountryListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommonGetCountryListOKBodyItems0 common get country list o k body items0
swagger:model CommonGetCountryListOKBodyItems0
*/
type CommonGetCountryListOKBodyItems0 struct {

	// is eu
	IsEu bool `json:"isEu"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this common get country list o k body items0
func (o *CommonGetCountryListOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common get country list o k body items0 based on context it is used
func (o *CommonGetCountryListOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommonGetCountryListOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommonGetCountryListOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res CommonGetCountryListOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CommonGetCountryListUnauthorizedBody common get country list unauthorized body
swagger:model CommonGetCountryListUnauthorizedBody
*/
type CommonGetCountryListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this common get country list unauthorized body
func (o *CommonGetCountryListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common get country list unauthorized body based on context it is used
func (o *CommonGetCountryListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommonGetCountryListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommonGetCountryListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CommonGetCountryListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
