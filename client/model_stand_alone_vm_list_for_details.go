/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandAloneVmListForDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandAloneVmListForDetails{}

// StandAloneVmListForDetails struct for StandAloneVmListForDetails
type StandAloneVmListForDetails struct {
	Data []StandaloneVmsListForDetailsDto `json:"data"`
	Project ProjectDetailsForVmsDto `json:"project"`
}

type _StandAloneVmListForDetails StandAloneVmListForDetails

// NewStandAloneVmListForDetails instantiates a new StandAloneVmListForDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandAloneVmListForDetails(data []StandaloneVmsListForDetailsDto, project ProjectDetailsForVmsDto) *StandAloneVmListForDetails {
	this := StandAloneVmListForDetails{}
	this.Data = data
	this.Project = project
	return &this
}

// NewStandAloneVmListForDetailsWithDefaults instantiates a new StandAloneVmListForDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandAloneVmListForDetailsWithDefaults() *StandAloneVmListForDetails {
	this := StandAloneVmListForDetails{}
	return &this
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for []StandaloneVmsListForDetailsDto will be returned
func (o *StandAloneVmListForDetails) GetData() []StandaloneVmsListForDetailsDto {
	if o == nil {
		var ret []StandaloneVmsListForDetailsDto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandAloneVmListForDetails) GetDataOk() ([]StandaloneVmsListForDetailsDto, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *StandAloneVmListForDetails) SetData(v []StandaloneVmsListForDetailsDto) {
	o.Data = v
}

// GetProject returns the Project field value
func (o *StandAloneVmListForDetails) GetProject() ProjectDetailsForVmsDto {
	if o == nil {
		var ret ProjectDetailsForVmsDto
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *StandAloneVmListForDetails) GetProjectOk() (*ProjectDetailsForVmsDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *StandAloneVmListForDetails) SetProject(v ProjectDetailsForVmsDto) {
	o.Project = v
}

func (o StandAloneVmListForDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandAloneVmListForDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	toSerialize["project"] = o.Project
	return toSerialize, nil
}

func (o *StandAloneVmListForDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"project",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandAloneVmListForDetails := _StandAloneVmListForDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandAloneVmListForDetails)

	if err != nil {
		return err
	}

	*o = StandAloneVmListForDetails(varStandAloneVmListForDetails)

	return err
}

type NullableStandAloneVmListForDetails struct {
	value *StandAloneVmListForDetails
	isSet bool
}

func (v NullableStandAloneVmListForDetails) Get() *StandAloneVmListForDetails {
	return v.value
}

func (v *NullableStandAloneVmListForDetails) Set(val *StandAloneVmListForDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableStandAloneVmListForDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableStandAloneVmListForDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandAloneVmListForDetails(val *StandAloneVmListForDetails) *NullableStandAloneVmListForDetails {
	return &NullableStandAloneVmListForDetails{value: val, isSet: true}
}

func (v NullableStandAloneVmListForDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandAloneVmListForDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


