/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the MetricData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricData{}

// MetricData struct for MetricData
type MetricData struct {
	ResultType NullableString `json:"resultType,omitempty"`
	Result []MetricResult `json:"result,omitempty"`
}

// NewMetricData instantiates a new MetricData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricData() *MetricData {
	this := MetricData{}
	return &this
}

// NewMetricDataWithDefaults instantiates a new MetricData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDataWithDefaults() *MetricData {
	this := MetricData{}
	return &this
}

// GetResultType returns the ResultType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricData) GetResultType() string {
	if o == nil || IsNil(o.ResultType.Get()) {
		var ret string
		return ret
	}
	return *o.ResultType.Get()
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricData) GetResultTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResultType.Get(), o.ResultType.IsSet()
}

// HasResultType returns a boolean if a field has been set.
func (o *MetricData) HasResultType() bool {
	if o != nil && o.ResultType.IsSet() {
		return true
	}

	return false
}

// SetResultType gets a reference to the given NullableString and assigns it to the ResultType field.
func (o *MetricData) SetResultType(v string) {
	o.ResultType.Set(&v)
}
// SetResultTypeNil sets the value for ResultType to be an explicit nil
func (o *MetricData) SetResultTypeNil() {
	o.ResultType.Set(nil)
}

// UnsetResultType ensures that no value is present for ResultType, not even an explicit nil
func (o *MetricData) UnsetResultType() {
	o.ResultType.Unset()
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricData) GetResult() []MetricResult {
	if o == nil {
		var ret []MetricResult
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricData) GetResultOk() ([]MetricResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *MetricData) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []MetricResult and assigns it to the Result field.
func (o *MetricData) SetResult(v []MetricResult) {
	o.Result = v
}

func (o MetricData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ResultType.IsSet() {
		toSerialize["resultType"] = o.ResultType.Get()
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableMetricData struct {
	value *MetricData
	isSet bool
}

func (v NullableMetricData) Get() *MetricData {
	return v.value
}

func (v *NullableMetricData) Set(val *MetricData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricData(val *MetricData) *NullableMetricData {
	return &NullableMetricData{value: val, isSet: true}
}

func (v NullableMetricData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


