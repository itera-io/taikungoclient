// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenstackCreateReader is a Reader for the OpenstackCreate structure.
type OpenstackCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenstackCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenstackCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenstackCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOpenstackCreateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenstackCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOpenstackCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenstackCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOpenstackCreateOK creates a OpenstackCreateOK with default headers values
func NewOpenstackCreateOK() *OpenstackCreateOK {
	return &OpenstackCreateOK{}
}

/*
OpenstackCreateOK describes a response with status code 200, with default header values.

Success
*/
type OpenstackCreateOK struct {
	Payload *OpenstackCreateOKBody
}

// IsSuccess returns true when this openstack create o k response has a 2xx status code
func (o *OpenstackCreateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this openstack create o k response has a 3xx status code
func (o *OpenstackCreateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create o k response has a 4xx status code
func (o *OpenstackCreateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack create o k response has a 5xx status code
func (o *OpenstackCreateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack create o k response a status code equal to that given
func (o *OpenstackCreateOK) IsCode(code int) bool {
	return code == 200
}

func (o *OpenstackCreateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateOK  %+v", 200, o.Payload)
}

func (o *OpenstackCreateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateOK  %+v", 200, o.Payload)
}

func (o *OpenstackCreateOK) GetPayload() *OpenstackCreateOKBody {
	return o.Payload
}

func (o *OpenstackCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenstackCreateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackCreateBadRequest creates a OpenstackCreateBadRequest with default headers values
func NewOpenstackCreateBadRequest() *OpenstackCreateBadRequest {
	return &OpenstackCreateBadRequest{}
}

/*
OpenstackCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OpenstackCreateBadRequest struct {
	Payload []*OpenstackCreateBadRequestBodyItems0
}

// IsSuccess returns true when this openstack create bad request response has a 2xx status code
func (o *OpenstackCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack create bad request response has a 3xx status code
func (o *OpenstackCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create bad request response has a 4xx status code
func (o *OpenstackCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack create bad request response has a 5xx status code
func (o *OpenstackCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack create bad request response a status code equal to that given
func (o *OpenstackCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *OpenstackCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackCreateBadRequest) GetPayload() []*OpenstackCreateBadRequestBodyItems0 {
	return o.Payload
}

func (o *OpenstackCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackCreateUnauthorized creates a OpenstackCreateUnauthorized with default headers values
func NewOpenstackCreateUnauthorized() *OpenstackCreateUnauthorized {
	return &OpenstackCreateUnauthorized{}
}

/*
OpenstackCreateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type OpenstackCreateUnauthorized struct {
	Payload *OpenstackCreateUnauthorizedBody
}

// IsSuccess returns true when this openstack create unauthorized response has a 2xx status code
func (o *OpenstackCreateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack create unauthorized response has a 3xx status code
func (o *OpenstackCreateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create unauthorized response has a 4xx status code
func (o *OpenstackCreateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack create unauthorized response has a 5xx status code
func (o *OpenstackCreateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack create unauthorized response a status code equal to that given
func (o *OpenstackCreateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *OpenstackCreateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackCreateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackCreateUnauthorized) GetPayload() *OpenstackCreateUnauthorizedBody {
	return o.Payload
}

func (o *OpenstackCreateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenstackCreateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackCreateForbidden creates a OpenstackCreateForbidden with default headers values
func NewOpenstackCreateForbidden() *OpenstackCreateForbidden {
	return &OpenstackCreateForbidden{}
}

/*
OpenstackCreateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OpenstackCreateForbidden struct {
	Payload *OpenstackCreateForbiddenBody
}

// IsSuccess returns true when this openstack create forbidden response has a 2xx status code
func (o *OpenstackCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack create forbidden response has a 3xx status code
func (o *OpenstackCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create forbidden response has a 4xx status code
func (o *OpenstackCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack create forbidden response has a 5xx status code
func (o *OpenstackCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack create forbidden response a status code equal to that given
func (o *OpenstackCreateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *OpenstackCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackCreateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackCreateForbidden) GetPayload() *OpenstackCreateForbiddenBody {
	return o.Payload
}

func (o *OpenstackCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenstackCreateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackCreateNotFound creates a OpenstackCreateNotFound with default headers values
func NewOpenstackCreateNotFound() *OpenstackCreateNotFound {
	return &OpenstackCreateNotFound{}
}

/*
OpenstackCreateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OpenstackCreateNotFound struct {
	Payload *OpenstackCreateNotFoundBody
}

// IsSuccess returns true when this openstack create not found response has a 2xx status code
func (o *OpenstackCreateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack create not found response has a 3xx status code
func (o *OpenstackCreateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create not found response has a 4xx status code
func (o *OpenstackCreateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack create not found response has a 5xx status code
func (o *OpenstackCreateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack create not found response a status code equal to that given
func (o *OpenstackCreateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *OpenstackCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackCreateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackCreateNotFound) GetPayload() *OpenstackCreateNotFoundBody {
	return o.Payload
}

func (o *OpenstackCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OpenstackCreateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackCreateInternalServerError creates a OpenstackCreateInternalServerError with default headers values
func NewOpenstackCreateInternalServerError() *OpenstackCreateInternalServerError {
	return &OpenstackCreateInternalServerError{}
}

/*
OpenstackCreateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type OpenstackCreateInternalServerError struct {
}

// IsSuccess returns true when this openstack create internal server error response has a 2xx status code
func (o *OpenstackCreateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack create internal server error response has a 3xx status code
func (o *OpenstackCreateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack create internal server error response has a 4xx status code
func (o *OpenstackCreateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack create internal server error response has a 5xx status code
func (o *OpenstackCreateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this openstack create internal server error response a status code equal to that given
func (o *OpenstackCreateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *OpenstackCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateInternalServerError ", 500)
}

func (o *OpenstackCreateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/create][%d] openstackCreateInternalServerError ", 500)
}

func (o *OpenstackCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
OpenstackCreateBadRequestBodyItems0 openstack create bad request body items0
swagger:model OpenstackCreateBadRequestBodyItems0
*/
type OpenstackCreateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this openstack create bad request body items0
func (o *OpenstackCreateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create bad request body items0 based on context it is used
func (o *OpenstackCreateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenstackCreateBody openstack create body
swagger:model OpenstackCreateBody
*/
type OpenstackCreateBody struct {

	// application cred enabled
	ApplicationCredEnabled bool `json:"applicationCredEnabled"`

	// is admin
	IsAdmin bool `json:"isAdmin"`

	// name
	Name string `json:"name,omitempty"`

	// open stack availability zone
	OpenStackAvailabilityZone string `json:"openStackAvailabilityZone,omitempty"`

	// open stack continent
	OpenStackContinent string `json:"openStackContinent,omitempty"`

	// open stack domain
	OpenStackDomain string `json:"openStackDomain,omitempty"`

	// open stack import network
	OpenStackImportNetwork bool `json:"openStackImportNetwork"`

	// open stack internal subnet Id
	OpenStackInternalSubnetID string `json:"openStackInternalSubnetId,omitempty"`

	// open stack password
	OpenStackPassword string `json:"openStackPassword,omitempty"`

	// open stack project
	OpenStackProject string `json:"openStackProject,omitempty"`

	// open stack public network
	OpenStackPublicNetwork string `json:"openStackPublicNetwork,omitempty"`

	// open stack region
	OpenStackRegion string `json:"openStackRegion,omitempty"`

	// open stack Url
	OpenStackURL string `json:"openStackUrl,omitempty"`

	// open stack user
	OpenStackUser string `json:"openStackUser,omitempty"`

	// open stack volume type
	OpenStackVolumeType string `json:"openStackVolumeType,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`
}

// Validate validates this openstack create body
func (o *OpenstackCreateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create body based on context it is used
func (o *OpenstackCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateBody) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenstackCreateForbiddenBody openstack create forbidden body
swagger:model OpenstackCreateForbiddenBody
*/
type OpenstackCreateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this openstack create forbidden body
func (o *OpenstackCreateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create forbidden body based on context it is used
func (o *OpenstackCreateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenstackCreateNotFoundBody openstack create not found body
swagger:model OpenstackCreateNotFoundBody
*/
type OpenstackCreateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this openstack create not found body
func (o *OpenstackCreateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create not found body based on context it is used
func (o *OpenstackCreateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenstackCreateOKBody openstack create o k body
swagger:model OpenstackCreateOKBody
*/
type OpenstackCreateOKBody struct {

	// id
	ID string `json:"id,omitempty"`

	// is error
	IsError bool `json:"isError"`

	// message
	Message string `json:"message,omitempty"`

	// result
	Result interface{} `json:"result,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this openstack create o k body
func (o *OpenstackCreateOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create o k body based on context it is used
func (o *OpenstackCreateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateOKBody) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
OpenstackCreateUnauthorizedBody openstack create unauthorized body
swagger:model OpenstackCreateUnauthorizedBody
*/
type OpenstackCreateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this openstack create unauthorized body
func (o *OpenstackCreateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this openstack create unauthorized body based on context it is used
func (o *OpenstackCreateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OpenstackCreateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenstackCreateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res OpenstackCreateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
