// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new openstack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for openstack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OpenstackCreate(params *OpenstackCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackCreateOK, error)

	OpenstackList(params *OpenstackListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackListOK, error)

	OpenstackNetworks(params *OpenstackNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackNetworksOK, error)

	OpenstackProjects(params *OpenstackProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackProjectsOK, error)

	OpenstackQuotas(params *OpenstackQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackQuotasOK, error)

	OpenstackRegions(params *OpenstackRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackRegionsOK, error)

	OpenstackSubnets(params *OpenstackSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackSubnetsOK, error)

	OpenstackUpdate(params *OpenstackUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackUpdateOK, error)

	OpenstackVolumeTypes(params *OpenstackVolumeTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackVolumeTypesOK, error)

	OpenstackZoneList(params *OpenstackZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackZoneListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OpenstackCreate adds openstack credentials
*/
func (a *Client) OpenstackCreate(params *OpenstackCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackList retrieves list of azure cloud credentials
*/
func (a *Client) OpenstackList(params *OpenstackListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Openstack/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackNetworks retrieves a list of openstack network
*/
func (a *Client) OpenstackNetworks(params *OpenstackNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Networks",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/networks",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackProjects retrieves a list of openstack project
*/
func (a *Client) OpenstackProjects(params *OpenstackProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Projects",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/projects",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackQuotas retrieves a list of openstack quotas
*/
func (a *Client) OpenstackQuotas(params *OpenstackQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackQuotasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackQuotasParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Quotas",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/quotas",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackQuotasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackQuotasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Quotas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackRegions retrieves openstack regions
*/
func (a *Client) OpenstackRegions(params *OpenstackRegionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Regions",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/regions",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackSubnets retrieves a list of openstack subnet
*/
func (a *Client) OpenstackSubnets(params *OpenstackSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Subnets",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/subnets",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Subnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackUpdate updates openstack credentials
*/
func (a *Client) OpenstackUpdate(params *OpenstackUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_Update",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackVolumeTypes retrieves a list of openstack volume type
*/
func (a *Client) OpenstackVolumeTypes(params *OpenstackVolumeTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackVolumeTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackVolumeTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_VolumeTypes",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/volumes",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackVolumeTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackVolumeTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_VolumeTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenstackZoneList fetches openstack zone list
*/
func (a *Client) OpenstackZoneList(params *OpenstackZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenstackZoneListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenstackZoneListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Openstack_ZoneList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Openstack/zones",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenstackZoneListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenstackZoneListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Openstack_ZoneList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
