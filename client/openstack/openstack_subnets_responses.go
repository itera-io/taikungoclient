// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// OpenstackSubnetsReader is a Reader for the OpenstackSubnets structure.
type OpenstackSubnetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenstackSubnetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenstackSubnetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenstackSubnetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOpenstackSubnetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenstackSubnetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOpenstackSubnetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenstackSubnetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOpenstackSubnetsOK creates a OpenstackSubnetsOK with default headers values
func NewOpenstackSubnetsOK() *OpenstackSubnetsOK {
	return &OpenstackSubnetsOK{}
}

/*
OpenstackSubnetsOK describes a response with status code 200, with default header values.

Success
*/
type OpenstackSubnetsOK struct {
	Payload []*models.CommonStringBasedDropdownDto
}

// IsSuccess returns true when this openstack subnets o k response has a 2xx status code
func (o *OpenstackSubnetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this openstack subnets o k response has a 3xx status code
func (o *OpenstackSubnetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets o k response has a 4xx status code
func (o *OpenstackSubnetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack subnets o k response has a 5xx status code
func (o *OpenstackSubnetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack subnets o k response a status code equal to that given
func (o *OpenstackSubnetsOK) IsCode(code int) bool {
	return code == 200
}

func (o *OpenstackSubnetsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsOK  %+v", 200, o.Payload)
}

func (o *OpenstackSubnetsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsOK  %+v", 200, o.Payload)
}

func (o *OpenstackSubnetsOK) GetPayload() []*models.CommonStringBasedDropdownDto {
	return o.Payload
}

func (o *OpenstackSubnetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackSubnetsBadRequest creates a OpenstackSubnetsBadRequest with default headers values
func NewOpenstackSubnetsBadRequest() *OpenstackSubnetsBadRequest {
	return &OpenstackSubnetsBadRequest{}
}

/*
OpenstackSubnetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OpenstackSubnetsBadRequest struct {
	Payload []*models.Error
}

// IsSuccess returns true when this openstack subnets bad request response has a 2xx status code
func (o *OpenstackSubnetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack subnets bad request response has a 3xx status code
func (o *OpenstackSubnetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets bad request response has a 4xx status code
func (o *OpenstackSubnetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack subnets bad request response has a 5xx status code
func (o *OpenstackSubnetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack subnets bad request response a status code equal to that given
func (o *OpenstackSubnetsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *OpenstackSubnetsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackSubnetsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackSubnetsBadRequest) GetPayload() []*models.Error {
	return o.Payload
}

func (o *OpenstackSubnetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackSubnetsUnauthorized creates a OpenstackSubnetsUnauthorized with default headers values
func NewOpenstackSubnetsUnauthorized() *OpenstackSubnetsUnauthorized {
	return &OpenstackSubnetsUnauthorized{}
}

/*
OpenstackSubnetsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type OpenstackSubnetsUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this openstack subnets unauthorized response has a 2xx status code
func (o *OpenstackSubnetsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack subnets unauthorized response has a 3xx status code
func (o *OpenstackSubnetsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets unauthorized response has a 4xx status code
func (o *OpenstackSubnetsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack subnets unauthorized response has a 5xx status code
func (o *OpenstackSubnetsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack subnets unauthorized response a status code equal to that given
func (o *OpenstackSubnetsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *OpenstackSubnetsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackSubnetsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackSubnetsUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *OpenstackSubnetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackSubnetsForbidden creates a OpenstackSubnetsForbidden with default headers values
func NewOpenstackSubnetsForbidden() *OpenstackSubnetsForbidden {
	return &OpenstackSubnetsForbidden{}
}

/*
OpenstackSubnetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OpenstackSubnetsForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this openstack subnets forbidden response has a 2xx status code
func (o *OpenstackSubnetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack subnets forbidden response has a 3xx status code
func (o *OpenstackSubnetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets forbidden response has a 4xx status code
func (o *OpenstackSubnetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack subnets forbidden response has a 5xx status code
func (o *OpenstackSubnetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack subnets forbidden response a status code equal to that given
func (o *OpenstackSubnetsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *OpenstackSubnetsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackSubnetsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackSubnetsForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *OpenstackSubnetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackSubnetsNotFound creates a OpenstackSubnetsNotFound with default headers values
func NewOpenstackSubnetsNotFound() *OpenstackSubnetsNotFound {
	return &OpenstackSubnetsNotFound{}
}

/*
OpenstackSubnetsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OpenstackSubnetsNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this openstack subnets not found response has a 2xx status code
func (o *OpenstackSubnetsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack subnets not found response has a 3xx status code
func (o *OpenstackSubnetsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets not found response has a 4xx status code
func (o *OpenstackSubnetsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack subnets not found response has a 5xx status code
func (o *OpenstackSubnetsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack subnets not found response a status code equal to that given
func (o *OpenstackSubnetsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *OpenstackSubnetsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackSubnetsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackSubnetsNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *OpenstackSubnetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackSubnetsInternalServerError creates a OpenstackSubnetsInternalServerError with default headers values
func NewOpenstackSubnetsInternalServerError() *OpenstackSubnetsInternalServerError {
	return &OpenstackSubnetsInternalServerError{}
}

/*
OpenstackSubnetsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type OpenstackSubnetsInternalServerError struct {
}

// IsSuccess returns true when this openstack subnets internal server error response has a 2xx status code
func (o *OpenstackSubnetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack subnets internal server error response has a 3xx status code
func (o *OpenstackSubnetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack subnets internal server error response has a 4xx status code
func (o *OpenstackSubnetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack subnets internal server error response has a 5xx status code
func (o *OpenstackSubnetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this openstack subnets internal server error response a status code equal to that given
func (o *OpenstackSubnetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *OpenstackSubnetsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsInternalServerError ", 500)
}

func (o *OpenstackSubnetsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/subnets][%d] openstackSubnetsInternalServerError ", 500)
}

func (o *OpenstackSubnetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
