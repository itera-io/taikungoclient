// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// OpenstackListReader is a Reader for the OpenstackList structure.
type OpenstackListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenstackListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenstackListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenstackListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOpenstackListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenstackListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOpenstackListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenstackListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOpenstackListOK creates a OpenstackListOK with default headers values
func NewOpenstackListOK() *OpenstackListOK {
	return &OpenstackListOK{}
}

/*
OpenstackListOK describes a response with status code 200, with default header values.

Success
*/
type OpenstackListOK struct {
	Payload *models.OpenstackCredentialList
}

// IsSuccess returns true when this openstack list o k response has a 2xx status code
func (o *OpenstackListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this openstack list o k response has a 3xx status code
func (o *OpenstackListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list o k response has a 4xx status code
func (o *OpenstackListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack list o k response has a 5xx status code
func (o *OpenstackListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack list o k response a status code equal to that given
func (o *OpenstackListOK) IsCode(code int) bool {
	return code == 200
}

func (o *OpenstackListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListOK  %+v", 200, o.Payload)
}

func (o *OpenstackListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListOK  %+v", 200, o.Payload)
}

func (o *OpenstackListOK) GetPayload() *models.OpenstackCredentialList {
	return o.Payload
}

func (o *OpenstackListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenstackCredentialList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackListBadRequest creates a OpenstackListBadRequest with default headers values
func NewOpenstackListBadRequest() *OpenstackListBadRequest {
	return &OpenstackListBadRequest{}
}

/*
OpenstackListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OpenstackListBadRequest struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this openstack list bad request response has a 2xx status code
func (o *OpenstackListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack list bad request response has a 3xx status code
func (o *OpenstackListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list bad request response has a 4xx status code
func (o *OpenstackListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack list bad request response has a 5xx status code
func (o *OpenstackListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack list bad request response a status code equal to that given
func (o *OpenstackListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *OpenstackListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackListBadRequest) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *OpenstackListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackListUnauthorized creates a OpenstackListUnauthorized with default headers values
func NewOpenstackListUnauthorized() *OpenstackListUnauthorized {
	return &OpenstackListUnauthorized{}
}

/*
OpenstackListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type OpenstackListUnauthorized struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this openstack list unauthorized response has a 2xx status code
func (o *OpenstackListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack list unauthorized response has a 3xx status code
func (o *OpenstackListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list unauthorized response has a 4xx status code
func (o *OpenstackListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack list unauthorized response has a 5xx status code
func (o *OpenstackListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack list unauthorized response a status code equal to that given
func (o *OpenstackListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *OpenstackListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackListUnauthorized) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *OpenstackListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackListForbidden creates a OpenstackListForbidden with default headers values
func NewOpenstackListForbidden() *OpenstackListForbidden {
	return &OpenstackListForbidden{}
}

/*
OpenstackListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OpenstackListForbidden struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this openstack list forbidden response has a 2xx status code
func (o *OpenstackListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack list forbidden response has a 3xx status code
func (o *OpenstackListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list forbidden response has a 4xx status code
func (o *OpenstackListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack list forbidden response has a 5xx status code
func (o *OpenstackListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack list forbidden response a status code equal to that given
func (o *OpenstackListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *OpenstackListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackListForbidden) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *OpenstackListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackListNotFound creates a OpenstackListNotFound with default headers values
func NewOpenstackListNotFound() *OpenstackListNotFound {
	return &OpenstackListNotFound{}
}

/*
OpenstackListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OpenstackListNotFound struct {
	Payload []*models.CustomProblemDetailsMg
}

// IsSuccess returns true when this openstack list not found response has a 2xx status code
func (o *OpenstackListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack list not found response has a 3xx status code
func (o *OpenstackListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list not found response has a 4xx status code
func (o *OpenstackListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack list not found response has a 5xx status code
func (o *OpenstackListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack list not found response a status code equal to that given
func (o *OpenstackListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *OpenstackListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackListNotFound) GetPayload() []*models.CustomProblemDetailsMg {
	return o.Payload
}

func (o *OpenstackListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackListInternalServerError creates a OpenstackListInternalServerError with default headers values
func NewOpenstackListInternalServerError() *OpenstackListInternalServerError {
	return &OpenstackListInternalServerError{}
}

/*
OpenstackListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type OpenstackListInternalServerError struct {
}

// IsSuccess returns true when this openstack list internal server error response has a 2xx status code
func (o *OpenstackListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack list internal server error response has a 3xx status code
func (o *OpenstackListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack list internal server error response has a 4xx status code
func (o *OpenstackListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack list internal server error response has a 5xx status code
func (o *OpenstackListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this openstack list internal server error response a status code equal to that given
func (o *OpenstackListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *OpenstackListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListInternalServerError ", 500)
}

func (o *OpenstackListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Openstack/list][%d] openstackListInternalServerError ", 500)
}

func (o *OpenstackListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
