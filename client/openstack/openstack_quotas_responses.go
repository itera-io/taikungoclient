// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// OpenstackQuotasReader is a Reader for the OpenstackQuotas structure.
type OpenstackQuotasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenstackQuotasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenstackQuotasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenstackQuotasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOpenstackQuotasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOpenstackQuotasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOpenstackQuotasNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenstackQuotasInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOpenstackQuotasOK creates a OpenstackQuotasOK with default headers values
func NewOpenstackQuotasOK() *OpenstackQuotasOK {
	return &OpenstackQuotasOK{}
}

/*
OpenstackQuotasOK describes a response with status code 200, with default header values.

Success
*/
type OpenstackQuotasOK struct {
	Payload *models.OpenstackQuotaList
}

// IsSuccess returns true when this openstack quotas o k response has a 2xx status code
func (o *OpenstackQuotasOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this openstack quotas o k response has a 3xx status code
func (o *OpenstackQuotasOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas o k response has a 4xx status code
func (o *OpenstackQuotasOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack quotas o k response has a 5xx status code
func (o *OpenstackQuotasOK) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack quotas o k response a status code equal to that given
func (o *OpenstackQuotasOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the openstack quotas o k response
func (o *OpenstackQuotasOK) Code() int {
	return 200
}

func (o *OpenstackQuotasOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasOK  %+v", 200, o.Payload)
}

func (o *OpenstackQuotasOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasOK  %+v", 200, o.Payload)
}

func (o *OpenstackQuotasOK) GetPayload() *models.OpenstackQuotaList {
	return o.Payload
}

func (o *OpenstackQuotasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenstackQuotaList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackQuotasBadRequest creates a OpenstackQuotasBadRequest with default headers values
func NewOpenstackQuotasBadRequest() *OpenstackQuotasBadRequest {
	return &OpenstackQuotasBadRequest{}
}

/*
OpenstackQuotasBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OpenstackQuotasBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this openstack quotas bad request response has a 2xx status code
func (o *OpenstackQuotasBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack quotas bad request response has a 3xx status code
func (o *OpenstackQuotasBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas bad request response has a 4xx status code
func (o *OpenstackQuotasBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack quotas bad request response has a 5xx status code
func (o *OpenstackQuotasBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack quotas bad request response a status code equal to that given
func (o *OpenstackQuotasBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the openstack quotas bad request response
func (o *OpenstackQuotasBadRequest) Code() int {
	return 400
}

func (o *OpenstackQuotasBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackQuotasBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasBadRequest  %+v", 400, o.Payload)
}

func (o *OpenstackQuotasBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *OpenstackQuotasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackQuotasUnauthorized creates a OpenstackQuotasUnauthorized with default headers values
func NewOpenstackQuotasUnauthorized() *OpenstackQuotasUnauthorized {
	return &OpenstackQuotasUnauthorized{}
}

/*
OpenstackQuotasUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type OpenstackQuotasUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this openstack quotas unauthorized response has a 2xx status code
func (o *OpenstackQuotasUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack quotas unauthorized response has a 3xx status code
func (o *OpenstackQuotasUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas unauthorized response has a 4xx status code
func (o *OpenstackQuotasUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack quotas unauthorized response has a 5xx status code
func (o *OpenstackQuotasUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack quotas unauthorized response a status code equal to that given
func (o *OpenstackQuotasUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the openstack quotas unauthorized response
func (o *OpenstackQuotasUnauthorized) Code() int {
	return 401
}

func (o *OpenstackQuotasUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackQuotasUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasUnauthorized  %+v", 401, o.Payload)
}

func (o *OpenstackQuotasUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *OpenstackQuotasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackQuotasForbidden creates a OpenstackQuotasForbidden with default headers values
func NewOpenstackQuotasForbidden() *OpenstackQuotasForbidden {
	return &OpenstackQuotasForbidden{}
}

/*
OpenstackQuotasForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OpenstackQuotasForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this openstack quotas forbidden response has a 2xx status code
func (o *OpenstackQuotasForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack quotas forbidden response has a 3xx status code
func (o *OpenstackQuotasForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas forbidden response has a 4xx status code
func (o *OpenstackQuotasForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack quotas forbidden response has a 5xx status code
func (o *OpenstackQuotasForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack quotas forbidden response a status code equal to that given
func (o *OpenstackQuotasForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the openstack quotas forbidden response
func (o *OpenstackQuotasForbidden) Code() int {
	return 403
}

func (o *OpenstackQuotasForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackQuotasForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasForbidden  %+v", 403, o.Payload)
}

func (o *OpenstackQuotasForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *OpenstackQuotasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackQuotasNotFound creates a OpenstackQuotasNotFound with default headers values
func NewOpenstackQuotasNotFound() *OpenstackQuotasNotFound {
	return &OpenstackQuotasNotFound{}
}

/*
OpenstackQuotasNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OpenstackQuotasNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this openstack quotas not found response has a 2xx status code
func (o *OpenstackQuotasNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack quotas not found response has a 3xx status code
func (o *OpenstackQuotasNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas not found response has a 4xx status code
func (o *OpenstackQuotasNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this openstack quotas not found response has a 5xx status code
func (o *OpenstackQuotasNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this openstack quotas not found response a status code equal to that given
func (o *OpenstackQuotasNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the openstack quotas not found response
func (o *OpenstackQuotasNotFound) Code() int {
	return 404
}

func (o *OpenstackQuotasNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackQuotasNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasNotFound  %+v", 404, o.Payload)
}

func (o *OpenstackQuotasNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *OpenstackQuotasNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenstackQuotasInternalServerError creates a OpenstackQuotasInternalServerError with default headers values
func NewOpenstackQuotasInternalServerError() *OpenstackQuotasInternalServerError {
	return &OpenstackQuotasInternalServerError{}
}

/*
OpenstackQuotasInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type OpenstackQuotasInternalServerError struct {
}

// IsSuccess returns true when this openstack quotas internal server error response has a 2xx status code
func (o *OpenstackQuotasInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this openstack quotas internal server error response has a 3xx status code
func (o *OpenstackQuotasInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this openstack quotas internal server error response has a 4xx status code
func (o *OpenstackQuotasInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this openstack quotas internal server error response has a 5xx status code
func (o *OpenstackQuotasInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this openstack quotas internal server error response a status code equal to that given
func (o *OpenstackQuotasInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the openstack quotas internal server error response
func (o *OpenstackQuotasInternalServerError) Code() int {
	return 500
}

func (o *OpenstackQuotasInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasInternalServerError ", 500)
}

func (o *OpenstackQuotasInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Openstack/quotas][%d] openstackQuotasInternalServerError ", 500)
}

func (o *OpenstackQuotasInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
