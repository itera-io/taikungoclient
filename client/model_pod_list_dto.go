/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the PodListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodListDto{}

// PodListDto struct for PodListDto
type PodListDto struct {
	MetadataName *string `json:"metadataName,omitempty"`
	RestartCount *int32 `json:"restartCount,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Node *string `json:"node,omitempty"`
	Age *string `json:"age,omitempty"`
	Status *string `json:"status,omitempty"`
	Phase *string `json:"phase,omitempty"`
	Container []string `json:"container,omitempty"`
}

// NewPodListDto instantiates a new PodListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodListDto() *PodListDto {
	this := PodListDto{}
	return &this
}

// NewPodListDtoWithDefaults instantiates a new PodListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodListDtoWithDefaults() *PodListDto {
	this := PodListDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise.
func (o *PodListDto) GetMetadataName() string {
	if o == nil || IsNil(o.MetadataName) {
		var ret string
		return ret
	}
	return *o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetMetadataNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataName) {
		return nil, false
	}
	return o.MetadataName, true
}

// HasMetadataName returns a boolean if a field has been set.
func (o *PodListDto) HasMetadataName() bool {
	if o != nil && !IsNil(o.MetadataName) {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given string and assigns it to the MetadataName field.
func (o *PodListDto) SetMetadataName(v string) {
	o.MetadataName = &v
}

// GetRestartCount returns the RestartCount field value if set, zero value otherwise.
func (o *PodListDto) GetRestartCount() int32 {
	if o == nil || IsNil(o.RestartCount) {
		var ret int32
		return ret
	}
	return *o.RestartCount
}

// GetRestartCountOk returns a tuple with the RestartCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetRestartCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RestartCount) {
		return nil, false
	}
	return o.RestartCount, true
}

// HasRestartCount returns a boolean if a field has been set.
func (o *PodListDto) HasRestartCount() bool {
	if o != nil && !IsNil(o.RestartCount) {
		return true
	}

	return false
}

// SetRestartCount gets a reference to the given int32 and assigns it to the RestartCount field.
func (o *PodListDto) SetRestartCount(v int32) {
	o.RestartCount = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PodListDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PodListDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PodListDto) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *PodListDto) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *PodListDto) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *PodListDto) SetNode(v string) {
	o.Node = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *PodListDto) GetAge() string {
	if o == nil || IsNil(o.Age) {
		var ret string
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetAgeOk() (*string, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *PodListDto) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given string and assigns it to the Age field.
func (o *PodListDto) SetAge(v string) {
	o.Age = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PodListDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PodListDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PodListDto) SetStatus(v string) {
	o.Status = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *PodListDto) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *PodListDto) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *PodListDto) SetPhase(v string) {
	o.Phase = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *PodListDto) GetContainer() []string {
	if o == nil || IsNil(o.Container) {
		var ret []string
		return ret
	}
	return o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodListDto) GetContainerOk() ([]string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *PodListDto) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given []string and assigns it to the Container field.
func (o *PodListDto) SetContainer(v []string) {
	o.Container = v
}

func (o PodListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetadataName) {
		toSerialize["metadataName"] = o.MetadataName
	}
	if !IsNil(o.RestartCount) {
		toSerialize["restartCount"] = o.RestartCount
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	return toSerialize, nil
}

type NullablePodListDto struct {
	value *PodListDto
	isSet bool
}

func (v NullablePodListDto) Get() *PodListDto {
	return v.value
}

func (v *NullablePodListDto) Set(val *PodListDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePodListDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePodListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodListDto(val *PodListDto) *NullablePodListDto {
	return &NullablePodListDto{value: val, isSet: true}
}

func (v NullablePodListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


