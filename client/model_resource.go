/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource struct for Resource
type Resource struct {
	Name *string `json:"name,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	HourlyCost *string `json:"hourlyCost,omitempty"`
	MonthlyCost *string `json:"monthlyCost,omitempty"`
	MonthlyUsageCost *string `json:"monthlyUsageCost,omitempty"`
	CostComponents []CostComponent `json:"costComponents,omitempty"`
	Subresources []Subresource `json:"subresources,omitempty"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource() *Resource {
	this := Resource{}
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Resource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Resource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Resource) SetName(v string) {
	o.Name = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Resource) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Resource) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Resource) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Resource) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Resource) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *Resource) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Resource) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Resource) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Resource) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetHourlyCost returns the HourlyCost field value if set, zero value otherwise.
func (o *Resource) GetHourlyCost() string {
	if o == nil || IsNil(o.HourlyCost) {
		var ret string
		return ret
	}
	return *o.HourlyCost
}

// GetHourlyCostOk returns a tuple with the HourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.HourlyCost) {
		return nil, false
	}
	return o.HourlyCost, true
}

// HasHourlyCost returns a boolean if a field has been set.
func (o *Resource) HasHourlyCost() bool {
	if o != nil && !IsNil(o.HourlyCost) {
		return true
	}

	return false
}

// SetHourlyCost gets a reference to the given string and assigns it to the HourlyCost field.
func (o *Resource) SetHourlyCost(v string) {
	o.HourlyCost = &v
}

// GetMonthlyCost returns the MonthlyCost field value if set, zero value otherwise.
func (o *Resource) GetMonthlyCost() string {
	if o == nil || IsNil(o.MonthlyCost) {
		var ret string
		return ret
	}
	return *o.MonthlyCost
}

// GetMonthlyCostOk returns a tuple with the MonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetMonthlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.MonthlyCost) {
		return nil, false
	}
	return o.MonthlyCost, true
}

// HasMonthlyCost returns a boolean if a field has been set.
func (o *Resource) HasMonthlyCost() bool {
	if o != nil && !IsNil(o.MonthlyCost) {
		return true
	}

	return false
}

// SetMonthlyCost gets a reference to the given string and assigns it to the MonthlyCost field.
func (o *Resource) SetMonthlyCost(v string) {
	o.MonthlyCost = &v
}

// GetMonthlyUsageCost returns the MonthlyUsageCost field value if set, zero value otherwise.
func (o *Resource) GetMonthlyUsageCost() string {
	if o == nil || IsNil(o.MonthlyUsageCost) {
		var ret string
		return ret
	}
	return *o.MonthlyUsageCost
}

// GetMonthlyUsageCostOk returns a tuple with the MonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetMonthlyUsageCostOk() (*string, bool) {
	if o == nil || IsNil(o.MonthlyUsageCost) {
		return nil, false
	}
	return o.MonthlyUsageCost, true
}

// HasMonthlyUsageCost returns a boolean if a field has been set.
func (o *Resource) HasMonthlyUsageCost() bool {
	if o != nil && !IsNil(o.MonthlyUsageCost) {
		return true
	}

	return false
}

// SetMonthlyUsageCost gets a reference to the given string and assigns it to the MonthlyUsageCost field.
func (o *Resource) SetMonthlyUsageCost(v string) {
	o.MonthlyUsageCost = &v
}

// GetCostComponents returns the CostComponents field value if set, zero value otherwise.
func (o *Resource) GetCostComponents() []CostComponent {
	if o == nil || IsNil(o.CostComponents) {
		var ret []CostComponent
		return ret
	}
	return o.CostComponents
}

// GetCostComponentsOk returns a tuple with the CostComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetCostComponentsOk() ([]CostComponent, bool) {
	if o == nil || IsNil(o.CostComponents) {
		return nil, false
	}
	return o.CostComponents, true
}

// HasCostComponents returns a boolean if a field has been set.
func (o *Resource) HasCostComponents() bool {
	if o != nil && !IsNil(o.CostComponents) {
		return true
	}

	return false
}

// SetCostComponents gets a reference to the given []CostComponent and assigns it to the CostComponents field.
func (o *Resource) SetCostComponents(v []CostComponent) {
	o.CostComponents = v
}

// GetSubresources returns the Subresources field value if set, zero value otherwise.
func (o *Resource) GetSubresources() []Subresource {
	if o == nil || IsNil(o.Subresources) {
		var ret []Subresource
		return ret
	}
	return o.Subresources
}

// GetSubresourcesOk returns a tuple with the Subresources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetSubresourcesOk() ([]Subresource, bool) {
	if o == nil || IsNil(o.Subresources) {
		return nil, false
	}
	return o.Subresources, true
}

// HasSubresources returns a boolean if a field has been set.
func (o *Resource) HasSubresources() bool {
	if o != nil && !IsNil(o.Subresources) {
		return true
	}

	return false
}

// SetSubresources gets a reference to the given []Subresource and assigns it to the Subresources field.
func (o *Resource) SetSubresources(v []Subresource) {
	o.Subresources = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.HourlyCost) {
		toSerialize["hourlyCost"] = o.HourlyCost
	}
	if !IsNil(o.MonthlyCost) {
		toSerialize["monthlyCost"] = o.MonthlyCost
	}
	if !IsNil(o.MonthlyUsageCost) {
		toSerialize["monthlyUsageCost"] = o.MonthlyUsageCost
	}
	if !IsNil(o.CostComponents) {
		toSerialize["costComponents"] = o.CostComponents
	}
	if !IsNil(o.Subresources) {
		toSerialize["subresources"] = o.Subresources
	}
	return toSerialize, nil
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


