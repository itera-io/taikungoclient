// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	UsersChangePassword(params *UsersChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersChangePasswordOK, error)

	UsersConfirmEmail(params *UsersConfirmEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersConfirmEmailOK, error)

	UsersCreate(params *UsersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersCreateOK, error)

	UsersDelete(params *UsersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDeleteOK, *UsersDeleteNoContent, error)

	UsersDeleteMyAccount(params *UsersDeleteMyAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDeleteMyAccountOK, error)

	UsersDetails(params *UsersDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDetailsOK, error)

	UsersDisableUser(params *UsersDisableUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDisableUserOK, error)

	UsersExportCsv(params *UsersExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersExportCsvOK, error)

	UsersForceToResetPassword(params *UsersForceToResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersForceToResetPasswordOK, error)

	UsersList(params *UsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersListOK, error)

	UsersListSelector(params *UsersListSelectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersListSelectorOK, error)

	UsersToggleDemoMode(params *UsersToggleDemoModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleDemoModeOK, error)

	UsersToggleMaintenanceMode(params *UsersToggleMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleMaintenanceModeOK, error)

	UsersToggleNotificationMode(params *UsersToggleNotificationModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleNotificationModeOK, error)

	UsersUpdateUser(params *UsersUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersUpdateUserOK, error)

	UsersVerifyEmail(params *UsersVerifyEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersVerifyEmailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
UsersChangePassword changes user password
*/
func (a *Client) UsersChangePassword(params *UsersChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ChangePassword",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/changepassword",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersChangePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ChangePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersConfirmEmail confirms user email
*/
func (a *Client) UsersConfirmEmail(params *UsersConfirmEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersConfirmEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersConfirmEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ConfirmEmail",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/confirmemail",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersConfirmEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersConfirmEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ConfirmEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersCreate creates a new user
*/
func (a *Client) UsersCreate(params *UsersCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDelete deletes user only valid for admin moderators and partner reminder moderators can delete users from their organization only
*/
func (a *Client) UsersDelete(params *UsersDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDeleteOK, *UsersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/Users/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UsersDeleteOK:
		return value, nil, nil
	case *UsersDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDeleteMyAccount deletes my account
*/
func (a *Client) UsersDeleteMyAccount(params *UsersDeleteMyAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDeleteMyAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDeleteMyAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_DeleteMyAccount",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersDeleteMyAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersDeleteMyAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_DeleteMyAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDetails users details API
*/
func (a *Client) UsersDetails(params *UsersDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_Details",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Users/userinfo",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersDisableUser disables user
*/
func (a *Client) UsersDisableUser(params *UsersDisableUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersDisableUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDisableUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_DisableUser",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/disable",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersDisableUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersDisableUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_DisableUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersExportCsv exports csv file
*/
func (a *Client) UsersExportCsv(params *UsersExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersExportCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersExportCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ExportCsv",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Users/export",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersExportCsvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersExportCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ExportCsv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersForceToResetPassword forces to reset password
*/
func (a *Client) UsersForceToResetPassword(params *UsersForceToResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersForceToResetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersForceToResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ForceToResetPassword",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/force-to-reset",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersForceToResetPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersForceToResetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ForceToResetPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersList retrieves all users only valid for admin
*/
func (a *Client) UsersList(params *UsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Users",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersListSelector retrieves projects according to user role
*/
func (a *Client) UsersListSelector(params *UsersListSelectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersListSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ListSelector",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Users/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersListSelectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersListSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ListSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersToggleDemoMode toggles demo mode
*/
func (a *Client) UsersToggleDemoMode(params *UsersToggleDemoModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleDemoModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersToggleDemoModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ToggleDemoMode",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/toggle-demo-mode",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersToggleDemoModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersToggleDemoModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ToggleDemoMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersToggleMaintenanceMode users toggle maintenance mode API
*/
func (a *Client) UsersToggleMaintenanceMode(params *UsersToggleMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleMaintenanceModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersToggleMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ToggleMaintenanceMode",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/togglemaintenancemode",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersToggleMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersToggleMaintenanceModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ToggleMaintenanceMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersToggleNotificationMode users toggle notification mode API
*/
func (a *Client) UsersToggleNotificationMode(params *UsersToggleNotificationModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersToggleNotificationModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersToggleNotificationModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_ToggleNotificationMode",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/togglenotificationmode",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersToggleNotificationModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersToggleNotificationModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_ToggleNotificationMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersUpdateUser updates user credential
*/
func (a *Client) UsersUpdateUser(params *UsersUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_UpdateUser",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UsersVerifyEmail verifies user email
*/
func (a *Client) UsersVerifyEmail(params *UsersVerifyEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UsersVerifyEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersVerifyEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Users_VerifyEmail",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Users/verifyemail",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersVerifyEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersVerifyEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_VerifyEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
