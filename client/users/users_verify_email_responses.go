// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UsersVerifyEmailReader is a Reader for the UsersVerifyEmail structure.
type UsersVerifyEmailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersVerifyEmailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUsersVerifyEmailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUsersVerifyEmailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUsersVerifyEmailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUsersVerifyEmailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUsersVerifyEmailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUsersVerifyEmailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUsersVerifyEmailOK creates a UsersVerifyEmailOK with default headers values
func NewUsersVerifyEmailOK() *UsersVerifyEmailOK {
	return &UsersVerifyEmailOK{}
}

/*
UsersVerifyEmailOK describes a response with status code 200, with default header values.

Success
*/
type UsersVerifyEmailOK struct {
	Payload interface{}
}

// IsSuccess returns true when this users verify email o k response has a 2xx status code
func (o *UsersVerifyEmailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this users verify email o k response has a 3xx status code
func (o *UsersVerifyEmailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email o k response has a 4xx status code
func (o *UsersVerifyEmailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this users verify email o k response has a 5xx status code
func (o *UsersVerifyEmailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this users verify email o k response a status code equal to that given
func (o *UsersVerifyEmailOK) IsCode(code int) bool {
	return code == 200
}

func (o *UsersVerifyEmailOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailOK  %+v", 200, o.Payload)
}

func (o *UsersVerifyEmailOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailOK  %+v", 200, o.Payload)
}

func (o *UsersVerifyEmailOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UsersVerifyEmailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersVerifyEmailBadRequest creates a UsersVerifyEmailBadRequest with default headers values
func NewUsersVerifyEmailBadRequest() *UsersVerifyEmailBadRequest {
	return &UsersVerifyEmailBadRequest{}
}

/*
UsersVerifyEmailBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UsersVerifyEmailBadRequest struct {
	Payload []*UsersVerifyEmailBadRequestBodyItems0
}

// IsSuccess returns true when this users verify email bad request response has a 2xx status code
func (o *UsersVerifyEmailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users verify email bad request response has a 3xx status code
func (o *UsersVerifyEmailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email bad request response has a 4xx status code
func (o *UsersVerifyEmailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this users verify email bad request response has a 5xx status code
func (o *UsersVerifyEmailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this users verify email bad request response a status code equal to that given
func (o *UsersVerifyEmailBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UsersVerifyEmailBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailBadRequest  %+v", 400, o.Payload)
}

func (o *UsersVerifyEmailBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailBadRequest  %+v", 400, o.Payload)
}

func (o *UsersVerifyEmailBadRequest) GetPayload() []*UsersVerifyEmailBadRequestBodyItems0 {
	return o.Payload
}

func (o *UsersVerifyEmailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersVerifyEmailUnauthorized creates a UsersVerifyEmailUnauthorized with default headers values
func NewUsersVerifyEmailUnauthorized() *UsersVerifyEmailUnauthorized {
	return &UsersVerifyEmailUnauthorized{}
}

/*
UsersVerifyEmailUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UsersVerifyEmailUnauthorized struct {
	Payload *UsersVerifyEmailUnauthorizedBody
}

// IsSuccess returns true when this users verify email unauthorized response has a 2xx status code
func (o *UsersVerifyEmailUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users verify email unauthorized response has a 3xx status code
func (o *UsersVerifyEmailUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email unauthorized response has a 4xx status code
func (o *UsersVerifyEmailUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this users verify email unauthorized response has a 5xx status code
func (o *UsersVerifyEmailUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this users verify email unauthorized response a status code equal to that given
func (o *UsersVerifyEmailUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UsersVerifyEmailUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersVerifyEmailUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersVerifyEmailUnauthorized) GetPayload() *UsersVerifyEmailUnauthorizedBody {
	return o.Payload
}

func (o *UsersVerifyEmailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersVerifyEmailUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersVerifyEmailForbidden creates a UsersVerifyEmailForbidden with default headers values
func NewUsersVerifyEmailForbidden() *UsersVerifyEmailForbidden {
	return &UsersVerifyEmailForbidden{}
}

/*
UsersVerifyEmailForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UsersVerifyEmailForbidden struct {
	Payload *UsersVerifyEmailForbiddenBody
}

// IsSuccess returns true when this users verify email forbidden response has a 2xx status code
func (o *UsersVerifyEmailForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users verify email forbidden response has a 3xx status code
func (o *UsersVerifyEmailForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email forbidden response has a 4xx status code
func (o *UsersVerifyEmailForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this users verify email forbidden response has a 5xx status code
func (o *UsersVerifyEmailForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this users verify email forbidden response a status code equal to that given
func (o *UsersVerifyEmailForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UsersVerifyEmailForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailForbidden  %+v", 403, o.Payload)
}

func (o *UsersVerifyEmailForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailForbidden  %+v", 403, o.Payload)
}

func (o *UsersVerifyEmailForbidden) GetPayload() *UsersVerifyEmailForbiddenBody {
	return o.Payload
}

func (o *UsersVerifyEmailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersVerifyEmailForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersVerifyEmailNotFound creates a UsersVerifyEmailNotFound with default headers values
func NewUsersVerifyEmailNotFound() *UsersVerifyEmailNotFound {
	return &UsersVerifyEmailNotFound{}
}

/*
UsersVerifyEmailNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UsersVerifyEmailNotFound struct {
	Payload *UsersVerifyEmailNotFoundBody
}

// IsSuccess returns true when this users verify email not found response has a 2xx status code
func (o *UsersVerifyEmailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users verify email not found response has a 3xx status code
func (o *UsersVerifyEmailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email not found response has a 4xx status code
func (o *UsersVerifyEmailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this users verify email not found response has a 5xx status code
func (o *UsersVerifyEmailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this users verify email not found response a status code equal to that given
func (o *UsersVerifyEmailNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UsersVerifyEmailNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailNotFound  %+v", 404, o.Payload)
}

func (o *UsersVerifyEmailNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailNotFound  %+v", 404, o.Payload)
}

func (o *UsersVerifyEmailNotFound) GetPayload() *UsersVerifyEmailNotFoundBody {
	return o.Payload
}

func (o *UsersVerifyEmailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersVerifyEmailNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersVerifyEmailInternalServerError creates a UsersVerifyEmailInternalServerError with default headers values
func NewUsersVerifyEmailInternalServerError() *UsersVerifyEmailInternalServerError {
	return &UsersVerifyEmailInternalServerError{}
}

/*
UsersVerifyEmailInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UsersVerifyEmailInternalServerError struct {
}

// IsSuccess returns true when this users verify email internal server error response has a 2xx status code
func (o *UsersVerifyEmailInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users verify email internal server error response has a 3xx status code
func (o *UsersVerifyEmailInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users verify email internal server error response has a 4xx status code
func (o *UsersVerifyEmailInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this users verify email internal server error response has a 5xx status code
func (o *UsersVerifyEmailInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this users verify email internal server error response a status code equal to that given
func (o *UsersVerifyEmailInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UsersVerifyEmailInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailInternalServerError ", 500)
}

func (o *UsersVerifyEmailInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/verifyemail][%d] usersVerifyEmailInternalServerError ", 500)
}

func (o *UsersVerifyEmailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UsersVerifyEmailBadRequestBodyItems0 users verify email bad request body items0
swagger:model UsersVerifyEmailBadRequestBodyItems0
*/
type UsersVerifyEmailBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this users verify email bad request body items0
func (o *UsersVerifyEmailBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users verify email bad request body items0 based on context it is used
func (o *UsersVerifyEmailBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersVerifyEmailBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersVerifyEmailBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UsersVerifyEmailBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersVerifyEmailBody users verify email body
swagger:model UsersVerifyEmailBody
*/
type UsersVerifyEmailBody struct {

	// mode
	Mode string `json:"mode,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this users verify email body
func (o *UsersVerifyEmailBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users verify email body based on context it is used
func (o *UsersVerifyEmailBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersVerifyEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersVerifyEmailBody) UnmarshalBinary(b []byte) error {
	var res UsersVerifyEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersVerifyEmailForbiddenBody users verify email forbidden body
swagger:model UsersVerifyEmailForbiddenBody
*/
type UsersVerifyEmailForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users verify email forbidden body
func (o *UsersVerifyEmailForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users verify email forbidden body based on context it is used
func (o *UsersVerifyEmailForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersVerifyEmailForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersVerifyEmailForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UsersVerifyEmailForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersVerifyEmailNotFoundBody users verify email not found body
swagger:model UsersVerifyEmailNotFoundBody
*/
type UsersVerifyEmailNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users verify email not found body
func (o *UsersVerifyEmailNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users verify email not found body based on context it is used
func (o *UsersVerifyEmailNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersVerifyEmailNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersVerifyEmailNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UsersVerifyEmailNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersVerifyEmailUnauthorizedBody users verify email unauthorized body
swagger:model UsersVerifyEmailUnauthorizedBody
*/
type UsersVerifyEmailUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users verify email unauthorized body
func (o *UsersVerifyEmailUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users verify email unauthorized body based on context it is used
func (o *UsersVerifyEmailUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersVerifyEmailUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersVerifyEmailUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UsersVerifyEmailUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
