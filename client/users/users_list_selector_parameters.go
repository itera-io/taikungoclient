// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersListSelectorParams creates a new UsersListSelectorParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsersListSelectorParams() *UsersListSelectorParams {
	return &UsersListSelectorParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsersListSelectorParamsWithTimeout creates a new UsersListSelectorParams object
// with the ability to set a timeout on a request.
func NewUsersListSelectorParamsWithTimeout(timeout time.Duration) *UsersListSelectorParams {
	return &UsersListSelectorParams{
		timeout: timeout,
	}
}

// NewUsersListSelectorParamsWithContext creates a new UsersListSelectorParams object
// with the ability to set a context for a request.
func NewUsersListSelectorParamsWithContext(ctx context.Context) *UsersListSelectorParams {
	return &UsersListSelectorParams{
		Context: ctx,
	}
}

// NewUsersListSelectorParamsWithHTTPClient creates a new UsersListSelectorParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsersListSelectorParamsWithHTTPClient(client *http.Client) *UsersListSelectorParams {
	return &UsersListSelectorParams{
		HTTPClient: client,
	}
}

/*
UsersListSelectorParams contains all the parameters to send to the API endpoint

	for the users list selector operation.

	Typically these are written to a http.Request.
*/
type UsersListSelectorParams struct {

	// OrganizationID.
	//
	// Format: int32
	OrganizationID *int32

	// Search.
	Search *string

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the users list selector params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersListSelectorParams) WithDefaults() *UsersListSelectorParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the users list selector params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsersListSelectorParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the users list selector params
func (o *UsersListSelectorParams) WithTimeout(timeout time.Duration) *UsersListSelectorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users list selector params
func (o *UsersListSelectorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users list selector params
func (o *UsersListSelectorParams) WithContext(ctx context.Context) *UsersListSelectorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users list selector params
func (o *UsersListSelectorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users list selector params
func (o *UsersListSelectorParams) WithHTTPClient(client *http.Client) *UsersListSelectorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users list selector params
func (o *UsersListSelectorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the users list selector params
func (o *UsersListSelectorParams) WithOrganizationID(organizationID *int32) *UsersListSelectorParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the users list selector params
func (o *UsersListSelectorParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithSearch adds the search to the users list selector params
func (o *UsersListSelectorParams) WithSearch(search *string) *UsersListSelectorParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the users list selector params
func (o *UsersListSelectorParams) SetSearch(search *string) {
	o.Search = search
}

// WithV adds the v to the users list selector params
func (o *UsersListSelectorParams) WithV(v string) *UsersListSelectorParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the users list selector params
func (o *UsersListSelectorParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *UsersListSelectorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
