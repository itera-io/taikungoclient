// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UsersConfirmEmailReader is a Reader for the UsersConfirmEmail structure.
type UsersConfirmEmailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersConfirmEmailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUsersConfirmEmailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUsersConfirmEmailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUsersConfirmEmailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUsersConfirmEmailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUsersConfirmEmailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUsersConfirmEmailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUsersConfirmEmailOK creates a UsersConfirmEmailOK with default headers values
func NewUsersConfirmEmailOK() *UsersConfirmEmailOK {
	return &UsersConfirmEmailOK{}
}

/*
UsersConfirmEmailOK describes a response with status code 200, with default header values.

Success
*/
type UsersConfirmEmailOK struct {
	Payload interface{}
}

// IsSuccess returns true when this users confirm email o k response has a 2xx status code
func (o *UsersConfirmEmailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this users confirm email o k response has a 3xx status code
func (o *UsersConfirmEmailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email o k response has a 4xx status code
func (o *UsersConfirmEmailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this users confirm email o k response has a 5xx status code
func (o *UsersConfirmEmailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this users confirm email o k response a status code equal to that given
func (o *UsersConfirmEmailOK) IsCode(code int) bool {
	return code == 200
}

func (o *UsersConfirmEmailOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailOK  %+v", 200, o.Payload)
}

func (o *UsersConfirmEmailOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailOK  %+v", 200, o.Payload)
}

func (o *UsersConfirmEmailOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UsersConfirmEmailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersConfirmEmailBadRequest creates a UsersConfirmEmailBadRequest with default headers values
func NewUsersConfirmEmailBadRequest() *UsersConfirmEmailBadRequest {
	return &UsersConfirmEmailBadRequest{}
}

/*
UsersConfirmEmailBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UsersConfirmEmailBadRequest struct {
	Payload []*UsersConfirmEmailBadRequestBodyItems0
}

// IsSuccess returns true when this users confirm email bad request response has a 2xx status code
func (o *UsersConfirmEmailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users confirm email bad request response has a 3xx status code
func (o *UsersConfirmEmailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email bad request response has a 4xx status code
func (o *UsersConfirmEmailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this users confirm email bad request response has a 5xx status code
func (o *UsersConfirmEmailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this users confirm email bad request response a status code equal to that given
func (o *UsersConfirmEmailBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UsersConfirmEmailBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailBadRequest  %+v", 400, o.Payload)
}

func (o *UsersConfirmEmailBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailBadRequest  %+v", 400, o.Payload)
}

func (o *UsersConfirmEmailBadRequest) GetPayload() []*UsersConfirmEmailBadRequestBodyItems0 {
	return o.Payload
}

func (o *UsersConfirmEmailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersConfirmEmailUnauthorized creates a UsersConfirmEmailUnauthorized with default headers values
func NewUsersConfirmEmailUnauthorized() *UsersConfirmEmailUnauthorized {
	return &UsersConfirmEmailUnauthorized{}
}

/*
UsersConfirmEmailUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UsersConfirmEmailUnauthorized struct {
	Payload *UsersConfirmEmailUnauthorizedBody
}

// IsSuccess returns true when this users confirm email unauthorized response has a 2xx status code
func (o *UsersConfirmEmailUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users confirm email unauthorized response has a 3xx status code
func (o *UsersConfirmEmailUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email unauthorized response has a 4xx status code
func (o *UsersConfirmEmailUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this users confirm email unauthorized response has a 5xx status code
func (o *UsersConfirmEmailUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this users confirm email unauthorized response a status code equal to that given
func (o *UsersConfirmEmailUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UsersConfirmEmailUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersConfirmEmailUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersConfirmEmailUnauthorized) GetPayload() *UsersConfirmEmailUnauthorizedBody {
	return o.Payload
}

func (o *UsersConfirmEmailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersConfirmEmailUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersConfirmEmailForbidden creates a UsersConfirmEmailForbidden with default headers values
func NewUsersConfirmEmailForbidden() *UsersConfirmEmailForbidden {
	return &UsersConfirmEmailForbidden{}
}

/*
UsersConfirmEmailForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UsersConfirmEmailForbidden struct {
	Payload *UsersConfirmEmailForbiddenBody
}

// IsSuccess returns true when this users confirm email forbidden response has a 2xx status code
func (o *UsersConfirmEmailForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users confirm email forbidden response has a 3xx status code
func (o *UsersConfirmEmailForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email forbidden response has a 4xx status code
func (o *UsersConfirmEmailForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this users confirm email forbidden response has a 5xx status code
func (o *UsersConfirmEmailForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this users confirm email forbidden response a status code equal to that given
func (o *UsersConfirmEmailForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UsersConfirmEmailForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailForbidden  %+v", 403, o.Payload)
}

func (o *UsersConfirmEmailForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailForbidden  %+v", 403, o.Payload)
}

func (o *UsersConfirmEmailForbidden) GetPayload() *UsersConfirmEmailForbiddenBody {
	return o.Payload
}

func (o *UsersConfirmEmailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersConfirmEmailForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersConfirmEmailNotFound creates a UsersConfirmEmailNotFound with default headers values
func NewUsersConfirmEmailNotFound() *UsersConfirmEmailNotFound {
	return &UsersConfirmEmailNotFound{}
}

/*
UsersConfirmEmailNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UsersConfirmEmailNotFound struct {
	Payload *UsersConfirmEmailNotFoundBody
}

// IsSuccess returns true when this users confirm email not found response has a 2xx status code
func (o *UsersConfirmEmailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users confirm email not found response has a 3xx status code
func (o *UsersConfirmEmailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email not found response has a 4xx status code
func (o *UsersConfirmEmailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this users confirm email not found response has a 5xx status code
func (o *UsersConfirmEmailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this users confirm email not found response a status code equal to that given
func (o *UsersConfirmEmailNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UsersConfirmEmailNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailNotFound  %+v", 404, o.Payload)
}

func (o *UsersConfirmEmailNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailNotFound  %+v", 404, o.Payload)
}

func (o *UsersConfirmEmailNotFound) GetPayload() *UsersConfirmEmailNotFoundBody {
	return o.Payload
}

func (o *UsersConfirmEmailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersConfirmEmailNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersConfirmEmailInternalServerError creates a UsersConfirmEmailInternalServerError with default headers values
func NewUsersConfirmEmailInternalServerError() *UsersConfirmEmailInternalServerError {
	return &UsersConfirmEmailInternalServerError{}
}

/*
UsersConfirmEmailInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UsersConfirmEmailInternalServerError struct {
}

// IsSuccess returns true when this users confirm email internal server error response has a 2xx status code
func (o *UsersConfirmEmailInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users confirm email internal server error response has a 3xx status code
func (o *UsersConfirmEmailInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users confirm email internal server error response has a 4xx status code
func (o *UsersConfirmEmailInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this users confirm email internal server error response has a 5xx status code
func (o *UsersConfirmEmailInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this users confirm email internal server error response a status code equal to that given
func (o *UsersConfirmEmailInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UsersConfirmEmailInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailInternalServerError ", 500)
}

func (o *UsersConfirmEmailInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/confirmemail][%d] usersConfirmEmailInternalServerError ", 500)
}

func (o *UsersConfirmEmailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UsersConfirmEmailBadRequestBodyItems0 users confirm email bad request body items0
swagger:model UsersConfirmEmailBadRequestBodyItems0
*/
type UsersConfirmEmailBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this users confirm email bad request body items0
func (o *UsersConfirmEmailBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users confirm email bad request body items0 based on context it is used
func (o *UsersConfirmEmailBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersConfirmEmailBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersConfirmEmailBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UsersConfirmEmailBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersConfirmEmailBody users confirm email body
swagger:model UsersConfirmEmailBody
*/
type UsersConfirmEmailBody struct {

	// mode
	Mode string `json:"mode,omitempty"`

	// new email
	NewEmail string `json:"newEmail,omitempty"`
}

// Validate validates this users confirm email body
func (o *UsersConfirmEmailBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users confirm email body based on context it is used
func (o *UsersConfirmEmailBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersConfirmEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersConfirmEmailBody) UnmarshalBinary(b []byte) error {
	var res UsersConfirmEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersConfirmEmailForbiddenBody users confirm email forbidden body
swagger:model UsersConfirmEmailForbiddenBody
*/
type UsersConfirmEmailForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users confirm email forbidden body
func (o *UsersConfirmEmailForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users confirm email forbidden body based on context it is used
func (o *UsersConfirmEmailForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersConfirmEmailForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersConfirmEmailForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UsersConfirmEmailForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersConfirmEmailNotFoundBody users confirm email not found body
swagger:model UsersConfirmEmailNotFoundBody
*/
type UsersConfirmEmailNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users confirm email not found body
func (o *UsersConfirmEmailNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users confirm email not found body based on context it is used
func (o *UsersConfirmEmailNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersConfirmEmailNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersConfirmEmailNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UsersConfirmEmailNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersConfirmEmailUnauthorizedBody users confirm email unauthorized body
swagger:model UsersConfirmEmailUnauthorizedBody
*/
type UsersConfirmEmailUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users confirm email unauthorized body
func (o *UsersConfirmEmailUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users confirm email unauthorized body based on context it is used
func (o *UsersConfirmEmailUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersConfirmEmailUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersConfirmEmailUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UsersConfirmEmailUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
