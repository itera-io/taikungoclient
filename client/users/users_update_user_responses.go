// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UsersUpdateUserReader is a Reader for the UsersUpdateUser structure.
type UsersUpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersUpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUsersUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUsersUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUsersUpdateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUsersUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUsersUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUsersUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUsersUpdateUserOK creates a UsersUpdateUserOK with default headers values
func NewUsersUpdateUserOK() *UsersUpdateUserOK {
	return &UsersUpdateUserOK{}
}

/*
UsersUpdateUserOK describes a response with status code 200, with default header values.

Success
*/
type UsersUpdateUserOK struct {
}

// IsSuccess returns true when this users update user o k response has a 2xx status code
func (o *UsersUpdateUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this users update user o k response has a 3xx status code
func (o *UsersUpdateUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user o k response has a 4xx status code
func (o *UsersUpdateUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this users update user o k response has a 5xx status code
func (o *UsersUpdateUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this users update user o k response a status code equal to that given
func (o *UsersUpdateUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *UsersUpdateUserOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserOK ", 200)
}

func (o *UsersUpdateUserOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserOK ", 200)
}

func (o *UsersUpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUsersUpdateUserBadRequest creates a UsersUpdateUserBadRequest with default headers values
func NewUsersUpdateUserBadRequest() *UsersUpdateUserBadRequest {
	return &UsersUpdateUserBadRequest{}
}

/*
UsersUpdateUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UsersUpdateUserBadRequest struct {
	Payload []*UsersUpdateUserBadRequestBodyItems0
}

// IsSuccess returns true when this users update user bad request response has a 2xx status code
func (o *UsersUpdateUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users update user bad request response has a 3xx status code
func (o *UsersUpdateUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user bad request response has a 4xx status code
func (o *UsersUpdateUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this users update user bad request response has a 5xx status code
func (o *UsersUpdateUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this users update user bad request response a status code equal to that given
func (o *UsersUpdateUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UsersUpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UsersUpdateUserBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UsersUpdateUserBadRequest) GetPayload() []*UsersUpdateUserBadRequestBodyItems0 {
	return o.Payload
}

func (o *UsersUpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersUpdateUserUnauthorized creates a UsersUpdateUserUnauthorized with default headers values
func NewUsersUpdateUserUnauthorized() *UsersUpdateUserUnauthorized {
	return &UsersUpdateUserUnauthorized{}
}

/*
UsersUpdateUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UsersUpdateUserUnauthorized struct {
	Payload *UsersUpdateUserUnauthorizedBody
}

// IsSuccess returns true when this users update user unauthorized response has a 2xx status code
func (o *UsersUpdateUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users update user unauthorized response has a 3xx status code
func (o *UsersUpdateUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user unauthorized response has a 4xx status code
func (o *UsersUpdateUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this users update user unauthorized response has a 5xx status code
func (o *UsersUpdateUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this users update user unauthorized response a status code equal to that given
func (o *UsersUpdateUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UsersUpdateUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersUpdateUserUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UsersUpdateUserUnauthorized) GetPayload() *UsersUpdateUserUnauthorizedBody {
	return o.Payload
}

func (o *UsersUpdateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersUpdateUserUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersUpdateUserForbidden creates a UsersUpdateUserForbidden with default headers values
func NewUsersUpdateUserForbidden() *UsersUpdateUserForbidden {
	return &UsersUpdateUserForbidden{}
}

/*
UsersUpdateUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UsersUpdateUserForbidden struct {
	Payload *UsersUpdateUserForbiddenBody
}

// IsSuccess returns true when this users update user forbidden response has a 2xx status code
func (o *UsersUpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users update user forbidden response has a 3xx status code
func (o *UsersUpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user forbidden response has a 4xx status code
func (o *UsersUpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this users update user forbidden response has a 5xx status code
func (o *UsersUpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this users update user forbidden response a status code equal to that given
func (o *UsersUpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UsersUpdateUserForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *UsersUpdateUserForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *UsersUpdateUserForbidden) GetPayload() *UsersUpdateUserForbiddenBody {
	return o.Payload
}

func (o *UsersUpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersUpdateUserForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersUpdateUserNotFound creates a UsersUpdateUserNotFound with default headers values
func NewUsersUpdateUserNotFound() *UsersUpdateUserNotFound {
	return &UsersUpdateUserNotFound{}
}

/*
UsersUpdateUserNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UsersUpdateUserNotFound struct {
	Payload *UsersUpdateUserNotFoundBody
}

// IsSuccess returns true when this users update user not found response has a 2xx status code
func (o *UsersUpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users update user not found response has a 3xx status code
func (o *UsersUpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user not found response has a 4xx status code
func (o *UsersUpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this users update user not found response has a 5xx status code
func (o *UsersUpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this users update user not found response a status code equal to that given
func (o *UsersUpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UsersUpdateUserNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *UsersUpdateUserNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *UsersUpdateUserNotFound) GetPayload() *UsersUpdateUserNotFoundBody {
	return o.Payload
}

func (o *UsersUpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UsersUpdateUserNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersUpdateUserInternalServerError creates a UsersUpdateUserInternalServerError with default headers values
func NewUsersUpdateUserInternalServerError() *UsersUpdateUserInternalServerError {
	return &UsersUpdateUserInternalServerError{}
}

/*
UsersUpdateUserInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UsersUpdateUserInternalServerError struct {
}

// IsSuccess returns true when this users update user internal server error response has a 2xx status code
func (o *UsersUpdateUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this users update user internal server error response has a 3xx status code
func (o *UsersUpdateUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this users update user internal server error response has a 4xx status code
func (o *UsersUpdateUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this users update user internal server error response has a 5xx status code
func (o *UsersUpdateUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this users update user internal server error response a status code equal to that given
func (o *UsersUpdateUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UsersUpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserInternalServerError ", 500)
}

func (o *UsersUpdateUserInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Users/update][%d] usersUpdateUserInternalServerError ", 500)
}

func (o *UsersUpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UsersUpdateUserBadRequestBodyItems0 users update user bad request body items0
swagger:model UsersUpdateUserBadRequestBodyItems0
*/
type UsersUpdateUserBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this users update user bad request body items0
func (o *UsersUpdateUserBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users update user bad request body items0 based on context it is used
func (o *UsersUpdateUserBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersUpdateUserBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersUpdateUserBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UsersUpdateUserBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersUpdateUserBody users update user body
swagger:model UsersUpdateUserBody
*/
type UsersUpdateUserBody struct {

	// disable
	Disable bool `json:"disable"`

	// display name
	DisplayName string `json:"displayName"`

	// email
	Email string `json:"email,omitempty"`

	// force to reset password
	ForceToResetPassword bool `json:"forceToResetPassword"`

	// id
	ID string `json:"id,omitempty"`

	// is approved by partner
	IsApprovedByPartner bool `json:"isApprovedByPartner"`

	// role
	// Enum: [100 200 250 400 6000]
	Role int32 `json:"role,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this users update user body
func (o *UsersUpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var usersUpdateUserBodyTypeRolePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,250,400,6000]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usersUpdateUserBodyTypeRolePropEnum = append(usersUpdateUserBodyTypeRolePropEnum, v)
	}
}

// prop value enum
func (o *UsersUpdateUserBody) validateRoleEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, usersUpdateUserBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UsersUpdateUserBody) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this users update user body based on context it is used
func (o *UsersUpdateUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersUpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersUpdateUserBody) UnmarshalBinary(b []byte) error {
	var res UsersUpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersUpdateUserForbiddenBody users update user forbidden body
swagger:model UsersUpdateUserForbiddenBody
*/
type UsersUpdateUserForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users update user forbidden body
func (o *UsersUpdateUserForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users update user forbidden body based on context it is used
func (o *UsersUpdateUserForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersUpdateUserForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersUpdateUserForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UsersUpdateUserForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersUpdateUserNotFoundBody users update user not found body
swagger:model UsersUpdateUserNotFoundBody
*/
type UsersUpdateUserNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users update user not found body
func (o *UsersUpdateUserNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users update user not found body based on context it is used
func (o *UsersUpdateUserNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersUpdateUserNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersUpdateUserNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UsersUpdateUserNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UsersUpdateUserUnauthorizedBody users update user unauthorized body
swagger:model UsersUpdateUserUnauthorizedBody
*/
type UsersUpdateUserUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this users update user unauthorized body
func (o *UsersUpdateUserUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users update user unauthorized body based on context it is used
func (o *UsersUpdateUserUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UsersUpdateUserUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UsersUpdateUserUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UsersUpdateUserUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
