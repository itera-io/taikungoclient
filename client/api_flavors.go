/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FlavorsAPIService FlavorsAPI service
type FlavorsAPIService service

type ApiFlavorsAwsInstanceTypesRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *float64
	endRam        *float64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsAwsInstanceTypesRequest) Limit(limit int32) ApiFlavorsAwsInstanceTypesRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) Offset(offset int32) ApiFlavorsAwsInstanceTypesRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) StartRam(startRam float64) ApiFlavorsAwsInstanceTypesRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) EndRam(endRam float64) ApiFlavorsAwsInstanceTypesRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) StartCpu(startCpu int32) ApiFlavorsAwsInstanceTypesRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) EndCpu(endCpu int32) ApiFlavorsAwsInstanceTypesRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) Search(search string) ApiFlavorsAwsInstanceTypesRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) SortBy(sortBy string) ApiFlavorsAwsInstanceTypesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) SortDirection(sortDirection string) ApiFlavorsAwsInstanceTypesRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsAwsInstanceTypesRequest) Execute() (*AwsFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsAwsInstanceTypesExecute(r)
}

/*
FlavorsAwsInstanceTypes Method for FlavorsAwsInstanceTypes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsAwsInstanceTypesRequest
*/
func (a *FlavorsAPIService) FlavorsAwsInstanceTypes(ctx context.Context, cloudId int32) ApiFlavorsAwsInstanceTypesRequest {
	return ApiFlavorsAwsInstanceTypesRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return AwsFlavorList
func (a *FlavorsAPIService) FlavorsAwsInstanceTypesExecute(r ApiFlavorsAwsInstanceTypesRequest) (*AwsFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AwsFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsAwsInstanceTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/aws/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsAzureVmSizesRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *float64
	endRam        *float64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsAzureVmSizesRequest) Limit(limit int32) ApiFlavorsAzureVmSizesRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) Offset(offset int32) ApiFlavorsAzureVmSizesRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) StartRam(startRam float64) ApiFlavorsAzureVmSizesRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) EndRam(endRam float64) ApiFlavorsAzureVmSizesRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) StartCpu(startCpu int32) ApiFlavorsAzureVmSizesRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) EndCpu(endCpu int32) ApiFlavorsAzureVmSizesRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) Search(search string) ApiFlavorsAzureVmSizesRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) SortBy(sortBy string) ApiFlavorsAzureVmSizesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) SortDirection(sortDirection string) ApiFlavorsAzureVmSizesRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsAzureVmSizesRequest) Execute() (*AzureFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsAzureVmSizesExecute(r)
}

/*
FlavorsAzureVmSizes Method for FlavorsAzureVmSizes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsAzureVmSizesRequest
*/
func (a *FlavorsAPIService) FlavorsAzureVmSizes(ctx context.Context, cloudId int32) ApiFlavorsAzureVmSizesRequest {
	return ApiFlavorsAzureVmSizesRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return AzureFlavorList
func (a *FlavorsAPIService) FlavorsAzureVmSizesExecute(r ApiFlavorsAzureVmSizesRequest) (*AzureFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AzureFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsAzureVmSizes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/azure/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsBindToProjectRequest struct {
	ctx                        context.Context
	ApiService                 *FlavorsAPIService
	bindFlavorToProjectCommand *BindFlavorToProjectCommand
}

func (r ApiFlavorsBindToProjectRequest) BindFlavorToProjectCommand(bindFlavorToProjectCommand BindFlavorToProjectCommand) ApiFlavorsBindToProjectRequest {
	r.bindFlavorToProjectCommand = &bindFlavorToProjectCommand
	return r
}

func (r ApiFlavorsBindToProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlavorsBindToProjectExecute(r)
}

/*
FlavorsBindToProject Bind flavors to project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlavorsBindToProjectRequest
*/
func (a *FlavorsAPIService) FlavorsBindToProject(ctx context.Context) ApiFlavorsBindToProjectRequest {
	return ApiFlavorsBindToProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FlavorsAPIService) FlavorsBindToProjectExecute(r ApiFlavorsBindToProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsBindToProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/bind"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bindFlavorToProjectCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFlavorsDropdownFlavorsRequest struct {
	ctx            context.Context
	ApiService     *FlavorsAPIService
	organizationId *int32
	filterBy       *string
	search         *string
	isInfra        *bool
}

func (r ApiFlavorsDropdownFlavorsRequest) OrganizationId(organizationId int32) ApiFlavorsDropdownFlavorsRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiFlavorsDropdownFlavorsRequest) FilterBy(filterBy string) ApiFlavorsDropdownFlavorsRequest {
	r.filterBy = &filterBy
	return r
}

func (r ApiFlavorsDropdownFlavorsRequest) Search(search string) ApiFlavorsDropdownFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsDropdownFlavorsRequest) IsInfra(isInfra bool) ApiFlavorsDropdownFlavorsRequest {
	r.isInfra = &isInfra
	return r
}

func (r ApiFlavorsDropdownFlavorsRequest) Execute() ([]CloudCredentialsDropdownRecordDto, *http.Response, error) {
	return r.ApiService.FlavorsDropdownFlavorsExecute(r)
}

/*
FlavorsDropdownFlavors Retrieve cloud credentials dropdown list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlavorsDropdownFlavorsRequest
*/
func (a *FlavorsAPIService) FlavorsDropdownFlavors(ctx context.Context) ApiFlavorsDropdownFlavorsRequest {
	return ApiFlavorsDropdownFlavorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CloudCredentialsDropdownRecordDto
func (a *FlavorsAPIService) FlavorsDropdownFlavorsExecute(r ApiFlavorsDropdownFlavorsRequest) ([]CloudCredentialsDropdownRecordDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CloudCredentialsDropdownRecordDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsDropdownFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/credentials/dropdown/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrganizationId", r.organizationId, "")
	}
	if r.filterBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "FilterBy", r.filterBy, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.isInfra != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsInfra", r.isInfra, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsGoogleMachineTypesRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *float64
	endRam        *float64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsGoogleMachineTypesRequest) Limit(limit int32) ApiFlavorsGoogleMachineTypesRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) Offset(offset int32) ApiFlavorsGoogleMachineTypesRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) StartRam(startRam float64) ApiFlavorsGoogleMachineTypesRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) EndRam(endRam float64) ApiFlavorsGoogleMachineTypesRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) StartCpu(startCpu int32) ApiFlavorsGoogleMachineTypesRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) EndCpu(endCpu int32) ApiFlavorsGoogleMachineTypesRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) Search(search string) ApiFlavorsGoogleMachineTypesRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) SortBy(sortBy string) ApiFlavorsGoogleMachineTypesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) SortDirection(sortDirection string) ApiFlavorsGoogleMachineTypesRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsGoogleMachineTypesRequest) Execute() (*GoogleFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsGoogleMachineTypesExecute(r)
}

/*
FlavorsGoogleMachineTypes Method for FlavorsGoogleMachineTypes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsGoogleMachineTypesRequest
*/
func (a *FlavorsAPIService) FlavorsGoogleMachineTypes(ctx context.Context, cloudId int32) ApiFlavorsGoogleMachineTypesRequest {
	return ApiFlavorsGoogleMachineTypesRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return GoogleFlavorList
func (a *FlavorsAPIService) FlavorsGoogleMachineTypesExecute(r ApiFlavorsGoogleMachineTypesRequest) (*GoogleFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GoogleFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsGoogleMachineTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/google/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsOpenshiftFlavorsRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *int64
	endRam        *int64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsOpenshiftFlavorsRequest) Limit(limit int32) ApiFlavorsOpenshiftFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) Offset(offset int32) ApiFlavorsOpenshiftFlavorsRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) StartRam(startRam int64) ApiFlavorsOpenshiftFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) EndRam(endRam int64) ApiFlavorsOpenshiftFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsOpenshiftFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsOpenshiftFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) Search(search string) ApiFlavorsOpenshiftFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) SortBy(sortBy string) ApiFlavorsOpenshiftFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsOpenshiftFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsOpenshiftFlavorsRequest) Execute() (*OpenshiftFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsOpenshiftFlavorsExecute(r)
}

/*
FlavorsOpenshiftFlavors Retrieve openshift flavors

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsOpenshiftFlavorsRequest
*/
func (a *FlavorsAPIService) FlavorsOpenshiftFlavors(ctx context.Context, cloudId int32) ApiFlavorsOpenshiftFlavorsRequest {
	return ApiFlavorsOpenshiftFlavorsRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return OpenshiftFlavorList
func (a *FlavorsAPIService) FlavorsOpenshiftFlavorsExecute(r ApiFlavorsOpenshiftFlavorsRequest) (*OpenshiftFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpenshiftFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsOpenshiftFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/openshift/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsOpenstackFlavorsRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *float64
	endRam        *float64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsOpenstackFlavorsRequest) Limit(limit int32) ApiFlavorsOpenstackFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) Offset(offset int32) ApiFlavorsOpenstackFlavorsRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) StartRam(startRam float64) ApiFlavorsOpenstackFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) EndRam(endRam float64) ApiFlavorsOpenstackFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsOpenstackFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsOpenstackFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) Search(search string) ApiFlavorsOpenstackFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) SortBy(sortBy string) ApiFlavorsOpenstackFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsOpenstackFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) Execute() (*OpenstackFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsOpenstackFlavorsExecute(r)
}

/*
FlavorsOpenstackFlavors Method for FlavorsOpenstackFlavors

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsOpenstackFlavorsRequest
*/
func (a *FlavorsAPIService) FlavorsOpenstackFlavors(ctx context.Context, cloudId int32) ApiFlavorsOpenstackFlavorsRequest {
	return ApiFlavorsOpenstackFlavorsRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return OpenstackFlavorList
func (a *FlavorsAPIService) FlavorsOpenstackFlavorsExecute(r ApiFlavorsOpenstackFlavorsRequest) (*OpenstackFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpenstackFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsOpenstackFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/openstack/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsProxmoxFlavorsRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *int64
	endRam        *int64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsProxmoxFlavorsRequest) Limit(limit int32) ApiFlavorsProxmoxFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) Offset(offset int32) ApiFlavorsProxmoxFlavorsRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) StartRam(startRam int64) ApiFlavorsProxmoxFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) EndRam(endRam int64) ApiFlavorsProxmoxFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsProxmoxFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsProxmoxFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) Search(search string) ApiFlavorsProxmoxFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) SortBy(sortBy string) ApiFlavorsProxmoxFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsProxmoxFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) Execute() (*ProxmoxFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsProxmoxFlavorsExecute(r)
}

/*
FlavorsProxmoxFlavors Retrieve proxmox flavors

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsProxmoxFlavorsRequest
*/
func (a *FlavorsAPIService) FlavorsProxmoxFlavors(ctx context.Context, cloudId int32) ApiFlavorsProxmoxFlavorsRequest {
	return ApiFlavorsProxmoxFlavorsRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return ProxmoxFlavorList
func (a *FlavorsAPIService) FlavorsProxmoxFlavorsExecute(r ApiFlavorsProxmoxFlavorsRequest) (*ProxmoxFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProxmoxFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsProxmoxFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/proxmox/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsSelectedFlavorsForProjectRequest struct {
	ctx            context.Context
	ApiService     *FlavorsAPIService
	limit          *int32
	offset         *int32
	projectId      *int32
	sortBy         *string
	sortDirection  *string
	search         *string
	filterBy       *string
	organizationId *int32
	flavorName     *string
	withPrice      *bool
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) Limit(limit int32) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) Offset(offset int32) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) ProjectId(projectId int32) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.projectId = &projectId
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) SortBy(sortBy string) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) SortDirection(sortDirection string) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) Search(search string) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) FilterBy(filterBy string) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.filterBy = &filterBy
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) OrganizationId(organizationId int32) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) FlavorName(flavorName string) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.flavorName = &flavorName
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) WithPrice(withPrice bool) ApiFlavorsSelectedFlavorsForProjectRequest {
	r.withPrice = &withPrice
	return r
}

func (r ApiFlavorsSelectedFlavorsForProjectRequest) Execute() (*BoundFlavorsForProjectsList, *http.Response, error) {
	return r.ApiService.FlavorsSelectedFlavorsForProjectExecute(r)
}

/*
FlavorsSelectedFlavorsForProject Retrieve selected flavors for project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlavorsSelectedFlavorsForProjectRequest
*/
func (a *FlavorsAPIService) FlavorsSelectedFlavorsForProject(ctx context.Context) ApiFlavorsSelectedFlavorsForProjectRequest {
	return ApiFlavorsSelectedFlavorsForProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BoundFlavorsForProjectsList
func (a *FlavorsAPIService) FlavorsSelectedFlavorsForProjectExecute(r ApiFlavorsSelectedFlavorsForProjectRequest) (*BoundFlavorsForProjectsList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoundFlavorsForProjectsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsSelectedFlavorsForProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/projects/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ProjectId", r.projectId, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.filterBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "FilterBy", r.filterBy, "")
	}
	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrganizationId", r.organizationId, "")
	}
	if r.flavorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "FlavorName", r.flavorName, "")
	}
	if r.withPrice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "WithPrice", r.withPrice, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsTanzuFlavorsRequest struct {
	ctx           context.Context
	ApiService    *FlavorsAPIService
	cloudId       int32
	limit         *int32
	offset        *int32
	startRam      *int64
	endRam        *int64
	startCpu      *int32
	endCpu        *int32
	search        *string
	sortBy        *string
	sortDirection *string
}

func (r ApiFlavorsTanzuFlavorsRequest) Limit(limit int32) ApiFlavorsTanzuFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) Offset(offset int32) ApiFlavorsTanzuFlavorsRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) StartRam(startRam int64) ApiFlavorsTanzuFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) EndRam(endRam int64) ApiFlavorsTanzuFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsTanzuFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsTanzuFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) Search(search string) ApiFlavorsTanzuFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) SortBy(sortBy string) ApiFlavorsTanzuFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsTanzuFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) Execute() (*TanzuFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsTanzuFlavorsExecute(r)
}

/*
FlavorsTanzuFlavors Retrieve tanzu flavors

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param cloudId
	@return ApiFlavorsTanzuFlavorsRequest
*/
func (a *FlavorsAPIService) FlavorsTanzuFlavors(ctx context.Context, cloudId int32) ApiFlavorsTanzuFlavorsRequest {
	return ApiFlavorsTanzuFlavorsRequest{
		ApiService: a,
		ctx:        ctx,
		cloudId:    cloudId,
	}
}

// Execute executes the request
//
//	@return TanzuFlavorList
func (a *FlavorsAPIService) FlavorsTanzuFlavorsExecute(r ApiFlavorsTanzuFlavorsRequest) (*TanzuFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TanzuFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsTanzuFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/tanzu/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsUnbindFromProjectRequest struct {
	ctx                            context.Context
	ApiService                     *FlavorsAPIService
	unbindFlavorFromProjectCommand *UnbindFlavorFromProjectCommand
}

func (r ApiFlavorsUnbindFromProjectRequest) UnbindFlavorFromProjectCommand(unbindFlavorFromProjectCommand UnbindFlavorFromProjectCommand) ApiFlavorsUnbindFromProjectRequest {
	r.unbindFlavorFromProjectCommand = &unbindFlavorFromProjectCommand
	return r
}

func (r ApiFlavorsUnbindFromProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlavorsUnbindFromProjectExecute(r)
}

/*
FlavorsUnbindFromProject Unbind flavors from project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFlavorsUnbindFromProjectRequest
*/
func (a *FlavorsAPIService) FlavorsUnbindFromProject(ctx context.Context) ApiFlavorsUnbindFromProjectRequest {
	return ApiFlavorsUnbindFromProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FlavorsAPIService) FlavorsUnbindFromProjectExecute(r ApiFlavorsUnbindFromProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsAPIService.FlavorsUnbindFromProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/flavors/unbind"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unbindFlavorFromProjectCommand == nil {
		return nil, reportError("unbindFlavorFromProjectCommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unbindFlavorFromProjectCommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
