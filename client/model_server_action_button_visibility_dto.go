/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerActionButtonVisibilityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerActionButtonVisibilityDto{}

// ServerActionButtonVisibilityDto struct for ServerActionButtonVisibilityDto
type ServerActionButtonVisibilityDto struct {
	Status bool `json:"status"`
	Reboot bool `json:"reboot"`
	Console bool `json:"console"`
}

type _ServerActionButtonVisibilityDto ServerActionButtonVisibilityDto

// NewServerActionButtonVisibilityDto instantiates a new ServerActionButtonVisibilityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerActionButtonVisibilityDto(status bool, reboot bool, console bool) *ServerActionButtonVisibilityDto {
	this := ServerActionButtonVisibilityDto{}
	this.Status = status
	this.Reboot = reboot
	this.Console = console
	return &this
}

// NewServerActionButtonVisibilityDtoWithDefaults instantiates a new ServerActionButtonVisibilityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerActionButtonVisibilityDtoWithDefaults() *ServerActionButtonVisibilityDto {
	this := ServerActionButtonVisibilityDto{}
	return &this
}

// GetStatus returns the Status field value
func (o *ServerActionButtonVisibilityDto) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ServerActionButtonVisibilityDto) SetStatus(v bool) {
	o.Status = v
}

// GetReboot returns the Reboot field value
func (o *ServerActionButtonVisibilityDto) GetReboot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetRebootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reboot, true
}

// SetReboot sets field value
func (o *ServerActionButtonVisibilityDto) SetReboot(v bool) {
	o.Reboot = v
}

// GetConsole returns the Console field value
func (o *ServerActionButtonVisibilityDto) GetConsole() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Console
}

// GetConsoleOk returns a tuple with the Console field value
// and a boolean to check if the value has been set.
func (o *ServerActionButtonVisibilityDto) GetConsoleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Console, true
}

// SetConsole sets field value
func (o *ServerActionButtonVisibilityDto) SetConsole(v bool) {
	o.Console = v
}

func (o ServerActionButtonVisibilityDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerActionButtonVisibilityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["reboot"] = o.Reboot
	toSerialize["console"] = o.Console
	return toSerialize, nil
}

func (o *ServerActionButtonVisibilityDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"reboot",
		"console",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerActionButtonVisibilityDto := _ServerActionButtonVisibilityDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerActionButtonVisibilityDto)

	if err != nil {
		return err
	}

	*o = ServerActionButtonVisibilityDto(varServerActionButtonVisibilityDto)

	return err
}

type NullableServerActionButtonVisibilityDto struct {
	value *ServerActionButtonVisibilityDto
	isSet bool
}

func (v NullableServerActionButtonVisibilityDto) Get() *ServerActionButtonVisibilityDto {
	return v.value
}

func (v *NullableServerActionButtonVisibilityDto) Set(val *ServerActionButtonVisibilityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerActionButtonVisibilityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerActionButtonVisibilityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerActionButtonVisibilityDto(val *ServerActionButtonVisibilityDto) *NullableServerActionButtonVisibilityDto {
	return &NullableServerActionButtonVisibilityDto{value: val, isSet: true}
}

func (v NullableServerActionButtonVisibilityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerActionButtonVisibilityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


