/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDetails{}

// UserDetails struct for UserDetails
type UserDetails struct {
	Data UserForListDto `json:"data"`
	IsMaintenanceModeEnabled bool `json:"isMaintenanceModeEnabled"`
	TrialDays NullableInt32 `json:"trialDays"`
}

type _UserDetails UserDetails

// NewUserDetails instantiates a new UserDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDetails(data UserForListDto, isMaintenanceModeEnabled bool, trialDays NullableInt32) *UserDetails {
	this := UserDetails{}
	this.Data = data
	this.IsMaintenanceModeEnabled = isMaintenanceModeEnabled
	this.TrialDays = trialDays
	return &this
}

// NewUserDetailsWithDefaults instantiates a new UserDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDetailsWithDefaults() *UserDetails {
	this := UserDetails{}
	return &this
}

// GetData returns the Data field value
func (o *UserDetails) GetData() UserForListDto {
	if o == nil {
		var ret UserForListDto
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetDataOk() (*UserForListDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UserDetails) SetData(v UserForListDto) {
	o.Data = v
}

// GetIsMaintenanceModeEnabled returns the IsMaintenanceModeEnabled field value
func (o *UserDetails) GetIsMaintenanceModeEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMaintenanceModeEnabled
}

// GetIsMaintenanceModeEnabledOk returns a tuple with the IsMaintenanceModeEnabled field value
// and a boolean to check if the value has been set.
func (o *UserDetails) GetIsMaintenanceModeEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMaintenanceModeEnabled, true
}

// SetIsMaintenanceModeEnabled sets field value
func (o *UserDetails) SetIsMaintenanceModeEnabled(v bool) {
	o.IsMaintenanceModeEnabled = v
}

// GetTrialDays returns the TrialDays field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UserDetails) GetTrialDays() int32 {
	if o == nil || o.TrialDays.Get() == nil {
		var ret int32
		return ret
	}

	return *o.TrialDays.Get()
}

// GetTrialDaysOk returns a tuple with the TrialDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDetails) GetTrialDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrialDays.Get(), o.TrialDays.IsSet()
}

// SetTrialDays sets field value
func (o *UserDetails) SetTrialDays(v int32) {
	o.TrialDays.Set(&v)
}

func (o UserDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["isMaintenanceModeEnabled"] = o.IsMaintenanceModeEnabled
	toSerialize["trialDays"] = o.TrialDays.Get()
	return toSerialize, nil
}

func (o *UserDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"isMaintenanceModeEnabled",
		"trialDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDetails := _UserDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDetails)

	if err != nil {
		return err
	}

	*o = UserDetails(varUserDetails)

	return err
}

type NullableUserDetails struct {
	value *UserDetails
	isSet bool
}

func (v NullableUserDetails) Get() *UserDetails {
	return v.value
}

func (v *NullableUserDetails) Set(val *UserDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDetails(val *UserDetails) *NullableUserDetails {
	return &NullableUserDetails{value: val, isSet: true}
}

func (v NullableUserDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


