/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the HelmMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmMetadata{}

// HelmMetadata struct for HelmMetadata
type HelmMetadata struct {
	Name              NullableString `json:"name,omitempty"`
	Namespace         NullableString `json:"namespace,omitempty"`
	CreationTimestamp NullableString `json:"creationTimestamp,omitempty"`
}

// NewHelmMetadata instantiates a new HelmMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmMetadata() *HelmMetadata {
	this := HelmMetadata{}
	return &this
}

// NewHelmMetadataWithDefaults instantiates a new HelmMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmMetadataWithDefaults() *HelmMetadata {
	this := HelmMetadata{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmMetadata) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HelmMetadata) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HelmMetadata) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *HelmMetadata) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HelmMetadata) UnsetName() {
	o.Name.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmMetadata) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmMetadata) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmMetadata) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *HelmMetadata) SetNamespace(v string) {
	o.Namespace.Set(&v)
}

// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *HelmMetadata) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *HelmMetadata) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmMetadata) GetCreationTimestamp() string {
	if o == nil || IsNil(o.CreationTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.CreationTimestamp.Get()
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmMetadata) GetCreationTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationTimestamp.Get(), o.CreationTimestamp.IsSet()
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *HelmMetadata) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given NullableString and assigns it to the CreationTimestamp field.
func (o *HelmMetadata) SetCreationTimestamp(v string) {
	o.CreationTimestamp.Set(&v)
}

// SetCreationTimestampNil sets the value for CreationTimestamp to be an explicit nil
func (o *HelmMetadata) SetCreationTimestampNil() {
	o.CreationTimestamp.Set(nil)
}

// UnsetCreationTimestamp ensures that no value is present for CreationTimestamp, not even an explicit nil
func (o *HelmMetadata) UnsetCreationTimestamp() {
	o.CreationTimestamp.Unset()
}

func (o HelmMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.CreationTimestamp.IsSet() {
		toSerialize["creationTimestamp"] = o.CreationTimestamp.Get()
	}
	return toSerialize, nil
}

type NullableHelmMetadata struct {
	value *HelmMetadata
	isSet bool
}

func (v NullableHelmMetadata) Get() *HelmMetadata {
	return v.value
}

func (v *NullableHelmMetadata) Set(val *HelmMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmMetadata(val *HelmMetadata) *NullableHelmMetadata {
	return &NullableHelmMetadata{value: val, isSet: true}
}

func (v NullableHelmMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
