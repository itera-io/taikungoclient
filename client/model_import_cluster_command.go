/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"os"
	"bytes"
	"fmt"
)

// checks if the ImportClusterCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportClusterCommand{}

// ImportClusterCommand struct for ImportClusterCommand
type ImportClusterCommand struct {
	Name string `json:"name"`
	Config *os.File `json:"config"`
	IsTaikunIngressController bool `json:"isTaikunIngressController"`
	IsExistingIngressController bool `json:"isExistingIngressController"`
	IngressClass NullableString `json:"ingressClass,omitempty"`
	IngressHost NullableString `json:"ingressHost,omitempty"`
	Continent NullableString `json:"continent,omitempty"`
	ImportType EImportClusterType `json:"importType"`
	OrganizationId NullableInt32 `json:"organizationId,omitempty"`
}

type _ImportClusterCommand ImportClusterCommand

// NewImportClusterCommand instantiates a new ImportClusterCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportClusterCommand(name string, config *os.File, isTaikunIngressController bool, isExistingIngressController bool, importType EImportClusterType) *ImportClusterCommand {
	this := ImportClusterCommand{}
	this.Name = name
	this.Config = config
	this.IsTaikunIngressController = isTaikunIngressController
	this.IsExistingIngressController = isExistingIngressController
	this.ImportType = importType
	return &this
}

// NewImportClusterCommandWithDefaults instantiates a new ImportClusterCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportClusterCommandWithDefaults() *ImportClusterCommand {
	this := ImportClusterCommand{}
	return &this
}

// GetName returns the Name field value
func (o *ImportClusterCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImportClusterCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImportClusterCommand) SetName(v string) {
	o.Name = v
}

// GetConfig returns the Config field value
func (o *ImportClusterCommand) GetConfig() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ImportClusterCommand) GetConfigOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ImportClusterCommand) SetConfig(v *os.File) {
	o.Config = v
}

// GetIsTaikunIngressController returns the IsTaikunIngressController field value
func (o *ImportClusterCommand) GetIsTaikunIngressController() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTaikunIngressController
}

// GetIsTaikunIngressControllerOk returns a tuple with the IsTaikunIngressController field value
// and a boolean to check if the value has been set.
func (o *ImportClusterCommand) GetIsTaikunIngressControllerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTaikunIngressController, true
}

// SetIsTaikunIngressController sets field value
func (o *ImportClusterCommand) SetIsTaikunIngressController(v bool) {
	o.IsTaikunIngressController = v
}

// GetIsExistingIngressController returns the IsExistingIngressController field value
func (o *ImportClusterCommand) GetIsExistingIngressController() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExistingIngressController
}

// GetIsExistingIngressControllerOk returns a tuple with the IsExistingIngressController field value
// and a boolean to check if the value has been set.
func (o *ImportClusterCommand) GetIsExistingIngressControllerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExistingIngressController, true
}

// SetIsExistingIngressController sets field value
func (o *ImportClusterCommand) SetIsExistingIngressController(v bool) {
	o.IsExistingIngressController = v
}

// GetIngressClass returns the IngressClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportClusterCommand) GetIngressClass() string {
	if o == nil || IsNil(o.IngressClass.Get()) {
		var ret string
		return ret
	}
	return *o.IngressClass.Get()
}

// GetIngressClassOk returns a tuple with the IngressClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportClusterCommand) GetIngressClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IngressClass.Get(), o.IngressClass.IsSet()
}

// HasIngressClass returns a boolean if a field has been set.
func (o *ImportClusterCommand) HasIngressClass() bool {
	if o != nil && o.IngressClass.IsSet() {
		return true
	}

	return false
}

// SetIngressClass gets a reference to the given NullableString and assigns it to the IngressClass field.
func (o *ImportClusterCommand) SetIngressClass(v string) {
	o.IngressClass.Set(&v)
}
// SetIngressClassNil sets the value for IngressClass to be an explicit nil
func (o *ImportClusterCommand) SetIngressClassNil() {
	o.IngressClass.Set(nil)
}

// UnsetIngressClass ensures that no value is present for IngressClass, not even an explicit nil
func (o *ImportClusterCommand) UnsetIngressClass() {
	o.IngressClass.Unset()
}

// GetIngressHost returns the IngressHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportClusterCommand) GetIngressHost() string {
	if o == nil || IsNil(o.IngressHost.Get()) {
		var ret string
		return ret
	}
	return *o.IngressHost.Get()
}

// GetIngressHostOk returns a tuple with the IngressHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportClusterCommand) GetIngressHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IngressHost.Get(), o.IngressHost.IsSet()
}

// HasIngressHost returns a boolean if a field has been set.
func (o *ImportClusterCommand) HasIngressHost() bool {
	if o != nil && o.IngressHost.IsSet() {
		return true
	}

	return false
}

// SetIngressHost gets a reference to the given NullableString and assigns it to the IngressHost field.
func (o *ImportClusterCommand) SetIngressHost(v string) {
	o.IngressHost.Set(&v)
}
// SetIngressHostNil sets the value for IngressHost to be an explicit nil
func (o *ImportClusterCommand) SetIngressHostNil() {
	o.IngressHost.Set(nil)
}

// UnsetIngressHost ensures that no value is present for IngressHost, not even an explicit nil
func (o *ImportClusterCommand) UnsetIngressHost() {
	o.IngressHost.Unset()
}

// GetContinent returns the Continent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportClusterCommand) GetContinent() string {
	if o == nil || IsNil(o.Continent.Get()) {
		var ret string
		return ret
	}
	return *o.Continent.Get()
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportClusterCommand) GetContinentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Continent.Get(), o.Continent.IsSet()
}

// HasContinent returns a boolean if a field has been set.
func (o *ImportClusterCommand) HasContinent() bool {
	if o != nil && o.Continent.IsSet() {
		return true
	}

	return false
}

// SetContinent gets a reference to the given NullableString and assigns it to the Continent field.
func (o *ImportClusterCommand) SetContinent(v string) {
	o.Continent.Set(&v)
}
// SetContinentNil sets the value for Continent to be an explicit nil
func (o *ImportClusterCommand) SetContinentNil() {
	o.Continent.Set(nil)
}

// UnsetContinent ensures that no value is present for Continent, not even an explicit nil
func (o *ImportClusterCommand) UnsetContinent() {
	o.Continent.Unset()
}

// GetImportType returns the ImportType field value
func (o *ImportClusterCommand) GetImportType() EImportClusterType {
	if o == nil {
		var ret EImportClusterType
		return ret
	}

	return o.ImportType
}

// GetImportTypeOk returns a tuple with the ImportType field value
// and a boolean to check if the value has been set.
func (o *ImportClusterCommand) GetImportTypeOk() (*EImportClusterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportType, true
}

// SetImportType sets field value
func (o *ImportClusterCommand) SetImportType(v EImportClusterType) {
	o.ImportType = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportClusterCommand) GetOrganizationId() int32 {
	if o == nil || IsNil(o.OrganizationId.Get()) {
		var ret int32
		return ret
	}
	return *o.OrganizationId.Get()
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportClusterCommand) GetOrganizationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationId.Get(), o.OrganizationId.IsSet()
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ImportClusterCommand) HasOrganizationId() bool {
	if o != nil && o.OrganizationId.IsSet() {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given NullableInt32 and assigns it to the OrganizationId field.
func (o *ImportClusterCommand) SetOrganizationId(v int32) {
	o.OrganizationId.Set(&v)
}
// SetOrganizationIdNil sets the value for OrganizationId to be an explicit nil
func (o *ImportClusterCommand) SetOrganizationIdNil() {
	o.OrganizationId.Set(nil)
}

// UnsetOrganizationId ensures that no value is present for OrganizationId, not even an explicit nil
func (o *ImportClusterCommand) UnsetOrganizationId() {
	o.OrganizationId.Unset()
}

func (o ImportClusterCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportClusterCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["config"] = o.Config
	toSerialize["isTaikunIngressController"] = o.IsTaikunIngressController
	toSerialize["isExistingIngressController"] = o.IsExistingIngressController
	if o.IngressClass.IsSet() {
		toSerialize["ingressClass"] = o.IngressClass.Get()
	}
	if o.IngressHost.IsSet() {
		toSerialize["ingressHost"] = o.IngressHost.Get()
	}
	if o.Continent.IsSet() {
		toSerialize["continent"] = o.Continent.Get()
	}
	toSerialize["importType"] = o.ImportType
	if o.OrganizationId.IsSet() {
		toSerialize["organizationId"] = o.OrganizationId.Get()
	}
	return toSerialize, nil
}

func (o *ImportClusterCommand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"config",
		"isTaikunIngressController",
		"isExistingIngressController",
		"importType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportClusterCommand := _ImportClusterCommand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportClusterCommand)

	if err != nil {
		return err
	}

	*o = ImportClusterCommand(varImportClusterCommand)

	return err
}

type NullableImportClusterCommand struct {
	value *ImportClusterCommand
	isSet bool
}

func (v NullableImportClusterCommand) Get() *ImportClusterCommand {
	return v.value
}

func (v *NullableImportClusterCommand) Set(val *ImportClusterCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableImportClusterCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableImportClusterCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportClusterCommand(val *ImportClusterCommand) *NullableImportClusterCommand {
	return &NullableImportClusterCommand{value: val, isSet: true}
}

func (v NullableImportClusterCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportClusterCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


