// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdminUsersListReader is a Reader for the AdminUsersList structure.
type AdminUsersListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminUsersListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminUsersListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminUsersListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAdminUsersListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminUsersListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdminUsersListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAdminUsersListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAdminUsersListOK creates a AdminUsersListOK with default headers values
func NewAdminUsersListOK() *AdminUsersListOK {
	return &AdminUsersListOK{}
}

/*
AdminUsersListOK describes a response with status code 200, with default header values.

Success
*/
type AdminUsersListOK struct {
	Payload *AdminUsersListOKBody
}

// IsSuccess returns true when this admin users list o k response has a 2xx status code
func (o *AdminUsersListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this admin users list o k response has a 3xx status code
func (o *AdminUsersListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list o k response has a 4xx status code
func (o *AdminUsersListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin users list o k response has a 5xx status code
func (o *AdminUsersListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this admin users list o k response a status code equal to that given
func (o *AdminUsersListOK) IsCode(code int) bool {
	return code == 200
}

func (o *AdminUsersListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListOK  %+v", 200, o.Payload)
}

func (o *AdminUsersListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListOK  %+v", 200, o.Payload)
}

func (o *AdminUsersListOK) GetPayload() *AdminUsersListOKBody {
	return o.Payload
}

func (o *AdminUsersListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminUsersListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUsersListBadRequest creates a AdminUsersListBadRequest with default headers values
func NewAdminUsersListBadRequest() *AdminUsersListBadRequest {
	return &AdminUsersListBadRequest{}
}

/*
AdminUsersListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AdminUsersListBadRequest struct {
	Payload []*AdminUsersListBadRequestBodyItems0
}

// IsSuccess returns true when this admin users list bad request response has a 2xx status code
func (o *AdminUsersListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin users list bad request response has a 3xx status code
func (o *AdminUsersListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list bad request response has a 4xx status code
func (o *AdminUsersListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin users list bad request response has a 5xx status code
func (o *AdminUsersListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this admin users list bad request response a status code equal to that given
func (o *AdminUsersListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AdminUsersListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListBadRequest  %+v", 400, o.Payload)
}

func (o *AdminUsersListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListBadRequest  %+v", 400, o.Payload)
}

func (o *AdminUsersListBadRequest) GetPayload() []*AdminUsersListBadRequestBodyItems0 {
	return o.Payload
}

func (o *AdminUsersListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUsersListUnauthorized creates a AdminUsersListUnauthorized with default headers values
func NewAdminUsersListUnauthorized() *AdminUsersListUnauthorized {
	return &AdminUsersListUnauthorized{}
}

/*
AdminUsersListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AdminUsersListUnauthorized struct {
	Payload *AdminUsersListUnauthorizedBody
}

// IsSuccess returns true when this admin users list unauthorized response has a 2xx status code
func (o *AdminUsersListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin users list unauthorized response has a 3xx status code
func (o *AdminUsersListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list unauthorized response has a 4xx status code
func (o *AdminUsersListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin users list unauthorized response has a 5xx status code
func (o *AdminUsersListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this admin users list unauthorized response a status code equal to that given
func (o *AdminUsersListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AdminUsersListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminUsersListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminUsersListUnauthorized) GetPayload() *AdminUsersListUnauthorizedBody {
	return o.Payload
}

func (o *AdminUsersListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminUsersListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUsersListForbidden creates a AdminUsersListForbidden with default headers values
func NewAdminUsersListForbidden() *AdminUsersListForbidden {
	return &AdminUsersListForbidden{}
}

/*
AdminUsersListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AdminUsersListForbidden struct {
	Payload *AdminUsersListForbiddenBody
}

// IsSuccess returns true when this admin users list forbidden response has a 2xx status code
func (o *AdminUsersListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin users list forbidden response has a 3xx status code
func (o *AdminUsersListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list forbidden response has a 4xx status code
func (o *AdminUsersListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin users list forbidden response has a 5xx status code
func (o *AdminUsersListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this admin users list forbidden response a status code equal to that given
func (o *AdminUsersListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AdminUsersListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListForbidden  %+v", 403, o.Payload)
}

func (o *AdminUsersListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListForbidden  %+v", 403, o.Payload)
}

func (o *AdminUsersListForbidden) GetPayload() *AdminUsersListForbiddenBody {
	return o.Payload
}

func (o *AdminUsersListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminUsersListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUsersListNotFound creates a AdminUsersListNotFound with default headers values
func NewAdminUsersListNotFound() *AdminUsersListNotFound {
	return &AdminUsersListNotFound{}
}

/*
AdminUsersListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AdminUsersListNotFound struct {
	Payload *AdminUsersListNotFoundBody
}

// IsSuccess returns true when this admin users list not found response has a 2xx status code
func (o *AdminUsersListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin users list not found response has a 3xx status code
func (o *AdminUsersListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list not found response has a 4xx status code
func (o *AdminUsersListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin users list not found response has a 5xx status code
func (o *AdminUsersListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this admin users list not found response a status code equal to that given
func (o *AdminUsersListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AdminUsersListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListNotFound  %+v", 404, o.Payload)
}

func (o *AdminUsersListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListNotFound  %+v", 404, o.Payload)
}

func (o *AdminUsersListNotFound) GetPayload() *AdminUsersListNotFoundBody {
	return o.Payload
}

func (o *AdminUsersListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminUsersListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminUsersListInternalServerError creates a AdminUsersListInternalServerError with default headers values
func NewAdminUsersListInternalServerError() *AdminUsersListInternalServerError {
	return &AdminUsersListInternalServerError{}
}

/*
AdminUsersListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AdminUsersListInternalServerError struct {
}

// IsSuccess returns true when this admin users list internal server error response has a 2xx status code
func (o *AdminUsersListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin users list internal server error response has a 3xx status code
func (o *AdminUsersListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin users list internal server error response has a 4xx status code
func (o *AdminUsersListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin users list internal server error response has a 5xx status code
func (o *AdminUsersListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this admin users list internal server error response a status code equal to that given
func (o *AdminUsersListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AdminUsersListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListInternalServerError ", 500)
}

func (o *AdminUsersListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/users/list][%d] adminUsersListInternalServerError ", 500)
}

func (o *AdminUsersListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AdminUsersListBadRequestBodyItems0 admin users list bad request body items0
swagger:model AdminUsersListBadRequestBodyItems0
*/
type AdminUsersListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this admin users list bad request body items0
func (o *AdminUsersListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin users list bad request body items0 based on context it is used
func (o *AdminUsersListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AdminUsersListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminUsersListForbiddenBody admin users list forbidden body
swagger:model AdminUsersListForbiddenBody
*/
type AdminUsersListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin users list forbidden body
func (o *AdminUsersListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin users list forbidden body based on context it is used
func (o *AdminUsersListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AdminUsersListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminUsersListNotFoundBody admin users list not found body
swagger:model AdminUsersListNotFoundBody
*/
type AdminUsersListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin users list not found body
func (o *AdminUsersListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin users list not found body based on context it is used
func (o *AdminUsersListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AdminUsersListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminUsersListOKBody admin users list o k body
swagger:model AdminUsersListOKBody
*/
type AdminUsersListOKBody struct {

	// data
	Data []*AdminUsersListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this admin users list o k body
func (o *AdminUsersListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AdminUsersListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adminUsersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adminUsersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this admin users list o k body based on the context it is used
func (o *AdminUsersListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AdminUsersListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adminUsersListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adminUsersListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListOKBody) UnmarshalBinary(b []byte) error {
	var res AdminUsersListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminUsersListOKBodyDataItems0 admin users list o k body data items0
swagger:model AdminUsersListOKBodyDataItems0
*/
type AdminUsersListOKBodyDataItems0 struct {

	// csm
	Csm bool `json:"csm"`

	// email
	Email string `json:"email,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// owner
	Owner bool `json:"owner"`

	// role
	Role string `json:"role,omitempty"`
}

// Validate validates this admin users list o k body data items0
func (o *AdminUsersListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin users list o k body data items0 based on context it is used
func (o *AdminUsersListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res AdminUsersListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminUsersListUnauthorizedBody admin users list unauthorized body
swagger:model AdminUsersListUnauthorizedBody
*/
type AdminUsersListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin users list unauthorized body
func (o *AdminUsersListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin users list unauthorized body based on context it is used
func (o *AdminUsersListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminUsersListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminUsersListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AdminUsersListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
