// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdminAddBalance(params *AdminAddBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminAddBalanceOK, error)

	AdminBillingOperations(params *AdminBillingOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminBillingOperationsOK, error)

	AdminCreateUser(params *AdminCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminCreateUserOK, error)

	AdminDeleteOrganization(params *AdminDeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminDeleteOrganizationOK, error)

	AdminKeycloakList(params *AdminKeycloakListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminKeycloakListOK, error)

	AdminMakeCsmUser(params *AdminMakeCsmUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminMakeCsmUserOK, error)

	AdminMakeOwner(params *AdminMakeOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminMakeOwnerOK, error)

	AdminOrganizations(params *AdminOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminOrganizationsOK, error)

	AdminProjectsList(params *AdminProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminProjectsListOK, error)

	AdminUpdateProjectKubeConfig(params *AdminUpdateProjectKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateProjectKubeConfigOK, error)

	AdminUpdateProjectVersion(params *AdminUpdateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateProjectVersionOK, error)

	AdminUpdateUserEmail(params *AdminUpdateUserEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserEmailOK, error)

	AdminUpdateUserKubeConfig(params *AdminUpdateUserKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserKubeConfigOK, error)

	AdminUpdateUserPassword(params *AdminUpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserPasswordOK, error)

	AdminUsersList(params *AdminUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUsersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AdminAddBalance adds balance for organization
*/
func (a *Client) AdminAddBalance(params *AdminAddBalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminAddBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminAddBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_AddBalance",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/organizations/add/balance",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminAddBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminAddBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_AddBalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminBillingOperations billings operations enable disable billing
*/
func (a *Client) AdminBillingOperations(params *AdminBillingOperationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminBillingOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminBillingOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_BillingOperations",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/cloudcredentials/billing",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminBillingOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminBillingOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_BillingOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminCreateUser users creation for admin
*/
func (a *Client) AdminCreateUser(params *AdminCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_CreateUser",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/users/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_CreateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminDeleteOrganization deletes organization
*/
func (a *Client) AdminDeleteOrganization(params *AdminDeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminDeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_DeleteOrganization",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/organizations/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminDeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminDeleteOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_DeleteOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminKeycloakList keycloaks list for admin
*/
func (a *Client) AdminKeycloakList(params *AdminKeycloakListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminKeycloakListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminKeycloakListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_KeycloakList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Admin/keycloak/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminKeycloakListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminKeycloakListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_KeycloakList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminMakeCsmUser users csm update for admin
*/
func (a *Client) AdminMakeCsmUser(params *AdminMakeCsmUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminMakeCsmUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminMakeCsmUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_MakeCsmUser",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/users/make/csm",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminMakeCsmUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminMakeCsmUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_MakeCsmUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminMakeOwner users choose owner for admin
*/
func (a *Client) AdminMakeOwner(params *AdminMakeOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminMakeOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminMakeOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_MakeOwner",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/users/make/owner",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminMakeOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminMakeOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_MakeOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminOrganizations organizations for admin
*/
func (a *Client) AdminOrganizations(params *AdminOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_Organizations",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Admin/organizations/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_Organizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminProjectsList projects for admin
*/
func (a *Client) AdminProjectsList(params *AdminProjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminProjectsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_ProjectsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Admin/projects/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminProjectsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_ProjectsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUpdateProjectKubeConfig projects update for admin
*/
func (a *Client) AdminUpdateProjectKubeConfig(params *AdminUpdateProjectKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateProjectKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateProjectKubeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UpdateProjectKubeConfig",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/projects/update/kubeconfig",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUpdateProjectKubeConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateProjectKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UpdateProjectKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUpdateProjectVersion projects update for admin
*/
func (a *Client) AdminUpdateProjectVersion(params *AdminUpdateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateProjectVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UpdateProjectVersion",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/projects/update/version",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUpdateProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UpdateProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUpdateUserEmail users email update for admin
*/
func (a *Client) AdminUpdateUserEmail(params *AdminUpdateUserEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateUserEmailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UpdateUserEmail",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/users/update/email",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUpdateUserEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateUserEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UpdateUserEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUpdateUserKubeConfig projects update for admin
*/
func (a *Client) AdminUpdateUserKubeConfig(params *AdminUpdateUserKubeConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserKubeConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateUserKubeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UpdateUserKubeConfig",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/projects/update/userkube",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUpdateUserKubeConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateUserKubeConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UpdateUserKubeConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUpdateUserPassword users password update for admin
*/
func (a *Client) AdminUpdateUserPassword(params *AdminUpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUpdateUserPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateUserPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UpdateUserPassword",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Admin/users/update/password",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUpdateUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateUserPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UpdateUserPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminUsersList users for admin
*/
func (a *Client) AdminUsersList(params *AdminUsersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUsersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Admin_UsersList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Admin/users/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Admin_UsersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
