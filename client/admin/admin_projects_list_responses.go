// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdminProjectsListReader is a Reader for the AdminProjectsList structure.
type AdminProjectsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminProjectsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminProjectsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminProjectsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAdminProjectsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminProjectsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdminProjectsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAdminProjectsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAdminProjectsListOK creates a AdminProjectsListOK with default headers values
func NewAdminProjectsListOK() *AdminProjectsListOK {
	return &AdminProjectsListOK{}
}

/*
AdminProjectsListOK describes a response with status code 200, with default header values.

Success
*/
type AdminProjectsListOK struct {
	Payload *AdminProjectsListOKBody
}

// IsSuccess returns true when this admin projects list o k response has a 2xx status code
func (o *AdminProjectsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this admin projects list o k response has a 3xx status code
func (o *AdminProjectsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list o k response has a 4xx status code
func (o *AdminProjectsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin projects list o k response has a 5xx status code
func (o *AdminProjectsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this admin projects list o k response a status code equal to that given
func (o *AdminProjectsListOK) IsCode(code int) bool {
	return code == 200
}

func (o *AdminProjectsListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListOK  %+v", 200, o.Payload)
}

func (o *AdminProjectsListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListOK  %+v", 200, o.Payload)
}

func (o *AdminProjectsListOK) GetPayload() *AdminProjectsListOKBody {
	return o.Payload
}

func (o *AdminProjectsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminProjectsListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProjectsListBadRequest creates a AdminProjectsListBadRequest with default headers values
func NewAdminProjectsListBadRequest() *AdminProjectsListBadRequest {
	return &AdminProjectsListBadRequest{}
}

/*
AdminProjectsListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AdminProjectsListBadRequest struct {
	Payload []*AdminProjectsListBadRequestBodyItems0
}

// IsSuccess returns true when this admin projects list bad request response has a 2xx status code
func (o *AdminProjectsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin projects list bad request response has a 3xx status code
func (o *AdminProjectsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list bad request response has a 4xx status code
func (o *AdminProjectsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin projects list bad request response has a 5xx status code
func (o *AdminProjectsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this admin projects list bad request response a status code equal to that given
func (o *AdminProjectsListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AdminProjectsListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListBadRequest  %+v", 400, o.Payload)
}

func (o *AdminProjectsListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListBadRequest  %+v", 400, o.Payload)
}

func (o *AdminProjectsListBadRequest) GetPayload() []*AdminProjectsListBadRequestBodyItems0 {
	return o.Payload
}

func (o *AdminProjectsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProjectsListUnauthorized creates a AdminProjectsListUnauthorized with default headers values
func NewAdminProjectsListUnauthorized() *AdminProjectsListUnauthorized {
	return &AdminProjectsListUnauthorized{}
}

/*
AdminProjectsListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AdminProjectsListUnauthorized struct {
	Payload *AdminProjectsListUnauthorizedBody
}

// IsSuccess returns true when this admin projects list unauthorized response has a 2xx status code
func (o *AdminProjectsListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin projects list unauthorized response has a 3xx status code
func (o *AdminProjectsListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list unauthorized response has a 4xx status code
func (o *AdminProjectsListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin projects list unauthorized response has a 5xx status code
func (o *AdminProjectsListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this admin projects list unauthorized response a status code equal to that given
func (o *AdminProjectsListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AdminProjectsListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminProjectsListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListUnauthorized  %+v", 401, o.Payload)
}

func (o *AdminProjectsListUnauthorized) GetPayload() *AdminProjectsListUnauthorizedBody {
	return o.Payload
}

func (o *AdminProjectsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminProjectsListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProjectsListForbidden creates a AdminProjectsListForbidden with default headers values
func NewAdminProjectsListForbidden() *AdminProjectsListForbidden {
	return &AdminProjectsListForbidden{}
}

/*
AdminProjectsListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AdminProjectsListForbidden struct {
	Payload *AdminProjectsListForbiddenBody
}

// IsSuccess returns true when this admin projects list forbidden response has a 2xx status code
func (o *AdminProjectsListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin projects list forbidden response has a 3xx status code
func (o *AdminProjectsListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list forbidden response has a 4xx status code
func (o *AdminProjectsListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin projects list forbidden response has a 5xx status code
func (o *AdminProjectsListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this admin projects list forbidden response a status code equal to that given
func (o *AdminProjectsListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AdminProjectsListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListForbidden  %+v", 403, o.Payload)
}

func (o *AdminProjectsListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListForbidden  %+v", 403, o.Payload)
}

func (o *AdminProjectsListForbidden) GetPayload() *AdminProjectsListForbiddenBody {
	return o.Payload
}

func (o *AdminProjectsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminProjectsListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProjectsListNotFound creates a AdminProjectsListNotFound with default headers values
func NewAdminProjectsListNotFound() *AdminProjectsListNotFound {
	return &AdminProjectsListNotFound{}
}

/*
AdminProjectsListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AdminProjectsListNotFound struct {
	Payload *AdminProjectsListNotFoundBody
}

// IsSuccess returns true when this admin projects list not found response has a 2xx status code
func (o *AdminProjectsListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin projects list not found response has a 3xx status code
func (o *AdminProjectsListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list not found response has a 4xx status code
func (o *AdminProjectsListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin projects list not found response has a 5xx status code
func (o *AdminProjectsListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this admin projects list not found response a status code equal to that given
func (o *AdminProjectsListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AdminProjectsListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListNotFound  %+v", 404, o.Payload)
}

func (o *AdminProjectsListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListNotFound  %+v", 404, o.Payload)
}

func (o *AdminProjectsListNotFound) GetPayload() *AdminProjectsListNotFoundBody {
	return o.Payload
}

func (o *AdminProjectsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AdminProjectsListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProjectsListInternalServerError creates a AdminProjectsListInternalServerError with default headers values
func NewAdminProjectsListInternalServerError() *AdminProjectsListInternalServerError {
	return &AdminProjectsListInternalServerError{}
}

/*
AdminProjectsListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AdminProjectsListInternalServerError struct {
}

// IsSuccess returns true when this admin projects list internal server error response has a 2xx status code
func (o *AdminProjectsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin projects list internal server error response has a 3xx status code
func (o *AdminProjectsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin projects list internal server error response has a 4xx status code
func (o *AdminProjectsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin projects list internal server error response has a 5xx status code
func (o *AdminProjectsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this admin projects list internal server error response a status code equal to that given
func (o *AdminProjectsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AdminProjectsListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListInternalServerError ", 500)
}

func (o *AdminProjectsListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Admin/projects/list][%d] adminProjectsListInternalServerError ", 500)
}

func (o *AdminProjectsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
AdminProjectsListBadRequestBodyItems0 admin projects list bad request body items0
swagger:model AdminProjectsListBadRequestBodyItems0
*/
type AdminProjectsListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this admin projects list bad request body items0
func (o *AdminProjectsListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin projects list bad request body items0 based on context it is used
func (o *AdminProjectsListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminProjectsListForbiddenBody admin projects list forbidden body
swagger:model AdminProjectsListForbiddenBody
*/
type AdminProjectsListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin projects list forbidden body
func (o *AdminProjectsListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin projects list forbidden body based on context it is used
func (o *AdminProjectsListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminProjectsListNotFoundBody admin projects list not found body
swagger:model AdminProjectsListNotFoundBody
*/
type AdminProjectsListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin projects list not found body
func (o *AdminProjectsListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin projects list not found body based on context it is used
func (o *AdminProjectsListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminProjectsListOKBody admin projects list o k body
swagger:model AdminProjectsListOKBody
*/
type AdminProjectsListOKBody struct {

	// data
	Data []*AdminProjectsListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this admin projects list o k body
func (o *AdminProjectsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AdminProjectsListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adminProjectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adminProjectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this admin projects list o k body based on the context it is used
func (o *AdminProjectsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AdminProjectsListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adminProjectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adminProjectsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListOKBody) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminProjectsListOKBodyDataItems0 admin projects list o k body data items0
swagger:model AdminProjectsListOKBodyDataItems0
*/
type AdminProjectsListOKBodyDataItems0 struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// kubernetes current version
	KubernetesCurrentVersion string `json:"kubernetesCurrentVersion,omitempty"`

	// kubespray current version
	KubesprayCurrentVersion string `json:"kubesprayCurrentVersion,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// servers count
	ServersCount int32 `json:"serversCount,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tcu
	Tcu int32 `json:"tcu,omitempty"`
}

// Validate validates this admin projects list o k body data items0
func (o *AdminProjectsListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin projects list o k body data items0 based on context it is used
func (o *AdminProjectsListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AdminProjectsListUnauthorizedBody admin projects list unauthorized body
swagger:model AdminProjectsListUnauthorizedBody
*/
type AdminProjectsListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this admin projects list unauthorized body
func (o *AdminProjectsListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin projects list unauthorized body based on context it is used
func (o *AdminProjectsListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AdminProjectsListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminProjectsListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AdminProjectsListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
