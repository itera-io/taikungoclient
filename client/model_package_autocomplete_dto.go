/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the PackageAutocompleteDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageAutocompleteDto{}

// PackageAutocompleteDto struct for PackageAutocompleteDto
type PackageAutocompleteDto struct {
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *ParameterType `json:"type,omitempty"`
	IsQuestion *bool `json:"isQuestion,omitempty"`
	Options []string `json:"options,omitempty"`
}

// NewPackageAutocompleteDto instantiates a new PackageAutocompleteDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageAutocompleteDto() *PackageAutocompleteDto {
	this := PackageAutocompleteDto{}
	return &this
}

// NewPackageAutocompleteDtoWithDefaults instantiates a new PackageAutocompleteDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageAutocompleteDtoWithDefaults() *PackageAutocompleteDto {
	this := PackageAutocompleteDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PackageAutocompleteDto) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PackageAutocompleteDto) SetValue(v string) {
	o.Value = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PackageAutocompleteDto) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetType() ParameterType {
	if o == nil || IsNil(o.Type) {
		var ret ParameterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetTypeOk() (*ParameterType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ParameterType and assigns it to the Type field.
func (o *PackageAutocompleteDto) SetType(v ParameterType) {
	o.Type = &v
}

// GetIsQuestion returns the IsQuestion field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetIsQuestion() bool {
	if o == nil || IsNil(o.IsQuestion) {
		var ret bool
		return ret
	}
	return *o.IsQuestion
}

// GetIsQuestionOk returns a tuple with the IsQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetIsQuestionOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQuestion) {
		return nil, false
	}
	return o.IsQuestion, true
}

// HasIsQuestion returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasIsQuestion() bool {
	if o != nil && !IsNil(o.IsQuestion) {
		return true
	}

	return false
}

// SetIsQuestion gets a reference to the given bool and assigns it to the IsQuestion field.
func (o *PackageAutocompleteDto) SetIsQuestion(v bool) {
	o.IsQuestion = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *PackageAutocompleteDto) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAutocompleteDto) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *PackageAutocompleteDto) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *PackageAutocompleteDto) SetOptions(v []string) {
	o.Options = v
}

func (o PackageAutocompleteDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageAutocompleteDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsQuestion) {
		toSerialize["isQuestion"] = o.IsQuestion
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullablePackageAutocompleteDto struct {
	value *PackageAutocompleteDto
	isSet bool
}

func (v NullablePackageAutocompleteDto) Get() *PackageAutocompleteDto {
	return v.value
}

func (v *NullablePackageAutocompleteDto) Set(val *PackageAutocompleteDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageAutocompleteDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageAutocompleteDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageAutocompleteDto(val *PackageAutocompleteDto) *NullablePackageAutocompleteDto {
	return &NullablePackageAutocompleteDto{value: val, isSet: true}
}

func (v NullablePackageAutocompleteDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageAutocompleteDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


