// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RepositoryDisableReader is a Reader for the RepositoryDisable structure.
type RepositoryDisableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepositoryDisableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepositoryDisableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepositoryDisableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepositoryDisableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepositoryDisableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepositoryDisableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRepositoryDisableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepositoryDisableOK creates a RepositoryDisableOK with default headers values
func NewRepositoryDisableOK() *RepositoryDisableOK {
	return &RepositoryDisableOK{}
}

/*
RepositoryDisableOK describes a response with status code 200, with default header values.

Success
*/
type RepositoryDisableOK struct {
}

// IsSuccess returns true when this repository disable o k response has a 2xx status code
func (o *RepositoryDisableOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repository disable o k response has a 3xx status code
func (o *RepositoryDisableOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable o k response has a 4xx status code
func (o *RepositoryDisableOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository disable o k response has a 5xx status code
func (o *RepositoryDisableOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repository disable o k response a status code equal to that given
func (o *RepositoryDisableOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repository disable o k response
func (o *RepositoryDisableOK) Code() int {
	return 200
}

func (o *RepositoryDisableOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableOK ", 200)
}

func (o *RepositoryDisableOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableOK ", 200)
}

func (o *RepositoryDisableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepositoryDisableBadRequest creates a RepositoryDisableBadRequest with default headers values
func NewRepositoryDisableBadRequest() *RepositoryDisableBadRequest {
	return &RepositoryDisableBadRequest{}
}

/*
RepositoryDisableBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RepositoryDisableBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this repository disable bad request response has a 2xx status code
func (o *RepositoryDisableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository disable bad request response has a 3xx status code
func (o *RepositoryDisableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable bad request response has a 4xx status code
func (o *RepositoryDisableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository disable bad request response has a 5xx status code
func (o *RepositoryDisableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this repository disable bad request response a status code equal to that given
func (o *RepositoryDisableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the repository disable bad request response
func (o *RepositoryDisableBadRequest) Code() int {
	return 400
}

func (o *RepositoryDisableBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryDisableBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryDisableBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryDisableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryDisableUnauthorized creates a RepositoryDisableUnauthorized with default headers values
func NewRepositoryDisableUnauthorized() *RepositoryDisableUnauthorized {
	return &RepositoryDisableUnauthorized{}
}

/*
RepositoryDisableUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepositoryDisableUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this repository disable unauthorized response has a 2xx status code
func (o *RepositoryDisableUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository disable unauthorized response has a 3xx status code
func (o *RepositoryDisableUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable unauthorized response has a 4xx status code
func (o *RepositoryDisableUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository disable unauthorized response has a 5xx status code
func (o *RepositoryDisableUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this repository disable unauthorized response a status code equal to that given
func (o *RepositoryDisableUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the repository disable unauthorized response
func (o *RepositoryDisableUnauthorized) Code() int {
	return 401
}

func (o *RepositoryDisableUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryDisableUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryDisableUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryDisableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryDisableForbidden creates a RepositoryDisableForbidden with default headers values
func NewRepositoryDisableForbidden() *RepositoryDisableForbidden {
	return &RepositoryDisableForbidden{}
}

/*
RepositoryDisableForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepositoryDisableForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this repository disable forbidden response has a 2xx status code
func (o *RepositoryDisableForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository disable forbidden response has a 3xx status code
func (o *RepositoryDisableForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable forbidden response has a 4xx status code
func (o *RepositoryDisableForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository disable forbidden response has a 5xx status code
func (o *RepositoryDisableForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repository disable forbidden response a status code equal to that given
func (o *RepositoryDisableForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the repository disable forbidden response
func (o *RepositoryDisableForbidden) Code() int {
	return 403
}

func (o *RepositoryDisableForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryDisableForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryDisableForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryDisableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryDisableNotFound creates a RepositoryDisableNotFound with default headers values
func NewRepositoryDisableNotFound() *RepositoryDisableNotFound {
	return &RepositoryDisableNotFound{}
}

/*
RepositoryDisableNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepositoryDisableNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this repository disable not found response has a 2xx status code
func (o *RepositoryDisableNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository disable not found response has a 3xx status code
func (o *RepositoryDisableNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable not found response has a 4xx status code
func (o *RepositoryDisableNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository disable not found response has a 5xx status code
func (o *RepositoryDisableNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repository disable not found response a status code equal to that given
func (o *RepositoryDisableNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repository disable not found response
func (o *RepositoryDisableNotFound) Code() int {
	return 404
}

func (o *RepositoryDisableNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryDisableNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryDisableNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryDisableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryDisableInternalServerError creates a RepositoryDisableInternalServerError with default headers values
func NewRepositoryDisableInternalServerError() *RepositoryDisableInternalServerError {
	return &RepositoryDisableInternalServerError{}
}

/*
RepositoryDisableInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RepositoryDisableInternalServerError struct {
}

// IsSuccess returns true when this repository disable internal server error response has a 2xx status code
func (o *RepositoryDisableInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository disable internal server error response has a 3xx status code
func (o *RepositoryDisableInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository disable internal server error response has a 4xx status code
func (o *RepositoryDisableInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository disable internal server error response has a 5xx status code
func (o *RepositoryDisableInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this repository disable internal server error response a status code equal to that given
func (o *RepositoryDisableInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the repository disable internal server error response
func (o *RepositoryDisableInternalServerError) Code() int {
	return 500
}

func (o *RepositoryDisableInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableInternalServerError ", 500)
}

func (o *RepositoryDisableInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/disable][%d] repositoryDisableInternalServerError ", 500)
}

func (o *RepositoryDisableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
