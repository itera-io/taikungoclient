// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// RepositoryUnbindReader is a Reader for the RepositoryUnbind structure.
type RepositoryUnbindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepositoryUnbindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepositoryUnbindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepositoryUnbindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepositoryUnbindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepositoryUnbindForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepositoryUnbindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRepositoryUnbindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepositoryUnbindOK creates a RepositoryUnbindOK with default headers values
func NewRepositoryUnbindOK() *RepositoryUnbindOK {
	return &RepositoryUnbindOK{}
}

/*
RepositoryUnbindOK describes a response with status code 200, with default header values.

Success
*/
type RepositoryUnbindOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this repository unbind o k response has a 2xx status code
func (o *RepositoryUnbindOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repository unbind o k response has a 3xx status code
func (o *RepositoryUnbindOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind o k response has a 4xx status code
func (o *RepositoryUnbindOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository unbind o k response has a 5xx status code
func (o *RepositoryUnbindOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repository unbind o k response a status code equal to that given
func (o *RepositoryUnbindOK) IsCode(code int) bool {
	return code == 200
}

func (o *RepositoryUnbindOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindOK  %+v", 200, o.Payload)
}

func (o *RepositoryUnbindOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindOK  %+v", 200, o.Payload)
}

func (o *RepositoryUnbindOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *RepositoryUnbindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryUnbindBadRequest creates a RepositoryUnbindBadRequest with default headers values
func NewRepositoryUnbindBadRequest() *RepositoryUnbindBadRequest {
	return &RepositoryUnbindBadRequest{}
}

/*
RepositoryUnbindBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RepositoryUnbindBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this repository unbind bad request response has a 2xx status code
func (o *RepositoryUnbindBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository unbind bad request response has a 3xx status code
func (o *RepositoryUnbindBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind bad request response has a 4xx status code
func (o *RepositoryUnbindBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository unbind bad request response has a 5xx status code
func (o *RepositoryUnbindBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this repository unbind bad request response a status code equal to that given
func (o *RepositoryUnbindBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RepositoryUnbindBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryUnbindBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryUnbindBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryUnbindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryUnbindUnauthorized creates a RepositoryUnbindUnauthorized with default headers values
func NewRepositoryUnbindUnauthorized() *RepositoryUnbindUnauthorized {
	return &RepositoryUnbindUnauthorized{}
}

/*
RepositoryUnbindUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepositoryUnbindUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository unbind unauthorized response has a 2xx status code
func (o *RepositoryUnbindUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository unbind unauthorized response has a 3xx status code
func (o *RepositoryUnbindUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind unauthorized response has a 4xx status code
func (o *RepositoryUnbindUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository unbind unauthorized response has a 5xx status code
func (o *RepositoryUnbindUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this repository unbind unauthorized response a status code equal to that given
func (o *RepositoryUnbindUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RepositoryUnbindUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryUnbindUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryUnbindUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryUnbindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryUnbindForbidden creates a RepositoryUnbindForbidden with default headers values
func NewRepositoryUnbindForbidden() *RepositoryUnbindForbidden {
	return &RepositoryUnbindForbidden{}
}

/*
RepositoryUnbindForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepositoryUnbindForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository unbind forbidden response has a 2xx status code
func (o *RepositoryUnbindForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository unbind forbidden response has a 3xx status code
func (o *RepositoryUnbindForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind forbidden response has a 4xx status code
func (o *RepositoryUnbindForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository unbind forbidden response has a 5xx status code
func (o *RepositoryUnbindForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repository unbind forbidden response a status code equal to that given
func (o *RepositoryUnbindForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RepositoryUnbindForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryUnbindForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryUnbindForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryUnbindForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryUnbindNotFound creates a RepositoryUnbindNotFound with default headers values
func NewRepositoryUnbindNotFound() *RepositoryUnbindNotFound {
	return &RepositoryUnbindNotFound{}
}

/*
RepositoryUnbindNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepositoryUnbindNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository unbind not found response has a 2xx status code
func (o *RepositoryUnbindNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository unbind not found response has a 3xx status code
func (o *RepositoryUnbindNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind not found response has a 4xx status code
func (o *RepositoryUnbindNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository unbind not found response has a 5xx status code
func (o *RepositoryUnbindNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repository unbind not found response a status code equal to that given
func (o *RepositoryUnbindNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RepositoryUnbindNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryUnbindNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryUnbindNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryUnbindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryUnbindInternalServerError creates a RepositoryUnbindInternalServerError with default headers values
func NewRepositoryUnbindInternalServerError() *RepositoryUnbindInternalServerError {
	return &RepositoryUnbindInternalServerError{}
}

/*
RepositoryUnbindInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RepositoryUnbindInternalServerError struct {
}

// IsSuccess returns true when this repository unbind internal server error response has a 2xx status code
func (o *RepositoryUnbindInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository unbind internal server error response has a 3xx status code
func (o *RepositoryUnbindInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository unbind internal server error response has a 4xx status code
func (o *RepositoryUnbindInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository unbind internal server error response has a 5xx status code
func (o *RepositoryUnbindInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this repository unbind internal server error response a status code equal to that given
func (o *RepositoryUnbindInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RepositoryUnbindInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindInternalServerError ", 500)
}

func (o *RepositoryUnbindInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/unbind][%d] repositoryUnbindInternalServerError ", 500)
}

func (o *RepositoryUnbindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
