// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RepositoryListReader is a Reader for the RepositoryList structure.
type RepositoryListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepositoryListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepositoryListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepositoryListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepositoryListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepositoryListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepositoryListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRepositoryListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepositoryListOK creates a RepositoryListOK with default headers values
func NewRepositoryListOK() *RepositoryListOK {
	return &RepositoryListOK{}
}

/*
RepositoryListOK describes a response with status code 200, with default header values.

Success
*/
type RepositoryListOK struct {
	Payload *RepositoryListOKBody
}

// IsSuccess returns true when this repository list o k response has a 2xx status code
func (o *RepositoryListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repository list o k response has a 3xx status code
func (o *RepositoryListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list o k response has a 4xx status code
func (o *RepositoryListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository list o k response has a 5xx status code
func (o *RepositoryListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list o k response a status code equal to that given
func (o *RepositoryListOK) IsCode(code int) bool {
	return code == 200
}

func (o *RepositoryListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListOK  %+v", 200, o.Payload)
}

func (o *RepositoryListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListOK  %+v", 200, o.Payload)
}

func (o *RepositoryListOK) GetPayload() *RepositoryListOKBody {
	return o.Payload
}

func (o *RepositoryListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RepositoryListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListBadRequest creates a RepositoryListBadRequest with default headers values
func NewRepositoryListBadRequest() *RepositoryListBadRequest {
	return &RepositoryListBadRequest{}
}

/*
RepositoryListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RepositoryListBadRequest struct {
	Payload []*RepositoryListBadRequestBodyItems0
}

// IsSuccess returns true when this repository list bad request response has a 2xx status code
func (o *RepositoryListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list bad request response has a 3xx status code
func (o *RepositoryListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list bad request response has a 4xx status code
func (o *RepositoryListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list bad request response has a 5xx status code
func (o *RepositoryListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list bad request response a status code equal to that given
func (o *RepositoryListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RepositoryListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryListBadRequest) GetPayload() []*RepositoryListBadRequestBodyItems0 {
	return o.Payload
}

func (o *RepositoryListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListUnauthorized creates a RepositoryListUnauthorized with default headers values
func NewRepositoryListUnauthorized() *RepositoryListUnauthorized {
	return &RepositoryListUnauthorized{}
}

/*
RepositoryListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepositoryListUnauthorized struct {
	Payload *RepositoryListUnauthorizedBody
}

// IsSuccess returns true when this repository list unauthorized response has a 2xx status code
func (o *RepositoryListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list unauthorized response has a 3xx status code
func (o *RepositoryListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list unauthorized response has a 4xx status code
func (o *RepositoryListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list unauthorized response has a 5xx status code
func (o *RepositoryListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list unauthorized response a status code equal to that given
func (o *RepositoryListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RepositoryListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryListUnauthorized) GetPayload() *RepositoryListUnauthorizedBody {
	return o.Payload
}

func (o *RepositoryListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RepositoryListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListForbidden creates a RepositoryListForbidden with default headers values
func NewRepositoryListForbidden() *RepositoryListForbidden {
	return &RepositoryListForbidden{}
}

/*
RepositoryListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepositoryListForbidden struct {
	Payload *RepositoryListForbiddenBody
}

// IsSuccess returns true when this repository list forbidden response has a 2xx status code
func (o *RepositoryListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list forbidden response has a 3xx status code
func (o *RepositoryListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list forbidden response has a 4xx status code
func (o *RepositoryListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list forbidden response has a 5xx status code
func (o *RepositoryListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list forbidden response a status code equal to that given
func (o *RepositoryListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RepositoryListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryListForbidden) GetPayload() *RepositoryListForbiddenBody {
	return o.Payload
}

func (o *RepositoryListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RepositoryListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListNotFound creates a RepositoryListNotFound with default headers values
func NewRepositoryListNotFound() *RepositoryListNotFound {
	return &RepositoryListNotFound{}
}

/*
RepositoryListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepositoryListNotFound struct {
	Payload *RepositoryListNotFoundBody
}

// IsSuccess returns true when this repository list not found response has a 2xx status code
func (o *RepositoryListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list not found response has a 3xx status code
func (o *RepositoryListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list not found response has a 4xx status code
func (o *RepositoryListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list not found response has a 5xx status code
func (o *RepositoryListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list not found response a status code equal to that given
func (o *RepositoryListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RepositoryListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryListNotFound) GetPayload() *RepositoryListNotFoundBody {
	return o.Payload
}

func (o *RepositoryListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RepositoryListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListInternalServerError creates a RepositoryListInternalServerError with default headers values
func NewRepositoryListInternalServerError() *RepositoryListInternalServerError {
	return &RepositoryListInternalServerError{}
}

/*
RepositoryListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RepositoryListInternalServerError struct {
}

// IsSuccess returns true when this repository list internal server error response has a 2xx status code
func (o *RepositoryListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list internal server error response has a 3xx status code
func (o *RepositoryListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list internal server error response has a 4xx status code
func (o *RepositoryListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository list internal server error response has a 5xx status code
func (o *RepositoryListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this repository list internal server error response a status code equal to that given
func (o *RepositoryListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RepositoryListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListInternalServerError ", 500)
}

func (o *RepositoryListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListInternalServerError ", 500)
}

func (o *RepositoryListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
RepositoryListBadRequestBodyItems0 repository list bad request body items0
swagger:model RepositoryListBadRequestBodyItems0
*/
type RepositoryListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this repository list bad request body items0
func (o *RepositoryListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository list bad request body items0 based on context it is used
func (o *RepositoryListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res RepositoryListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RepositoryListForbiddenBody repository list forbidden body
swagger:model RepositoryListForbiddenBody
*/
type RepositoryListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this repository list forbidden body
func (o *RepositoryListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository list forbidden body based on context it is used
func (o *RepositoryListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res RepositoryListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RepositoryListNotFoundBody repository list not found body
swagger:model RepositoryListNotFoundBody
*/
type RepositoryListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this repository list not found body
func (o *RepositoryListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository list not found body based on context it is used
func (o *RepositoryListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res RepositoryListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RepositoryListOKBody repository list o k body
swagger:model RepositoryListOKBody
*/
type RepositoryListOKBody struct {

	// data
	Data []*RepositoryListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this repository list o k body
func (o *RepositoryListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepositoryListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repositoryListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("repositoryListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this repository list o k body based on the context it is used
func (o *RepositoryListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepositoryListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repositoryListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("repositoryListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListOKBody) UnmarshalBinary(b []byte) error {
	var res RepositoryListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RepositoryListOKBodyDataItems0 repository list o k body data items0
swagger:model RepositoryListOKBodyDataItems0
*/
type RepositoryListOKBodyDataItems0 struct {

	// disabled
	Disabled bool `json:"disabled"`

	// display name
	DisplayName string `json:"displayName"`

	// has catalog app
	HasCatalogApp bool `json:"hasCatalogApp"`

	// is bound
	IsBound bool `json:"isBound"`

	// name
	Name string `json:"name,omitempty"`

	// official
	Official bool `json:"official"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// repository Id
	RepositoryID string `json:"repositoryId,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// verified publisher
	VerifiedPublisher bool `json:"verifiedPublisher"`
}

// Validate validates this repository list o k body data items0
func (o *RepositoryListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository list o k body data items0 based on context it is used
func (o *RepositoryListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res RepositoryListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RepositoryListUnauthorizedBody repository list unauthorized body
swagger:model RepositoryListUnauthorizedBody
*/
type RepositoryListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this repository list unauthorized body
func (o *RepositoryListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this repository list unauthorized body based on context it is used
func (o *RepositoryListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RepositoryListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepositoryListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res RepositoryListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
