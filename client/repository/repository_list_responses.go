// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// RepositoryListReader is a Reader for the RepositoryList structure.
type RepositoryListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepositoryListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepositoryListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepositoryListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepositoryListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepositoryListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepositoryListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRepositoryListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepositoryListOK creates a RepositoryListOK with default headers values
func NewRepositoryListOK() *RepositoryListOK {
	return &RepositoryListOK{}
}

/*
RepositoryListOK describes a response with status code 200, with default header values.

Success
*/
type RepositoryListOK struct {
	Payload *models.AppRepositoryList
}

// IsSuccess returns true when this repository list o k response has a 2xx status code
func (o *RepositoryListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repository list o k response has a 3xx status code
func (o *RepositoryListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list o k response has a 4xx status code
func (o *RepositoryListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository list o k response has a 5xx status code
func (o *RepositoryListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list o k response a status code equal to that given
func (o *RepositoryListOK) IsCode(code int) bool {
	return code == 200
}

func (o *RepositoryListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListOK  %+v", 200, o.Payload)
}

func (o *RepositoryListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListOK  %+v", 200, o.Payload)
}

func (o *RepositoryListOK) GetPayload() *models.AppRepositoryList {
	return o.Payload
}

func (o *RepositoryListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRepositoryList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListBadRequest creates a RepositoryListBadRequest with default headers values
func NewRepositoryListBadRequest() *RepositoryListBadRequest {
	return &RepositoryListBadRequest{}
}

/*
RepositoryListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RepositoryListBadRequest struct {
	Payload *models.ValidationProblemDetails
}

// IsSuccess returns true when this repository list bad request response has a 2xx status code
func (o *RepositoryListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list bad request response has a 3xx status code
func (o *RepositoryListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list bad request response has a 4xx status code
func (o *RepositoryListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list bad request response has a 5xx status code
func (o *RepositoryListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list bad request response a status code equal to that given
func (o *RepositoryListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RepositoryListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryListBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *RepositoryListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListUnauthorized creates a RepositoryListUnauthorized with default headers values
func NewRepositoryListUnauthorized() *RepositoryListUnauthorized {
	return &RepositoryListUnauthorized{}
}

/*
RepositoryListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepositoryListUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this repository list unauthorized response has a 2xx status code
func (o *RepositoryListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list unauthorized response has a 3xx status code
func (o *RepositoryListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list unauthorized response has a 4xx status code
func (o *RepositoryListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list unauthorized response has a 5xx status code
func (o *RepositoryListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list unauthorized response a status code equal to that given
func (o *RepositoryListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RepositoryListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryListUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListForbidden creates a RepositoryListForbidden with default headers values
func NewRepositoryListForbidden() *RepositoryListForbidden {
	return &RepositoryListForbidden{}
}

/*
RepositoryListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepositoryListForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this repository list forbidden response has a 2xx status code
func (o *RepositoryListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list forbidden response has a 3xx status code
func (o *RepositoryListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list forbidden response has a 4xx status code
func (o *RepositoryListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list forbidden response has a 5xx status code
func (o *RepositoryListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list forbidden response a status code equal to that given
func (o *RepositoryListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RepositoryListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryListForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListNotFound creates a RepositoryListNotFound with default headers values
func NewRepositoryListNotFound() *RepositoryListNotFound {
	return &RepositoryListNotFound{}
}

/*
RepositoryListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepositoryListNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this repository list not found response has a 2xx status code
func (o *RepositoryListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list not found response has a 3xx status code
func (o *RepositoryListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list not found response has a 4xx status code
func (o *RepositoryListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository list not found response has a 5xx status code
func (o *RepositoryListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repository list not found response a status code equal to that given
func (o *RepositoryListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RepositoryListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryListNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RepositoryListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryListInternalServerError creates a RepositoryListInternalServerError with default headers values
func NewRepositoryListInternalServerError() *RepositoryListInternalServerError {
	return &RepositoryListInternalServerError{}
}

/*
RepositoryListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RepositoryListInternalServerError struct {
}

// IsSuccess returns true when this repository list internal server error response has a 2xx status code
func (o *RepositoryListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository list internal server error response has a 3xx status code
func (o *RepositoryListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository list internal server error response has a 4xx status code
func (o *RepositoryListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository list internal server error response has a 5xx status code
func (o *RepositoryListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this repository list internal server error response a status code equal to that given
func (o *RepositoryListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RepositoryListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListInternalServerError ", 500)
}

func (o *RepositoryListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Repository/available][%d] repositoryListInternalServerError ", 500)
}

func (o *RepositoryListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
