// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// RepositoryImportReader is a Reader for the RepositoryImport structure.
type RepositoryImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepositoryImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepositoryImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepositoryImportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepositoryImportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepositoryImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepositoryImportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRepositoryImportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepositoryImportOK creates a RepositoryImportOK with default headers values
func NewRepositoryImportOK() *RepositoryImportOK {
	return &RepositoryImportOK{}
}

/*
RepositoryImportOK describes a response with status code 200, with default header values.

Success
*/
type RepositoryImportOK struct {
	Payload models.Unit
}

// IsSuccess returns true when this repository import o k response has a 2xx status code
func (o *RepositoryImportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repository import o k response has a 3xx status code
func (o *RepositoryImportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import o k response has a 4xx status code
func (o *RepositoryImportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository import o k response has a 5xx status code
func (o *RepositoryImportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repository import o k response a status code equal to that given
func (o *RepositoryImportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repository import o k response
func (o *RepositoryImportOK) Code() int {
	return 200
}

func (o *RepositoryImportOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportOK  %+v", 200, o.Payload)
}

func (o *RepositoryImportOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportOK  %+v", 200, o.Payload)
}

func (o *RepositoryImportOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *RepositoryImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryImportBadRequest creates a RepositoryImportBadRequest with default headers values
func NewRepositoryImportBadRequest() *RepositoryImportBadRequest {
	return &RepositoryImportBadRequest{}
}

/*
RepositoryImportBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RepositoryImportBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository import bad request response has a 2xx status code
func (o *RepositoryImportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository import bad request response has a 3xx status code
func (o *RepositoryImportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import bad request response has a 4xx status code
func (o *RepositoryImportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository import bad request response has a 5xx status code
func (o *RepositoryImportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this repository import bad request response a status code equal to that given
func (o *RepositoryImportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the repository import bad request response
func (o *RepositoryImportBadRequest) Code() int {
	return 400
}

func (o *RepositoryImportBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryImportBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportBadRequest  %+v", 400, o.Payload)
}

func (o *RepositoryImportBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryImportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryImportUnauthorized creates a RepositoryImportUnauthorized with default headers values
func NewRepositoryImportUnauthorized() *RepositoryImportUnauthorized {
	return &RepositoryImportUnauthorized{}
}

/*
RepositoryImportUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepositoryImportUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository import unauthorized response has a 2xx status code
func (o *RepositoryImportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository import unauthorized response has a 3xx status code
func (o *RepositoryImportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import unauthorized response has a 4xx status code
func (o *RepositoryImportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository import unauthorized response has a 5xx status code
func (o *RepositoryImportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this repository import unauthorized response a status code equal to that given
func (o *RepositoryImportUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the repository import unauthorized response
func (o *RepositoryImportUnauthorized) Code() int {
	return 401
}

func (o *RepositoryImportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryImportUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportUnauthorized  %+v", 401, o.Payload)
}

func (o *RepositoryImportUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryImportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryImportForbidden creates a RepositoryImportForbidden with default headers values
func NewRepositoryImportForbidden() *RepositoryImportForbidden {
	return &RepositoryImportForbidden{}
}

/*
RepositoryImportForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepositoryImportForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository import forbidden response has a 2xx status code
func (o *RepositoryImportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository import forbidden response has a 3xx status code
func (o *RepositoryImportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import forbidden response has a 4xx status code
func (o *RepositoryImportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository import forbidden response has a 5xx status code
func (o *RepositoryImportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repository import forbidden response a status code equal to that given
func (o *RepositoryImportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the repository import forbidden response
func (o *RepositoryImportForbidden) Code() int {
	return 403
}

func (o *RepositoryImportForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryImportForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportForbidden  %+v", 403, o.Payload)
}

func (o *RepositoryImportForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryImportNotFound creates a RepositoryImportNotFound with default headers values
func NewRepositoryImportNotFound() *RepositoryImportNotFound {
	return &RepositoryImportNotFound{}
}

/*
RepositoryImportNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepositoryImportNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this repository import not found response has a 2xx status code
func (o *RepositoryImportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository import not found response has a 3xx status code
func (o *RepositoryImportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import not found response has a 4xx status code
func (o *RepositoryImportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repository import not found response has a 5xx status code
func (o *RepositoryImportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repository import not found response a status code equal to that given
func (o *RepositoryImportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repository import not found response
func (o *RepositoryImportNotFound) Code() int {
	return 404
}

func (o *RepositoryImportNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryImportNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportNotFound  %+v", 404, o.Payload)
}

func (o *RepositoryImportNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *RepositoryImportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepositoryImportInternalServerError creates a RepositoryImportInternalServerError with default headers values
func NewRepositoryImportInternalServerError() *RepositoryImportInternalServerError {
	return &RepositoryImportInternalServerError{}
}

/*
RepositoryImportInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RepositoryImportInternalServerError struct {
}

// IsSuccess returns true when this repository import internal server error response has a 2xx status code
func (o *RepositoryImportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repository import internal server error response has a 3xx status code
func (o *RepositoryImportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repository import internal server error response has a 4xx status code
func (o *RepositoryImportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this repository import internal server error response has a 5xx status code
func (o *RepositoryImportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this repository import internal server error response a status code equal to that given
func (o *RepositoryImportInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the repository import internal server error response
func (o *RepositoryImportInternalServerError) Code() int {
	return 500
}

func (o *RepositoryImportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportInternalServerError ", 500)
}

func (o *RepositoryImportInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Repository/import][%d] repositoryImportInternalServerError ", 500)
}

func (o *RepositoryImportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
