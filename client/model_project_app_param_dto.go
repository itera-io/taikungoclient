/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectAppParamDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectAppParamDto{}

// ProjectAppParamDto struct for ProjectAppParamDto
type ProjectAppParamDto struct {
	Key NullableString `json:"key"`
	Value NullableString `json:"value"`
	IsEditableWhenInstalling bool `json:"isEditableWhenInstalling"`
	IsEditableAfterInstallation bool `json:"isEditableAfterInstallation"`
	IsMandatory bool `json:"isMandatory"`
}

type _ProjectAppParamDto ProjectAppParamDto

// NewProjectAppParamDto instantiates a new ProjectAppParamDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectAppParamDto(key NullableString, value NullableString, isEditableWhenInstalling bool, isEditableAfterInstallation bool, isMandatory bool) *ProjectAppParamDto {
	this := ProjectAppParamDto{}
	this.Key = key
	this.Value = value
	this.IsEditableWhenInstalling = isEditableWhenInstalling
	this.IsEditableAfterInstallation = isEditableAfterInstallation
	this.IsMandatory = isMandatory
	return &this
}

// NewProjectAppParamDtoWithDefaults instantiates a new ProjectAppParamDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectAppParamDtoWithDefaults() *ProjectAppParamDto {
	this := ProjectAppParamDto{}
	return &this
}

// GetKey returns the Key field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectAppParamDto) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}

	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppParamDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// SetKey sets field value
func (o *ProjectAppParamDto) SetKey(v string) {
	o.Key.Set(&v)
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectAppParamDto) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectAppParamDto) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *ProjectAppParamDto) SetValue(v string) {
	o.Value.Set(&v)
}

// GetIsEditableWhenInstalling returns the IsEditableWhenInstalling field value
func (o *ProjectAppParamDto) GetIsEditableWhenInstalling() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEditableWhenInstalling
}

// GetIsEditableWhenInstallingOk returns a tuple with the IsEditableWhenInstalling field value
// and a boolean to check if the value has been set.
func (o *ProjectAppParamDto) GetIsEditableWhenInstallingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEditableWhenInstalling, true
}

// SetIsEditableWhenInstalling sets field value
func (o *ProjectAppParamDto) SetIsEditableWhenInstalling(v bool) {
	o.IsEditableWhenInstalling = v
}

// GetIsEditableAfterInstallation returns the IsEditableAfterInstallation field value
func (o *ProjectAppParamDto) GetIsEditableAfterInstallation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEditableAfterInstallation
}

// GetIsEditableAfterInstallationOk returns a tuple with the IsEditableAfterInstallation field value
// and a boolean to check if the value has been set.
func (o *ProjectAppParamDto) GetIsEditableAfterInstallationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEditableAfterInstallation, true
}

// SetIsEditableAfterInstallation sets field value
func (o *ProjectAppParamDto) SetIsEditableAfterInstallation(v bool) {
	o.IsEditableAfterInstallation = v
}

// GetIsMandatory returns the IsMandatory field value
func (o *ProjectAppParamDto) GetIsMandatory() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value
// and a boolean to check if the value has been set.
func (o *ProjectAppParamDto) GetIsMandatoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMandatory, true
}

// SetIsMandatory sets field value
func (o *ProjectAppParamDto) SetIsMandatory(v bool) {
	o.IsMandatory = v
}

func (o ProjectAppParamDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectAppParamDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key.Get()
	toSerialize["value"] = o.Value.Get()
	toSerialize["isEditableWhenInstalling"] = o.IsEditableWhenInstalling
	toSerialize["isEditableAfterInstallation"] = o.IsEditableAfterInstallation
	toSerialize["isMandatory"] = o.IsMandatory
	return toSerialize, nil
}

func (o *ProjectAppParamDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
		"isEditableWhenInstalling",
		"isEditableAfterInstallation",
		"isMandatory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectAppParamDto := _ProjectAppParamDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectAppParamDto)

	if err != nil {
		return err
	}

	*o = ProjectAppParamDto(varProjectAppParamDto)

	return err
}

type NullableProjectAppParamDto struct {
	value *ProjectAppParamDto
	isSet bool
}

func (v NullableProjectAppParamDto) Get() *ProjectAppParamDto {
	return v.value
}

func (v *NullableProjectAppParamDto) Set(val *ProjectAppParamDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectAppParamDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectAppParamDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectAppParamDto(val *ProjectAppParamDto) *NullableProjectAppParamDto {
	return &NullableProjectAppParamDto{value: val, isSet: true}
}

func (v NullableProjectAppParamDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectAppParamDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


