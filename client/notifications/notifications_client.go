// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NotificationsCreate(params *NotificationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsCreateOK, error)

	NotificationsDelete(params *NotificationsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsDeleteOK, *NotificationsDeleteNoContent, error)

	NotificationsExportCsv(params *NotificationsExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsExportCsvOK, error)

	NotificationsGetProjectOperationMessages(params *NotificationsGetProjectOperationMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsGetProjectOperationMessagesOK, error)

	NotificationsList(params *NotificationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsListOK, error)

	NotificationsListByUser(params *NotificationsListByUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsListByUserOK, error)

	NotificationsNotifyOwner(params *NotificationsNotifyOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsNotifyOwnerOK, error)

	NotificationsSend(params *NotificationsSendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsSendOK, error)

	NotificationsUpdate(params *NotificationsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NotificationsCreate sends notification to signal r
*/
func (a *Client) NotificationsCreate(params *NotificationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/add",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsDelete deletes notification
*/
func (a *Client) NotificationsDelete(params *NotificationsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsDeleteOK, *NotificationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_Delete",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *NotificationsDeleteOK:
		return value, nil, nil
	case *NotificationsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for notifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsExportCsv exports csv
*/
func (a *Client) NotificationsExportCsv(params *NotificationsExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsExportCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsExportCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_ExportCsv",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Notifications/download",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsExportCsvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsExportCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_ExportCsv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsGetProjectOperationMessages gets project operations
*/
func (a *Client) NotificationsGetProjectOperationMessages(params *NotificationsGetProjectOperationMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsGetProjectOperationMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsGetProjectOperationMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_GetProjectOperationMessages",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/operations",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsGetProjectOperationMessagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsGetProjectOperationMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_GetProjectOperationMessages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsList retrieves all notifications
*/
func (a *Client) NotificationsList(params *NotificationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Notifications",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsListByUser gets notification for current user
*/
func (a *Client) NotificationsListByUser(params *NotificationsListByUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsListByUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsListByUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_ListByUser",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Notifications/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsListByUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsListByUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_ListByUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsNotifyOwner notifies owner
*/
func (a *Client) NotificationsNotifyOwner(params *NotificationsNotifyOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsNotifyOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsNotifyOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_NotifyOwner",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/notifyowner",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsNotifyOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsNotifyOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_NotifyOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsSend sends notification to signal r
*/
func (a *Client) NotificationsSend(params *NotificationsSendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsSendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_Send",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/send",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsSendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsSendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_Send: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotificationsUpdate updates notification
*/
func (a *Client) NotificationsUpdate(params *NotificationsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NotificationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Notifications_Update",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Notifications/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Notifications_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
