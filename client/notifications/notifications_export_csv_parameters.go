// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNotificationsExportCsvParams creates a new NotificationsExportCsvParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNotificationsExportCsvParams() *NotificationsExportCsvParams {
	return &NotificationsExportCsvParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNotificationsExportCsvParamsWithTimeout creates a new NotificationsExportCsvParams object
// with the ability to set a timeout on a request.
func NewNotificationsExportCsvParamsWithTimeout(timeout time.Duration) *NotificationsExportCsvParams {
	return &NotificationsExportCsvParams{
		timeout: timeout,
	}
}

// NewNotificationsExportCsvParamsWithContext creates a new NotificationsExportCsvParams object
// with the ability to set a context for a request.
func NewNotificationsExportCsvParamsWithContext(ctx context.Context) *NotificationsExportCsvParams {
	return &NotificationsExportCsvParams{
		Context: ctx,
	}
}

// NewNotificationsExportCsvParamsWithHTTPClient creates a new NotificationsExportCsvParams object
// with the ability to set a custom HTTPClient for a request.
func NewNotificationsExportCsvParamsWithHTTPClient(client *http.Client) *NotificationsExportCsvParams {
	return &NotificationsExportCsvParams{
		HTTPClient: client,
	}
}

/* NotificationsExportCsvParams contains all the parameters to send to the API endpoint
   for the notifications export csv operation.

   Typically these are written to a http.Request.
*/
type NotificationsExportCsvParams struct {

	// EndDate.
	//
	// Format: date-time
	EndDate *strfmt.DateTime

	// FilterBy.
	FilterBy *string

	// IsDeleted.
	IsDeleted *bool

	// IsEmailEnabled.
	IsEmailEnabled *bool

	// OrganizationID.
	//
	// Format: int32
	OrganizationID *int32

	// ProjectID.
	//
	// Format: int32
	ProjectID *int32

	// SortBy.
	SortBy *string

	// SortDirection.
	SortDirection *string

	// StartDate.
	//
	// Format: date-time
	StartDate *strfmt.DateTime

	// UserID.
	UserID *string

	// V.
	V string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the notifications export csv params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NotificationsExportCsvParams) WithDefaults() *NotificationsExportCsvParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the notifications export csv params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NotificationsExportCsvParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the notifications export csv params
func (o *NotificationsExportCsvParams) WithTimeout(timeout time.Duration) *NotificationsExportCsvParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the notifications export csv params
func (o *NotificationsExportCsvParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the notifications export csv params
func (o *NotificationsExportCsvParams) WithContext(ctx context.Context) *NotificationsExportCsvParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the notifications export csv params
func (o *NotificationsExportCsvParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the notifications export csv params
func (o *NotificationsExportCsvParams) WithHTTPClient(client *http.Client) *NotificationsExportCsvParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the notifications export csv params
func (o *NotificationsExportCsvParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the notifications export csv params
func (o *NotificationsExportCsvParams) WithEndDate(endDate *strfmt.DateTime) *NotificationsExportCsvParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the notifications export csv params
func (o *NotificationsExportCsvParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithFilterBy adds the filterBy to the notifications export csv params
func (o *NotificationsExportCsvParams) WithFilterBy(filterBy *string) *NotificationsExportCsvParams {
	o.SetFilterBy(filterBy)
	return o
}

// SetFilterBy adds the filterBy to the notifications export csv params
func (o *NotificationsExportCsvParams) SetFilterBy(filterBy *string) {
	o.FilterBy = filterBy
}

// WithIsDeleted adds the isDeleted to the notifications export csv params
func (o *NotificationsExportCsvParams) WithIsDeleted(isDeleted *bool) *NotificationsExportCsvParams {
	o.SetIsDeleted(isDeleted)
	return o
}

// SetIsDeleted adds the isDeleted to the notifications export csv params
func (o *NotificationsExportCsvParams) SetIsDeleted(isDeleted *bool) {
	o.IsDeleted = isDeleted
}

// WithIsEmailEnabled adds the isEmailEnabled to the notifications export csv params
func (o *NotificationsExportCsvParams) WithIsEmailEnabled(isEmailEnabled *bool) *NotificationsExportCsvParams {
	o.SetIsEmailEnabled(isEmailEnabled)
	return o
}

// SetIsEmailEnabled adds the isEmailEnabled to the notifications export csv params
func (o *NotificationsExportCsvParams) SetIsEmailEnabled(isEmailEnabled *bool) {
	o.IsEmailEnabled = isEmailEnabled
}

// WithOrganizationID adds the organizationID to the notifications export csv params
func (o *NotificationsExportCsvParams) WithOrganizationID(organizationID *int32) *NotificationsExportCsvParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the notifications export csv params
func (o *NotificationsExportCsvParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithProjectID adds the projectID to the notifications export csv params
func (o *NotificationsExportCsvParams) WithProjectID(projectID *int32) *NotificationsExportCsvParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the notifications export csv params
func (o *NotificationsExportCsvParams) SetProjectID(projectID *int32) {
	o.ProjectID = projectID
}

// WithSortBy adds the sortBy to the notifications export csv params
func (o *NotificationsExportCsvParams) WithSortBy(sortBy *string) *NotificationsExportCsvParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the notifications export csv params
func (o *NotificationsExportCsvParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDirection adds the sortDirection to the notifications export csv params
func (o *NotificationsExportCsvParams) WithSortDirection(sortDirection *string) *NotificationsExportCsvParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the notifications export csv params
func (o *NotificationsExportCsvParams) SetSortDirection(sortDirection *string) {
	o.SortDirection = sortDirection
}

// WithStartDate adds the startDate to the notifications export csv params
func (o *NotificationsExportCsvParams) WithStartDate(startDate *strfmt.DateTime) *NotificationsExportCsvParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the notifications export csv params
func (o *NotificationsExportCsvParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WithUserID adds the userID to the notifications export csv params
func (o *NotificationsExportCsvParams) WithUserID(userID *string) *NotificationsExportCsvParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the notifications export csv params
func (o *NotificationsExportCsvParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithV adds the v to the notifications export csv params
func (o *NotificationsExportCsvParams) WithV(v string) *NotificationsExportCsvParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the notifications export csv params
func (o *NotificationsExportCsvParams) SetV(v string) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *NotificationsExportCsvParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate strfmt.DateTime

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.FilterBy != nil {

		// query param filterBy
		var qrFilterBy string

		if o.FilterBy != nil {
			qrFilterBy = *o.FilterBy
		}
		qFilterBy := qrFilterBy
		if qFilterBy != "" {

			if err := r.SetQueryParam("filterBy", qFilterBy); err != nil {
				return err
			}
		}
	}

	if o.IsDeleted != nil {

		// query param isDeleted
		var qrIsDeleted bool

		if o.IsDeleted != nil {
			qrIsDeleted = *o.IsDeleted
		}
		qIsDeleted := swag.FormatBool(qrIsDeleted)
		if qIsDeleted != "" {

			if err := r.SetQueryParam("isDeleted", qIsDeleted); err != nil {
				return err
			}
		}
	}

	if o.IsEmailEnabled != nil {

		// query param isEmailEnabled
		var qrIsEmailEnabled bool

		if o.IsEmailEnabled != nil {
			qrIsEmailEnabled = *o.IsEmailEnabled
		}
		qIsEmailEnabled := swag.FormatBool(qrIsEmailEnabled)
		if qIsEmailEnabled != "" {

			if err := r.SetQueryParam("isEmailEnabled", qIsEmailEnabled); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID int32

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt32(qrProjectID)
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortDirection != nil {

		// query param sortDirection
		var qrSortDirection string

		if o.SortDirection != nil {
			qrSortDirection = *o.SortDirection
		}
		qSortDirection := qrSortDirection
		if qSortDirection != "" {

			if err := r.SetQueryParam("sortDirection", qSortDirection); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.DateTime

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param userId
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}
	}

	// path param v
	if err := r.SetPathParam("v", o.V); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
