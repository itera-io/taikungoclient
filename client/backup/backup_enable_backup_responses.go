// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// BackupEnableBackupReader is a Reader for the BackupEnableBackup structure.
type BackupEnableBackupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackupEnableBackupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBackupEnableBackupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBackupEnableBackupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBackupEnableBackupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBackupEnableBackupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBackupEnableBackupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBackupEnableBackupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBackupEnableBackupOK creates a BackupEnableBackupOK with default headers values
func NewBackupEnableBackupOK() *BackupEnableBackupOK {
	return &BackupEnableBackupOK{}
}

/* BackupEnableBackupOK describes a response with status code 200, with default header values.

Success
*/
type BackupEnableBackupOK struct {
	Payload models.Unit
}

func (o *BackupEnableBackupOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupOK  %+v", 200, o.Payload)
}
func (o *BackupEnableBackupOK) GetPayload() models.Unit {
	return o.Payload
}

func (o *BackupEnableBackupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupEnableBackupBadRequest creates a BackupEnableBackupBadRequest with default headers values
func NewBackupEnableBackupBadRequest() *BackupEnableBackupBadRequest {
	return &BackupEnableBackupBadRequest{}
}

/* BackupEnableBackupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BackupEnableBackupBadRequest struct {
	Payload *models.ValidationProblemDetails
}

func (o *BackupEnableBackupBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupBadRequest  %+v", 400, o.Payload)
}
func (o *BackupEnableBackupBadRequest) GetPayload() *models.ValidationProblemDetails {
	return o.Payload
}

func (o *BackupEnableBackupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupEnableBackupUnauthorized creates a BackupEnableBackupUnauthorized with default headers values
func NewBackupEnableBackupUnauthorized() *BackupEnableBackupUnauthorized {
	return &BackupEnableBackupUnauthorized{}
}

/* BackupEnableBackupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type BackupEnableBackupUnauthorized struct {
	Payload *models.ProblemDetails
}

func (o *BackupEnableBackupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupUnauthorized  %+v", 401, o.Payload)
}
func (o *BackupEnableBackupUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *BackupEnableBackupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupEnableBackupForbidden creates a BackupEnableBackupForbidden with default headers values
func NewBackupEnableBackupForbidden() *BackupEnableBackupForbidden {
	return &BackupEnableBackupForbidden{}
}

/* BackupEnableBackupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BackupEnableBackupForbidden struct {
	Payload *models.ProblemDetails
}

func (o *BackupEnableBackupForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupForbidden  %+v", 403, o.Payload)
}
func (o *BackupEnableBackupForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *BackupEnableBackupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupEnableBackupNotFound creates a BackupEnableBackupNotFound with default headers values
func NewBackupEnableBackupNotFound() *BackupEnableBackupNotFound {
	return &BackupEnableBackupNotFound{}
}

/* BackupEnableBackupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type BackupEnableBackupNotFound struct {
	Payload *models.ProblemDetails
}

func (o *BackupEnableBackupNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupNotFound  %+v", 404, o.Payload)
}
func (o *BackupEnableBackupNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *BackupEnableBackupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupEnableBackupInternalServerError creates a BackupEnableBackupInternalServerError with default headers values
func NewBackupEnableBackupInternalServerError() *BackupEnableBackupInternalServerError {
	return &BackupEnableBackupInternalServerError{}
}

/* BackupEnableBackupInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type BackupEnableBackupInternalServerError struct {
}

func (o *BackupEnableBackupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Backup/enablebackup][%d] backupEnableBackupInternalServerError ", 500)
}

func (o *BackupEnableBackupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
