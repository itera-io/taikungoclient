// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// BackupBackupByNameReader is a Reader for the BackupBackupByName structure.
type BackupBackupByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackupBackupByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBackupBackupByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBackupBackupByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBackupBackupByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBackupBackupByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBackupBackupByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBackupBackupByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBackupBackupByNameOK creates a BackupBackupByNameOK with default headers values
func NewBackupBackupByNameOK() *BackupBackupByNameOK {
	return &BackupBackupByNameOK{}
}

/*
BackupBackupByNameOK describes a response with status code 200, with default header values.

Success
*/
type BackupBackupByNameOK struct {
	Payload *models.BackupDto
}

// IsSuccess returns true when this backup backup by name o k response has a 2xx status code
func (o *BackupBackupByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this backup backup by name o k response has a 3xx status code
func (o *BackupBackupByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name o k response has a 4xx status code
func (o *BackupBackupByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this backup backup by name o k response has a 5xx status code
func (o *BackupBackupByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this backup backup by name o k response a status code equal to that given
func (o *BackupBackupByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the backup backup by name o k response
func (o *BackupBackupByNameOK) Code() int {
	return 200
}

func (o *BackupBackupByNameOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameOK  %+v", 200, o.Payload)
}

func (o *BackupBackupByNameOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameOK  %+v", 200, o.Payload)
}

func (o *BackupBackupByNameOK) GetPayload() *models.BackupDto {
	return o.Payload
}

func (o *BackupBackupByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BackupDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupBackupByNameBadRequest creates a BackupBackupByNameBadRequest with default headers values
func NewBackupBackupByNameBadRequest() *BackupBackupByNameBadRequest {
	return &BackupBackupByNameBadRequest{}
}

/*
BackupBackupByNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BackupBackupByNameBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this backup backup by name bad request response has a 2xx status code
func (o *BackupBackupByNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backup backup by name bad request response has a 3xx status code
func (o *BackupBackupByNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name bad request response has a 4xx status code
func (o *BackupBackupByNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this backup backup by name bad request response has a 5xx status code
func (o *BackupBackupByNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this backup backup by name bad request response a status code equal to that given
func (o *BackupBackupByNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the backup backup by name bad request response
func (o *BackupBackupByNameBadRequest) Code() int {
	return 400
}

func (o *BackupBackupByNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameBadRequest  %+v", 400, o.Payload)
}

func (o *BackupBackupByNameBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameBadRequest  %+v", 400, o.Payload)
}

func (o *BackupBackupByNameBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *BackupBackupByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupBackupByNameUnauthorized creates a BackupBackupByNameUnauthorized with default headers values
func NewBackupBackupByNameUnauthorized() *BackupBackupByNameUnauthorized {
	return &BackupBackupByNameUnauthorized{}
}

/*
BackupBackupByNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type BackupBackupByNameUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this backup backup by name unauthorized response has a 2xx status code
func (o *BackupBackupByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backup backup by name unauthorized response has a 3xx status code
func (o *BackupBackupByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name unauthorized response has a 4xx status code
func (o *BackupBackupByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this backup backup by name unauthorized response has a 5xx status code
func (o *BackupBackupByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this backup backup by name unauthorized response a status code equal to that given
func (o *BackupBackupByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the backup backup by name unauthorized response
func (o *BackupBackupByNameUnauthorized) Code() int {
	return 401
}

func (o *BackupBackupByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *BackupBackupByNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *BackupBackupByNameUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *BackupBackupByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupBackupByNameForbidden creates a BackupBackupByNameForbidden with default headers values
func NewBackupBackupByNameForbidden() *BackupBackupByNameForbidden {
	return &BackupBackupByNameForbidden{}
}

/*
BackupBackupByNameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BackupBackupByNameForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this backup backup by name forbidden response has a 2xx status code
func (o *BackupBackupByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backup backup by name forbidden response has a 3xx status code
func (o *BackupBackupByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name forbidden response has a 4xx status code
func (o *BackupBackupByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this backup backup by name forbidden response has a 5xx status code
func (o *BackupBackupByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this backup backup by name forbidden response a status code equal to that given
func (o *BackupBackupByNameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the backup backup by name forbidden response
func (o *BackupBackupByNameForbidden) Code() int {
	return 403
}

func (o *BackupBackupByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameForbidden  %+v", 403, o.Payload)
}

func (o *BackupBackupByNameForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameForbidden  %+v", 403, o.Payload)
}

func (o *BackupBackupByNameForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *BackupBackupByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupBackupByNameNotFound creates a BackupBackupByNameNotFound with default headers values
func NewBackupBackupByNameNotFound() *BackupBackupByNameNotFound {
	return &BackupBackupByNameNotFound{}
}

/*
BackupBackupByNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type BackupBackupByNameNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this backup backup by name not found response has a 2xx status code
func (o *BackupBackupByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backup backup by name not found response has a 3xx status code
func (o *BackupBackupByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name not found response has a 4xx status code
func (o *BackupBackupByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this backup backup by name not found response has a 5xx status code
func (o *BackupBackupByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this backup backup by name not found response a status code equal to that given
func (o *BackupBackupByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the backup backup by name not found response
func (o *BackupBackupByNameNotFound) Code() int {
	return 404
}

func (o *BackupBackupByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameNotFound  %+v", 404, o.Payload)
}

func (o *BackupBackupByNameNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameNotFound  %+v", 404, o.Payload)
}

func (o *BackupBackupByNameNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *BackupBackupByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupBackupByNameInternalServerError creates a BackupBackupByNameInternalServerError with default headers values
func NewBackupBackupByNameInternalServerError() *BackupBackupByNameInternalServerError {
	return &BackupBackupByNameInternalServerError{}
}

/*
BackupBackupByNameInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type BackupBackupByNameInternalServerError struct {
}

// IsSuccess returns true when this backup backup by name internal server error response has a 2xx status code
func (o *BackupBackupByNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backup backup by name internal server error response has a 3xx status code
func (o *BackupBackupByNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup backup by name internal server error response has a 4xx status code
func (o *BackupBackupByNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this backup backup by name internal server error response has a 5xx status code
func (o *BackupBackupByNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this backup backup by name internal server error response a status code equal to that given
func (o *BackupBackupByNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the backup backup by name internal server error response
func (o *BackupBackupByNameInternalServerError) Code() int {
	return 500
}

func (o *BackupBackupByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameInternalServerError ", 500)
}

func (o *BackupBackupByNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Backup/{projectId}/{name}][%d] backupBackupByNameInternalServerError ", 500)
}

func (o *BackupBackupByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
