/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the RuleLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleLabels{}

// RuleLabels struct for RuleLabels
type RuleLabels struct {
	Severity NullableString `json:"severity,omitempty"`
}

// NewRuleLabels instantiates a new RuleLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleLabels() *RuleLabels {
	this := RuleLabels{}
	return &this
}

// NewRuleLabelsWithDefaults instantiates a new RuleLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleLabelsWithDefaults() *RuleLabels {
	this := RuleLabels{}
	return &this
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleLabels) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleLabels) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *RuleLabels) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *RuleLabels) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *RuleLabels) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *RuleLabels) UnsetSeverity() {
	o.Severity.Unset()
}

func (o RuleLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	return toSerialize, nil
}

type NullableRuleLabels struct {
	value *RuleLabels
	isSet bool
}

func (v NullableRuleLabels) Get() *RuleLabels {
	return v.value
}

func (v *NullableRuleLabels) Set(val *RuleLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleLabels(val *RuleLabels) *NullableRuleLabels {
	return &NullableRuleLabels{value: val, isSet: true}
}

func (v NullableRuleLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


