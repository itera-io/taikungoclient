/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ZededaNetworkListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZededaNetworkListDto{}

// ZededaNetworkListDto struct for ZededaNetworkListDto
type ZededaNetworkListDto struct {
	Bridge NullableString `json:"bridge"`
	Gateway string `json:"gateway"`
	IpAddress string `json:"ipAddress"`
	NetMask int32 `json:"netMask"`
	BeginAllocationRange string `json:"beginAllocationRange"`
	EndAllocationRange string `json:"endAllocationRange"`
	IsPrivate bool `json:"isPrivate"`
	IsVirtualLbNetwork bool `json:"isVirtualLbNetwork"`
	VlanId NullableInt32 `json:"vlanId"`
}

type _ZededaNetworkListDto ZededaNetworkListDto

// NewZededaNetworkListDto instantiates a new ZededaNetworkListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZededaNetworkListDto(bridge NullableString, gateway string, ipAddress string, netMask int32, beginAllocationRange string, endAllocationRange string, isPrivate bool, isVirtualLbNetwork bool, vlanId NullableInt32) *ZededaNetworkListDto {
	this := ZededaNetworkListDto{}
	this.Bridge = bridge
	this.Gateway = gateway
	this.IpAddress = ipAddress
	this.NetMask = netMask
	this.BeginAllocationRange = beginAllocationRange
	this.EndAllocationRange = endAllocationRange
	this.IsPrivate = isPrivate
	this.IsVirtualLbNetwork = isVirtualLbNetwork
	this.VlanId = vlanId
	return &this
}

// NewZededaNetworkListDtoWithDefaults instantiates a new ZededaNetworkListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZededaNetworkListDtoWithDefaults() *ZededaNetworkListDto {
	this := ZededaNetworkListDto{}
	return &this
}

// GetBridge returns the Bridge field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ZededaNetworkListDto) GetBridge() string {
	if o == nil || o.Bridge.Get() == nil {
		var ret string
		return ret
	}

	return *o.Bridge.Get()
}

// GetBridgeOk returns a tuple with the Bridge field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZededaNetworkListDto) GetBridgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bridge.Get(), o.Bridge.IsSet()
}

// SetBridge sets field value
func (o *ZededaNetworkListDto) SetBridge(v string) {
	o.Bridge.Set(&v)
}

// GetGateway returns the Gateway field value
func (o *ZededaNetworkListDto) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *ZededaNetworkListDto) SetGateway(v string) {
	o.Gateway = v
}

// GetIpAddress returns the IpAddress field value
func (o *ZededaNetworkListDto) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *ZededaNetworkListDto) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetNetMask returns the NetMask field value
func (o *ZededaNetworkListDto) GetNetMask() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NetMask
}

// GetNetMaskOk returns a tuple with the NetMask field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetNetMaskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetMask, true
}

// SetNetMask sets field value
func (o *ZededaNetworkListDto) SetNetMask(v int32) {
	o.NetMask = v
}

// GetBeginAllocationRange returns the BeginAllocationRange field value
func (o *ZededaNetworkListDto) GetBeginAllocationRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeginAllocationRange
}

// GetBeginAllocationRangeOk returns a tuple with the BeginAllocationRange field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetBeginAllocationRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeginAllocationRange, true
}

// SetBeginAllocationRange sets field value
func (o *ZededaNetworkListDto) SetBeginAllocationRange(v string) {
	o.BeginAllocationRange = v
}

// GetEndAllocationRange returns the EndAllocationRange field value
func (o *ZededaNetworkListDto) GetEndAllocationRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndAllocationRange
}

// GetEndAllocationRangeOk returns a tuple with the EndAllocationRange field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetEndAllocationRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndAllocationRange, true
}

// SetEndAllocationRange sets field value
func (o *ZededaNetworkListDto) SetEndAllocationRange(v string) {
	o.EndAllocationRange = v
}

// GetIsPrivate returns the IsPrivate field value
func (o *ZededaNetworkListDto) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *ZededaNetworkListDto) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsVirtualLbNetwork returns the IsVirtualLbNetwork field value
func (o *ZededaNetworkListDto) GetIsVirtualLbNetwork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsVirtualLbNetwork
}

// GetIsVirtualLbNetworkOk returns a tuple with the IsVirtualLbNetwork field value
// and a boolean to check if the value has been set.
func (o *ZededaNetworkListDto) GetIsVirtualLbNetworkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVirtualLbNetwork, true
}

// SetIsVirtualLbNetwork sets field value
func (o *ZededaNetworkListDto) SetIsVirtualLbNetwork(v bool) {
	o.IsVirtualLbNetwork = v
}

// GetVlanId returns the VlanId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ZededaNetworkListDto) GetVlanId() int32 {
	if o == nil || o.VlanId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.VlanId.Get()
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZededaNetworkListDto) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanId.Get(), o.VlanId.IsSet()
}

// SetVlanId sets field value
func (o *ZededaNetworkListDto) SetVlanId(v int32) {
	o.VlanId.Set(&v)
}

func (o ZededaNetworkListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZededaNetworkListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bridge"] = o.Bridge.Get()
	toSerialize["gateway"] = o.Gateway
	toSerialize["ipAddress"] = o.IpAddress
	toSerialize["netMask"] = o.NetMask
	toSerialize["beginAllocationRange"] = o.BeginAllocationRange
	toSerialize["endAllocationRange"] = o.EndAllocationRange
	toSerialize["isPrivate"] = o.IsPrivate
	toSerialize["isVirtualLbNetwork"] = o.IsVirtualLbNetwork
	toSerialize["vlanId"] = o.VlanId.Get()
	return toSerialize, nil
}

func (o *ZededaNetworkListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bridge",
		"gateway",
		"ipAddress",
		"netMask",
		"beginAllocationRange",
		"endAllocationRange",
		"isPrivate",
		"isVirtualLbNetwork",
		"vlanId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZededaNetworkListDto := _ZededaNetworkListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZededaNetworkListDto)

	if err != nil {
		return err
	}

	*o = ZededaNetworkListDto(varZededaNetworkListDto)

	return err
}

type NullableZededaNetworkListDto struct {
	value *ZededaNetworkListDto
	isSet bool
}

func (v NullableZededaNetworkListDto) Get() *ZededaNetworkListDto {
	return v.value
}

func (v *NullableZededaNetworkListDto) Set(val *ZededaNetworkListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableZededaNetworkListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableZededaNetworkListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZededaNetworkListDto(val *ZededaNetworkListDto) *NullableZededaNetworkListDto {
	return &NullableZededaNetworkListDto{value: val, isSet: true}
}

func (v NullableZededaNetworkListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZededaNetworkListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


