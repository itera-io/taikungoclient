/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	Name *string `json:"name,omitempty"`
	File *string `json:"file,omitempty"`
	Rules []Rule `json:"rules,omitempty"`
	Interval *int64 `json:"interval,omitempty"`
	EvaluationTime *float64 `json:"evaluationTime,omitempty"`
	LastEvaluation *time.Time `json:"lastEvaluation,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *Group) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *Group) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *Group) SetFile(v string) {
	o.File = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *Group) GetRules() []Rule {
	if o == nil || IsNil(o.Rules) {
		var ret []Rule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRulesOk() ([]Rule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *Group) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []Rule and assigns it to the Rules field.
func (o *Group) SetRules(v []Rule) {
	o.Rules = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *Group) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *Group) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *Group) SetInterval(v int64) {
	o.Interval = &v
}

// GetEvaluationTime returns the EvaluationTime field value if set, zero value otherwise.
func (o *Group) GetEvaluationTime() float64 {
	if o == nil || IsNil(o.EvaluationTime) {
		var ret float64
		return ret
	}
	return *o.EvaluationTime
}

// GetEvaluationTimeOk returns a tuple with the EvaluationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetEvaluationTimeOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluationTime) {
		return nil, false
	}
	return o.EvaluationTime, true
}

// HasEvaluationTime returns a boolean if a field has been set.
func (o *Group) HasEvaluationTime() bool {
	if o != nil && !IsNil(o.EvaluationTime) {
		return true
	}

	return false
}

// SetEvaluationTime gets a reference to the given float64 and assigns it to the EvaluationTime field.
func (o *Group) SetEvaluationTime(v float64) {
	o.EvaluationTime = &v
}

// GetLastEvaluation returns the LastEvaluation field value if set, zero value otherwise.
func (o *Group) GetLastEvaluation() time.Time {
	if o == nil || IsNil(o.LastEvaluation) {
		var ret time.Time
		return ret
	}
	return *o.LastEvaluation
}

// GetLastEvaluationOk returns a tuple with the LastEvaluation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetLastEvaluationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastEvaluation) {
		return nil, false
	}
	return o.LastEvaluation, true
}

// HasLastEvaluation returns a boolean if a field has been set.
func (o *Group) HasLastEvaluation() bool {
	if o != nil && !IsNil(o.LastEvaluation) {
		return true
	}

	return false
}

// SetLastEvaluation gets a reference to the given time.Time and assigns it to the LastEvaluation field.
func (o *Group) SetLastEvaluation(v time.Time) {
	o.LastEvaluation = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.EvaluationTime) {
		toSerialize["evaluationTime"] = o.EvaluationTime
	}
	if !IsNil(o.LastEvaluation) {
		toSerialize["lastEvaluation"] = o.LastEvaluation
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


