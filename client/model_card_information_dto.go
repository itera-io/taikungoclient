/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CardInformationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardInformationDto{}

// CardInformationDto struct for CardInformationDto
type CardInformationDto struct {
	ExpirationMonth NullableString `json:"expirationMonth"`
	ExpirationYear NullableString `json:"expirationYear"`
	Last4 NullableString `json:"last4"`
	Brand NullableString `json:"brand"`
	HolderName NullableString `json:"holderName"`
	Balance int64 `json:"balance"`
}

type _CardInformationDto CardInformationDto

// NewCardInformationDto instantiates a new CardInformationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardInformationDto(expirationMonth NullableString, expirationYear NullableString, last4 NullableString, brand NullableString, holderName NullableString, balance int64) *CardInformationDto {
	this := CardInformationDto{}
	this.ExpirationMonth = expirationMonth
	this.ExpirationYear = expirationYear
	this.Last4 = last4
	this.Brand = brand
	this.HolderName = holderName
	this.Balance = balance
	return &this
}

// NewCardInformationDtoWithDefaults instantiates a new CardInformationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardInformationDtoWithDefaults() *CardInformationDto {
	this := CardInformationDto{}
	return &this
}

// GetExpirationMonth returns the ExpirationMonth field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CardInformationDto) GetExpirationMonth() string {
	if o == nil || o.ExpirationMonth.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpirationMonth.Get()
}

// GetExpirationMonthOk returns a tuple with the ExpirationMonth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardInformationDto) GetExpirationMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationMonth.Get(), o.ExpirationMonth.IsSet()
}

// SetExpirationMonth sets field value
func (o *CardInformationDto) SetExpirationMonth(v string) {
	o.ExpirationMonth.Set(&v)
}

// GetExpirationYear returns the ExpirationYear field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CardInformationDto) GetExpirationYear() string {
	if o == nil || o.ExpirationYear.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpirationYear.Get()
}

// GetExpirationYearOk returns a tuple with the ExpirationYear field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardInformationDto) GetExpirationYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationYear.Get(), o.ExpirationYear.IsSet()
}

// SetExpirationYear sets field value
func (o *CardInformationDto) SetExpirationYear(v string) {
	o.ExpirationYear.Set(&v)
}

// GetLast4 returns the Last4 field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CardInformationDto) GetLast4() string {
	if o == nil || o.Last4.Get() == nil {
		var ret string
		return ret
	}

	return *o.Last4.Get()
}

// GetLast4Ok returns a tuple with the Last4 field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardInformationDto) GetLast4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Last4.Get(), o.Last4.IsSet()
}

// SetLast4 sets field value
func (o *CardInformationDto) SetLast4(v string) {
	o.Last4.Set(&v)
}

// GetBrand returns the Brand field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CardInformationDto) GetBrand() string {
	if o == nil || o.Brand.Get() == nil {
		var ret string
		return ret
	}

	return *o.Brand.Get()
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardInformationDto) GetBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Brand.Get(), o.Brand.IsSet()
}

// SetBrand sets field value
func (o *CardInformationDto) SetBrand(v string) {
	o.Brand.Set(&v)
}

// GetHolderName returns the HolderName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CardInformationDto) GetHolderName() string {
	if o == nil || o.HolderName.Get() == nil {
		var ret string
		return ret
	}

	return *o.HolderName.Get()
}

// GetHolderNameOk returns a tuple with the HolderName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardInformationDto) GetHolderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HolderName.Get(), o.HolderName.IsSet()
}

// SetHolderName sets field value
func (o *CardInformationDto) SetHolderName(v string) {
	o.HolderName.Set(&v)
}

// GetBalance returns the Balance field value
func (o *CardInformationDto) GetBalance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetBalanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *CardInformationDto) SetBalance(v int64) {
	o.Balance = v
}

func (o CardInformationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardInformationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expirationMonth"] = o.ExpirationMonth.Get()
	toSerialize["expirationYear"] = o.ExpirationYear.Get()
	toSerialize["last4"] = o.Last4.Get()
	toSerialize["brand"] = o.Brand.Get()
	toSerialize["holderName"] = o.HolderName.Get()
	toSerialize["balance"] = o.Balance
	return toSerialize, nil
}

func (o *CardInformationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expirationMonth",
		"expirationYear",
		"last4",
		"brand",
		"holderName",
		"balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardInformationDto := _CardInformationDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardInformationDto)

	if err != nil {
		return err
	}

	*o = CardInformationDto(varCardInformationDto)

	return err
}

type NullableCardInformationDto struct {
	value *CardInformationDto
	isSet bool
}

func (v NullableCardInformationDto) Get() *CardInformationDto {
	return v.value
}

func (v *NullableCardInformationDto) Set(val *CardInformationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCardInformationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCardInformationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardInformationDto(val *CardInformationDto) *NullableCardInformationDto {
	return &NullableCardInformationDto{value: val, isSet: true}
}

func (v NullableCardInformationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardInformationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


