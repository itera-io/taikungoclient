/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CardInformationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardInformationDto{}

// CardInformationDto struct for CardInformationDto
type CardInformationDto struct {
	ExpirationMonth *string `json:"expirationMonth,omitempty"`
	ExpirationYear *string `json:"expirationYear,omitempty"`
	Last4 *string `json:"last4,omitempty"`
	Brand *string `json:"brand,omitempty"`
	HolderName *string `json:"holderName,omitempty"`
	Balance *int64 `json:"balance,omitempty"`
}

// NewCardInformationDto instantiates a new CardInformationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardInformationDto() *CardInformationDto {
	this := CardInformationDto{}
	return &this
}

// NewCardInformationDtoWithDefaults instantiates a new CardInformationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardInformationDtoWithDefaults() *CardInformationDto {
	this := CardInformationDto{}
	return &this
}

// GetExpirationMonth returns the ExpirationMonth field value if set, zero value otherwise.
func (o *CardInformationDto) GetExpirationMonth() string {
	if o == nil || IsNil(o.ExpirationMonth) {
		var ret string
		return ret
	}
	return *o.ExpirationMonth
}

// GetExpirationMonthOk returns a tuple with the ExpirationMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetExpirationMonthOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationMonth) {
		return nil, false
	}
	return o.ExpirationMonth, true
}

// HasExpirationMonth returns a boolean if a field has been set.
func (o *CardInformationDto) HasExpirationMonth() bool {
	if o != nil && !IsNil(o.ExpirationMonth) {
		return true
	}

	return false
}

// SetExpirationMonth gets a reference to the given string and assigns it to the ExpirationMonth field.
func (o *CardInformationDto) SetExpirationMonth(v string) {
	o.ExpirationMonth = &v
}

// GetExpirationYear returns the ExpirationYear field value if set, zero value otherwise.
func (o *CardInformationDto) GetExpirationYear() string {
	if o == nil || IsNil(o.ExpirationYear) {
		var ret string
		return ret
	}
	return *o.ExpirationYear
}

// GetExpirationYearOk returns a tuple with the ExpirationYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetExpirationYearOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationYear) {
		return nil, false
	}
	return o.ExpirationYear, true
}

// HasExpirationYear returns a boolean if a field has been set.
func (o *CardInformationDto) HasExpirationYear() bool {
	if o != nil && !IsNil(o.ExpirationYear) {
		return true
	}

	return false
}

// SetExpirationYear gets a reference to the given string and assigns it to the ExpirationYear field.
func (o *CardInformationDto) SetExpirationYear(v string) {
	o.ExpirationYear = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *CardInformationDto) GetLast4() string {
	if o == nil || IsNil(o.Last4) {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetLast4Ok() (*string, bool) {
	if o == nil || IsNil(o.Last4) {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *CardInformationDto) HasLast4() bool {
	if o != nil && !IsNil(o.Last4) {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *CardInformationDto) SetLast4(v string) {
	o.Last4 = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *CardInformationDto) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *CardInformationDto) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *CardInformationDto) SetBrand(v string) {
	o.Brand = &v
}

// GetHolderName returns the HolderName field value if set, zero value otherwise.
func (o *CardInformationDto) GetHolderName() string {
	if o == nil || IsNil(o.HolderName) {
		var ret string
		return ret
	}
	return *o.HolderName
}

// GetHolderNameOk returns a tuple with the HolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetHolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.HolderName) {
		return nil, false
	}
	return o.HolderName, true
}

// HasHolderName returns a boolean if a field has been set.
func (o *CardInformationDto) HasHolderName() bool {
	if o != nil && !IsNil(o.HolderName) {
		return true
	}

	return false
}

// SetHolderName gets a reference to the given string and assigns it to the HolderName field.
func (o *CardInformationDto) SetHolderName(v string) {
	o.HolderName = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *CardInformationDto) GetBalance() int64 {
	if o == nil || IsNil(o.Balance) {
		var ret int64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardInformationDto) GetBalanceOk() (*int64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *CardInformationDto) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given int64 and assigns it to the Balance field.
func (o *CardInformationDto) SetBalance(v int64) {
	o.Balance = &v
}

func (o CardInformationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardInformationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationMonth) {
		toSerialize["expirationMonth"] = o.ExpirationMonth
	}
	if !IsNil(o.ExpirationYear) {
		toSerialize["expirationYear"] = o.ExpirationYear
	}
	if !IsNil(o.Last4) {
		toSerialize["last4"] = o.Last4
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.HolderName) {
		toSerialize["holderName"] = o.HolderName
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableCardInformationDto struct {
	value *CardInformationDto
	isSet bool
}

func (v NullableCardInformationDto) Get() *CardInformationDto {
	return v.value
}

func (v *NullableCardInformationDto) Set(val *CardInformationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCardInformationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCardInformationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardInformationDto(val *CardInformationDto) *NullableCardInformationDto {
	return &NullableCardInformationDto{value: val, isSet: true}
}

func (v NullableCardInformationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardInformationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


