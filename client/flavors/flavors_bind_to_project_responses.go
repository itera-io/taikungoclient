// Code generated by go-swagger; DO NOT EDIT.

package flavors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlavorsBindToProjectReader is a Reader for the FlavorsBindToProject structure.
type FlavorsBindToProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FlavorsBindToProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFlavorsBindToProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFlavorsBindToProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFlavorsBindToProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFlavorsBindToProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFlavorsBindToProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFlavorsBindToProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFlavorsBindToProjectOK creates a FlavorsBindToProjectOK with default headers values
func NewFlavorsBindToProjectOK() *FlavorsBindToProjectOK {
	return &FlavorsBindToProjectOK{}
}

/*
FlavorsBindToProjectOK describes a response with status code 200, with default header values.

Success
*/
type FlavorsBindToProjectOK struct {
	Payload interface{}
}

// IsSuccess returns true when this flavors bind to project o k response has a 2xx status code
func (o *FlavorsBindToProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this flavors bind to project o k response has a 3xx status code
func (o *FlavorsBindToProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project o k response has a 4xx status code
func (o *FlavorsBindToProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors bind to project o k response has a 5xx status code
func (o *FlavorsBindToProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors bind to project o k response a status code equal to that given
func (o *FlavorsBindToProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *FlavorsBindToProjectOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectOK  %+v", 200, o.Payload)
}

func (o *FlavorsBindToProjectOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectOK  %+v", 200, o.Payload)
}

func (o *FlavorsBindToProjectOK) GetPayload() interface{} {
	return o.Payload
}

func (o *FlavorsBindToProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsBindToProjectBadRequest creates a FlavorsBindToProjectBadRequest with default headers values
func NewFlavorsBindToProjectBadRequest() *FlavorsBindToProjectBadRequest {
	return &FlavorsBindToProjectBadRequest{}
}

/*
FlavorsBindToProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FlavorsBindToProjectBadRequest struct {
	Payload []*FlavorsBindToProjectBadRequestBodyItems0
}

// IsSuccess returns true when this flavors bind to project bad request response has a 2xx status code
func (o *FlavorsBindToProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors bind to project bad request response has a 3xx status code
func (o *FlavorsBindToProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project bad request response has a 4xx status code
func (o *FlavorsBindToProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors bind to project bad request response has a 5xx status code
func (o *FlavorsBindToProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors bind to project bad request response a status code equal to that given
func (o *FlavorsBindToProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FlavorsBindToProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsBindToProjectBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsBindToProjectBadRequest) GetPayload() []*FlavorsBindToProjectBadRequestBodyItems0 {
	return o.Payload
}

func (o *FlavorsBindToProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsBindToProjectUnauthorized creates a FlavorsBindToProjectUnauthorized with default headers values
func NewFlavorsBindToProjectUnauthorized() *FlavorsBindToProjectUnauthorized {
	return &FlavorsBindToProjectUnauthorized{}
}

/*
FlavorsBindToProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FlavorsBindToProjectUnauthorized struct {
	Payload *FlavorsBindToProjectUnauthorizedBody
}

// IsSuccess returns true when this flavors bind to project unauthorized response has a 2xx status code
func (o *FlavorsBindToProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors bind to project unauthorized response has a 3xx status code
func (o *FlavorsBindToProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project unauthorized response has a 4xx status code
func (o *FlavorsBindToProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors bind to project unauthorized response has a 5xx status code
func (o *FlavorsBindToProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors bind to project unauthorized response a status code equal to that given
func (o *FlavorsBindToProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FlavorsBindToProjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsBindToProjectUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsBindToProjectUnauthorized) GetPayload() *FlavorsBindToProjectUnauthorizedBody {
	return o.Payload
}

func (o *FlavorsBindToProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsBindToProjectUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsBindToProjectForbidden creates a FlavorsBindToProjectForbidden with default headers values
func NewFlavorsBindToProjectForbidden() *FlavorsBindToProjectForbidden {
	return &FlavorsBindToProjectForbidden{}
}

/*
FlavorsBindToProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FlavorsBindToProjectForbidden struct {
	Payload *FlavorsBindToProjectForbiddenBody
}

// IsSuccess returns true when this flavors bind to project forbidden response has a 2xx status code
func (o *FlavorsBindToProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors bind to project forbidden response has a 3xx status code
func (o *FlavorsBindToProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project forbidden response has a 4xx status code
func (o *FlavorsBindToProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors bind to project forbidden response has a 5xx status code
func (o *FlavorsBindToProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors bind to project forbidden response a status code equal to that given
func (o *FlavorsBindToProjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FlavorsBindToProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsBindToProjectForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsBindToProjectForbidden) GetPayload() *FlavorsBindToProjectForbiddenBody {
	return o.Payload
}

func (o *FlavorsBindToProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsBindToProjectForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsBindToProjectNotFound creates a FlavorsBindToProjectNotFound with default headers values
func NewFlavorsBindToProjectNotFound() *FlavorsBindToProjectNotFound {
	return &FlavorsBindToProjectNotFound{}
}

/*
FlavorsBindToProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FlavorsBindToProjectNotFound struct {
	Payload *FlavorsBindToProjectNotFoundBody
}

// IsSuccess returns true when this flavors bind to project not found response has a 2xx status code
func (o *FlavorsBindToProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors bind to project not found response has a 3xx status code
func (o *FlavorsBindToProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project not found response has a 4xx status code
func (o *FlavorsBindToProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors bind to project not found response has a 5xx status code
func (o *FlavorsBindToProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors bind to project not found response a status code equal to that given
func (o *FlavorsBindToProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *FlavorsBindToProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsBindToProjectNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsBindToProjectNotFound) GetPayload() *FlavorsBindToProjectNotFoundBody {
	return o.Payload
}

func (o *FlavorsBindToProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsBindToProjectNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsBindToProjectInternalServerError creates a FlavorsBindToProjectInternalServerError with default headers values
func NewFlavorsBindToProjectInternalServerError() *FlavorsBindToProjectInternalServerError {
	return &FlavorsBindToProjectInternalServerError{}
}

/*
FlavorsBindToProjectInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FlavorsBindToProjectInternalServerError struct {
}

// IsSuccess returns true when this flavors bind to project internal server error response has a 2xx status code
func (o *FlavorsBindToProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors bind to project internal server error response has a 3xx status code
func (o *FlavorsBindToProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors bind to project internal server error response has a 4xx status code
func (o *FlavorsBindToProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors bind to project internal server error response has a 5xx status code
func (o *FlavorsBindToProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this flavors bind to project internal server error response a status code equal to that given
func (o *FlavorsBindToProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FlavorsBindToProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectInternalServerError ", 500)
}

func (o *FlavorsBindToProjectInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Flavors/bind][%d] flavorsBindToProjectInternalServerError ", 500)
}

func (o *FlavorsBindToProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
FlavorsBindToProjectBadRequestBodyItems0 flavors bind to project bad request body items0
swagger:model FlavorsBindToProjectBadRequestBodyItems0
*/
type FlavorsBindToProjectBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this flavors bind to project bad request body items0
func (o *FlavorsBindToProjectBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors bind to project bad request body items0 based on context it is used
func (o *FlavorsBindToProjectBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsBindToProjectBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsBindToProjectBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsBindToProjectBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsBindToProjectBody flavors bind to project body
swagger:model FlavorsBindToProjectBody
*/
type FlavorsBindToProjectBody struct {

	// flavors
	Flavors []string `json:"flavors"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`
}

// Validate validates this flavors bind to project body
func (o *FlavorsBindToProjectBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors bind to project body based on context it is used
func (o *FlavorsBindToProjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsBindToProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsBindToProjectBody) UnmarshalBinary(b []byte) error {
	var res FlavorsBindToProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsBindToProjectForbiddenBody flavors bind to project forbidden body
swagger:model FlavorsBindToProjectForbiddenBody
*/
type FlavorsBindToProjectForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors bind to project forbidden body
func (o *FlavorsBindToProjectForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors bind to project forbidden body based on context it is used
func (o *FlavorsBindToProjectForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsBindToProjectForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsBindToProjectForbiddenBody) UnmarshalBinary(b []byte) error {
	var res FlavorsBindToProjectForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsBindToProjectNotFoundBody flavors bind to project not found body
swagger:model FlavorsBindToProjectNotFoundBody
*/
type FlavorsBindToProjectNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors bind to project not found body
func (o *FlavorsBindToProjectNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors bind to project not found body based on context it is used
func (o *FlavorsBindToProjectNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsBindToProjectNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsBindToProjectNotFoundBody) UnmarshalBinary(b []byte) error {
	var res FlavorsBindToProjectNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsBindToProjectUnauthorizedBody flavors bind to project unauthorized body
swagger:model FlavorsBindToProjectUnauthorizedBody
*/
type FlavorsBindToProjectUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors bind to project unauthorized body
func (o *FlavorsBindToProjectUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors bind to project unauthorized body based on context it is used
func (o *FlavorsBindToProjectUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsBindToProjectUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsBindToProjectUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res FlavorsBindToProjectUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
