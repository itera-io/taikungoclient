// Code generated by go-swagger; DO NOT EDIT.

package flavors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlavorsGetSelectedFlavorsForProjectReader is a Reader for the FlavorsGetSelectedFlavorsForProject structure.
type FlavorsGetSelectedFlavorsForProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FlavorsGetSelectedFlavorsForProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFlavorsGetSelectedFlavorsForProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFlavorsGetSelectedFlavorsForProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFlavorsGetSelectedFlavorsForProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFlavorsGetSelectedFlavorsForProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFlavorsGetSelectedFlavorsForProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFlavorsGetSelectedFlavorsForProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFlavorsGetSelectedFlavorsForProjectOK creates a FlavorsGetSelectedFlavorsForProjectOK with default headers values
func NewFlavorsGetSelectedFlavorsForProjectOK() *FlavorsGetSelectedFlavorsForProjectOK {
	return &FlavorsGetSelectedFlavorsForProjectOK{}
}

/*
FlavorsGetSelectedFlavorsForProjectOK describes a response with status code 200, with default header values.

Success
*/
type FlavorsGetSelectedFlavorsForProjectOK struct {
	Payload *FlavorsGetSelectedFlavorsForProjectOKBody
}

// IsSuccess returns true when this flavors get selected flavors for project o k response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this flavors get selected flavors for project o k response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project o k response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors get selected flavors for project o k response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors get selected flavors for project o k response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *FlavorsGetSelectedFlavorsForProjectOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectOK  %+v", 200, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectOK  %+v", 200, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectOK) GetPayload() *FlavorsGetSelectedFlavorsForProjectOKBody {
	return o.Payload
}

func (o *FlavorsGetSelectedFlavorsForProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGetSelectedFlavorsForProjectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGetSelectedFlavorsForProjectBadRequest creates a FlavorsGetSelectedFlavorsForProjectBadRequest with default headers values
func NewFlavorsGetSelectedFlavorsForProjectBadRequest() *FlavorsGetSelectedFlavorsForProjectBadRequest {
	return &FlavorsGetSelectedFlavorsForProjectBadRequest{}
}

/*
FlavorsGetSelectedFlavorsForProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FlavorsGetSelectedFlavorsForProjectBadRequest struct {
	Payload []*FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0
}

// IsSuccess returns true when this flavors get selected flavors for project bad request response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors get selected flavors for project bad request response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project bad request response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors get selected flavors for project bad request response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors get selected flavors for project bad request response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) GetPayload() []*FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0 {
	return o.Payload
}

func (o *FlavorsGetSelectedFlavorsForProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGetSelectedFlavorsForProjectUnauthorized creates a FlavorsGetSelectedFlavorsForProjectUnauthorized with default headers values
func NewFlavorsGetSelectedFlavorsForProjectUnauthorized() *FlavorsGetSelectedFlavorsForProjectUnauthorized {
	return &FlavorsGetSelectedFlavorsForProjectUnauthorized{}
}

/*
FlavorsGetSelectedFlavorsForProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FlavorsGetSelectedFlavorsForProjectUnauthorized struct {
	Payload *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody
}

// IsSuccess returns true when this flavors get selected flavors for project unauthorized response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors get selected flavors for project unauthorized response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project unauthorized response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors get selected flavors for project unauthorized response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors get selected flavors for project unauthorized response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) GetPayload() *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody {
	return o.Payload
}

func (o *FlavorsGetSelectedFlavorsForProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGetSelectedFlavorsForProjectUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGetSelectedFlavorsForProjectForbidden creates a FlavorsGetSelectedFlavorsForProjectForbidden with default headers values
func NewFlavorsGetSelectedFlavorsForProjectForbidden() *FlavorsGetSelectedFlavorsForProjectForbidden {
	return &FlavorsGetSelectedFlavorsForProjectForbidden{}
}

/*
FlavorsGetSelectedFlavorsForProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FlavorsGetSelectedFlavorsForProjectForbidden struct {
	Payload *FlavorsGetSelectedFlavorsForProjectForbiddenBody
}

// IsSuccess returns true when this flavors get selected flavors for project forbidden response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors get selected flavors for project forbidden response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project forbidden response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors get selected flavors for project forbidden response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors get selected flavors for project forbidden response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FlavorsGetSelectedFlavorsForProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectForbidden) GetPayload() *FlavorsGetSelectedFlavorsForProjectForbiddenBody {
	return o.Payload
}

func (o *FlavorsGetSelectedFlavorsForProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGetSelectedFlavorsForProjectForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGetSelectedFlavorsForProjectNotFound creates a FlavorsGetSelectedFlavorsForProjectNotFound with default headers values
func NewFlavorsGetSelectedFlavorsForProjectNotFound() *FlavorsGetSelectedFlavorsForProjectNotFound {
	return &FlavorsGetSelectedFlavorsForProjectNotFound{}
}

/*
FlavorsGetSelectedFlavorsForProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FlavorsGetSelectedFlavorsForProjectNotFound struct {
	Payload *FlavorsGetSelectedFlavorsForProjectNotFoundBody
}

// IsSuccess returns true when this flavors get selected flavors for project not found response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors get selected flavors for project not found response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project not found response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors get selected flavors for project not found response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors get selected flavors for project not found response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *FlavorsGetSelectedFlavorsForProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsGetSelectedFlavorsForProjectNotFound) GetPayload() *FlavorsGetSelectedFlavorsForProjectNotFoundBody {
	return o.Payload
}

func (o *FlavorsGetSelectedFlavorsForProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGetSelectedFlavorsForProjectNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGetSelectedFlavorsForProjectInternalServerError creates a FlavorsGetSelectedFlavorsForProjectInternalServerError with default headers values
func NewFlavorsGetSelectedFlavorsForProjectInternalServerError() *FlavorsGetSelectedFlavorsForProjectInternalServerError {
	return &FlavorsGetSelectedFlavorsForProjectInternalServerError{}
}

/*
FlavorsGetSelectedFlavorsForProjectInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FlavorsGetSelectedFlavorsForProjectInternalServerError struct {
}

// IsSuccess returns true when this flavors get selected flavors for project internal server error response has a 2xx status code
func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors get selected flavors for project internal server error response has a 3xx status code
func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors get selected flavors for project internal server error response has a 4xx status code
func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors get selected flavors for project internal server error response has a 5xx status code
func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this flavors get selected flavors for project internal server error response a status code equal to that given
func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectInternalServerError ", 500)
}

func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/projects/list][%d] flavorsGetSelectedFlavorsForProjectInternalServerError ", 500)
}

func (o *FlavorsGetSelectedFlavorsForProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0 flavors get selected flavors for project bad request body items0
swagger:model FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0
*/
type FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this flavors get selected flavors for project bad request body items0
func (o *FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors get selected flavors for project bad request body items0 based on context it is used
func (o *FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectForbiddenBody flavors get selected flavors for project forbidden body
swagger:model FlavorsGetSelectedFlavorsForProjectForbiddenBody
*/
type FlavorsGetSelectedFlavorsForProjectForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors get selected flavors for project forbidden body
func (o *FlavorsGetSelectedFlavorsForProjectForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors get selected flavors for project forbidden body based on context it is used
func (o *FlavorsGetSelectedFlavorsForProjectForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectForbiddenBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectNotFoundBody flavors get selected flavors for project not found body
swagger:model FlavorsGetSelectedFlavorsForProjectNotFoundBody
*/
type FlavorsGetSelectedFlavorsForProjectNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors get selected flavors for project not found body
func (o *FlavorsGetSelectedFlavorsForProjectNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors get selected flavors for project not found body based on context it is used
func (o *FlavorsGetSelectedFlavorsForProjectNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectNotFoundBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectOKBody flavors get selected flavors for project o k body
swagger:model FlavorsGetSelectedFlavorsForProjectOKBody
*/
type FlavorsGetSelectedFlavorsForProjectOKBody struct {

	// data
	Data []*FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this flavors get selected flavors for project o k body
func (o *FlavorsGetSelectedFlavorsForProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsGetSelectedFlavorsForProjectOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsGetSelectedFlavorsForProjectOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsGetSelectedFlavorsForProjectOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this flavors get selected flavors for project o k body based on the context it is used
func (o *FlavorsGetSelectedFlavorsForProjectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsGetSelectedFlavorsForProjectOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsGetSelectedFlavorsForProjectOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsGetSelectedFlavorsForProjectOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectOKBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0 flavors get selected flavors for project o k body data items0
swagger:model FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0
*/
type FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0 struct {

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// has linux spot price
	HasLinuxSpotPrice bool `json:"hasLinuxSpotPrice"`

	// has windows spot price
	HasWindowsSpotPrice bool `json:"hasWindowsSpotPrice"`

	// id
	ID int32 `json:"id,omitempty"`

	// is aws
	IsAws bool `json:"isAws"`

	// is azure
	IsAzure bool `json:"isAzure"`

	// is openstack
	IsOpenstack bool `json:"isOpenstack"`

	// linux price
	LinuxPrice string `json:"linuxPrice,omitempty"`

	// linux spot price
	LinuxSpotPrice string `json:"linuxSpotPrice,omitempty"`

	// max data disk count
	MaxDataDiskCount int32 `json:"maxDataDiskCount,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// windows price
	WindowsPrice string `json:"windowsPrice,omitempty"`

	// windows spot price
	WindowsSpotPrice string `json:"windowsSpotPrice,omitempty"`
}

// Validate validates this flavors get selected flavors for project o k body data items0
func (o *FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors get selected flavors for project o k body data items0 based on context it is used
func (o *FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGetSelectedFlavorsForProjectUnauthorizedBody flavors get selected flavors for project unauthorized body
swagger:model FlavorsGetSelectedFlavorsForProjectUnauthorizedBody
*/
type FlavorsGetSelectedFlavorsForProjectUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors get selected flavors for project unauthorized body
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors get selected flavors for project unauthorized body based on context it is used
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGetSelectedFlavorsForProjectUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGetSelectedFlavorsForProjectUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
