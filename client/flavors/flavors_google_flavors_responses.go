// Code generated by go-swagger; DO NOT EDIT.

package flavors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlavorsGoogleFlavorsReader is a Reader for the FlavorsGoogleFlavors structure.
type FlavorsGoogleFlavorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FlavorsGoogleFlavorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFlavorsGoogleFlavorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFlavorsGoogleFlavorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFlavorsGoogleFlavorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFlavorsGoogleFlavorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFlavorsGoogleFlavorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFlavorsGoogleFlavorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFlavorsGoogleFlavorsOK creates a FlavorsGoogleFlavorsOK with default headers values
func NewFlavorsGoogleFlavorsOK() *FlavorsGoogleFlavorsOK {
	return &FlavorsGoogleFlavorsOK{}
}

/*
FlavorsGoogleFlavorsOK describes a response with status code 200, with default header values.

Success
*/
type FlavorsGoogleFlavorsOK struct {
	Payload *FlavorsGoogleFlavorsOKBody
}

// IsSuccess returns true when this flavors google flavors o k response has a 2xx status code
func (o *FlavorsGoogleFlavorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this flavors google flavors o k response has a 3xx status code
func (o *FlavorsGoogleFlavorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors o k response has a 4xx status code
func (o *FlavorsGoogleFlavorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors google flavors o k response has a 5xx status code
func (o *FlavorsGoogleFlavorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors google flavors o k response a status code equal to that given
func (o *FlavorsGoogleFlavorsOK) IsCode(code int) bool {
	return code == 200
}

func (o *FlavorsGoogleFlavorsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsOK  %+v", 200, o.Payload)
}

func (o *FlavorsGoogleFlavorsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsOK  %+v", 200, o.Payload)
}

func (o *FlavorsGoogleFlavorsOK) GetPayload() *FlavorsGoogleFlavorsOKBody {
	return o.Payload
}

func (o *FlavorsGoogleFlavorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGoogleFlavorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGoogleFlavorsBadRequest creates a FlavorsGoogleFlavorsBadRequest with default headers values
func NewFlavorsGoogleFlavorsBadRequest() *FlavorsGoogleFlavorsBadRequest {
	return &FlavorsGoogleFlavorsBadRequest{}
}

/*
FlavorsGoogleFlavorsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FlavorsGoogleFlavorsBadRequest struct {
	Payload []*FlavorsGoogleFlavorsBadRequestBodyItems0
}

// IsSuccess returns true when this flavors google flavors bad request response has a 2xx status code
func (o *FlavorsGoogleFlavorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors google flavors bad request response has a 3xx status code
func (o *FlavorsGoogleFlavorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors bad request response has a 4xx status code
func (o *FlavorsGoogleFlavorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors google flavors bad request response has a 5xx status code
func (o *FlavorsGoogleFlavorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors google flavors bad request response a status code equal to that given
func (o *FlavorsGoogleFlavorsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FlavorsGoogleFlavorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsGoogleFlavorsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsGoogleFlavorsBadRequest) GetPayload() []*FlavorsGoogleFlavorsBadRequestBodyItems0 {
	return o.Payload
}

func (o *FlavorsGoogleFlavorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGoogleFlavorsUnauthorized creates a FlavorsGoogleFlavorsUnauthorized with default headers values
func NewFlavorsGoogleFlavorsUnauthorized() *FlavorsGoogleFlavorsUnauthorized {
	return &FlavorsGoogleFlavorsUnauthorized{}
}

/*
FlavorsGoogleFlavorsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FlavorsGoogleFlavorsUnauthorized struct {
	Payload *FlavorsGoogleFlavorsUnauthorizedBody
}

// IsSuccess returns true when this flavors google flavors unauthorized response has a 2xx status code
func (o *FlavorsGoogleFlavorsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors google flavors unauthorized response has a 3xx status code
func (o *FlavorsGoogleFlavorsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors unauthorized response has a 4xx status code
func (o *FlavorsGoogleFlavorsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors google flavors unauthorized response has a 5xx status code
func (o *FlavorsGoogleFlavorsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors google flavors unauthorized response a status code equal to that given
func (o *FlavorsGoogleFlavorsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FlavorsGoogleFlavorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsGoogleFlavorsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsGoogleFlavorsUnauthorized) GetPayload() *FlavorsGoogleFlavorsUnauthorizedBody {
	return o.Payload
}

func (o *FlavorsGoogleFlavorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGoogleFlavorsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGoogleFlavorsForbidden creates a FlavorsGoogleFlavorsForbidden with default headers values
func NewFlavorsGoogleFlavorsForbidden() *FlavorsGoogleFlavorsForbidden {
	return &FlavorsGoogleFlavorsForbidden{}
}

/*
FlavorsGoogleFlavorsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FlavorsGoogleFlavorsForbidden struct {
	Payload *FlavorsGoogleFlavorsForbiddenBody
}

// IsSuccess returns true when this flavors google flavors forbidden response has a 2xx status code
func (o *FlavorsGoogleFlavorsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors google flavors forbidden response has a 3xx status code
func (o *FlavorsGoogleFlavorsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors forbidden response has a 4xx status code
func (o *FlavorsGoogleFlavorsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors google flavors forbidden response has a 5xx status code
func (o *FlavorsGoogleFlavorsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors google flavors forbidden response a status code equal to that given
func (o *FlavorsGoogleFlavorsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FlavorsGoogleFlavorsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsGoogleFlavorsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsGoogleFlavorsForbidden) GetPayload() *FlavorsGoogleFlavorsForbiddenBody {
	return o.Payload
}

func (o *FlavorsGoogleFlavorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGoogleFlavorsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGoogleFlavorsNotFound creates a FlavorsGoogleFlavorsNotFound with default headers values
func NewFlavorsGoogleFlavorsNotFound() *FlavorsGoogleFlavorsNotFound {
	return &FlavorsGoogleFlavorsNotFound{}
}

/*
FlavorsGoogleFlavorsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FlavorsGoogleFlavorsNotFound struct {
	Payload *FlavorsGoogleFlavorsNotFoundBody
}

// IsSuccess returns true when this flavors google flavors not found response has a 2xx status code
func (o *FlavorsGoogleFlavorsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors google flavors not found response has a 3xx status code
func (o *FlavorsGoogleFlavorsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors not found response has a 4xx status code
func (o *FlavorsGoogleFlavorsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors google flavors not found response has a 5xx status code
func (o *FlavorsGoogleFlavorsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors google flavors not found response a status code equal to that given
func (o *FlavorsGoogleFlavorsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *FlavorsGoogleFlavorsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsGoogleFlavorsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsGoogleFlavorsNotFound) GetPayload() *FlavorsGoogleFlavorsNotFoundBody {
	return o.Payload
}

func (o *FlavorsGoogleFlavorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsGoogleFlavorsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsGoogleFlavorsInternalServerError creates a FlavorsGoogleFlavorsInternalServerError with default headers values
func NewFlavorsGoogleFlavorsInternalServerError() *FlavorsGoogleFlavorsInternalServerError {
	return &FlavorsGoogleFlavorsInternalServerError{}
}

/*
FlavorsGoogleFlavorsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FlavorsGoogleFlavorsInternalServerError struct {
}

// IsSuccess returns true when this flavors google flavors internal server error response has a 2xx status code
func (o *FlavorsGoogleFlavorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors google flavors internal server error response has a 3xx status code
func (o *FlavorsGoogleFlavorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors google flavors internal server error response has a 4xx status code
func (o *FlavorsGoogleFlavorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors google flavors internal server error response has a 5xx status code
func (o *FlavorsGoogleFlavorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this flavors google flavors internal server error response a status code equal to that given
func (o *FlavorsGoogleFlavorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FlavorsGoogleFlavorsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsInternalServerError ", 500)
}

func (o *FlavorsGoogleFlavorsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/google/{cloudId}][%d] flavorsGoogleFlavorsInternalServerError ", 500)
}

func (o *FlavorsGoogleFlavorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
FlavorsGoogleFlavorsBadRequestBodyItems0 flavors google flavors bad request body items0
swagger:model FlavorsGoogleFlavorsBadRequestBodyItems0
*/
type FlavorsGoogleFlavorsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this flavors google flavors bad request body items0
func (o *FlavorsGoogleFlavorsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors google flavors bad request body items0 based on context it is used
func (o *FlavorsGoogleFlavorsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGoogleFlavorsForbiddenBody flavors google flavors forbidden body
swagger:model FlavorsGoogleFlavorsForbiddenBody
*/
type FlavorsGoogleFlavorsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors google flavors forbidden body
func (o *FlavorsGoogleFlavorsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors google flavors forbidden body based on context it is used
func (o *FlavorsGoogleFlavorsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGoogleFlavorsNotFoundBody flavors google flavors not found body
swagger:model FlavorsGoogleFlavorsNotFoundBody
*/
type FlavorsGoogleFlavorsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors google flavors not found body
func (o *FlavorsGoogleFlavorsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors google flavors not found body based on context it is used
func (o *FlavorsGoogleFlavorsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGoogleFlavorsOKBody flavors google flavors o k body
swagger:model FlavorsGoogleFlavorsOKBody
*/
type FlavorsGoogleFlavorsOKBody struct {

	// data
	Data []*FlavorsGoogleFlavorsOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this flavors google flavors o k body
func (o *FlavorsGoogleFlavorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsGoogleFlavorsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsGoogleFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsGoogleFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this flavors google flavors o k body based on the context it is used
func (o *FlavorsGoogleFlavorsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsGoogleFlavorsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsGoogleFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsGoogleFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsOKBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGoogleFlavorsOKBodyDataItems0 flavors google flavors o k body data items0
swagger:model FlavorsGoogleFlavorsOKBodyDataItems0
*/
type FlavorsGoogleFlavorsOKBodyDataItems0 struct {

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// description
	Description interface{} `json:"description,omitempty"`

	// linux price
	LinuxPrice string `json:"linuxPrice,omitempty"`

	// linux spot price
	LinuxSpotPrice string `json:"linuxSpotPrice,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// windows price
	WindowsPrice string `json:"windowsPrice,omitempty"`

	// windows spot price
	WindowsSpotPrice string `json:"windowsSpotPrice,omitempty"`
}

// Validate validates this flavors google flavors o k body data items0
func (o *FlavorsGoogleFlavorsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors google flavors o k body data items0 based on context it is used
func (o *FlavorsGoogleFlavorsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsGoogleFlavorsUnauthorizedBody flavors google flavors unauthorized body
swagger:model FlavorsGoogleFlavorsUnauthorizedBody
*/
type FlavorsGoogleFlavorsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors google flavors unauthorized body
func (o *FlavorsGoogleFlavorsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors google flavors unauthorized body based on context it is used
func (o *FlavorsGoogleFlavorsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsGoogleFlavorsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res FlavorsGoogleFlavorsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
