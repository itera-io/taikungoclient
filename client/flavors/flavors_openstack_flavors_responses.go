// Code generated by go-swagger; DO NOT EDIT.

package flavors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlavorsOpenstackFlavorsReader is a Reader for the FlavorsOpenstackFlavors structure.
type FlavorsOpenstackFlavorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FlavorsOpenstackFlavorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFlavorsOpenstackFlavorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFlavorsOpenstackFlavorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFlavorsOpenstackFlavorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFlavorsOpenstackFlavorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFlavorsOpenstackFlavorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFlavorsOpenstackFlavorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFlavorsOpenstackFlavorsOK creates a FlavorsOpenstackFlavorsOK with default headers values
func NewFlavorsOpenstackFlavorsOK() *FlavorsOpenstackFlavorsOK {
	return &FlavorsOpenstackFlavorsOK{}
}

/*
FlavorsOpenstackFlavorsOK describes a response with status code 200, with default header values.

Success
*/
type FlavorsOpenstackFlavorsOK struct {
	Payload *FlavorsOpenstackFlavorsOKBody
}

// IsSuccess returns true when this flavors openstack flavors o k response has a 2xx status code
func (o *FlavorsOpenstackFlavorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this flavors openstack flavors o k response has a 3xx status code
func (o *FlavorsOpenstackFlavorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors o k response has a 4xx status code
func (o *FlavorsOpenstackFlavorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors openstack flavors o k response has a 5xx status code
func (o *FlavorsOpenstackFlavorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors openstack flavors o k response a status code equal to that given
func (o *FlavorsOpenstackFlavorsOK) IsCode(code int) bool {
	return code == 200
}

func (o *FlavorsOpenstackFlavorsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsOK  %+v", 200, o.Payload)
}

func (o *FlavorsOpenstackFlavorsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsOK  %+v", 200, o.Payload)
}

func (o *FlavorsOpenstackFlavorsOK) GetPayload() *FlavorsOpenstackFlavorsOKBody {
	return o.Payload
}

func (o *FlavorsOpenstackFlavorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsOpenstackFlavorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsOpenstackFlavorsBadRequest creates a FlavorsOpenstackFlavorsBadRequest with default headers values
func NewFlavorsOpenstackFlavorsBadRequest() *FlavorsOpenstackFlavorsBadRequest {
	return &FlavorsOpenstackFlavorsBadRequest{}
}

/*
FlavorsOpenstackFlavorsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FlavorsOpenstackFlavorsBadRequest struct {
	Payload []*FlavorsOpenstackFlavorsBadRequestBodyItems0
}

// IsSuccess returns true when this flavors openstack flavors bad request response has a 2xx status code
func (o *FlavorsOpenstackFlavorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors openstack flavors bad request response has a 3xx status code
func (o *FlavorsOpenstackFlavorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors bad request response has a 4xx status code
func (o *FlavorsOpenstackFlavorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors openstack flavors bad request response has a 5xx status code
func (o *FlavorsOpenstackFlavorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors openstack flavors bad request response a status code equal to that given
func (o *FlavorsOpenstackFlavorsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FlavorsOpenstackFlavorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsOpenstackFlavorsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsBadRequest  %+v", 400, o.Payload)
}

func (o *FlavorsOpenstackFlavorsBadRequest) GetPayload() []*FlavorsOpenstackFlavorsBadRequestBodyItems0 {
	return o.Payload
}

func (o *FlavorsOpenstackFlavorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsOpenstackFlavorsUnauthorized creates a FlavorsOpenstackFlavorsUnauthorized with default headers values
func NewFlavorsOpenstackFlavorsUnauthorized() *FlavorsOpenstackFlavorsUnauthorized {
	return &FlavorsOpenstackFlavorsUnauthorized{}
}

/*
FlavorsOpenstackFlavorsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FlavorsOpenstackFlavorsUnauthorized struct {
	Payload *FlavorsOpenstackFlavorsUnauthorizedBody
}

// IsSuccess returns true when this flavors openstack flavors unauthorized response has a 2xx status code
func (o *FlavorsOpenstackFlavorsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors openstack flavors unauthorized response has a 3xx status code
func (o *FlavorsOpenstackFlavorsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors unauthorized response has a 4xx status code
func (o *FlavorsOpenstackFlavorsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors openstack flavors unauthorized response has a 5xx status code
func (o *FlavorsOpenstackFlavorsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors openstack flavors unauthorized response a status code equal to that given
func (o *FlavorsOpenstackFlavorsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FlavorsOpenstackFlavorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsOpenstackFlavorsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsUnauthorized  %+v", 401, o.Payload)
}

func (o *FlavorsOpenstackFlavorsUnauthorized) GetPayload() *FlavorsOpenstackFlavorsUnauthorizedBody {
	return o.Payload
}

func (o *FlavorsOpenstackFlavorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsOpenstackFlavorsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsOpenstackFlavorsForbidden creates a FlavorsOpenstackFlavorsForbidden with default headers values
func NewFlavorsOpenstackFlavorsForbidden() *FlavorsOpenstackFlavorsForbidden {
	return &FlavorsOpenstackFlavorsForbidden{}
}

/*
FlavorsOpenstackFlavorsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FlavorsOpenstackFlavorsForbidden struct {
	Payload *FlavorsOpenstackFlavorsForbiddenBody
}

// IsSuccess returns true when this flavors openstack flavors forbidden response has a 2xx status code
func (o *FlavorsOpenstackFlavorsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors openstack flavors forbidden response has a 3xx status code
func (o *FlavorsOpenstackFlavorsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors forbidden response has a 4xx status code
func (o *FlavorsOpenstackFlavorsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors openstack flavors forbidden response has a 5xx status code
func (o *FlavorsOpenstackFlavorsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors openstack flavors forbidden response a status code equal to that given
func (o *FlavorsOpenstackFlavorsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FlavorsOpenstackFlavorsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsOpenstackFlavorsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsForbidden  %+v", 403, o.Payload)
}

func (o *FlavorsOpenstackFlavorsForbidden) GetPayload() *FlavorsOpenstackFlavorsForbiddenBody {
	return o.Payload
}

func (o *FlavorsOpenstackFlavorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsOpenstackFlavorsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsOpenstackFlavorsNotFound creates a FlavorsOpenstackFlavorsNotFound with default headers values
func NewFlavorsOpenstackFlavorsNotFound() *FlavorsOpenstackFlavorsNotFound {
	return &FlavorsOpenstackFlavorsNotFound{}
}

/*
FlavorsOpenstackFlavorsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FlavorsOpenstackFlavorsNotFound struct {
	Payload *FlavorsOpenstackFlavorsNotFoundBody
}

// IsSuccess returns true when this flavors openstack flavors not found response has a 2xx status code
func (o *FlavorsOpenstackFlavorsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors openstack flavors not found response has a 3xx status code
func (o *FlavorsOpenstackFlavorsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors not found response has a 4xx status code
func (o *FlavorsOpenstackFlavorsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this flavors openstack flavors not found response has a 5xx status code
func (o *FlavorsOpenstackFlavorsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this flavors openstack flavors not found response a status code equal to that given
func (o *FlavorsOpenstackFlavorsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *FlavorsOpenstackFlavorsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsOpenstackFlavorsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsNotFound  %+v", 404, o.Payload)
}

func (o *FlavorsOpenstackFlavorsNotFound) GetPayload() *FlavorsOpenstackFlavorsNotFoundBody {
	return o.Payload
}

func (o *FlavorsOpenstackFlavorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FlavorsOpenstackFlavorsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFlavorsOpenstackFlavorsInternalServerError creates a FlavorsOpenstackFlavorsInternalServerError with default headers values
func NewFlavorsOpenstackFlavorsInternalServerError() *FlavorsOpenstackFlavorsInternalServerError {
	return &FlavorsOpenstackFlavorsInternalServerError{}
}

/*
FlavorsOpenstackFlavorsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FlavorsOpenstackFlavorsInternalServerError struct {
}

// IsSuccess returns true when this flavors openstack flavors internal server error response has a 2xx status code
func (o *FlavorsOpenstackFlavorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this flavors openstack flavors internal server error response has a 3xx status code
func (o *FlavorsOpenstackFlavorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this flavors openstack flavors internal server error response has a 4xx status code
func (o *FlavorsOpenstackFlavorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this flavors openstack flavors internal server error response has a 5xx status code
func (o *FlavorsOpenstackFlavorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this flavors openstack flavors internal server error response a status code equal to that given
func (o *FlavorsOpenstackFlavorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FlavorsOpenstackFlavorsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsInternalServerError ", 500)
}

func (o *FlavorsOpenstackFlavorsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Flavors/openstack/{cloudId}][%d] flavorsOpenstackFlavorsInternalServerError ", 500)
}

func (o *FlavorsOpenstackFlavorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
FlavorsOpenstackFlavorsBadRequestBodyItems0 flavors openstack flavors bad request body items0
swagger:model FlavorsOpenstackFlavorsBadRequestBodyItems0
*/
type FlavorsOpenstackFlavorsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this flavors openstack flavors bad request body items0
func (o *FlavorsOpenstackFlavorsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors openstack flavors bad request body items0 based on context it is used
func (o *FlavorsOpenstackFlavorsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsOpenstackFlavorsForbiddenBody flavors openstack flavors forbidden body
swagger:model FlavorsOpenstackFlavorsForbiddenBody
*/
type FlavorsOpenstackFlavorsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors openstack flavors forbidden body
func (o *FlavorsOpenstackFlavorsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors openstack flavors forbidden body based on context it is used
func (o *FlavorsOpenstackFlavorsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsOpenstackFlavorsNotFoundBody flavors openstack flavors not found body
swagger:model FlavorsOpenstackFlavorsNotFoundBody
*/
type FlavorsOpenstackFlavorsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors openstack flavors not found body
func (o *FlavorsOpenstackFlavorsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors openstack flavors not found body based on context it is used
func (o *FlavorsOpenstackFlavorsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsOpenstackFlavorsOKBody flavors openstack flavors o k body
swagger:model FlavorsOpenstackFlavorsOKBody
*/
type FlavorsOpenstackFlavorsOKBody struct {

	// data
	Data []*FlavorsOpenstackFlavorsOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this flavors openstack flavors o k body
func (o *FlavorsOpenstackFlavorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsOpenstackFlavorsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsOpenstackFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsOpenstackFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this flavors openstack flavors o k body based on the context it is used
func (o *FlavorsOpenstackFlavorsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FlavorsOpenstackFlavorsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flavorsOpenstackFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("flavorsOpenstackFlavorsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsOKBody) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsOpenstackFlavorsOKBodyDataItems0 flavors openstack flavors o k body data items0
swagger:model FlavorsOpenstackFlavorsOKBodyDataItems0
*/
type FlavorsOpenstackFlavorsOKBodyDataItems0 struct {

	// cpu
	CPU int64 `json:"cpu,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`
}

// Validate validates this flavors openstack flavors o k body data items0
func (o *FlavorsOpenstackFlavorsOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors openstack flavors o k body data items0 based on context it is used
func (o *FlavorsOpenstackFlavorsOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
FlavorsOpenstackFlavorsUnauthorizedBody flavors openstack flavors unauthorized body
swagger:model FlavorsOpenstackFlavorsUnauthorizedBody
*/
type FlavorsOpenstackFlavorsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this flavors openstack flavors unauthorized body
func (o *FlavorsOpenstackFlavorsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flavors openstack flavors unauthorized body based on context it is used
func (o *FlavorsOpenstackFlavorsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlavorsOpenstackFlavorsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res FlavorsOpenstackFlavorsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
