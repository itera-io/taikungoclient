/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserForListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserForListDto{}

// UserForListDto struct for UserForListDto
type UserForListDto struct {
	Id string `json:"id"`
	Username string `json:"username"`
	OrganizationName string `json:"organizationName"`
	HasCustomerId bool `json:"hasCustomerId"`
	HasPaymentMethod bool `json:"hasPaymentMethod"`
	OrganizationId int32 `json:"organizationId"`
	Role UserRole `json:"role"`
	RoleName NullableString `json:"roleName,omitempty"`
	Email string `json:"email"`
	DisplayName NullableString `json:"displayName"`
	CreatedAt string `json:"createdAt"`
	Created NullableTime `json:"created,omitempty"`
	IsEmailConfirmed bool `json:"isEmailConfirmed"`
	IsEmailNotificationEnabled bool `json:"isEmailNotificationEnabled"`
	IsForcedToResetPassword bool `json:"isForcedToResetPassword"`
	IsCsm bool `json:"isCsm"`
	IsEligibleUpdateSubscription bool `json:"isEligibleUpdateSubscription"`
	IsLocked bool `json:"isLocked"`
	IsApprovedByPartner bool `json:"isApprovedByPartner"`
	Owner bool `json:"owner"`
	IsReadOnly bool `json:"isReadOnly"`
	HasRepo bool `json:"hasRepo"`
	IsNewOrganization bool `json:"isNewOrganization"`
	Is2FAEnabled bool `json:"is2FAEnabled"`
	LastLoginAt NullableString `json:"lastLoginAt,omitempty"`
	IsForcedToEnableTwoFactorAuthentication bool `json:"isForcedToEnableTwoFactorAuthentication"`
	BoundProjects []ProjectDto `json:"boundProjects"`
	Partner PartnerDetailsForUserDto `json:"partner"`
}

type _UserForListDto UserForListDto

// NewUserForListDto instantiates a new UserForListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserForListDto(id string, username string, organizationName string, hasCustomerId bool, hasPaymentMethod bool, organizationId int32, role UserRole, email string, displayName NullableString, createdAt string, isEmailConfirmed bool, isEmailNotificationEnabled bool, isForcedToResetPassword bool, isCsm bool, isEligibleUpdateSubscription bool, isLocked bool, isApprovedByPartner bool, owner bool, isReadOnly bool, hasRepo bool, isNewOrganization bool, is2FAEnabled bool, isForcedToEnableTwoFactorAuthentication bool, boundProjects []ProjectDto, partner PartnerDetailsForUserDto) *UserForListDto {
	this := UserForListDto{}
	this.Id = id
	this.Username = username
	this.OrganizationName = organizationName
	this.HasCustomerId = hasCustomerId
	this.HasPaymentMethod = hasPaymentMethod
	this.OrganizationId = organizationId
	this.Role = role
	this.Email = email
	this.DisplayName = displayName
	this.CreatedAt = createdAt
	this.IsEmailConfirmed = isEmailConfirmed
	this.IsEmailNotificationEnabled = isEmailNotificationEnabled
	this.IsForcedToResetPassword = isForcedToResetPassword
	this.IsCsm = isCsm
	this.IsEligibleUpdateSubscription = isEligibleUpdateSubscription
	this.IsLocked = isLocked
	this.IsApprovedByPartner = isApprovedByPartner
	this.Owner = owner
	this.IsReadOnly = isReadOnly
	this.HasRepo = hasRepo
	this.IsNewOrganization = isNewOrganization
	this.Is2FAEnabled = is2FAEnabled
	this.IsForcedToEnableTwoFactorAuthentication = isForcedToEnableTwoFactorAuthentication
	this.BoundProjects = boundProjects
	this.Partner = partner
	return &this
}

// NewUserForListDtoWithDefaults instantiates a new UserForListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserForListDtoWithDefaults() *UserForListDto {
	this := UserForListDto{}
	return &this
}

// GetId returns the Id field value
func (o *UserForListDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserForListDto) SetId(v string) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *UserForListDto) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserForListDto) SetUsername(v string) {
	o.Username = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *UserForListDto) GetOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *UserForListDto) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetHasCustomerId returns the HasCustomerId field value
func (o *UserForListDto) GetHasCustomerId() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasCustomerId
}

// GetHasCustomerIdOk returns a tuple with the HasCustomerId field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetHasCustomerIdOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasCustomerId, true
}

// SetHasCustomerId sets field value
func (o *UserForListDto) SetHasCustomerId(v bool) {
	o.HasCustomerId = v
}

// GetHasPaymentMethod returns the HasPaymentMethod field value
func (o *UserForListDto) GetHasPaymentMethod() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPaymentMethod
}

// GetHasPaymentMethodOk returns a tuple with the HasPaymentMethod field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetHasPaymentMethodOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPaymentMethod, true
}

// SetHasPaymentMethod sets field value
func (o *UserForListDto) SetHasPaymentMethod(v bool) {
	o.HasPaymentMethod = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *UserForListDto) GetOrganizationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetOrganizationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *UserForListDto) SetOrganizationId(v int32) {
	o.OrganizationId = v
}

// GetRole returns the Role field value
func (o *UserForListDto) GetRole() UserRole {
	if o == nil {
		var ret UserRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetRoleOk() (*UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserForListDto) SetRole(v UserRole) {
	o.Role = v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserForListDto) GetRoleName() string {
	if o == nil || IsNil(o.RoleName.Get()) {
		var ret string
		return ret
	}
	return *o.RoleName.Get()
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserForListDto) GetRoleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleName.Get(), o.RoleName.IsSet()
}

// HasRoleName returns a boolean if a field has been set.
func (o *UserForListDto) HasRoleName() bool {
	if o != nil && o.RoleName.IsSet() {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given NullableString and assigns it to the RoleName field.
func (o *UserForListDto) SetRoleName(v string) {
	o.RoleName.Set(&v)
}
// SetRoleNameNil sets the value for RoleName to be an explicit nil
func (o *UserForListDto) SetRoleNameNil() {
	o.RoleName.Set(nil)
}

// UnsetRoleName ensures that no value is present for RoleName, not even an explicit nil
func (o *UserForListDto) UnsetRoleName() {
	o.RoleName.Unset()
}

// GetEmail returns the Email field value
func (o *UserForListDto) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserForListDto) SetEmail(v string) {
	o.Email = v
}

// GetDisplayName returns the DisplayName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserForListDto) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserForListDto) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// SetDisplayName sets field value
func (o *UserForListDto) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserForListDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserForListDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserForListDto) GetCreated() time.Time {
	if o == nil || IsNil(o.Created.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserForListDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *UserForListDto) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableTime and assigns it to the Created field.
func (o *UserForListDto) SetCreated(v time.Time) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *UserForListDto) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *UserForListDto) UnsetCreated() {
	o.Created.Unset()
}

// GetIsEmailConfirmed returns the IsEmailConfirmed field value
func (o *UserForListDto) GetIsEmailConfirmed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEmailConfirmed
}

// GetIsEmailConfirmedOk returns a tuple with the IsEmailConfirmed field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsEmailConfirmedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEmailConfirmed, true
}

// SetIsEmailConfirmed sets field value
func (o *UserForListDto) SetIsEmailConfirmed(v bool) {
	o.IsEmailConfirmed = v
}

// GetIsEmailNotificationEnabled returns the IsEmailNotificationEnabled field value
func (o *UserForListDto) GetIsEmailNotificationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEmailNotificationEnabled
}

// GetIsEmailNotificationEnabledOk returns a tuple with the IsEmailNotificationEnabled field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsEmailNotificationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEmailNotificationEnabled, true
}

// SetIsEmailNotificationEnabled sets field value
func (o *UserForListDto) SetIsEmailNotificationEnabled(v bool) {
	o.IsEmailNotificationEnabled = v
}

// GetIsForcedToResetPassword returns the IsForcedToResetPassword field value
func (o *UserForListDto) GetIsForcedToResetPassword() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsForcedToResetPassword
}

// GetIsForcedToResetPasswordOk returns a tuple with the IsForcedToResetPassword field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsForcedToResetPasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsForcedToResetPassword, true
}

// SetIsForcedToResetPassword sets field value
func (o *UserForListDto) SetIsForcedToResetPassword(v bool) {
	o.IsForcedToResetPassword = v
}

// GetIsCsm returns the IsCsm field value
func (o *UserForListDto) GetIsCsm() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCsm
}

// GetIsCsmOk returns a tuple with the IsCsm field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsCsmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCsm, true
}

// SetIsCsm sets field value
func (o *UserForListDto) SetIsCsm(v bool) {
	o.IsCsm = v
}

// GetIsEligibleUpdateSubscription returns the IsEligibleUpdateSubscription field value
func (o *UserForListDto) GetIsEligibleUpdateSubscription() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEligibleUpdateSubscription
}

// GetIsEligibleUpdateSubscriptionOk returns a tuple with the IsEligibleUpdateSubscription field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsEligibleUpdateSubscriptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEligibleUpdateSubscription, true
}

// SetIsEligibleUpdateSubscription sets field value
func (o *UserForListDto) SetIsEligibleUpdateSubscription(v bool) {
	o.IsEligibleUpdateSubscription = v
}

// GetIsLocked returns the IsLocked field value
func (o *UserForListDto) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *UserForListDto) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetIsApprovedByPartner returns the IsApprovedByPartner field value
func (o *UserForListDto) GetIsApprovedByPartner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsApprovedByPartner
}

// GetIsApprovedByPartnerOk returns a tuple with the IsApprovedByPartner field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsApprovedByPartnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsApprovedByPartner, true
}

// SetIsApprovedByPartner sets field value
func (o *UserForListDto) SetIsApprovedByPartner(v bool) {
	o.IsApprovedByPartner = v
}

// GetOwner returns the Owner field value
func (o *UserForListDto) GetOwner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetOwnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *UserForListDto) SetOwner(v bool) {
	o.Owner = v
}

// GetIsReadOnly returns the IsReadOnly field value
func (o *UserForListDto) GetIsReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReadOnly, true
}

// SetIsReadOnly sets field value
func (o *UserForListDto) SetIsReadOnly(v bool) {
	o.IsReadOnly = v
}

// GetHasRepo returns the HasRepo field value
func (o *UserForListDto) GetHasRepo() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasRepo
}

// GetHasRepoOk returns a tuple with the HasRepo field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetHasRepoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasRepo, true
}

// SetHasRepo sets field value
func (o *UserForListDto) SetHasRepo(v bool) {
	o.HasRepo = v
}

// GetIsNewOrganization returns the IsNewOrganization field value
func (o *UserForListDto) GetIsNewOrganization() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsNewOrganization
}

// GetIsNewOrganizationOk returns a tuple with the IsNewOrganization field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsNewOrganizationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsNewOrganization, true
}

// SetIsNewOrganization sets field value
func (o *UserForListDto) SetIsNewOrganization(v bool) {
	o.IsNewOrganization = v
}

// GetIs2FAEnabled returns the Is2FAEnabled field value
func (o *UserForListDto) GetIs2FAEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Is2FAEnabled
}

// GetIs2FAEnabledOk returns a tuple with the Is2FAEnabled field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIs2FAEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Is2FAEnabled, true
}

// SetIs2FAEnabled sets field value
func (o *UserForListDto) SetIs2FAEnabled(v bool) {
	o.Is2FAEnabled = v
}

// GetLastLoginAt returns the LastLoginAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserForListDto) GetLastLoginAt() string {
	if o == nil || IsNil(o.LastLoginAt.Get()) {
		var ret string
		return ret
	}
	return *o.LastLoginAt.Get()
}

// GetLastLoginAtOk returns a tuple with the LastLoginAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserForListDto) GetLastLoginAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLoginAt.Get(), o.LastLoginAt.IsSet()
}

// HasLastLoginAt returns a boolean if a field has been set.
func (o *UserForListDto) HasLastLoginAt() bool {
	if o != nil && o.LastLoginAt.IsSet() {
		return true
	}

	return false
}

// SetLastLoginAt gets a reference to the given NullableString and assigns it to the LastLoginAt field.
func (o *UserForListDto) SetLastLoginAt(v string) {
	o.LastLoginAt.Set(&v)
}
// SetLastLoginAtNil sets the value for LastLoginAt to be an explicit nil
func (o *UserForListDto) SetLastLoginAtNil() {
	o.LastLoginAt.Set(nil)
}

// UnsetLastLoginAt ensures that no value is present for LastLoginAt, not even an explicit nil
func (o *UserForListDto) UnsetLastLoginAt() {
	o.LastLoginAt.Unset()
}

// GetIsForcedToEnableTwoFactorAuthentication returns the IsForcedToEnableTwoFactorAuthentication field value
func (o *UserForListDto) GetIsForcedToEnableTwoFactorAuthentication() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsForcedToEnableTwoFactorAuthentication
}

// GetIsForcedToEnableTwoFactorAuthenticationOk returns a tuple with the IsForcedToEnableTwoFactorAuthentication field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetIsForcedToEnableTwoFactorAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsForcedToEnableTwoFactorAuthentication, true
}

// SetIsForcedToEnableTwoFactorAuthentication sets field value
func (o *UserForListDto) SetIsForcedToEnableTwoFactorAuthentication(v bool) {
	o.IsForcedToEnableTwoFactorAuthentication = v
}

// GetBoundProjects returns the BoundProjects field value
func (o *UserForListDto) GetBoundProjects() []ProjectDto {
	if o == nil {
		var ret []ProjectDto
		return ret
	}

	return o.BoundProjects
}

// GetBoundProjectsOk returns a tuple with the BoundProjects field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetBoundProjectsOk() ([]ProjectDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoundProjects, true
}

// SetBoundProjects sets field value
func (o *UserForListDto) SetBoundProjects(v []ProjectDto) {
	o.BoundProjects = v
}

// GetPartner returns the Partner field value
func (o *UserForListDto) GetPartner() PartnerDetailsForUserDto {
	if o == nil {
		var ret PartnerDetailsForUserDto
		return ret
	}

	return o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value
// and a boolean to check if the value has been set.
func (o *UserForListDto) GetPartnerOk() (*PartnerDetailsForUserDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partner, true
}

// SetPartner sets field value
func (o *UserForListDto) SetPartner(v PartnerDetailsForUserDto) {
	o.Partner = v
}

func (o UserForListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserForListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username
	toSerialize["organizationName"] = o.OrganizationName
	toSerialize["hasCustomerId"] = o.HasCustomerId
	toSerialize["hasPaymentMethod"] = o.HasPaymentMethod
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["role"] = o.Role
	if o.RoleName.IsSet() {
		toSerialize["roleName"] = o.RoleName.Get()
	}
	toSerialize["email"] = o.Email
	toSerialize["displayName"] = o.DisplayName.Get()
	toSerialize["createdAt"] = o.CreatedAt
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	toSerialize["isEmailConfirmed"] = o.IsEmailConfirmed
	toSerialize["isEmailNotificationEnabled"] = o.IsEmailNotificationEnabled
	toSerialize["isForcedToResetPassword"] = o.IsForcedToResetPassword
	toSerialize["isCsm"] = o.IsCsm
	toSerialize["isEligibleUpdateSubscription"] = o.IsEligibleUpdateSubscription
	toSerialize["isLocked"] = o.IsLocked
	toSerialize["isApprovedByPartner"] = o.IsApprovedByPartner
	toSerialize["owner"] = o.Owner
	toSerialize["isReadOnly"] = o.IsReadOnly
	toSerialize["hasRepo"] = o.HasRepo
	toSerialize["isNewOrganization"] = o.IsNewOrganization
	toSerialize["is2FAEnabled"] = o.Is2FAEnabled
	if o.LastLoginAt.IsSet() {
		toSerialize["lastLoginAt"] = o.LastLoginAt.Get()
	}
	toSerialize["isForcedToEnableTwoFactorAuthentication"] = o.IsForcedToEnableTwoFactorAuthentication
	toSerialize["boundProjects"] = o.BoundProjects
	toSerialize["partner"] = o.Partner
	return toSerialize, nil
}

func (o *UserForListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"username",
		"organizationName",
		"hasCustomerId",
		"hasPaymentMethod",
		"organizationId",
		"role",
		"email",
		"displayName",
		"createdAt",
		"isEmailConfirmed",
		"isEmailNotificationEnabled",
		"isForcedToResetPassword",
		"isCsm",
		"isEligibleUpdateSubscription",
		"isLocked",
		"isApprovedByPartner",
		"owner",
		"isReadOnly",
		"hasRepo",
		"isNewOrganization",
		"is2FAEnabled",
		"isForcedToEnableTwoFactorAuthentication",
		"boundProjects",
		"partner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserForListDto := _UserForListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserForListDto)

	if err != nil {
		return err
	}

	*o = UserForListDto(varUserForListDto)

	return err
}

type NullableUserForListDto struct {
	value *UserForListDto
	isSet bool
}

func (v NullableUserForListDto) Get() *UserForListDto {
	return v.value
}

func (v *NullableUserForListDto) Set(val *UserForListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserForListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserForListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserForListDto(val *UserForListDto) *NullableUserForListDto {
	return &NullableUserForListDto{value: val, isSet: true}
}

func (v NullableUserForListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserForListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


