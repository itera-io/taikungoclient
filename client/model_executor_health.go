/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ExecutorHealth the model 'ExecutorHealth'
type ExecutorHealth string

// List of ExecutorHealth
const (
	EXECUTORHEALTH_NONE ExecutorHealth = "None"
	EXECUTORHEALTH_UNKNOWN ExecutorHealth = "Unknown"
	EXECUTORHEALTH_HEALTHY ExecutorHealth = "Healthy"
	EXECUTORHEALTH_UNHEALTHY ExecutorHealth = "Unhealthy"
	EXECUTORHEALTH_WARNING ExecutorHealth = "Warning"
)

// All allowed values of ExecutorHealth enum
var AllowedExecutorHealthEnumValues = []ExecutorHealth{
	"None",
	"Unknown",
	"Healthy",
	"Unhealthy",
	"Warning",
}

func (v *ExecutorHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExecutorHealth(value)
	for _, existing := range AllowedExecutorHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExecutorHealth", value)
}

// NewExecutorHealthFromValue returns a pointer to a valid ExecutorHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExecutorHealthFromValue(v string) (*ExecutorHealth, error) {
	ev := ExecutorHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExecutorHealth: valid values are %v", v, AllowedExecutorHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExecutorHealth) IsValid() bool {
	for _, existing := range AllowedExecutorHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExecutorHealth value
func (v ExecutorHealth) Ptr() *ExecutorHealth {
	return &v
}

type NullableExecutorHealth struct {
	value *ExecutorHealth
	isSet bool
}

func (v NullableExecutorHealth) Get() *ExecutorHealth {
	return v.value
}

func (v *NullableExecutorHealth) Set(val *ExecutorHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutorHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutorHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutorHealth(val *ExecutorHealth) *NullableExecutorHealth {
	return &NullableExecutorHealth{value: val, isSet: true}
}

func (v NullableExecutorHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutorHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

