/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ECloudCredentialType the model 'ECloudCredentialType'
type ECloudCredentialType string

// List of ECloudCredentialType
const (
	ECLOUDCREDENTIALTYPE_AWS ECloudCredentialType = "AWS"
	ECLOUDCREDENTIALTYPE_AZURE ECloudCredentialType = "AZURE"
	ECLOUDCREDENTIALTYPE_GOOGLE ECloudCredentialType = "GOOGLE"
	ECLOUDCREDENTIALTYPE_OPENSTACK ECloudCredentialType = "OPENSTACK"
	ECLOUDCREDENTIALTYPE_PROXMOX ECloudCredentialType = "PROXMOX"
	ECLOUDCREDENTIALTYPE_TANZU ECloudCredentialType = "TANZU"
	ECLOUDCREDENTIALTYPE_OPENSHIFT ECloudCredentialType = "OPENSHIFT"
	ECLOUDCREDENTIALTYPE_VSPHERE ECloudCredentialType = "VSPHERE"
	ECLOUDCREDENTIALTYPE_ZADARA ECloudCredentialType = "ZADARA"
	ECLOUDCREDENTIALTYPE_ZEDEDA ECloudCredentialType = "ZEDEDA"
	ECLOUDCREDENTIALTYPE_EKS ECloudCredentialType = "EKS"
	ECLOUDCREDENTIALTYPE_AKS ECloudCredentialType = "AKS"
	ECLOUDCREDENTIALTYPE_GKE ECloudCredentialType = "GKE"
	ECLOUDCREDENTIALTYPE_GENERICKUBERNETES ECloudCredentialType = "GENERICKUBERNETES"
)

// All allowed values of ECloudCredentialType enum
var AllowedECloudCredentialTypeEnumValues = []ECloudCredentialType{
	"AWS",
	"AZURE",
	"GOOGLE",
	"OPENSTACK",
	"PROXMOX",
	"TANZU",
	"OPENSHIFT",
	"VSPHERE",
	"ZADARA",
	"ZEDEDA",
	"EKS",
	"AKS",
	"GKE",
	"GENERICKUBERNETES",
}

func (v *ECloudCredentialType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ECloudCredentialType(value)
	for _, existing := range AllowedECloudCredentialTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ECloudCredentialType", value)
}

// NewECloudCredentialTypeFromValue returns a pointer to a valid ECloudCredentialType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewECloudCredentialTypeFromValue(v string) (*ECloudCredentialType, error) {
	ev := ECloudCredentialType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ECloudCredentialType: valid values are %v", v, AllowedECloudCredentialTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ECloudCredentialType) IsValid() bool {
	for _, existing := range AllowedECloudCredentialTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ECloudCredentialType value
func (v ECloudCredentialType) Ptr() *ECloudCredentialType {
	return &v
}

type NullableECloudCredentialType struct {
	value *ECloudCredentialType
	isSet bool
}

func (v NullableECloudCredentialType) Get() *ECloudCredentialType {
	return v.value
}

func (v *NullableECloudCredentialType) Set(val *ECloudCredentialType) {
	v.value = val
	v.isSet = true
}

func (v NullableECloudCredentialType) IsSet() bool {
	return v.isSet
}

func (v *NullableECloudCredentialType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECloudCredentialType(val *ECloudCredentialType) *NullableECloudCredentialType {
	return &NullableECloudCredentialType{value: val, isSet: true}
}

func (v NullableECloudCredentialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECloudCredentialType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

