/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CatalogAppParamsDetailsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogAppParamsDetailsDto{}

// CatalogAppParamsDetailsDto struct for CatalogAppParamsDetailsDto
type CatalogAppParamsDetailsDto struct {
	Id                          *int32         `json:"id,omitempty"`
	CatalogAppName              NullableString `json:"catalogAppName,omitempty"`
	Key                         NullableString `json:"key,omitempty"`
	Value                       NullableString `json:"value,omitempty"`
	IsEditableWhenInstalling    *bool          `json:"isEditableWhenInstalling,omitempty"`
	IsEditableAfterInstallation *bool          `json:"isEditableAfterInstallation,omitempty"`
	IsMandatory                 *bool          `json:"isMandatory,omitempty"`
	HasJsonSchema               *bool          `json:"hasJsonSchema,omitempty"`
}

// NewCatalogAppParamsDetailsDto instantiates a new CatalogAppParamsDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogAppParamsDetailsDto() *CatalogAppParamsDetailsDto {
	this := CatalogAppParamsDetailsDto{}
	return &this
}

// NewCatalogAppParamsDetailsDtoWithDefaults instantiates a new CatalogAppParamsDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogAppParamsDetailsDtoWithDefaults() *CatalogAppParamsDetailsDto {
	this := CatalogAppParamsDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogAppParamsDetailsDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppParamsDetailsDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogAppParamsDetailsDto) SetId(v int32) {
	o.Id = &v
}

// GetCatalogAppName returns the CatalogAppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppParamsDetailsDto) GetCatalogAppName() string {
	if o == nil || IsNil(o.CatalogAppName.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogAppName.Get()
}

// GetCatalogAppNameOk returns a tuple with the CatalogAppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppParamsDetailsDto) GetCatalogAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogAppName.Get(), o.CatalogAppName.IsSet()
}

// HasCatalogAppName returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasCatalogAppName() bool {
	if o != nil && o.CatalogAppName.IsSet() {
		return true
	}

	return false
}

// SetCatalogAppName gets a reference to the given NullableString and assigns it to the CatalogAppName field.
func (o *CatalogAppParamsDetailsDto) SetCatalogAppName(v string) {
	o.CatalogAppName.Set(&v)
}

// SetCatalogAppNameNil sets the value for CatalogAppName to be an explicit nil
func (o *CatalogAppParamsDetailsDto) SetCatalogAppNameNil() {
	o.CatalogAppName.Set(nil)
}

// UnsetCatalogAppName ensures that no value is present for CatalogAppName, not even an explicit nil
func (o *CatalogAppParamsDetailsDto) UnsetCatalogAppName() {
	o.CatalogAppName.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppParamsDetailsDto) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppParamsDetailsDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CatalogAppParamsDetailsDto) SetKey(v string) {
	o.Key.Set(&v)
}

// SetKeyNil sets the value for Key to be an explicit nil
func (o *CatalogAppParamsDetailsDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CatalogAppParamsDetailsDto) UnsetKey() {
	o.Key.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppParamsDetailsDto) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppParamsDetailsDto) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *CatalogAppParamsDetailsDto) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *CatalogAppParamsDetailsDto) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *CatalogAppParamsDetailsDto) UnsetValue() {
	o.Value.Unset()
}

// GetIsEditableWhenInstalling returns the IsEditableWhenInstalling field value if set, zero value otherwise.
func (o *CatalogAppParamsDetailsDto) GetIsEditableWhenInstalling() bool {
	if o == nil || IsNil(o.IsEditableWhenInstalling) {
		var ret bool
		return ret
	}
	return *o.IsEditableWhenInstalling
}

// GetIsEditableWhenInstallingOk returns a tuple with the IsEditableWhenInstalling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppParamsDetailsDto) GetIsEditableWhenInstallingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEditableWhenInstalling) {
		return nil, false
	}
	return o.IsEditableWhenInstalling, true
}

// HasIsEditableWhenInstalling returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasIsEditableWhenInstalling() bool {
	if o != nil && !IsNil(o.IsEditableWhenInstalling) {
		return true
	}

	return false
}

// SetIsEditableWhenInstalling gets a reference to the given bool and assigns it to the IsEditableWhenInstalling field.
func (o *CatalogAppParamsDetailsDto) SetIsEditableWhenInstalling(v bool) {
	o.IsEditableWhenInstalling = &v
}

// GetIsEditableAfterInstallation returns the IsEditableAfterInstallation field value if set, zero value otherwise.
func (o *CatalogAppParamsDetailsDto) GetIsEditableAfterInstallation() bool {
	if o == nil || IsNil(o.IsEditableAfterInstallation) {
		var ret bool
		return ret
	}
	return *o.IsEditableAfterInstallation
}

// GetIsEditableAfterInstallationOk returns a tuple with the IsEditableAfterInstallation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppParamsDetailsDto) GetIsEditableAfterInstallationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEditableAfterInstallation) {
		return nil, false
	}
	return o.IsEditableAfterInstallation, true
}

// HasIsEditableAfterInstallation returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasIsEditableAfterInstallation() bool {
	if o != nil && !IsNil(o.IsEditableAfterInstallation) {
		return true
	}

	return false
}

// SetIsEditableAfterInstallation gets a reference to the given bool and assigns it to the IsEditableAfterInstallation field.
func (o *CatalogAppParamsDetailsDto) SetIsEditableAfterInstallation(v bool) {
	o.IsEditableAfterInstallation = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *CatalogAppParamsDetailsDto) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppParamsDetailsDto) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *CatalogAppParamsDetailsDto) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

// GetHasJsonSchema returns the HasJsonSchema field value if set, zero value otherwise.
func (o *CatalogAppParamsDetailsDto) GetHasJsonSchema() bool {
	if o == nil || IsNil(o.HasJsonSchema) {
		var ret bool
		return ret
	}
	return *o.HasJsonSchema
}

// GetHasJsonSchemaOk returns a tuple with the HasJsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppParamsDetailsDto) GetHasJsonSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasJsonSchema) {
		return nil, false
	}
	return o.HasJsonSchema, true
}

// HasHasJsonSchema returns a boolean if a field has been set.
func (o *CatalogAppParamsDetailsDto) HasHasJsonSchema() bool {
	if o != nil && !IsNil(o.HasJsonSchema) {
		return true
	}

	return false
}

// SetHasJsonSchema gets a reference to the given bool and assigns it to the HasJsonSchema field.
func (o *CatalogAppParamsDetailsDto) SetHasJsonSchema(v bool) {
	o.HasJsonSchema = &v
}

func (o CatalogAppParamsDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogAppParamsDetailsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.CatalogAppName.IsSet() {
		toSerialize["catalogAppName"] = o.CatalogAppName.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if !IsNil(o.IsEditableWhenInstalling) {
		toSerialize["isEditableWhenInstalling"] = o.IsEditableWhenInstalling
	}
	if !IsNil(o.IsEditableAfterInstallation) {
		toSerialize["isEditableAfterInstallation"] = o.IsEditableAfterInstallation
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	if !IsNil(o.HasJsonSchema) {
		toSerialize["hasJsonSchema"] = o.HasJsonSchema
	}
	return toSerialize, nil
}

type NullableCatalogAppParamsDetailsDto struct {
	value *CatalogAppParamsDetailsDto
	isSet bool
}

func (v NullableCatalogAppParamsDetailsDto) Get() *CatalogAppParamsDetailsDto {
	return v.value
}

func (v *NullableCatalogAppParamsDetailsDto) Set(val *CatalogAppParamsDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAppParamsDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAppParamsDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAppParamsDetailsDto(val *CatalogAppParamsDetailsDto) *NullableCatalogAppParamsDetailsDto {
	return &NullableCatalogAppParamsDetailsDto{value: val, isSet: true}
}

func (v NullableCatalogAppParamsDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAppParamsDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
