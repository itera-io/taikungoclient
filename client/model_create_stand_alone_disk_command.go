/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CreateStandAloneDiskCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStandAloneDiskCommand{}

// CreateStandAloneDiskCommand struct for CreateStandAloneDiskCommand
type CreateStandAloneDiskCommand struct {
	StandaloneVmId *int32 `json:"standaloneVmId,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *int64 `json:"size,omitempty"`
	VolumeType *string `json:"volumeType,omitempty"`
}

// NewCreateStandAloneDiskCommand instantiates a new CreateStandAloneDiskCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStandAloneDiskCommand() *CreateStandAloneDiskCommand {
	this := CreateStandAloneDiskCommand{}
	return &this
}

// NewCreateStandAloneDiskCommandWithDefaults instantiates a new CreateStandAloneDiskCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStandAloneDiskCommandWithDefaults() *CreateStandAloneDiskCommand {
	this := CreateStandAloneDiskCommand{}
	return &this
}

// GetStandaloneVmId returns the StandaloneVmId field value if set, zero value otherwise.
func (o *CreateStandAloneDiskCommand) GetStandaloneVmId() int32 {
	if o == nil || IsNil(o.StandaloneVmId) {
		var ret int32
		return ret
	}
	return *o.StandaloneVmId
}

// GetStandaloneVmIdOk returns a tuple with the StandaloneVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneDiskCommand) GetStandaloneVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StandaloneVmId) {
		return nil, false
	}
	return o.StandaloneVmId, true
}

// HasStandaloneVmId returns a boolean if a field has been set.
func (o *CreateStandAloneDiskCommand) HasStandaloneVmId() bool {
	if o != nil && !IsNil(o.StandaloneVmId) {
		return true
	}

	return false
}

// SetStandaloneVmId gets a reference to the given int32 and assigns it to the StandaloneVmId field.
func (o *CreateStandAloneDiskCommand) SetStandaloneVmId(v int32) {
	o.StandaloneVmId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateStandAloneDiskCommand) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneDiskCommand) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateStandAloneDiskCommand) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateStandAloneDiskCommand) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateStandAloneDiskCommand) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneDiskCommand) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateStandAloneDiskCommand) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *CreateStandAloneDiskCommand) SetSize(v int64) {
	o.Size = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *CreateStandAloneDiskCommand) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStandAloneDiskCommand) GetVolumeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *CreateStandAloneDiskCommand) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *CreateStandAloneDiskCommand) SetVolumeType(v string) {
	o.VolumeType = &v
}

func (o CreateStandAloneDiskCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStandAloneDiskCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StandaloneVmId) {
		toSerialize["standaloneVmId"] = o.StandaloneVmId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.VolumeType) {
		toSerialize["volumeType"] = o.VolumeType
	}
	return toSerialize, nil
}

type NullableCreateStandAloneDiskCommand struct {
	value *CreateStandAloneDiskCommand
	isSet bool
}

func (v NullableCreateStandAloneDiskCommand) Get() *CreateStandAloneDiskCommand {
	return v.value
}

func (v *NullableCreateStandAloneDiskCommand) Set(val *CreateStandAloneDiskCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStandAloneDiskCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStandAloneDiskCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStandAloneDiskCommand(val *CreateStandAloneDiskCommand) *NullableCreateStandAloneDiskCommand {
	return &NullableCreateStandAloneDiskCommand{value: val, isSet: true}
}

func (v NullableCreateStandAloneDiskCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStandAloneDiskCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


