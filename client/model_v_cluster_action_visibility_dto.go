/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the VClusterActionVisibilityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VClusterActionVisibilityDto{}

// VClusterActionVisibilityDto struct for VClusterActionVisibilityDto
type VClusterActionVisibilityDto struct {
	AttachAlertingProfile *ButtonStatusDto `json:"attachAlertingProfile,omitempty"`
	DetachAlertingProfile *ButtonStatusDto `json:"detachAlertingProfile,omitempty"`
	ProjectMaintenanceMode *ButtonStatusDto `json:"projectMaintenanceMode,omitempty"`
	Lock *ButtonStatusDto `json:"lock,omitempty"`
	Unlock *ButtonStatusDto `json:"unlock,omitempty"`
}

// NewVClusterActionVisibilityDto instantiates a new VClusterActionVisibilityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVClusterActionVisibilityDto() *VClusterActionVisibilityDto {
	this := VClusterActionVisibilityDto{}
	return &this
}

// NewVClusterActionVisibilityDtoWithDefaults instantiates a new VClusterActionVisibilityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVClusterActionVisibilityDtoWithDefaults() *VClusterActionVisibilityDto {
	this := VClusterActionVisibilityDto{}
	return &this
}

// GetAttachAlertingProfile returns the AttachAlertingProfile field value if set, zero value otherwise.
func (o *VClusterActionVisibilityDto) GetAttachAlertingProfile() ButtonStatusDto {
	if o == nil || IsNil(o.AttachAlertingProfile) {
		var ret ButtonStatusDto
		return ret
	}
	return *o.AttachAlertingProfile
}

// GetAttachAlertingProfileOk returns a tuple with the AttachAlertingProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VClusterActionVisibilityDto) GetAttachAlertingProfileOk() (*ButtonStatusDto, bool) {
	if o == nil || IsNil(o.AttachAlertingProfile) {
		return nil, false
	}
	return o.AttachAlertingProfile, true
}

// HasAttachAlertingProfile returns a boolean if a field has been set.
func (o *VClusterActionVisibilityDto) HasAttachAlertingProfile() bool {
	if o != nil && !IsNil(o.AttachAlertingProfile) {
		return true
	}

	return false
}

// SetAttachAlertingProfile gets a reference to the given ButtonStatusDto and assigns it to the AttachAlertingProfile field.
func (o *VClusterActionVisibilityDto) SetAttachAlertingProfile(v ButtonStatusDto) {
	o.AttachAlertingProfile = &v
}

// GetDetachAlertingProfile returns the DetachAlertingProfile field value if set, zero value otherwise.
func (o *VClusterActionVisibilityDto) GetDetachAlertingProfile() ButtonStatusDto {
	if o == nil || IsNil(o.DetachAlertingProfile) {
		var ret ButtonStatusDto
		return ret
	}
	return *o.DetachAlertingProfile
}

// GetDetachAlertingProfileOk returns a tuple with the DetachAlertingProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VClusterActionVisibilityDto) GetDetachAlertingProfileOk() (*ButtonStatusDto, bool) {
	if o == nil || IsNil(o.DetachAlertingProfile) {
		return nil, false
	}
	return o.DetachAlertingProfile, true
}

// HasDetachAlertingProfile returns a boolean if a field has been set.
func (o *VClusterActionVisibilityDto) HasDetachAlertingProfile() bool {
	if o != nil && !IsNil(o.DetachAlertingProfile) {
		return true
	}

	return false
}

// SetDetachAlertingProfile gets a reference to the given ButtonStatusDto and assigns it to the DetachAlertingProfile field.
func (o *VClusterActionVisibilityDto) SetDetachAlertingProfile(v ButtonStatusDto) {
	o.DetachAlertingProfile = &v
}

// GetProjectMaintenanceMode returns the ProjectMaintenanceMode field value if set, zero value otherwise.
func (o *VClusterActionVisibilityDto) GetProjectMaintenanceMode() ButtonStatusDto {
	if o == nil || IsNil(o.ProjectMaintenanceMode) {
		var ret ButtonStatusDto
		return ret
	}
	return *o.ProjectMaintenanceMode
}

// GetProjectMaintenanceModeOk returns a tuple with the ProjectMaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VClusterActionVisibilityDto) GetProjectMaintenanceModeOk() (*ButtonStatusDto, bool) {
	if o == nil || IsNil(o.ProjectMaintenanceMode) {
		return nil, false
	}
	return o.ProjectMaintenanceMode, true
}

// HasProjectMaintenanceMode returns a boolean if a field has been set.
func (o *VClusterActionVisibilityDto) HasProjectMaintenanceMode() bool {
	if o != nil && !IsNil(o.ProjectMaintenanceMode) {
		return true
	}

	return false
}

// SetProjectMaintenanceMode gets a reference to the given ButtonStatusDto and assigns it to the ProjectMaintenanceMode field.
func (o *VClusterActionVisibilityDto) SetProjectMaintenanceMode(v ButtonStatusDto) {
	o.ProjectMaintenanceMode = &v
}

// GetLock returns the Lock field value if set, zero value otherwise.
func (o *VClusterActionVisibilityDto) GetLock() ButtonStatusDto {
	if o == nil || IsNil(o.Lock) {
		var ret ButtonStatusDto
		return ret
	}
	return *o.Lock
}

// GetLockOk returns a tuple with the Lock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VClusterActionVisibilityDto) GetLockOk() (*ButtonStatusDto, bool) {
	if o == nil || IsNil(o.Lock) {
		return nil, false
	}
	return o.Lock, true
}

// HasLock returns a boolean if a field has been set.
func (o *VClusterActionVisibilityDto) HasLock() bool {
	if o != nil && !IsNil(o.Lock) {
		return true
	}

	return false
}

// SetLock gets a reference to the given ButtonStatusDto and assigns it to the Lock field.
func (o *VClusterActionVisibilityDto) SetLock(v ButtonStatusDto) {
	o.Lock = &v
}

// GetUnlock returns the Unlock field value if set, zero value otherwise.
func (o *VClusterActionVisibilityDto) GetUnlock() ButtonStatusDto {
	if o == nil || IsNil(o.Unlock) {
		var ret ButtonStatusDto
		return ret
	}
	return *o.Unlock
}

// GetUnlockOk returns a tuple with the Unlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VClusterActionVisibilityDto) GetUnlockOk() (*ButtonStatusDto, bool) {
	if o == nil || IsNil(o.Unlock) {
		return nil, false
	}
	return o.Unlock, true
}

// HasUnlock returns a boolean if a field has been set.
func (o *VClusterActionVisibilityDto) HasUnlock() bool {
	if o != nil && !IsNil(o.Unlock) {
		return true
	}

	return false
}

// SetUnlock gets a reference to the given ButtonStatusDto and assigns it to the Unlock field.
func (o *VClusterActionVisibilityDto) SetUnlock(v ButtonStatusDto) {
	o.Unlock = &v
}

func (o VClusterActionVisibilityDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VClusterActionVisibilityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachAlertingProfile) {
		toSerialize["attachAlertingProfile"] = o.AttachAlertingProfile
	}
	if !IsNil(o.DetachAlertingProfile) {
		toSerialize["detachAlertingProfile"] = o.DetachAlertingProfile
	}
	if !IsNil(o.ProjectMaintenanceMode) {
		toSerialize["projectMaintenanceMode"] = o.ProjectMaintenanceMode
	}
	if !IsNil(o.Lock) {
		toSerialize["lock"] = o.Lock
	}
	if !IsNil(o.Unlock) {
		toSerialize["unlock"] = o.Unlock
	}
	return toSerialize, nil
}

type NullableVClusterActionVisibilityDto struct {
	value *VClusterActionVisibilityDto
	isSet bool
}

func (v NullableVClusterActionVisibilityDto) Get() *VClusterActionVisibilityDto {
	return v.value
}

func (v *NullableVClusterActionVisibilityDto) Set(val *VClusterActionVisibilityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVClusterActionVisibilityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVClusterActionVisibilityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVClusterActionVisibilityDto(val *VClusterActionVisibilityDto) *NullableVClusterActionVisibilityDto {
	return &NullableVClusterActionVisibilityDto{value: val, isSet: true}
}

func (v NullableVClusterActionVisibilityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVClusterActionVisibilityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


