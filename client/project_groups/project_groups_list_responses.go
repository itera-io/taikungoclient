// Code generated by go-swagger; DO NOT EDIT.

package project_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectGroupsListReader is a Reader for the ProjectGroupsList structure.
type ProjectGroupsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectGroupsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectGroupsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectGroupsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectGroupsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectGroupsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectGroupsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectGroupsListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectGroupsListOK creates a ProjectGroupsListOK with default headers values
func NewProjectGroupsListOK() *ProjectGroupsListOK {
	return &ProjectGroupsListOK{}
}

/*
ProjectGroupsListOK describes a response with status code 200, with default header values.

Success
*/
type ProjectGroupsListOK struct {
	Payload *ProjectGroupsListOKBody
}

// IsSuccess returns true when this project groups list o k response has a 2xx status code
func (o *ProjectGroupsListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project groups list o k response has a 3xx status code
func (o *ProjectGroupsListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list o k response has a 4xx status code
func (o *ProjectGroupsListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups list o k response has a 5xx status code
func (o *ProjectGroupsListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups list o k response a status code equal to that given
func (o *ProjectGroupsListOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectGroupsListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsListOK) GetPayload() *ProjectGroupsListOKBody {
	return o.Payload
}

func (o *ProjectGroupsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsListBadRequest creates a ProjectGroupsListBadRequest with default headers values
func NewProjectGroupsListBadRequest() *ProjectGroupsListBadRequest {
	return &ProjectGroupsListBadRequest{}
}

/*
ProjectGroupsListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectGroupsListBadRequest struct {
	Payload []*ProjectGroupsListBadRequestBodyItems0
}

// IsSuccess returns true when this project groups list bad request response has a 2xx status code
func (o *ProjectGroupsListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups list bad request response has a 3xx status code
func (o *ProjectGroupsListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list bad request response has a 4xx status code
func (o *ProjectGroupsListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups list bad request response has a 5xx status code
func (o *ProjectGroupsListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups list bad request response a status code equal to that given
func (o *ProjectGroupsListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectGroupsListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsListBadRequest) GetPayload() []*ProjectGroupsListBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectGroupsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsListUnauthorized creates a ProjectGroupsListUnauthorized with default headers values
func NewProjectGroupsListUnauthorized() *ProjectGroupsListUnauthorized {
	return &ProjectGroupsListUnauthorized{}
}

/*
ProjectGroupsListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectGroupsListUnauthorized struct {
	Payload *ProjectGroupsListUnauthorizedBody
}

// IsSuccess returns true when this project groups list unauthorized response has a 2xx status code
func (o *ProjectGroupsListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups list unauthorized response has a 3xx status code
func (o *ProjectGroupsListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list unauthorized response has a 4xx status code
func (o *ProjectGroupsListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups list unauthorized response has a 5xx status code
func (o *ProjectGroupsListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups list unauthorized response a status code equal to that given
func (o *ProjectGroupsListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectGroupsListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsListUnauthorized) GetPayload() *ProjectGroupsListUnauthorizedBody {
	return o.Payload
}

func (o *ProjectGroupsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsListForbidden creates a ProjectGroupsListForbidden with default headers values
func NewProjectGroupsListForbidden() *ProjectGroupsListForbidden {
	return &ProjectGroupsListForbidden{}
}

/*
ProjectGroupsListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectGroupsListForbidden struct {
	Payload *ProjectGroupsListForbiddenBody
}

// IsSuccess returns true when this project groups list forbidden response has a 2xx status code
func (o *ProjectGroupsListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups list forbidden response has a 3xx status code
func (o *ProjectGroupsListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list forbidden response has a 4xx status code
func (o *ProjectGroupsListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups list forbidden response has a 5xx status code
func (o *ProjectGroupsListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups list forbidden response a status code equal to that given
func (o *ProjectGroupsListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectGroupsListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsListForbidden) GetPayload() *ProjectGroupsListForbiddenBody {
	return o.Payload
}

func (o *ProjectGroupsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsListNotFound creates a ProjectGroupsListNotFound with default headers values
func NewProjectGroupsListNotFound() *ProjectGroupsListNotFound {
	return &ProjectGroupsListNotFound{}
}

/*
ProjectGroupsListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectGroupsListNotFound struct {
	Payload *ProjectGroupsListNotFoundBody
}

// IsSuccess returns true when this project groups list not found response has a 2xx status code
func (o *ProjectGroupsListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups list not found response has a 3xx status code
func (o *ProjectGroupsListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list not found response has a 4xx status code
func (o *ProjectGroupsListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups list not found response has a 5xx status code
func (o *ProjectGroupsListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups list not found response a status code equal to that given
func (o *ProjectGroupsListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectGroupsListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsListNotFound) GetPayload() *ProjectGroupsListNotFoundBody {
	return o.Payload
}

func (o *ProjectGroupsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsListInternalServerError creates a ProjectGroupsListInternalServerError with default headers values
func NewProjectGroupsListInternalServerError() *ProjectGroupsListInternalServerError {
	return &ProjectGroupsListInternalServerError{}
}

/*
ProjectGroupsListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectGroupsListInternalServerError struct {
}

// IsSuccess returns true when this project groups list internal server error response has a 2xx status code
func (o *ProjectGroupsListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups list internal server error response has a 3xx status code
func (o *ProjectGroupsListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups list internal server error response has a 4xx status code
func (o *ProjectGroupsListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups list internal server error response has a 5xx status code
func (o *ProjectGroupsListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project groups list internal server error response a status code equal to that given
func (o *ProjectGroupsListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectGroupsListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListInternalServerError ", 500)
}

func (o *ProjectGroupsListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectGroups/list][%d] projectGroupsListInternalServerError ", 500)
}

func (o *ProjectGroupsListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectGroupsListBadRequestBodyItems0 project groups list bad request body items0
swagger:model ProjectGroupsListBadRequestBodyItems0
*/
type ProjectGroupsListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project groups list bad request body items0
func (o *ProjectGroupsListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list bad request body items0 based on context it is used
func (o *ProjectGroupsListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListForbiddenBody project groups list forbidden body
swagger:model ProjectGroupsListForbiddenBody
*/
type ProjectGroupsListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups list forbidden body
func (o *ProjectGroupsListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list forbidden body based on context it is used
func (o *ProjectGroupsListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListNotFoundBody project groups list not found body
swagger:model ProjectGroupsListNotFoundBody
*/
type ProjectGroupsListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups list not found body
func (o *ProjectGroupsListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list not found body based on context it is used
func (o *ProjectGroupsListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListOKBody project groups list o k body
swagger:model ProjectGroupsListOKBody
*/
type ProjectGroupsListOKBody struct {

	// data
	Data []*ProjectGroupsListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this project groups list o k body
func (o *ProjectGroupsListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectGroupsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectGroupsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project groups list o k body based on the context it is used
func (o *ProjectGroupsListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectGroupsListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectGroupsListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListOKBodyDataItems0 project groups list o k body data items0
swagger:model ProjectGroupsListOKBodyDataItems0
*/
type ProjectGroupsListOKBodyDataItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// projects
	Projects []*ProjectGroupsListOKBodyDataItems0ProjectsItems0 `json:"projects"`

	// user groups
	UserGroups []*ProjectGroupsListOKBodyDataItems0UserGroupsItems0 `json:"userGroups"`
}

// Validate validates this project groups list o k body data items0
func (o *ProjectGroupsListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsListOKBodyDataItems0) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectGroupsListOKBodyDataItems0) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.UserGroups); i++ {
		if swag.IsZero(o.UserGroups[i]) { // not required
			continue
		}

		if o.UserGroups[i] != nil {
			if err := o.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project groups list o k body data items0 based on the context it is used
func (o *ProjectGroupsListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsListOKBodyDataItems0) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectGroupsListOKBodyDataItems0) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UserGroups); i++ {

		if o.UserGroups[i] != nil {
			if err := o.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListOKBodyDataItems0ProjectsItems0 project groups list o k body data items0 projects items0
swagger:model ProjectGroupsListOKBodyDataItems0ProjectsItems0
*/
type ProjectGroupsListOKBodyDataItems0ProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project groups list o k body data items0 projects items0
func (o *ProjectGroupsListOKBodyDataItems0ProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list o k body data items0 projects items0 based on context it is used
func (o *ProjectGroupsListOKBodyDataItems0ProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0ProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0ProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListOKBodyDataItems0ProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListOKBodyDataItems0UserGroupsItems0 project groups list o k body data items0 user groups items0
swagger:model ProjectGroupsListOKBodyDataItems0UserGroupsItems0
*/
type ProjectGroupsListOKBodyDataItems0UserGroupsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project groups list o k body data items0 user groups items0
func (o *ProjectGroupsListOKBodyDataItems0UserGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list o k body data items0 user groups items0 based on context it is used
func (o *ProjectGroupsListOKBodyDataItems0UserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0UserGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListOKBodyDataItems0UserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListOKBodyDataItems0UserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsListUnauthorizedBody project groups list unauthorized body
swagger:model ProjectGroupsListUnauthorizedBody
*/
type ProjectGroupsListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups list unauthorized body
func (o *ProjectGroupsListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups list unauthorized body based on context it is used
func (o *ProjectGroupsListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
