// Code generated by go-swagger; DO NOT EDIT.

package project_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectGroupsBindUserGroups(params *ProjectGroupsBindUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsBindUserGroupsOK, error)

	ProjectGroupsCreate(params *ProjectGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsCreateOK, error)

	ProjectGroupsDelete(params *ProjectGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsDeleteOK, *ProjectGroupsDeleteNoContent, error)

	ProjectGroupsList(params *ProjectGroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsListOK, error)

	ProjectGroupsListByUserGroupID(params *ProjectGroupsListByUserGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsListByUserGroupIDOK, error)

	ProjectGroupsProjectListByProjectGroupID(params *ProjectGroupsProjectListByProjectGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsProjectListByProjectGroupIDOK, error)

	ProjectGroupsUpdate(params *ProjectGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProjectGroupsBindUserGroups binds user groups
*/
func (a *Client) ProjectGroupsBindUserGroups(params *ProjectGroupsBindUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsBindUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsBindUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_BindUserGroups",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectGroups/bind-user-groups",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsBindUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsBindUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_BindUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsCreate adds project groups
*/
func (a *Client) ProjectGroupsCreate(params *ProjectGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/ProjectGroups/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsDelete removes project group s
*/
func (a *Client) ProjectGroupsDelete(params *ProjectGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsDeleteOK, *ProjectGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v{v}/ProjectGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectGroupsDeleteOK:
		return value, nil, nil
	case *ProjectGroupsDeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsList retrieves list of project groups
*/
func (a *Client) ProjectGroupsList(params *ProjectGroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/ProjectGroups/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsListByUserGroupID retrieves list of project groups by user group id for dropdown
*/
func (a *Client) ProjectGroupsListByUserGroupID(params *ProjectGroupsListByUserGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsListByUserGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsListByUserGroupIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_ListByUserGroupId",
		Method:             "GET",
		PathPattern:        "/api/v{v}/ProjectGroups/list-by-user-group-id",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsListByUserGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsListByUserGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_ListByUserGroupId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsProjectListByProjectGroupID retrieves list of projects by project group id
*/
func (a *Client) ProjectGroupsProjectListByProjectGroupID(params *ProjectGroupsProjectListByProjectGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsProjectListByProjectGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsProjectListByProjectGroupIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_ProjectListByProjectGroupId",
		Method:             "GET",
		PathPattern:        "/api/v{v}/ProjectGroups/{projectGroupId}/projects",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsProjectListByProjectGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsProjectListByProjectGroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_ProjectListByProjectGroupId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectGroupsUpdate updates project groups
*/
func (a *Client) ProjectGroupsUpdate(params *ProjectGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectGroups_Update",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/ProjectGroups/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectGroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectGroups_Update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
