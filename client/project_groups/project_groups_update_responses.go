// Code generated by go-swagger; DO NOT EDIT.

package project_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectGroupsUpdateReader is a Reader for the ProjectGroupsUpdate structure.
type ProjectGroupsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectGroupsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectGroupsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectGroupsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectGroupsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectGroupsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectGroupsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectGroupsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectGroupsUpdateOK creates a ProjectGroupsUpdateOK with default headers values
func NewProjectGroupsUpdateOK() *ProjectGroupsUpdateOK {
	return &ProjectGroupsUpdateOK{}
}

/*
ProjectGroupsUpdateOK describes a response with status code 200, with default header values.

Success
*/
type ProjectGroupsUpdateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this project groups update o k response has a 2xx status code
func (o *ProjectGroupsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project groups update o k response has a 3xx status code
func (o *ProjectGroupsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update o k response has a 4xx status code
func (o *ProjectGroupsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups update o k response has a 5xx status code
func (o *ProjectGroupsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups update o k response a status code equal to that given
func (o *ProjectGroupsUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectGroupsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsUpdateOK) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectGroupsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsUpdateBadRequest creates a ProjectGroupsUpdateBadRequest with default headers values
func NewProjectGroupsUpdateBadRequest() *ProjectGroupsUpdateBadRequest {
	return &ProjectGroupsUpdateBadRequest{}
}

/*
ProjectGroupsUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectGroupsUpdateBadRequest struct {
	Payload []*ProjectGroupsUpdateBadRequestBodyItems0
}

// IsSuccess returns true when this project groups update bad request response has a 2xx status code
func (o *ProjectGroupsUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups update bad request response has a 3xx status code
func (o *ProjectGroupsUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update bad request response has a 4xx status code
func (o *ProjectGroupsUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups update bad request response has a 5xx status code
func (o *ProjectGroupsUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups update bad request response a status code equal to that given
func (o *ProjectGroupsUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectGroupsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsUpdateBadRequest) GetPayload() []*ProjectGroupsUpdateBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectGroupsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsUpdateUnauthorized creates a ProjectGroupsUpdateUnauthorized with default headers values
func NewProjectGroupsUpdateUnauthorized() *ProjectGroupsUpdateUnauthorized {
	return &ProjectGroupsUpdateUnauthorized{}
}

/*
ProjectGroupsUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectGroupsUpdateUnauthorized struct {
	Payload *ProjectGroupsUpdateUnauthorizedBody
}

// IsSuccess returns true when this project groups update unauthorized response has a 2xx status code
func (o *ProjectGroupsUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups update unauthorized response has a 3xx status code
func (o *ProjectGroupsUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update unauthorized response has a 4xx status code
func (o *ProjectGroupsUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups update unauthorized response has a 5xx status code
func (o *ProjectGroupsUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups update unauthorized response a status code equal to that given
func (o *ProjectGroupsUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectGroupsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsUpdateUnauthorized) GetPayload() *ProjectGroupsUpdateUnauthorizedBody {
	return o.Payload
}

func (o *ProjectGroupsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsUpdateUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsUpdateForbidden creates a ProjectGroupsUpdateForbidden with default headers values
func NewProjectGroupsUpdateForbidden() *ProjectGroupsUpdateForbidden {
	return &ProjectGroupsUpdateForbidden{}
}

/*
ProjectGroupsUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectGroupsUpdateForbidden struct {
	Payload *ProjectGroupsUpdateForbiddenBody
}

// IsSuccess returns true when this project groups update forbidden response has a 2xx status code
func (o *ProjectGroupsUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups update forbidden response has a 3xx status code
func (o *ProjectGroupsUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update forbidden response has a 4xx status code
func (o *ProjectGroupsUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups update forbidden response has a 5xx status code
func (o *ProjectGroupsUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups update forbidden response a status code equal to that given
func (o *ProjectGroupsUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectGroupsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsUpdateForbidden) GetPayload() *ProjectGroupsUpdateForbiddenBody {
	return o.Payload
}

func (o *ProjectGroupsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsUpdateForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsUpdateNotFound creates a ProjectGroupsUpdateNotFound with default headers values
func NewProjectGroupsUpdateNotFound() *ProjectGroupsUpdateNotFound {
	return &ProjectGroupsUpdateNotFound{}
}

/*
ProjectGroupsUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectGroupsUpdateNotFound struct {
	Payload *ProjectGroupsUpdateNotFoundBody
}

// IsSuccess returns true when this project groups update not found response has a 2xx status code
func (o *ProjectGroupsUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups update not found response has a 3xx status code
func (o *ProjectGroupsUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update not found response has a 4xx status code
func (o *ProjectGroupsUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups update not found response has a 5xx status code
func (o *ProjectGroupsUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups update not found response a status code equal to that given
func (o *ProjectGroupsUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectGroupsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsUpdateNotFound) GetPayload() *ProjectGroupsUpdateNotFoundBody {
	return o.Payload
}

func (o *ProjectGroupsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsUpdateNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsUpdateInternalServerError creates a ProjectGroupsUpdateInternalServerError with default headers values
func NewProjectGroupsUpdateInternalServerError() *ProjectGroupsUpdateInternalServerError {
	return &ProjectGroupsUpdateInternalServerError{}
}

/*
ProjectGroupsUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectGroupsUpdateInternalServerError struct {
}

// IsSuccess returns true when this project groups update internal server error response has a 2xx status code
func (o *ProjectGroupsUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups update internal server error response has a 3xx status code
func (o *ProjectGroupsUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups update internal server error response has a 4xx status code
func (o *ProjectGroupsUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups update internal server error response has a 5xx status code
func (o *ProjectGroupsUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project groups update internal server error response a status code equal to that given
func (o *ProjectGroupsUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectGroupsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateInternalServerError ", 500)
}

func (o *ProjectGroupsUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/ProjectGroups/update][%d] projectGroupsUpdateInternalServerError ", 500)
}

func (o *ProjectGroupsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectGroupsUpdateBadRequestBodyItems0 project groups update bad request body items0
swagger:model ProjectGroupsUpdateBadRequestBodyItems0
*/
type ProjectGroupsUpdateBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project groups update bad request body items0
func (o *ProjectGroupsUpdateBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups update bad request body items0 based on context it is used
func (o *ProjectGroupsUpdateBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsUpdateBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsUpdateBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsUpdateBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsUpdateBody project groups update body
swagger:model ProjectGroupsUpdateBody
*/
type ProjectGroupsUpdateBody struct {

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project groups update body
func (o *ProjectGroupsUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups update body based on context it is used
func (o *ProjectGroupsUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsUpdateBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsUpdateForbiddenBody project groups update forbidden body
swagger:model ProjectGroupsUpdateForbiddenBody
*/
type ProjectGroupsUpdateForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups update forbidden body
func (o *ProjectGroupsUpdateForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups update forbidden body based on context it is used
func (o *ProjectGroupsUpdateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsUpdateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsUpdateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsUpdateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsUpdateNotFoundBody project groups update not found body
swagger:model ProjectGroupsUpdateNotFoundBody
*/
type ProjectGroupsUpdateNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups update not found body
func (o *ProjectGroupsUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups update not found body based on context it is used
func (o *ProjectGroupsUpdateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsUpdateUnauthorizedBody project groups update unauthorized body
swagger:model ProjectGroupsUpdateUnauthorizedBody
*/
type ProjectGroupsUpdateUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups update unauthorized body
func (o *ProjectGroupsUpdateUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups update unauthorized body based on context it is used
func (o *ProjectGroupsUpdateUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsUpdateUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsUpdateUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsUpdateUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
