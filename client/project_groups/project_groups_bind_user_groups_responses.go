// Code generated by go-swagger; DO NOT EDIT.

package project_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectGroupsBindUserGroupsReader is a Reader for the ProjectGroupsBindUserGroups structure.
type ProjectGroupsBindUserGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectGroupsBindUserGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectGroupsBindUserGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectGroupsBindUserGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectGroupsBindUserGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectGroupsBindUserGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectGroupsBindUserGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectGroupsBindUserGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectGroupsBindUserGroupsOK creates a ProjectGroupsBindUserGroupsOK with default headers values
func NewProjectGroupsBindUserGroupsOK() *ProjectGroupsBindUserGroupsOK {
	return &ProjectGroupsBindUserGroupsOK{}
}

/*
ProjectGroupsBindUserGroupsOK describes a response with status code 200, with default header values.

Success
*/
type ProjectGroupsBindUserGroupsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this project groups bind user groups o k response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project groups bind user groups o k response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups o k response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups bind user groups o k response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups bind user groups o k response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectGroupsBindUserGroupsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectGroupsBindUserGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsBindUserGroupsBadRequest creates a ProjectGroupsBindUserGroupsBadRequest with default headers values
func NewProjectGroupsBindUserGroupsBadRequest() *ProjectGroupsBindUserGroupsBadRequest {
	return &ProjectGroupsBindUserGroupsBadRequest{}
}

/*
ProjectGroupsBindUserGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectGroupsBindUserGroupsBadRequest struct {
	Payload []*ProjectGroupsBindUserGroupsBadRequestBodyItems0
}

// IsSuccess returns true when this project groups bind user groups bad request response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups bind user groups bad request response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups bad request response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups bind user groups bad request response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups bind user groups bad request response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectGroupsBindUserGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsBadRequest) GetPayload() []*ProjectGroupsBindUserGroupsBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectGroupsBindUserGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsBindUserGroupsUnauthorized creates a ProjectGroupsBindUserGroupsUnauthorized with default headers values
func NewProjectGroupsBindUserGroupsUnauthorized() *ProjectGroupsBindUserGroupsUnauthorized {
	return &ProjectGroupsBindUserGroupsUnauthorized{}
}

/*
ProjectGroupsBindUserGroupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectGroupsBindUserGroupsUnauthorized struct {
	Payload *ProjectGroupsBindUserGroupsUnauthorizedBody
}

// IsSuccess returns true when this project groups bind user groups unauthorized response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups bind user groups unauthorized response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups unauthorized response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups bind user groups unauthorized response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups bind user groups unauthorized response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectGroupsBindUserGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsUnauthorized) GetPayload() *ProjectGroupsBindUserGroupsUnauthorizedBody {
	return o.Payload
}

func (o *ProjectGroupsBindUserGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsBindUserGroupsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsBindUserGroupsForbidden creates a ProjectGroupsBindUserGroupsForbidden with default headers values
func NewProjectGroupsBindUserGroupsForbidden() *ProjectGroupsBindUserGroupsForbidden {
	return &ProjectGroupsBindUserGroupsForbidden{}
}

/*
ProjectGroupsBindUserGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectGroupsBindUserGroupsForbidden struct {
	Payload *ProjectGroupsBindUserGroupsForbiddenBody
}

// IsSuccess returns true when this project groups bind user groups forbidden response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups bind user groups forbidden response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups forbidden response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups bind user groups forbidden response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups bind user groups forbidden response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectGroupsBindUserGroupsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsForbidden) GetPayload() *ProjectGroupsBindUserGroupsForbiddenBody {
	return o.Payload
}

func (o *ProjectGroupsBindUserGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsBindUserGroupsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsBindUserGroupsNotFound creates a ProjectGroupsBindUserGroupsNotFound with default headers values
func NewProjectGroupsBindUserGroupsNotFound() *ProjectGroupsBindUserGroupsNotFound {
	return &ProjectGroupsBindUserGroupsNotFound{}
}

/*
ProjectGroupsBindUserGroupsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectGroupsBindUserGroupsNotFound struct {
	Payload *ProjectGroupsBindUserGroupsNotFoundBody
}

// IsSuccess returns true when this project groups bind user groups not found response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups bind user groups not found response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups not found response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project groups bind user groups not found response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project groups bind user groups not found response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectGroupsBindUserGroupsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectGroupsBindUserGroupsNotFound) GetPayload() *ProjectGroupsBindUserGroupsNotFoundBody {
	return o.Payload
}

func (o *ProjectGroupsBindUserGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectGroupsBindUserGroupsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectGroupsBindUserGroupsInternalServerError creates a ProjectGroupsBindUserGroupsInternalServerError with default headers values
func NewProjectGroupsBindUserGroupsInternalServerError() *ProjectGroupsBindUserGroupsInternalServerError {
	return &ProjectGroupsBindUserGroupsInternalServerError{}
}

/*
ProjectGroupsBindUserGroupsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectGroupsBindUserGroupsInternalServerError struct {
}

// IsSuccess returns true when this project groups bind user groups internal server error response has a 2xx status code
func (o *ProjectGroupsBindUserGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project groups bind user groups internal server error response has a 3xx status code
func (o *ProjectGroupsBindUserGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project groups bind user groups internal server error response has a 4xx status code
func (o *ProjectGroupsBindUserGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project groups bind user groups internal server error response has a 5xx status code
func (o *ProjectGroupsBindUserGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project groups bind user groups internal server error response a status code equal to that given
func (o *ProjectGroupsBindUserGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectGroupsBindUserGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsInternalServerError ", 500)
}

func (o *ProjectGroupsBindUserGroupsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/ProjectGroups/bind-user-groups][%d] projectGroupsBindUserGroupsInternalServerError ", 500)
}

func (o *ProjectGroupsBindUserGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectGroupsBindUserGroupsBadRequestBodyItems0 project groups bind user groups bad request body items0
swagger:model ProjectGroupsBindUserGroupsBadRequestBodyItems0
*/
type ProjectGroupsBindUserGroupsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project groups bind user groups bad request body items0
func (o *ProjectGroupsBindUserGroupsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups bind user groups bad request body items0 based on context it is used
func (o *ProjectGroupsBindUserGroupsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsBindUserGroupsBody project groups bind user groups body
swagger:model ProjectGroupsBindUserGroupsBody
*/
type ProjectGroupsBindUserGroupsBody struct {

	// project group Id
	ProjectGroupID int32 `json:"projectGroupId,omitempty"`

	// project group name
	ProjectGroupName string `json:"projectGroupName,omitempty"`

	// user groups
	UserGroups []*ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0 `json:"userGroups"`
}

// Validate validates this project groups bind user groups body
func (o *ProjectGroupsBindUserGroupsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsBindUserGroupsBody) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(o.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.UserGroups); i++ {
		if swag.IsZero(o.UserGroups[i]) { // not required
			continue
		}

		if o.UserGroups[i] != nil {
			if err := o.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project groups bind user groups body based on the context it is used
func (o *ProjectGroupsBindUserGroupsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectGroupsBindUserGroupsBody) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UserGroups); i++ {

		if o.UserGroups[i] != nil {
			if err := o.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsBindUserGroupsForbiddenBody project groups bind user groups forbidden body
swagger:model ProjectGroupsBindUserGroupsForbiddenBody
*/
type ProjectGroupsBindUserGroupsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups bind user groups forbidden body
func (o *ProjectGroupsBindUserGroupsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups bind user groups forbidden body based on context it is used
func (o *ProjectGroupsBindUserGroupsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsBindUserGroupsNotFoundBody project groups bind user groups not found body
swagger:model ProjectGroupsBindUserGroupsNotFoundBody
*/
type ProjectGroupsBindUserGroupsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups bind user groups not found body
func (o *ProjectGroupsBindUserGroupsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups bind user groups not found body based on context it is used
func (o *ProjectGroupsBindUserGroupsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0 project groups bind user groups params body user groups items0
swagger:model ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0
*/
type ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0 struct {

	// is bound
	IsBound bool `json:"isBound"`

	// user group Id
	UserGroupID int32 `json:"userGroupId,omitempty"`
}

// Validate validates this project groups bind user groups params body user groups items0
func (o *ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups bind user groups params body user groups items0 based on context it is used
func (o *ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsParamsBodyUserGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectGroupsBindUserGroupsUnauthorizedBody project groups bind user groups unauthorized body
swagger:model ProjectGroupsBindUserGroupsUnauthorizedBody
*/
type ProjectGroupsBindUserGroupsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project groups bind user groups unauthorized body
func (o *ProjectGroupsBindUserGroupsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project groups bind user groups unauthorized body based on context it is used
func (o *ProjectGroupsBindUserGroupsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectGroupsBindUserGroupsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectGroupsBindUserGroupsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
