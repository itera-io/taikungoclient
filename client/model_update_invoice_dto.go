/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the UpdateInvoiceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInvoiceDto{}

// UpdateInvoiceDto struct for UpdateInvoiceDto
type UpdateInvoiceDto struct {
	Name                       NullableString  `json:"name,omitempty"`
	OrganizationSubscriptionId NullableInt32   `json:"organizationSubscriptionId,omitempty"`
	StartDate                  NullableTime    `json:"startDate,omitempty"`
	EndDate                    NullableTime    `json:"endDate,omitempty"`
	DueDate                    NullableTime    `json:"dueDate,omitempty"`
	IsPaid                     NullableBool    `json:"isPaid,omitempty"`
	RequiredPaymentAction      NullableBool    `json:"requiredPaymentAction,omitempty"`
	StripeInvoiceId            NullableString  `json:"stripeInvoiceId,omitempty"`
	Price                      NullableFloat64 `json:"price,omitempty"`
}

// NewUpdateInvoiceDto instantiates a new UpdateInvoiceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInvoiceDto() *UpdateInvoiceDto {
	this := UpdateInvoiceDto{}
	return &this
}

// NewUpdateInvoiceDtoWithDefaults instantiates a new UpdateInvoiceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInvoiceDtoWithDefaults() *UpdateInvoiceDto {
	this := UpdateInvoiceDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateInvoiceDto) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateInvoiceDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetName() {
	o.Name.Unset()
}

// GetOrganizationSubscriptionId returns the OrganizationSubscriptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetOrganizationSubscriptionId() int32 {
	if o == nil || IsNil(o.OrganizationSubscriptionId.Get()) {
		var ret int32
		return ret
	}
	return *o.OrganizationSubscriptionId.Get()
}

// GetOrganizationSubscriptionIdOk returns a tuple with the OrganizationSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetOrganizationSubscriptionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationSubscriptionId.Get(), o.OrganizationSubscriptionId.IsSet()
}

// HasOrganizationSubscriptionId returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasOrganizationSubscriptionId() bool {
	if o != nil && o.OrganizationSubscriptionId.IsSet() {
		return true
	}

	return false
}

// SetOrganizationSubscriptionId gets a reference to the given NullableInt32 and assigns it to the OrganizationSubscriptionId field.
func (o *UpdateInvoiceDto) SetOrganizationSubscriptionId(v int32) {
	o.OrganizationSubscriptionId.Set(&v)
}

// SetOrganizationSubscriptionIdNil sets the value for OrganizationSubscriptionId to be an explicit nil
func (o *UpdateInvoiceDto) SetOrganizationSubscriptionIdNil() {
	o.OrganizationSubscriptionId.Set(nil)
}

// UnsetOrganizationSubscriptionId ensures that no value is present for OrganizationSubscriptionId, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetOrganizationSubscriptionId() {
	o.OrganizationSubscriptionId.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *UpdateInvoiceDto) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}

// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *UpdateInvoiceDto) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *UpdateInvoiceDto) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}

// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *UpdateInvoiceDto) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *UpdateInvoiceDto) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}

// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *UpdateInvoiceDto) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPaid.Get()
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetIsPaidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPaid.Get(), o.IsPaid.IsSet()
}

// HasIsPaid returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasIsPaid() bool {
	if o != nil && o.IsPaid.IsSet() {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given NullableBool and assigns it to the IsPaid field.
func (o *UpdateInvoiceDto) SetIsPaid(v bool) {
	o.IsPaid.Set(&v)
}

// SetIsPaidNil sets the value for IsPaid to be an explicit nil
func (o *UpdateInvoiceDto) SetIsPaidNil() {
	o.IsPaid.Set(nil)
}

// UnsetIsPaid ensures that no value is present for IsPaid, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetIsPaid() {
	o.IsPaid.Unset()
}

// GetRequiredPaymentAction returns the RequiredPaymentAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetRequiredPaymentAction() bool {
	if o == nil || IsNil(o.RequiredPaymentAction.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredPaymentAction.Get()
}

// GetRequiredPaymentActionOk returns a tuple with the RequiredPaymentAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetRequiredPaymentActionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredPaymentAction.Get(), o.RequiredPaymentAction.IsSet()
}

// HasRequiredPaymentAction returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasRequiredPaymentAction() bool {
	if o != nil && o.RequiredPaymentAction.IsSet() {
		return true
	}

	return false
}

// SetRequiredPaymentAction gets a reference to the given NullableBool and assigns it to the RequiredPaymentAction field.
func (o *UpdateInvoiceDto) SetRequiredPaymentAction(v bool) {
	o.RequiredPaymentAction.Set(&v)
}

// SetRequiredPaymentActionNil sets the value for RequiredPaymentAction to be an explicit nil
func (o *UpdateInvoiceDto) SetRequiredPaymentActionNil() {
	o.RequiredPaymentAction.Set(nil)
}

// UnsetRequiredPaymentAction ensures that no value is present for RequiredPaymentAction, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetRequiredPaymentAction() {
	o.RequiredPaymentAction.Unset()
}

// GetStripeInvoiceId returns the StripeInvoiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetStripeInvoiceId() string {
	if o == nil || IsNil(o.StripeInvoiceId.Get()) {
		var ret string
		return ret
	}
	return *o.StripeInvoiceId.Get()
}

// GetStripeInvoiceIdOk returns a tuple with the StripeInvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetStripeInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StripeInvoiceId.Get(), o.StripeInvoiceId.IsSet()
}

// HasStripeInvoiceId returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasStripeInvoiceId() bool {
	if o != nil && o.StripeInvoiceId.IsSet() {
		return true
	}

	return false
}

// SetStripeInvoiceId gets a reference to the given NullableString and assigns it to the StripeInvoiceId field.
func (o *UpdateInvoiceDto) SetStripeInvoiceId(v string) {
	o.StripeInvoiceId.Set(&v)
}

// SetStripeInvoiceIdNil sets the value for StripeInvoiceId to be an explicit nil
func (o *UpdateInvoiceDto) SetStripeInvoiceIdNil() {
	o.StripeInvoiceId.Set(nil)
}

// UnsetStripeInvoiceId ensures that no value is present for StripeInvoiceId, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetStripeInvoiceId() {
	o.StripeInvoiceId.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInvoiceDto) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInvoiceDto) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdateInvoiceDto) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *UpdateInvoiceDto) SetPrice(v float64) {
	o.Price.Set(&v)
}

// SetPriceNil sets the value for Price to be an explicit nil
func (o *UpdateInvoiceDto) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *UpdateInvoiceDto) UnsetPrice() {
	o.Price.Unset()
}

func (o UpdateInvoiceDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInvoiceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OrganizationSubscriptionId.IsSet() {
		toSerialize["organizationSubscriptionId"] = o.OrganizationSubscriptionId.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.DueDate.IsSet() {
		toSerialize["dueDate"] = o.DueDate.Get()
	}
	if o.IsPaid.IsSet() {
		toSerialize["isPaid"] = o.IsPaid.Get()
	}
	if o.RequiredPaymentAction.IsSet() {
		toSerialize["requiredPaymentAction"] = o.RequiredPaymentAction.Get()
	}
	if o.StripeInvoiceId.IsSet() {
		toSerialize["stripeInvoiceId"] = o.StripeInvoiceId.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	return toSerialize, nil
}

type NullableUpdateInvoiceDto struct {
	value *UpdateInvoiceDto
	isSet bool
}

func (v NullableUpdateInvoiceDto) Get() *UpdateInvoiceDto {
	return v.value
}

func (v *NullableUpdateInvoiceDto) Set(val *UpdateInvoiceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInvoiceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInvoiceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInvoiceDto(val *UpdateInvoiceDto) *NullableUpdateInvoiceDto {
	return &NullableUpdateInvoiceDto{value: val, isSet: true}
}

func (v NullableUpdateInvoiceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInvoiceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
