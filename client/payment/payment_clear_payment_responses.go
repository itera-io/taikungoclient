// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PaymentClearPaymentReader is a Reader for the PaymentClearPayment structure.
type PaymentClearPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PaymentClearPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPaymentClearPaymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPaymentClearPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPaymentClearPaymentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPaymentClearPaymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPaymentClearPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPaymentClearPaymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPaymentClearPaymentOK creates a PaymentClearPaymentOK with default headers values
func NewPaymentClearPaymentOK() *PaymentClearPaymentOK {
	return &PaymentClearPaymentOK{}
}

/*
PaymentClearPaymentOK describes a response with status code 200, with default header values.

Success
*/
type PaymentClearPaymentOK struct {
}

// IsSuccess returns true when this payment clear payment o k response has a 2xx status code
func (o *PaymentClearPaymentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this payment clear payment o k response has a 3xx status code
func (o *PaymentClearPaymentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment o k response has a 4xx status code
func (o *PaymentClearPaymentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this payment clear payment o k response has a 5xx status code
func (o *PaymentClearPaymentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear payment o k response a status code equal to that given
func (o *PaymentClearPaymentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the payment clear payment o k response
func (o *PaymentClearPaymentOK) Code() int {
	return 200
}

func (o *PaymentClearPaymentOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentOK ", 200)
}

func (o *PaymentClearPaymentOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentOK ", 200)
}

func (o *PaymentClearPaymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPaymentClearPaymentBadRequest creates a PaymentClearPaymentBadRequest with default headers values
func NewPaymentClearPaymentBadRequest() *PaymentClearPaymentBadRequest {
	return &PaymentClearPaymentBadRequest{}
}

/*
PaymentClearPaymentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PaymentClearPaymentBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this payment clear payment bad request response has a 2xx status code
func (o *PaymentClearPaymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear payment bad request response has a 3xx status code
func (o *PaymentClearPaymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment bad request response has a 4xx status code
func (o *PaymentClearPaymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear payment bad request response has a 5xx status code
func (o *PaymentClearPaymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear payment bad request response a status code equal to that given
func (o *PaymentClearPaymentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the payment clear payment bad request response
func (o *PaymentClearPaymentBadRequest) Code() int {
	return 400
}

func (o *PaymentClearPaymentBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentBadRequest  %+v", 400, o.Payload)
}

func (o *PaymentClearPaymentBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentBadRequest  %+v", 400, o.Payload)
}

func (o *PaymentClearPaymentBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PaymentClearPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearPaymentUnauthorized creates a PaymentClearPaymentUnauthorized with default headers values
func NewPaymentClearPaymentUnauthorized() *PaymentClearPaymentUnauthorized {
	return &PaymentClearPaymentUnauthorized{}
}

/*
PaymentClearPaymentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PaymentClearPaymentUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this payment clear payment unauthorized response has a 2xx status code
func (o *PaymentClearPaymentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear payment unauthorized response has a 3xx status code
func (o *PaymentClearPaymentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment unauthorized response has a 4xx status code
func (o *PaymentClearPaymentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear payment unauthorized response has a 5xx status code
func (o *PaymentClearPaymentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear payment unauthorized response a status code equal to that given
func (o *PaymentClearPaymentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the payment clear payment unauthorized response
func (o *PaymentClearPaymentUnauthorized) Code() int {
	return 401
}

func (o *PaymentClearPaymentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentUnauthorized  %+v", 401, o.Payload)
}

func (o *PaymentClearPaymentUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentUnauthorized  %+v", 401, o.Payload)
}

func (o *PaymentClearPaymentUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PaymentClearPaymentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearPaymentForbidden creates a PaymentClearPaymentForbidden with default headers values
func NewPaymentClearPaymentForbidden() *PaymentClearPaymentForbidden {
	return &PaymentClearPaymentForbidden{}
}

/*
PaymentClearPaymentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PaymentClearPaymentForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this payment clear payment forbidden response has a 2xx status code
func (o *PaymentClearPaymentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear payment forbidden response has a 3xx status code
func (o *PaymentClearPaymentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment forbidden response has a 4xx status code
func (o *PaymentClearPaymentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear payment forbidden response has a 5xx status code
func (o *PaymentClearPaymentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear payment forbidden response a status code equal to that given
func (o *PaymentClearPaymentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the payment clear payment forbidden response
func (o *PaymentClearPaymentForbidden) Code() int {
	return 403
}

func (o *PaymentClearPaymentForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentForbidden  %+v", 403, o.Payload)
}

func (o *PaymentClearPaymentForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentForbidden  %+v", 403, o.Payload)
}

func (o *PaymentClearPaymentForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PaymentClearPaymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearPaymentNotFound creates a PaymentClearPaymentNotFound with default headers values
func NewPaymentClearPaymentNotFound() *PaymentClearPaymentNotFound {
	return &PaymentClearPaymentNotFound{}
}

/*
PaymentClearPaymentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PaymentClearPaymentNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this payment clear payment not found response has a 2xx status code
func (o *PaymentClearPaymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear payment not found response has a 3xx status code
func (o *PaymentClearPaymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment not found response has a 4xx status code
func (o *PaymentClearPaymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear payment not found response has a 5xx status code
func (o *PaymentClearPaymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear payment not found response a status code equal to that given
func (o *PaymentClearPaymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the payment clear payment not found response
func (o *PaymentClearPaymentNotFound) Code() int {
	return 404
}

func (o *PaymentClearPaymentNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentNotFound  %+v", 404, o.Payload)
}

func (o *PaymentClearPaymentNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentNotFound  %+v", 404, o.Payload)
}

func (o *PaymentClearPaymentNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PaymentClearPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearPaymentInternalServerError creates a PaymentClearPaymentInternalServerError with default headers values
func NewPaymentClearPaymentInternalServerError() *PaymentClearPaymentInternalServerError {
	return &PaymentClearPaymentInternalServerError{}
}

/*
PaymentClearPaymentInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PaymentClearPaymentInternalServerError struct {
}

// IsSuccess returns true when this payment clear payment internal server error response has a 2xx status code
func (o *PaymentClearPaymentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear payment internal server error response has a 3xx status code
func (o *PaymentClearPaymentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear payment internal server error response has a 4xx status code
func (o *PaymentClearPaymentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this payment clear payment internal server error response has a 5xx status code
func (o *PaymentClearPaymentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this payment clear payment internal server error response a status code equal to that given
func (o *PaymentClearPaymentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the payment clear payment internal server error response
func (o *PaymentClearPaymentInternalServerError) Code() int {
	return 500
}

func (o *PaymentClearPaymentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentInternalServerError ", 500)
}

func (o *PaymentClearPaymentInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearPaymentInternalServerError ", 500)
}

func (o *PaymentClearPaymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
