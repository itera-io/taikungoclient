// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaymentClearReader is a Reader for the PaymentClear structure.
type PaymentClearReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PaymentClearReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPaymentClearOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPaymentClearBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPaymentClearUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPaymentClearForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPaymentClearNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPaymentClearInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPaymentClearOK creates a PaymentClearOK with default headers values
func NewPaymentClearOK() *PaymentClearOK {
	return &PaymentClearOK{}
}

/*
PaymentClearOK describes a response with status code 200, with default header values.

Success
*/
type PaymentClearOK struct {
	Payload interface{}
}

// IsSuccess returns true when this payment clear o k response has a 2xx status code
func (o *PaymentClearOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this payment clear o k response has a 3xx status code
func (o *PaymentClearOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear o k response has a 4xx status code
func (o *PaymentClearOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this payment clear o k response has a 5xx status code
func (o *PaymentClearOK) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear o k response a status code equal to that given
func (o *PaymentClearOK) IsCode(code int) bool {
	return code == 200
}

func (o *PaymentClearOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearOK  %+v", 200, o.Payload)
}

func (o *PaymentClearOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearOK  %+v", 200, o.Payload)
}

func (o *PaymentClearOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PaymentClearOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearBadRequest creates a PaymentClearBadRequest with default headers values
func NewPaymentClearBadRequest() *PaymentClearBadRequest {
	return &PaymentClearBadRequest{}
}

/*
PaymentClearBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PaymentClearBadRequest struct {
	Payload []*PaymentClearBadRequestBodyItems0
}

// IsSuccess returns true when this payment clear bad request response has a 2xx status code
func (o *PaymentClearBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear bad request response has a 3xx status code
func (o *PaymentClearBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear bad request response has a 4xx status code
func (o *PaymentClearBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear bad request response has a 5xx status code
func (o *PaymentClearBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear bad request response a status code equal to that given
func (o *PaymentClearBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PaymentClearBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearBadRequest  %+v", 400, o.Payload)
}

func (o *PaymentClearBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearBadRequest  %+v", 400, o.Payload)
}

func (o *PaymentClearBadRequest) GetPayload() []*PaymentClearBadRequestBodyItems0 {
	return o.Payload
}

func (o *PaymentClearBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearUnauthorized creates a PaymentClearUnauthorized with default headers values
func NewPaymentClearUnauthorized() *PaymentClearUnauthorized {
	return &PaymentClearUnauthorized{}
}

/*
PaymentClearUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PaymentClearUnauthorized struct {
	Payload *PaymentClearUnauthorizedBody
}

// IsSuccess returns true when this payment clear unauthorized response has a 2xx status code
func (o *PaymentClearUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear unauthorized response has a 3xx status code
func (o *PaymentClearUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear unauthorized response has a 4xx status code
func (o *PaymentClearUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear unauthorized response has a 5xx status code
func (o *PaymentClearUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear unauthorized response a status code equal to that given
func (o *PaymentClearUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PaymentClearUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearUnauthorized  %+v", 401, o.Payload)
}

func (o *PaymentClearUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearUnauthorized  %+v", 401, o.Payload)
}

func (o *PaymentClearUnauthorized) GetPayload() *PaymentClearUnauthorizedBody {
	return o.Payload
}

func (o *PaymentClearUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PaymentClearUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearForbidden creates a PaymentClearForbidden with default headers values
func NewPaymentClearForbidden() *PaymentClearForbidden {
	return &PaymentClearForbidden{}
}

/*
PaymentClearForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PaymentClearForbidden struct {
	Payload *PaymentClearForbiddenBody
}

// IsSuccess returns true when this payment clear forbidden response has a 2xx status code
func (o *PaymentClearForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear forbidden response has a 3xx status code
func (o *PaymentClearForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear forbidden response has a 4xx status code
func (o *PaymentClearForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear forbidden response has a 5xx status code
func (o *PaymentClearForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear forbidden response a status code equal to that given
func (o *PaymentClearForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PaymentClearForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearForbidden  %+v", 403, o.Payload)
}

func (o *PaymentClearForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearForbidden  %+v", 403, o.Payload)
}

func (o *PaymentClearForbidden) GetPayload() *PaymentClearForbiddenBody {
	return o.Payload
}

func (o *PaymentClearForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PaymentClearForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearNotFound creates a PaymentClearNotFound with default headers values
func NewPaymentClearNotFound() *PaymentClearNotFound {
	return &PaymentClearNotFound{}
}

/*
PaymentClearNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PaymentClearNotFound struct {
	Payload *PaymentClearNotFoundBody
}

// IsSuccess returns true when this payment clear not found response has a 2xx status code
func (o *PaymentClearNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear not found response has a 3xx status code
func (o *PaymentClearNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear not found response has a 4xx status code
func (o *PaymentClearNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this payment clear not found response has a 5xx status code
func (o *PaymentClearNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this payment clear not found response a status code equal to that given
func (o *PaymentClearNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PaymentClearNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearNotFound  %+v", 404, o.Payload)
}

func (o *PaymentClearNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearNotFound  %+v", 404, o.Payload)
}

func (o *PaymentClearNotFound) GetPayload() *PaymentClearNotFoundBody {
	return o.Payload
}

func (o *PaymentClearNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PaymentClearNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentClearInternalServerError creates a PaymentClearInternalServerError with default headers values
func NewPaymentClearInternalServerError() *PaymentClearInternalServerError {
	return &PaymentClearInternalServerError{}
}

/*
PaymentClearInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PaymentClearInternalServerError struct {
}

// IsSuccess returns true when this payment clear internal server error response has a 2xx status code
func (o *PaymentClearInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payment clear internal server error response has a 3xx status code
func (o *PaymentClearInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payment clear internal server error response has a 4xx status code
func (o *PaymentClearInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this payment clear internal server error response has a 5xx status code
func (o *PaymentClearInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this payment clear internal server error response a status code equal to that given
func (o *PaymentClearInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PaymentClearInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearInternalServerError ", 500)
}

func (o *PaymentClearInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Payment/clear][%d] paymentClearInternalServerError ", 500)
}

func (o *PaymentClearInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PaymentClearBadRequestBodyItems0 payment clear bad request body items0
swagger:model PaymentClearBadRequestBodyItems0
*/
type PaymentClearBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this payment clear bad request body items0
func (o *PaymentClearBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this payment clear bad request body items0 based on context it is used
func (o *PaymentClearBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PaymentClearBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentClearBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res PaymentClearBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PaymentClearBody payment clear body
swagger:model PaymentClearBody
*/
type PaymentClearBody struct {

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this payment clear body
func (o *PaymentClearBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this payment clear body based on context it is used
func (o *PaymentClearBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PaymentClearBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentClearBody) UnmarshalBinary(b []byte) error {
	var res PaymentClearBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PaymentClearForbiddenBody payment clear forbidden body
swagger:model PaymentClearForbiddenBody
*/
type PaymentClearForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this payment clear forbidden body
func (o *PaymentClearForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this payment clear forbidden body based on context it is used
func (o *PaymentClearForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PaymentClearForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentClearForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PaymentClearForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PaymentClearNotFoundBody payment clear not found body
swagger:model PaymentClearNotFoundBody
*/
type PaymentClearNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this payment clear not found body
func (o *PaymentClearNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this payment clear not found body based on context it is used
func (o *PaymentClearNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PaymentClearNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentClearNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PaymentClearNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PaymentClearUnauthorizedBody payment clear unauthorized body
swagger:model PaymentClearUnauthorizedBody
*/
type PaymentClearUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this payment clear unauthorized body
func (o *PaymentClearUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this payment clear unauthorized body based on context it is used
func (o *PaymentClearUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PaymentClearUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentClearUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PaymentClearUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
