// Code generated by go-swagger; DO NOT EDIT.

package project_quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectQuotasListReader is a Reader for the ProjectQuotasList structure.
type ProjectQuotasListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectQuotasListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectQuotasListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectQuotasListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectQuotasListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectQuotasListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectQuotasListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectQuotasListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectQuotasListOK creates a ProjectQuotasListOK with default headers values
func NewProjectQuotasListOK() *ProjectQuotasListOK {
	return &ProjectQuotasListOK{}
}

/*
ProjectQuotasListOK describes a response with status code 200, with default header values.

Success
*/
type ProjectQuotasListOK struct {
	Payload *ProjectQuotasListOKBody
}

// IsSuccess returns true when this project quotas list o k response has a 2xx status code
func (o *ProjectQuotasListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project quotas list o k response has a 3xx status code
func (o *ProjectQuotasListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list o k response has a 4xx status code
func (o *ProjectQuotasListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project quotas list o k response has a 5xx status code
func (o *ProjectQuotasListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project quotas list o k response a status code equal to that given
func (o *ProjectQuotasListOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectQuotasListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListOK  %+v", 200, o.Payload)
}

func (o *ProjectQuotasListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListOK  %+v", 200, o.Payload)
}

func (o *ProjectQuotasListOK) GetPayload() *ProjectQuotasListOKBody {
	return o.Payload
}

func (o *ProjectQuotasListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectQuotasListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectQuotasListBadRequest creates a ProjectQuotasListBadRequest with default headers values
func NewProjectQuotasListBadRequest() *ProjectQuotasListBadRequest {
	return &ProjectQuotasListBadRequest{}
}

/*
ProjectQuotasListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectQuotasListBadRequest struct {
	Payload []*ProjectQuotasListBadRequestBodyItems0
}

// IsSuccess returns true when this project quotas list bad request response has a 2xx status code
func (o *ProjectQuotasListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project quotas list bad request response has a 3xx status code
func (o *ProjectQuotasListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list bad request response has a 4xx status code
func (o *ProjectQuotasListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project quotas list bad request response has a 5xx status code
func (o *ProjectQuotasListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project quotas list bad request response a status code equal to that given
func (o *ProjectQuotasListBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectQuotasListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectQuotasListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectQuotasListBadRequest) GetPayload() []*ProjectQuotasListBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectQuotasListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectQuotasListUnauthorized creates a ProjectQuotasListUnauthorized with default headers values
func NewProjectQuotasListUnauthorized() *ProjectQuotasListUnauthorized {
	return &ProjectQuotasListUnauthorized{}
}

/*
ProjectQuotasListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectQuotasListUnauthorized struct {
	Payload *ProjectQuotasListUnauthorizedBody
}

// IsSuccess returns true when this project quotas list unauthorized response has a 2xx status code
func (o *ProjectQuotasListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project quotas list unauthorized response has a 3xx status code
func (o *ProjectQuotasListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list unauthorized response has a 4xx status code
func (o *ProjectQuotasListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project quotas list unauthorized response has a 5xx status code
func (o *ProjectQuotasListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project quotas list unauthorized response a status code equal to that given
func (o *ProjectQuotasListUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectQuotasListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectQuotasListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectQuotasListUnauthorized) GetPayload() *ProjectQuotasListUnauthorizedBody {
	return o.Payload
}

func (o *ProjectQuotasListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectQuotasListUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectQuotasListForbidden creates a ProjectQuotasListForbidden with default headers values
func NewProjectQuotasListForbidden() *ProjectQuotasListForbidden {
	return &ProjectQuotasListForbidden{}
}

/*
ProjectQuotasListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectQuotasListForbidden struct {
	Payload *ProjectQuotasListForbiddenBody
}

// IsSuccess returns true when this project quotas list forbidden response has a 2xx status code
func (o *ProjectQuotasListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project quotas list forbidden response has a 3xx status code
func (o *ProjectQuotasListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list forbidden response has a 4xx status code
func (o *ProjectQuotasListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project quotas list forbidden response has a 5xx status code
func (o *ProjectQuotasListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project quotas list forbidden response a status code equal to that given
func (o *ProjectQuotasListForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectQuotasListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectQuotasListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListForbidden  %+v", 403, o.Payload)
}

func (o *ProjectQuotasListForbidden) GetPayload() *ProjectQuotasListForbiddenBody {
	return o.Payload
}

func (o *ProjectQuotasListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectQuotasListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectQuotasListNotFound creates a ProjectQuotasListNotFound with default headers values
func NewProjectQuotasListNotFound() *ProjectQuotasListNotFound {
	return &ProjectQuotasListNotFound{}
}

/*
ProjectQuotasListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectQuotasListNotFound struct {
	Payload *ProjectQuotasListNotFoundBody
}

// IsSuccess returns true when this project quotas list not found response has a 2xx status code
func (o *ProjectQuotasListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project quotas list not found response has a 3xx status code
func (o *ProjectQuotasListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list not found response has a 4xx status code
func (o *ProjectQuotasListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project quotas list not found response has a 5xx status code
func (o *ProjectQuotasListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project quotas list not found response a status code equal to that given
func (o *ProjectQuotasListNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectQuotasListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectQuotasListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListNotFound  %+v", 404, o.Payload)
}

func (o *ProjectQuotasListNotFound) GetPayload() *ProjectQuotasListNotFoundBody {
	return o.Payload
}

func (o *ProjectQuotasListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectQuotasListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectQuotasListInternalServerError creates a ProjectQuotasListInternalServerError with default headers values
func NewProjectQuotasListInternalServerError() *ProjectQuotasListInternalServerError {
	return &ProjectQuotasListInternalServerError{}
}

/*
ProjectQuotasListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectQuotasListInternalServerError struct {
}

// IsSuccess returns true when this project quotas list internal server error response has a 2xx status code
func (o *ProjectQuotasListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project quotas list internal server error response has a 3xx status code
func (o *ProjectQuotasListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project quotas list internal server error response has a 4xx status code
func (o *ProjectQuotasListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project quotas list internal server error response has a 5xx status code
func (o *ProjectQuotasListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project quotas list internal server error response a status code equal to that given
func (o *ProjectQuotasListInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectQuotasListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListInternalServerError ", 500)
}

func (o *ProjectQuotasListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectQuotas][%d] projectQuotasListInternalServerError ", 500)
}

func (o *ProjectQuotasListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectQuotasListBadRequestBodyItems0 project quotas list bad request body items0
swagger:model ProjectQuotasListBadRequestBodyItems0
*/
type ProjectQuotasListBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project quotas list bad request body items0
func (o *ProjectQuotasListBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project quotas list bad request body items0 based on context it is used
func (o *ProjectQuotasListBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectQuotasListForbiddenBody project quotas list forbidden body
swagger:model ProjectQuotasListForbiddenBody
*/
type ProjectQuotasListForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project quotas list forbidden body
func (o *ProjectQuotasListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project quotas list forbidden body based on context it is used
func (o *ProjectQuotasListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectQuotasListNotFoundBody project quotas list not found body
swagger:model ProjectQuotasListNotFoundBody
*/
type ProjectQuotasListNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project quotas list not found body
func (o *ProjectQuotasListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project quotas list not found body based on context it is used
func (o *ProjectQuotasListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectQuotasListOKBody project quotas list o k body
swagger:model ProjectQuotasListOKBody
*/
type ProjectQuotasListOKBody struct {

	// data
	Data []*ProjectQuotasListOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this project quotas list o k body
func (o *ProjectQuotasListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectQuotasListOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectQuotasListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectQuotasListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project quotas list o k body based on the context it is used
func (o *ProjectQuotasListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectQuotasListOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectQuotasListOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectQuotasListOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectQuotasListOKBodyDataItems0 project quotas list o k body data items0
swagger:model ProjectQuotasListOKBodyDataItems0
*/
type ProjectQuotasListOKBodyDataItems0 struct {

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// server Cpu
	ServerCPU int64 `json:"serverCpu,omitempty"`

	// server disk size
	ServerDiskSize int64 `json:"serverDiskSize,omitempty"`

	// server Ram
	ServerRAM int64 `json:"serverRam,omitempty"`

	// vm Cpu
	VMCPU int64 `json:"vmCpu,omitempty"`

	// vm Ram
	VMRAM int64 `json:"vmRam,omitempty"`

	// vm volume size
	VMVolumeSize int64 `json:"vmVolumeSize,omitempty"`
}

// Validate validates this project quotas list o k body data items0
func (o *ProjectQuotasListOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project quotas list o k body data items0 based on context it is used
func (o *ProjectQuotasListOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectQuotasListUnauthorizedBody project quotas list unauthorized body
swagger:model ProjectQuotasListUnauthorizedBody
*/
type ProjectQuotasListUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project quotas list unauthorized body
func (o *ProjectQuotasListUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project quotas list unauthorized body based on context it is used
func (o *ProjectQuotasListUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectQuotasListUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectQuotasListUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectQuotasListUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
