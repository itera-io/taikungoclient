/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMetadata{}

// ProjectMetadata struct for ProjectMetadata
type ProjectMetadata struct {
	Path *string `json:"path,omitempty"`
	Type *string `json:"type,omitempty"`
	VcsSubPath *string `json:"vcsSubPath,omitempty"`
	Providers []Provider `json:"providers,omitempty"`
}

// NewProjectMetadata instantiates a new ProjectMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMetadata() *ProjectMetadata {
	this := ProjectMetadata{}
	return &this
}

// NewProjectMetadataWithDefaults instantiates a new ProjectMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMetadataWithDefaults() *ProjectMetadata {
	this := ProjectMetadata{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ProjectMetadata) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ProjectMetadata) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ProjectMetadata) SetPath(v string) {
	o.Path = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectMetadata) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectMetadata) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProjectMetadata) SetType(v string) {
	o.Type = &v
}

// GetVcsSubPath returns the VcsSubPath field value if set, zero value otherwise.
func (o *ProjectMetadata) GetVcsSubPath() string {
	if o == nil || IsNil(o.VcsSubPath) {
		var ret string
		return ret
	}
	return *o.VcsSubPath
}

// GetVcsSubPathOk returns a tuple with the VcsSubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetVcsSubPathOk() (*string, bool) {
	if o == nil || IsNil(o.VcsSubPath) {
		return nil, false
	}
	return o.VcsSubPath, true
}

// HasVcsSubPath returns a boolean if a field has been set.
func (o *ProjectMetadata) HasVcsSubPath() bool {
	if o != nil && !IsNil(o.VcsSubPath) {
		return true
	}

	return false
}

// SetVcsSubPath gets a reference to the given string and assigns it to the VcsSubPath field.
func (o *ProjectMetadata) SetVcsSubPath(v string) {
	o.VcsSubPath = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *ProjectMetadata) GetProviders() []Provider {
	if o == nil || IsNil(o.Providers) {
		var ret []Provider
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetProvidersOk() ([]Provider, bool) {
	if o == nil || IsNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *ProjectMetadata) HasProviders() bool {
	if o != nil && !IsNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []Provider and assigns it to the Providers field.
func (o *ProjectMetadata) SetProviders(v []Provider) {
	o.Providers = v
}

func (o ProjectMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VcsSubPath) {
		toSerialize["vcsSubPath"] = o.VcsSubPath
	}
	if !IsNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}
	return toSerialize, nil
}

type NullableProjectMetadata struct {
	value *ProjectMetadata
	isSet bool
}

func (v NullableProjectMetadata) Get() *ProjectMetadata {
	return v.value
}

func (v *NullableProjectMetadata) Set(val *ProjectMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMetadata(val *ProjectMetadata) *NullableProjectMetadata {
	return &NullableProjectMetadata{value: val, isSet: true}
}

func (v NullableProjectMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


