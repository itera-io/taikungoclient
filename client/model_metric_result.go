/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the MetricResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricResult{}

// MetricResult struct for MetricResult
type MetricResult struct {
	Metric map[string]string `json:"metric,omitempty"`
	Value interface{} `json:"value,omitempty"`
	Values []DecimalPair `json:"values,omitempty"`
}

// NewMetricResult instantiates a new MetricResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricResult() *MetricResult {
	this := MetricResult{}
	return &this
}

// NewMetricResultWithDefaults instantiates a new MetricResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricResultWithDefaults() *MetricResult {
	this := MetricResult{}
	return &this
}

// GetMetric returns the Metric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricResult) GetMetric() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricResult) GetMetricOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return &o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *MetricResult) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given map[string]string and assigns it to the Metric field.
func (o *MetricResult) SetMetric(v map[string]string) {
	o.Metric = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricResult) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricResult) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetricResult) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *MetricResult) SetValue(v interface{}) {
	o.Value = v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricResult) GetValues() []DecimalPair {
	if o == nil {
		var ret []DecimalPair
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricResult) GetValuesOk() ([]DecimalPair, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MetricResult) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []DecimalPair and assigns it to the Values field.
func (o *MetricResult) SetValues(v []DecimalPair) {
	o.Values = v
}

func (o MetricResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableMetricResult struct {
	value *MetricResult
	isSet bool
}

func (v NullableMetricResult) Get() *MetricResult {
	return v.value
}

func (v *NullableMetricResult) Set(val *MetricResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricResult(val *MetricResult) *NullableMetricResult {
	return &NullableMetricResult{value: val, isSet: true}
}

func (v NullableMetricResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


