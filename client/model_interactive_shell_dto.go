/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the InteractiveShellDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InteractiveShellDto{}

// InteractiveShellDto struct for InteractiveShellDto
type InteractiveShellDto struct {
	KubeConfig *string `json:"kubeConfig,omitempty"`
	AdminKubeConfig *string `json:"adminKubeConfig,omitempty"`
}

// NewInteractiveShellDto instantiates a new InteractiveShellDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInteractiveShellDto() *InteractiveShellDto {
	this := InteractiveShellDto{}
	return &this
}

// NewInteractiveShellDtoWithDefaults instantiates a new InteractiveShellDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInteractiveShellDtoWithDefaults() *InteractiveShellDto {
	this := InteractiveShellDto{}
	return &this
}

// GetKubeConfig returns the KubeConfig field value if set, zero value otherwise.
func (o *InteractiveShellDto) GetKubeConfig() string {
	if o == nil || IsNil(o.KubeConfig) {
		var ret string
		return ret
	}
	return *o.KubeConfig
}

// GetKubeConfigOk returns a tuple with the KubeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InteractiveShellDto) GetKubeConfigOk() (*string, bool) {
	if o == nil || IsNil(o.KubeConfig) {
		return nil, false
	}
	return o.KubeConfig, true
}

// HasKubeConfig returns a boolean if a field has been set.
func (o *InteractiveShellDto) HasKubeConfig() bool {
	if o != nil && !IsNil(o.KubeConfig) {
		return true
	}

	return false
}

// SetKubeConfig gets a reference to the given string and assigns it to the KubeConfig field.
func (o *InteractiveShellDto) SetKubeConfig(v string) {
	o.KubeConfig = &v
}

// GetAdminKubeConfig returns the AdminKubeConfig field value if set, zero value otherwise.
func (o *InteractiveShellDto) GetAdminKubeConfig() string {
	if o == nil || IsNil(o.AdminKubeConfig) {
		var ret string
		return ret
	}
	return *o.AdminKubeConfig
}

// GetAdminKubeConfigOk returns a tuple with the AdminKubeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InteractiveShellDto) GetAdminKubeConfigOk() (*string, bool) {
	if o == nil || IsNil(o.AdminKubeConfig) {
		return nil, false
	}
	return o.AdminKubeConfig, true
}

// HasAdminKubeConfig returns a boolean if a field has been set.
func (o *InteractiveShellDto) HasAdminKubeConfig() bool {
	if o != nil && !IsNil(o.AdminKubeConfig) {
		return true
	}

	return false
}

// SetAdminKubeConfig gets a reference to the given string and assigns it to the AdminKubeConfig field.
func (o *InteractiveShellDto) SetAdminKubeConfig(v string) {
	o.AdminKubeConfig = &v
}

func (o InteractiveShellDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InteractiveShellDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KubeConfig) {
		toSerialize["kubeConfig"] = o.KubeConfig
	}
	if !IsNil(o.AdminKubeConfig) {
		toSerialize["adminKubeConfig"] = o.AdminKubeConfig
	}
	return toSerialize, nil
}

type NullableInteractiveShellDto struct {
	value *InteractiveShellDto
	isSet bool
}

func (v NullableInteractiveShellDto) Get() *InteractiveShellDto {
	return v.value
}

func (v *NullableInteractiveShellDto) Set(val *InteractiveShellDto) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractiveShellDto) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractiveShellDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractiveShellDto(val *InteractiveShellDto) *NullableInteractiveShellDto {
	return &NullableInteractiveShellDto{value: val, isSet: true}
}

func (v NullableInteractiveShellDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractiveShellDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


