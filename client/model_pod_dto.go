/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PodDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodDto{}

// PodDto struct for PodDto
type PodDto struct {
	MetadataName string `json:"metadataName"`
	Status NullableString `json:"status"`
	RestartCount int32 `json:"restartCount"`
	Namespace string `json:"namespace"`
	Age NullableTime `json:"age"`
	Node NullableString `json:"node"`
	Phase NullableString `json:"phase"`
}

type _PodDto PodDto

// NewPodDto instantiates a new PodDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodDto(metadataName string, status NullableString, restartCount int32, namespace string, age NullableTime, node NullableString, phase NullableString) *PodDto {
	this := PodDto{}
	this.MetadataName = metadataName
	this.Status = status
	this.RestartCount = restartCount
	this.Namespace = namespace
	this.Age = age
	this.Node = node
	this.Phase = phase
	return &this
}

// NewPodDtoWithDefaults instantiates a new PodDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodDtoWithDefaults() *PodDto {
	this := PodDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *PodDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *PodDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *PodDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodDto) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *PodDto) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetRestartCount returns the RestartCount field value
func (o *PodDto) GetRestartCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestartCount
}

// GetRestartCountOk returns a tuple with the RestartCount field value
// and a boolean to check if the value has been set.
func (o *PodDto) GetRestartCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestartCount, true
}

// SetRestartCount sets field value
func (o *PodDto) SetRestartCount(v int32) {
	o.RestartCount = v
}

// GetNamespace returns the Namespace field value
func (o *PodDto) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *PodDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *PodDto) SetNamespace(v string) {
	o.Namespace = v
}

// GetAge returns the Age field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PodDto) GetAge() time.Time {
	if o == nil || o.Age.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodDto) GetAgeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// SetAge sets field value
func (o *PodDto) SetAge(v time.Time) {
	o.Age.Set(&v)
}

// GetNode returns the Node field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodDto) GetNode() string {
	if o == nil || o.Node.Get() == nil {
		var ret string
		return ret
	}

	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodDto) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// SetNode sets field value
func (o *PodDto) SetNode(v string) {
	o.Node.Set(&v)
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodDto) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *PodDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

func (o PodDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["status"] = o.Status.Get()
	toSerialize["restartCount"] = o.RestartCount
	toSerialize["namespace"] = o.Namespace
	toSerialize["age"] = o.Age.Get()
	toSerialize["node"] = o.Node.Get()
	toSerialize["phase"] = o.Phase.Get()
	return toSerialize, nil
}

func (o *PodDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"status",
		"restartCount",
		"namespace",
		"age",
		"node",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPodDto := _PodDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPodDto)

	if err != nil {
		return err
	}

	*o = PodDto(varPodDto)

	return err
}

type NullablePodDto struct {
	value *PodDto
	isSet bool
}

func (v NullablePodDto) Get() *PodDto {
	return v.value
}

func (v *NullablePodDto) Set(val *PodDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePodDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePodDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodDto(val *PodDto) *NullablePodDto {
	return &NullablePodDto{value: val, isSet: true}
}

func (v NullablePodDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


