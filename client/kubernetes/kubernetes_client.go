// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kubernetes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kubernetes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	KubernetesCreateKubernetesAlert(params *KubernetesCreateKubernetesAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesCreateKubernetesAlertOK, error)

	KubernetesCreateKubernetesEvent(params *KubernetesCreateKubernetesEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesCreateKubernetesEventOK, error)

	KubernetesDeleteAlerts(params *KubernetesDeleteAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeleteAlertsOK, error)

	KubernetesDeleteEvents(params *KubernetesDeleteEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeleteEventsOK, error)

	KubernetesDeletePod(params *KubernetesDeletePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeletePodOK, error)

	KubernetesDescribeConfigMap(params *KubernetesDescribeConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeConfigMapOK, error)

	KubernetesDescribeCrd(params *KubernetesDescribeCrdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeCrdOK, error)

	KubernetesDescribeCronJob(params *KubernetesDescribeCronJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeCronJobOK, error)

	KubernetesDescribeDaemonSet(params *KubernetesDescribeDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeDaemonSetOK, error)

	KubernetesDescribeDeployment(params *KubernetesDescribeDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeDeploymentOK, error)

	KubernetesDescribeIngress(params *KubernetesDescribeIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeIngressOK, error)

	KubernetesDescribeJob(params *KubernetesDescribeJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeJobOK, error)

	KubernetesDescribeNetworkPolicy(params *KubernetesDescribeNetworkPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeNetworkPolicyOK, error)

	KubernetesDescribeNode(params *KubernetesDescribeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeNodeOK, error)

	KubernetesDescribePdb(params *KubernetesDescribePdbParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePdbOK, error)

	KubernetesDescribePod(params *KubernetesDescribePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePodOK, error)

	KubernetesDescribePvc(params *KubernetesDescribePvcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePvcOK, error)

	KubernetesDescribeSecret(params *KubernetesDescribeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeSecretOK, error)

	KubernetesDescribeService(params *KubernetesDescribeServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeServiceOK, error)

	KubernetesDescribeStorageClass(params *KubernetesDescribeStorageClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeStorageClassOK, error)

	KubernetesDescribeSts(params *KubernetesDescribeStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeStsOK, error)

	KubernetesDownload(params *KubernetesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDownloadOK, error)

	KubernetesExecCli(params *KubernetesExecCliParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesExecCliOK, error)

	KubernetesGetConfigMap(params *KubernetesGetConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetConfigMapOK, error)

	KubernetesGetCrdList(params *KubernetesGetCrdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetCrdListOK, error)

	KubernetesGetCronJobsList(params *KubernetesGetCronJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetCronJobsListOK, error)

	KubernetesGetDaemonSet(params *KubernetesGetDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDaemonSetOK, error)

	KubernetesGetDashboard(params *KubernetesGetDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDashboardOK, error)

	KubernetesGetDeploymentList(params *KubernetesGetDeploymentListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDeploymentListOK, error)

	KubernetesGetHelmReleaseList(params *KubernetesGetHelmReleaseListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetHelmReleaseListOK, error)

	KubernetesGetIngresses(params *KubernetesGetIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetIngressesOK, error)

	KubernetesGetJobsList(params *KubernetesGetJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetJobsListOK, error)

	KubernetesGetKubeConfigFile(params *KubernetesGetKubeConfigFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubeConfigFileOK, error)

	KubernetesGetKubernetesAlertsList(params *KubernetesGetKubernetesAlertsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubernetesAlertsListOK, error)

	KubernetesGetKubernetesEventsList(params *KubernetesGetKubernetesEventsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubernetesEventsListOK, error)

	KubernetesGetNamespacesList(params *KubernetesGetNamespacesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNamespacesListOK, error)

	KubernetesGetNetworkPolicies(params *KubernetesGetNetworkPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNetworkPoliciesOK, error)

	KubernetesGetNodeList(params *KubernetesGetNodeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNodeListOK, error)

	KubernetesGetPdbList(params *KubernetesGetPdbListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPdbListOK, error)

	KubernetesGetPersistentVolumeClaim(params *KubernetesGetPersistentVolumeClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPersistentVolumeClaimOK, error)

	KubernetesGetPodList(params *KubernetesGetPodListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPodListOK, error)

	KubernetesGetPodLogsList(params *KubernetesGetPodLogsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPodLogsListOK, error)

	KubernetesGetSecret(params *KubernetesGetSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetSecretOK, error)

	KubernetesGetService(params *KubernetesGetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetServiceOK, error)

	KubernetesGetStorageClasses(params *KubernetesGetStorageClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStorageClassesOK, error)

	KubernetesGetStreamPodLogsList(params *KubernetesGetStreamPodLogsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStreamPodLogsListOK, error)

	KubernetesGetSts(params *KubernetesGetStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStsOK, error)

	KubernetesGetSupportedList(params *KubernetesGetSupportedListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetSupportedListOK, error)

	KubernetesOverview(params *KubernetesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesOverviewOK, error)

	KubernetesPatchConfigMap(params *KubernetesPatchConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchConfigMapOK, error)

	KubernetesPatchCrd(params *KubernetesPatchCrdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchCrdOK, error)

	KubernetesPatchCronJob(params *KubernetesPatchCronJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchCronJobOK, error)

	KubernetesPatchDeployment(params *KubernetesPatchDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchDeploymentOK, error)

	KubernetesPatchIngress(params *KubernetesPatchIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchIngressOK, error)

	KubernetesPatchJob(params *KubernetesPatchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchJobOK, error)

	KubernetesPatchNode(params *KubernetesPatchNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchNodeOK, error)

	KubernetesPatchPdb(params *KubernetesPatchPdbParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPdbOK, error)

	KubernetesPatchPod(params *KubernetesPatchPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPodOK, error)

	KubernetesPatchPvc(params *KubernetesPatchPvcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPvcOK, error)

	KubernetesPatchSecret(params *KubernetesPatchSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchSecretOK, error)

	KubernetesPatchSts(params *KubernetesPatchStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchStsOK, error)

	KubernetesRestartDaemonSet(params *KubernetesRestartDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartDaemonSetOK, error)

	KubernetesRestartDeployment(params *KubernetesRestartDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartDeploymentOK, error)

	KubernetesRestartSts(params *KubernetesRestartStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartStsOK, error)

	KubernetesSilenceManager(params *KubernetesSilenceManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesSilenceManagerOK, error)

	KubernetesUpdateKubernetesAlert(params *KubernetesUpdateKubernetesAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesUpdateKubernetesAlertOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
KubernetesCreateKubernetesAlert adds k8s alert
*/
func (a *Client) KubernetesCreateKubernetesAlert(params *KubernetesCreateKubernetesAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesCreateKubernetesAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesCreateKubernetesAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_CreateKubernetesAlert",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/alert/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesCreateKubernetesAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesCreateKubernetesAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_CreateKubernetesAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesCreateKubernetesEvent adds k8s event opsgenie
*/
func (a *Client) KubernetesCreateKubernetesEvent(params *KubernetesCreateKubernetesEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesCreateKubernetesEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesCreateKubernetesEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_CreateKubernetesEvent",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/event/{projectId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesCreateKubernetesEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesCreateKubernetesEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_CreateKubernetesEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDeleteAlerts removes k8s alerts
*/
func (a *Client) KubernetesDeleteAlerts(params *KubernetesDeleteAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeleteAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDeleteAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DeleteAlerts",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/removealerts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDeleteAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDeleteAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DeleteAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDeleteEvents removes k8s events
*/
func (a *Client) KubernetesDeleteEvents(params *KubernetesDeleteEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeleteEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDeleteEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DeleteEvents",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/removeevents",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDeleteEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDeleteEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DeleteEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDeletePod removes k8s namespaced pod
*/
func (a *Client) KubernetesDeletePod(params *KubernetesDeletePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDeletePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDeletePodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DeletePod",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/deletepod/{metadataName}/{podNamespace}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDeletePodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDeletePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DeletePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeConfigMap describes config map
*/
func (a *Client) KubernetesDescribeConfigMap(params *KubernetesDescribeConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeConfigMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeConfigMap",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/configmap",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeCrd describes crd
*/
func (a *Client) KubernetesDescribeCrd(params *KubernetesDescribeCrdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeCrdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeCrdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeCrd",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/crd",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeCrdReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeCrdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeCrd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeCronJob describes cronjob
*/
func (a *Client) KubernetesDescribeCronJob(params *KubernetesDescribeCronJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeCronJob",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/cronjob",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeCronJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeDaemonSet describes daemonset
*/
func (a *Client) KubernetesDescribeDaemonSet(params *KubernetesDescribeDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeDaemonSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeDaemonSet",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/daemonset",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeDaemonSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeDeployment describes deployment
*/
func (a *Client) KubernetesDescribeDeployment(params *KubernetesDescribeDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeDeployment",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/deployment",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeIngress describes ingress
*/
func (a *Client) KubernetesDescribeIngress(params *KubernetesDescribeIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeIngressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeIngress",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/ingress",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeIngressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeJob describes job
*/
func (a *Client) KubernetesDescribeJob(params *KubernetesDescribeJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeJob",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/job",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeNetworkPolicy describes network policy
*/
func (a *Client) KubernetesDescribeNetworkPolicy(params *KubernetesDescribeNetworkPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeNetworkPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeNetworkPolicy",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/network-policy",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeNetworkPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeNode describes node
*/
func (a *Client) KubernetesDescribeNode(params *KubernetesDescribeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeNode",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/node",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribePdb describes pdb
*/
func (a *Client) KubernetesDescribePdb(params *KubernetesDescribePdbParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePdbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribePdbParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribePdb",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/pdb",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribePdbReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribePdbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribePdb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribePod describes pod
*/
func (a *Client) KubernetesDescribePod(params *KubernetesDescribePodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribePodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribePod",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/pod",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribePodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribePvc describes pvc
*/
func (a *Client) KubernetesDescribePvc(params *KubernetesDescribePvcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribePvcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribePvcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribePvc",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/pvc",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribePvcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribePvcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribePvc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeSecret describes secret
*/
func (a *Client) KubernetesDescribeSecret(params *KubernetesDescribeSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeSecret",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/secret",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeService describes service
*/
func (a *Client) KubernetesDescribeService(params *KubernetesDescribeServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeService",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/service",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeStorageClass describes storage class
*/
func (a *Client) KubernetesDescribeStorageClass(params *KubernetesDescribeStorageClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeStorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeStorageClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeStorageClass",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/storageclass",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeStorageClassReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeStorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeStorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDescribeSts describes stateful set
*/
func (a *Client) KubernetesDescribeSts(params *KubernetesDescribeStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDescribeStsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDescribeStsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_DescribeSts",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/describe/sts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDescribeStsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDescribeStsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_DescribeSts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesDownload downloads kube config file bu project Id
*/
func (a *Client) KubernetesDownload(params *KubernetesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_Download",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/download",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_Download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesExecCli executes k8s web socket namespaced pod
*/
func (a *Client) KubernetesExecCli(params *KubernetesExecCliParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesExecCliOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesExecCliParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_ExecCli",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/cli",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesExecCliReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesExecCliOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_ExecCli: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetConfigMap retrieves a list of k8s config map for all namespaces
*/
func (a *Client) KubernetesGetConfigMap(params *KubernetesGetConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetConfigMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetConfigMap",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/configmap",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetCrdList retrieves a list of k8s custom resource definition
*/
func (a *Client) KubernetesGetCrdList(params *KubernetesGetCrdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetCrdListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetCrdListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetCrdList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/crd",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetCrdListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetCrdListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetCrdList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetCronJobsList retrieves a list of k8s cron jobs for all namespaces
*/
func (a *Client) KubernetesGetCronJobsList(params *KubernetesGetCronJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetCronJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetCronJobsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetCronJobsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/cronjobs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetCronJobsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetCronJobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetCronJobsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetDaemonSet retrieves a list of k8s daemon set for all namespaces
*/
func (a *Client) KubernetesGetDaemonSet(params *KubernetesGetDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetDaemonSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetDaemonSet",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/daemonset",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetDaemonSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetDashboard retrieves all data of the k8s by project Id
*/
func (a *Client) KubernetesGetDashboard(params *KubernetesGetDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetDashboard",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/dashboard",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetDeploymentList retrieves a list of k8s deployment for all namespaces
*/
func (a *Client) KubernetesGetDeploymentList(params *KubernetesGetDeploymentListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetDeploymentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetDeploymentListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetDeploymentList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/deployment",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetDeploymentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetDeploymentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetDeploymentList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetHelmReleaseList retrieves a list of k8s helm releases for all namespaces
*/
func (a *Client) KubernetesGetHelmReleaseList(params *KubernetesGetHelmReleaseListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetHelmReleaseListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetHelmReleaseListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetHelmReleaseList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/helmreleases",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetHelmReleaseListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetHelmReleaseListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetHelmReleaseList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetIngresses retrieves a list of k8s ingresses for all namespaces
*/
func (a *Client) KubernetesGetIngresses(params *KubernetesGetIngressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetIngressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetIngresses",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/ingress",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetIngresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetJobsList retrieves a list of k8s jobs for all namespaces
*/
func (a *Client) KubernetesGetJobsList(params *KubernetesGetJobsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetJobsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetJobsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/jobs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetJobsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetJobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetJobsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetKubeConfigFile retrieves kube config file
*/
func (a *Client) KubernetesGetKubeConfigFile(params *KubernetesGetKubeConfigFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubeConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetKubeConfigFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetKubeConfigFile",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/kubeconfig",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetKubeConfigFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetKubeConfigFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetKubeConfigFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetKubernetesAlertsList retrieves all k8s alerts by project Id
*/
func (a *Client) KubernetesGetKubernetesAlertsList(params *KubernetesGetKubernetesAlertsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubernetesAlertsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetKubernetesAlertsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetKubernetesAlertsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/alerts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetKubernetesAlertsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetKubernetesAlertsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetKubernetesAlertsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetKubernetesEventsList retrieves all k8s events by project Id
*/
func (a *Client) KubernetesGetKubernetesEventsList(params *KubernetesGetKubernetesEventsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetKubernetesEventsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetKubernetesEventsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetKubernetesEventsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/events",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetKubernetesEventsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetKubernetesEventsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetKubernetesEventsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetNamespacesList retrieves kube config file
*/
func (a *Client) KubernetesGetNamespacesList(params *KubernetesGetNamespacesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNamespacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetNamespacesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetNamespacesList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/namespaces",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetNamespacesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetNamespacesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetNamespacesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetNetworkPolicies retrieves a list of k8s network policies for all namespaces
*/
func (a *Client) KubernetesGetNetworkPolicies(params *KubernetesGetNetworkPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNetworkPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetNetworkPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetNetworkPolicies",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/network-policies",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetNetworkPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetNetworkPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetNetworkPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetNodeList retrieves a list of k8s node
*/
func (a *Client) KubernetesGetNodeList(params *KubernetesGetNodeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetNodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetNodeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetNodeList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/node",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetNodeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetNodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetNodeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetPdbList retrieves a list of k8s pdb for all namespaces
*/
func (a *Client) KubernetesGetPdbList(params *KubernetesGetPdbListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPdbListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetPdbListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetPdbList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/pdb",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetPdbListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetPdbListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetPdbList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetPersistentVolumeClaim retrieves a list of k8s persistent volume claim for all namespaces
*/
func (a *Client) KubernetesGetPersistentVolumeClaim(params *KubernetesGetPersistentVolumeClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetPersistentVolumeClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetPersistentVolumeClaim",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/pvc",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetPersistentVolumeClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetPodList retrieves a list of k8s pod for all namespaces
*/
func (a *Client) KubernetesGetPodList(params *KubernetesGetPodListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPodListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetPodListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetPodList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/pod",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetPodListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetPodListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetPodList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetPodLogsList retrieves k8s pod logs
*/
func (a *Client) KubernetesGetPodLogsList(params *KubernetesGetPodLogsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetPodLogsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetPodLogsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetPodLogsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/podlogs",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetPodLogsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetPodLogsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetPodLogsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetSecret retrieves a list of k8s secret for all namespaces
*/
func (a *Client) KubernetesGetSecret(params *KubernetesGetSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetSecret",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/secret",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetService retrieves a list of k8s service for all namespaces
*/
func (a *Client) KubernetesGetService(params *KubernetesGetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetService",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/service",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetStorageClasses retrieves a list of k8s storage classes
*/
func (a *Client) KubernetesGetStorageClasses(params *KubernetesGetStorageClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStorageClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetStorageClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetStorageClasses",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/storageclass",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetStorageClassesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetStorageClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetStorageClasses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetStreamPodLogsList retrieves k8s pod logs as stream
*/
func (a *Client) KubernetesGetStreamPodLogsList(params *KubernetesGetStreamPodLogsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStreamPodLogsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetStreamPodLogsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetStreamPodLogsList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/podlogs-stream",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetStreamPodLogsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetStreamPodLogsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetStreamPodLogsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetSts retrieves a list of k8s stateful set for all namespaces
*/
func (a *Client) KubernetesGetSts(params *KubernetesGetStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetStsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetStsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetSts",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/{projectId}/sts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetStsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetStsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetSts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesGetSupportedList retrieves taikun supported kubernetes version
*/
func (a *Client) KubernetesGetSupportedList(params *KubernetesGetSupportedListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesGetSupportedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesGetSupportedListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_GetSupportedList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/supported/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesGetSupportedListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesGetSupportedListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_GetSupportedList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesOverview overviews kubernetes nodes and pods by organization id
*/
func (a *Client) KubernetesOverview(params *KubernetesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_Overview",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Kubernetes/overview",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_Overview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchConfigMap patches config map
*/
func (a *Client) KubernetesPatchConfigMap(params *KubernetesPatchConfigMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchConfigMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchConfigMap",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/configmap",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchCrd patches crd
*/
func (a *Client) KubernetesPatchCrd(params *KubernetesPatchCrdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchCrdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchCrdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchCrd",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/crd",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchCrdReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchCrdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchCrd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchCronJob patches cronjob
*/
func (a *Client) KubernetesPatchCronJob(params *KubernetesPatchCronJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchCronJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchCronJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchCronJob",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/cronjob",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchCronJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchCronJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchCronJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchDeployment patches deployment
*/
func (a *Client) KubernetesPatchDeployment(params *KubernetesPatchDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchDeployment",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/deployment",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchIngress patches ingress
*/
func (a *Client) KubernetesPatchIngress(params *KubernetesPatchIngressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchIngressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchIngress",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/ingress",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchIngressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchJob patches job
*/
func (a *Client) KubernetesPatchJob(params *KubernetesPatchJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchJob",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/job",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchNode patches node
*/
func (a *Client) KubernetesPatchNode(params *KubernetesPatchNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchNode",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/node",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchPdb patches pdb
*/
func (a *Client) KubernetesPatchPdb(params *KubernetesPatchPdbParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPdbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchPdbParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchPdb",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/pdb",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchPdbReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchPdbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchPdb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchPod patches pod
*/
func (a *Client) KubernetesPatchPod(params *KubernetesPatchPodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchPodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchPod",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/pod",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchPodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchPvc patches pvc
*/
func (a *Client) KubernetesPatchPvc(params *KubernetesPatchPvcParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchPvcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchPvcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchPvc",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/pvc",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchPvcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchPvcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchPvc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchSecret patches secret
*/
func (a *Client) KubernetesPatchSecret(params *KubernetesPatchSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchSecret",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/secret",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesPatchSts patches sts
*/
func (a *Client) KubernetesPatchSts(params *KubernetesPatchStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesPatchStsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesPatchStsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_PatchSts",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/patch/sts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesPatchStsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesPatchStsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_PatchSts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesRestartDaemonSet restarts daemon set
*/
func (a *Client) KubernetesRestartDaemonSet(params *KubernetesRestartDaemonSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesRestartDaemonSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_RestartDaemonSet",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/restart/daemonset",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesRestartDaemonSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesRestartDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_RestartDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesRestartDeployment restarts deployment
*/
func (a *Client) KubernetesRestartDeployment(params *KubernetesRestartDeploymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesRestartDeploymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_RestartDeployment",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/restart/deployment",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesRestartDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesRestartDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_RestartDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesRestartSts restarts stateful set
*/
func (a *Client) KubernetesRestartSts(params *KubernetesRestartStsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesRestartStsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesRestartStsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_RestartSts",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/restart/sts",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesRestartStsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesRestartStsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_RestartSts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesSilenceManager silences management for k8s alerts
*/
func (a *Client) KubernetesSilenceManager(params *KubernetesSilenceManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesSilenceManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesSilenceManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_SilenceManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Kubernetes/silencemanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesSilenceManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesSilenceManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_SilenceManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KubernetesUpdateKubernetesAlert updates k8s alert
*/
func (a *Client) KubernetesUpdateKubernetesAlert(params *KubernetesUpdateKubernetesAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KubernetesUpdateKubernetesAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesUpdateKubernetesAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Kubernetes_UpdateKubernetesAlert",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/Kubernetes/updatealert/{alertId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesUpdateKubernetesAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KubernetesUpdateKubernetesAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Kubernetes_UpdateKubernetesAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
