// Code generated by go-swagger; DO NOT EDIT.

package kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesGetPersistentVolumeClaimReader is a Reader for the KubernetesGetPersistentVolumeClaim structure.
type KubernetesGetPersistentVolumeClaimReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KubernetesGetPersistentVolumeClaimReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKubernetesGetPersistentVolumeClaimOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKubernetesGetPersistentVolumeClaimBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewKubernetesGetPersistentVolumeClaimUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewKubernetesGetPersistentVolumeClaimForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewKubernetesGetPersistentVolumeClaimNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKubernetesGetPersistentVolumeClaimInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKubernetesGetPersistentVolumeClaimOK creates a KubernetesGetPersistentVolumeClaimOK with default headers values
func NewKubernetesGetPersistentVolumeClaimOK() *KubernetesGetPersistentVolumeClaimOK {
	return &KubernetesGetPersistentVolumeClaimOK{}
}

/*
KubernetesGetPersistentVolumeClaimOK describes a response with status code 200, with default header values.

Success
*/
type KubernetesGetPersistentVolumeClaimOK struct {
	Payload *KubernetesGetPersistentVolumeClaimOKBody
}

// IsSuccess returns true when this kubernetes get persistent volume claim o k response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kubernetes get persistent volume claim o k response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim o k response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kubernetes get persistent volume claim o k response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes get persistent volume claim o k response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimOK) IsCode(code int) bool {
	return code == 200
}

func (o *KubernetesGetPersistentVolumeClaimOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimOK  %+v", 200, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimOK  %+v", 200, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimOK) GetPayload() *KubernetesGetPersistentVolumeClaimOKBody {
	return o.Payload
}

func (o *KubernetesGetPersistentVolumeClaimOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubernetesGetPersistentVolumeClaimOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesGetPersistentVolumeClaimBadRequest creates a KubernetesGetPersistentVolumeClaimBadRequest with default headers values
func NewKubernetesGetPersistentVolumeClaimBadRequest() *KubernetesGetPersistentVolumeClaimBadRequest {
	return &KubernetesGetPersistentVolumeClaimBadRequest{}
}

/*
KubernetesGetPersistentVolumeClaimBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type KubernetesGetPersistentVolumeClaimBadRequest struct {
	Payload []*KubernetesGetPersistentVolumeClaimBadRequestBodyItems0
}

// IsSuccess returns true when this kubernetes get persistent volume claim bad request response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes get persistent volume claim bad request response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim bad request response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes get persistent volume claim bad request response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes get persistent volume claim bad request response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KubernetesGetPersistentVolumeClaimBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimBadRequest  %+v", 400, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimBadRequest  %+v", 400, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimBadRequest) GetPayload() []*KubernetesGetPersistentVolumeClaimBadRequestBodyItems0 {
	return o.Payload
}

func (o *KubernetesGetPersistentVolumeClaimBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesGetPersistentVolumeClaimUnauthorized creates a KubernetesGetPersistentVolumeClaimUnauthorized with default headers values
func NewKubernetesGetPersistentVolumeClaimUnauthorized() *KubernetesGetPersistentVolumeClaimUnauthorized {
	return &KubernetesGetPersistentVolumeClaimUnauthorized{}
}

/*
KubernetesGetPersistentVolumeClaimUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type KubernetesGetPersistentVolumeClaimUnauthorized struct {
	Payload *KubernetesGetPersistentVolumeClaimUnauthorizedBody
}

// IsSuccess returns true when this kubernetes get persistent volume claim unauthorized response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes get persistent volume claim unauthorized response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim unauthorized response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes get persistent volume claim unauthorized response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes get persistent volume claim unauthorized response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *KubernetesGetPersistentVolumeClaimUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimUnauthorized  %+v", 401, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimUnauthorized  %+v", 401, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimUnauthorized) GetPayload() *KubernetesGetPersistentVolumeClaimUnauthorizedBody {
	return o.Payload
}

func (o *KubernetesGetPersistentVolumeClaimUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubernetesGetPersistentVolumeClaimUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesGetPersistentVolumeClaimForbidden creates a KubernetesGetPersistentVolumeClaimForbidden with default headers values
func NewKubernetesGetPersistentVolumeClaimForbidden() *KubernetesGetPersistentVolumeClaimForbidden {
	return &KubernetesGetPersistentVolumeClaimForbidden{}
}

/*
KubernetesGetPersistentVolumeClaimForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type KubernetesGetPersistentVolumeClaimForbidden struct {
	Payload *KubernetesGetPersistentVolumeClaimForbiddenBody
}

// IsSuccess returns true when this kubernetes get persistent volume claim forbidden response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes get persistent volume claim forbidden response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim forbidden response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes get persistent volume claim forbidden response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes get persistent volume claim forbidden response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *KubernetesGetPersistentVolumeClaimForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimForbidden  %+v", 403, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimForbidden  %+v", 403, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimForbidden) GetPayload() *KubernetesGetPersistentVolumeClaimForbiddenBody {
	return o.Payload
}

func (o *KubernetesGetPersistentVolumeClaimForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubernetesGetPersistentVolumeClaimForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesGetPersistentVolumeClaimNotFound creates a KubernetesGetPersistentVolumeClaimNotFound with default headers values
func NewKubernetesGetPersistentVolumeClaimNotFound() *KubernetesGetPersistentVolumeClaimNotFound {
	return &KubernetesGetPersistentVolumeClaimNotFound{}
}

/*
KubernetesGetPersistentVolumeClaimNotFound describes a response with status code 404, with default header values.

Not Found
*/
type KubernetesGetPersistentVolumeClaimNotFound struct {
	Payload *KubernetesGetPersistentVolumeClaimNotFoundBody
}

// IsSuccess returns true when this kubernetes get persistent volume claim not found response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes get persistent volume claim not found response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim not found response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes get persistent volume claim not found response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes get persistent volume claim not found response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *KubernetesGetPersistentVolumeClaimNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimNotFound  %+v", 404, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimNotFound  %+v", 404, o.Payload)
}

func (o *KubernetesGetPersistentVolumeClaimNotFound) GetPayload() *KubernetesGetPersistentVolumeClaimNotFoundBody {
	return o.Payload
}

func (o *KubernetesGetPersistentVolumeClaimNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KubernetesGetPersistentVolumeClaimNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesGetPersistentVolumeClaimInternalServerError creates a KubernetesGetPersistentVolumeClaimInternalServerError with default headers values
func NewKubernetesGetPersistentVolumeClaimInternalServerError() *KubernetesGetPersistentVolumeClaimInternalServerError {
	return &KubernetesGetPersistentVolumeClaimInternalServerError{}
}

/*
KubernetesGetPersistentVolumeClaimInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type KubernetesGetPersistentVolumeClaimInternalServerError struct {
}

// IsSuccess returns true when this kubernetes get persistent volume claim internal server error response has a 2xx status code
func (o *KubernetesGetPersistentVolumeClaimInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes get persistent volume claim internal server error response has a 3xx status code
func (o *KubernetesGetPersistentVolumeClaimInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes get persistent volume claim internal server error response has a 4xx status code
func (o *KubernetesGetPersistentVolumeClaimInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this kubernetes get persistent volume claim internal server error response has a 5xx status code
func (o *KubernetesGetPersistentVolumeClaimInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this kubernetes get persistent volume claim internal server error response a status code equal to that given
func (o *KubernetesGetPersistentVolumeClaimInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *KubernetesGetPersistentVolumeClaimInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimInternalServerError ", 500)
}

func (o *KubernetesGetPersistentVolumeClaimInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Kubernetes/{projectId}/pvc][%d] kubernetesGetPersistentVolumeClaimInternalServerError ", 500)
}

func (o *KubernetesGetPersistentVolumeClaimInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
KubernetesGetPersistentVolumeClaimBadRequestBodyItems0 kubernetes get persistent volume claim bad request body items0
swagger:model KubernetesGetPersistentVolumeClaimBadRequestBodyItems0
*/
type KubernetesGetPersistentVolumeClaimBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim bad request body items0
func (o *KubernetesGetPersistentVolumeClaimBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kubernetes get persistent volume claim bad request body items0 based on context it is used
func (o *KubernetesGetPersistentVolumeClaimBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubernetesGetPersistentVolumeClaimForbiddenBody kubernetes get persistent volume claim forbidden body
swagger:model KubernetesGetPersistentVolumeClaimForbiddenBody
*/
type KubernetesGetPersistentVolumeClaimForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim forbidden body
func (o *KubernetesGetPersistentVolumeClaimForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kubernetes get persistent volume claim forbidden body based on context it is used
func (o *KubernetesGetPersistentVolumeClaimForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimForbiddenBody) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubernetesGetPersistentVolumeClaimNotFoundBody kubernetes get persistent volume claim not found body
swagger:model KubernetesGetPersistentVolumeClaimNotFoundBody
*/
type KubernetesGetPersistentVolumeClaimNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim not found body
func (o *KubernetesGetPersistentVolumeClaimNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kubernetes get persistent volume claim not found body based on context it is used
func (o *KubernetesGetPersistentVolumeClaimNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimNotFoundBody) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubernetesGetPersistentVolumeClaimOKBody kubernetes get persistent volume claim o k body
swagger:model KubernetesGetPersistentVolumeClaimOKBody
*/
type KubernetesGetPersistentVolumeClaimOKBody struct {

	// data
	Data []*KubernetesGetPersistentVolumeClaimOKBodyDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim o k body
func (o *KubernetesGetPersistentVolumeClaimOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KubernetesGetPersistentVolumeClaimOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesGetPersistentVolumeClaimOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesGetPersistentVolumeClaimOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubernetes get persistent volume claim o k body based on the context it is used
func (o *KubernetesGetPersistentVolumeClaimOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KubernetesGetPersistentVolumeClaimOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {
			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesGetPersistentVolumeClaimOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesGetPersistentVolumeClaimOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimOKBody) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubernetesGetPersistentVolumeClaimOKBodyDataItems0 kubernetes get persistent volume claim o k body data items0
swagger:model KubernetesGetPersistentVolumeClaimOKBodyDataItems0
*/
type KubernetesGetPersistentVolumeClaimOKBodyDataItems0 struct {

	// age
	Age string `json:"age,omitempty"`

	// metadata name
	MetadataName string `json:"metadataName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// storage class name
	StorageClassName string `json:"storageClassName,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim o k body data items0
func (o *KubernetesGetPersistentVolumeClaimOKBodyDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kubernetes get persistent volume claim o k body data items0 based on context it is used
func (o *KubernetesGetPersistentVolumeClaimOKBodyDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimOKBodyDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimOKBodyDataItems0) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimOKBodyDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KubernetesGetPersistentVolumeClaimUnauthorizedBody kubernetes get persistent volume claim unauthorized body
swagger:model KubernetesGetPersistentVolumeClaimUnauthorizedBody
*/
type KubernetesGetPersistentVolumeClaimUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this kubernetes get persistent volume claim unauthorized body
func (o *KubernetesGetPersistentVolumeClaimUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kubernetes get persistent volume claim unauthorized body based on context it is used
func (o *KubernetesGetPersistentVolumeClaimUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KubernetesGetPersistentVolumeClaimUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res KubernetesGetPersistentVolumeClaimUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
