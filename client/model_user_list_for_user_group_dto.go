/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UserListForUserGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserListForUserGroupDto{}

// UserListForUserGroupDto struct for UserListForUserGroupDto
type UserListForUserGroupDto struct {
	UserId     NullableString `json:"userId,omitempty"`
	UserName   NullableString `json:"userName,omitempty"`
	IsSelected *bool          `json:"isSelected,omitempty"`
}

// NewUserListForUserGroupDto instantiates a new UserListForUserGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserListForUserGroupDto() *UserListForUserGroupDto {
	this := UserListForUserGroupDto{}
	return &this
}

// NewUserListForUserGroupDtoWithDefaults instantiates a new UserListForUserGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListForUserGroupDtoWithDefaults() *UserListForUserGroupDto {
	this := UserListForUserGroupDto{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserListForUserGroupDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserListForUserGroupDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *UserListForUserGroupDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *UserListForUserGroupDto) SetUserId(v string) {
	o.UserId.Set(&v)
}

// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *UserListForUserGroupDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *UserListForUserGroupDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserListForUserGroupDto) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserListForUserGroupDto) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *UserListForUserGroupDto) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *UserListForUserGroupDto) SetUserName(v string) {
	o.UserName.Set(&v)
}

// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *UserListForUserGroupDto) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *UserListForUserGroupDto) UnsetUserName() {
	o.UserName.Unset()
}

// GetIsSelected returns the IsSelected field value if set, zero value otherwise.
func (o *UserListForUserGroupDto) GetIsSelected() bool {
	if o == nil || IsNil(o.IsSelected) {
		var ret bool
		return ret
	}
	return *o.IsSelected
}

// GetIsSelectedOk returns a tuple with the IsSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserListForUserGroupDto) GetIsSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSelected) {
		return nil, false
	}
	return o.IsSelected, true
}

// HasIsSelected returns a boolean if a field has been set.
func (o *UserListForUserGroupDto) HasIsSelected() bool {
	if o != nil && !IsNil(o.IsSelected) {
		return true
	}

	return false
}

// SetIsSelected gets a reference to the given bool and assigns it to the IsSelected field.
func (o *UserListForUserGroupDto) SetIsSelected(v bool) {
	o.IsSelected = &v
}

func (o UserListForUserGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserListForUserGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if !IsNil(o.IsSelected) {
		toSerialize["isSelected"] = o.IsSelected
	}
	return toSerialize, nil
}

type NullableUserListForUserGroupDto struct {
	value *UserListForUserGroupDto
	isSet bool
}

func (v NullableUserListForUserGroupDto) Get() *UserListForUserGroupDto {
	return v.value
}

func (v *NullableUserListForUserGroupDto) Set(val *UserListForUserGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListForUserGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListForUserGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListForUserGroupDto(val *UserListForUserGroupDto) *NullableUserListForUserGroupDto {
	return &NullableUserListForUserGroupDto{value: val, isSet: true}
}

func (v NullableUserListForUserGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListForUserGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
