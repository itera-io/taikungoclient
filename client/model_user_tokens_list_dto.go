/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UserTokensListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTokensListDto{}

// UserTokensListDto struct for UserTokensListDto
type UserTokensListDto struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	IsReadonly *bool `json:"isReadonly,omitempty"`
	ExpireDate *string `json:"expireDate,omitempty"`
	AccessKey *string `json:"accessKey,omitempty"`
}

// NewUserTokensListDto instantiates a new UserTokensListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTokensListDto() *UserTokensListDto {
	this := UserTokensListDto{}
	return &this
}

// NewUserTokensListDtoWithDefaults instantiates a new UserTokensListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTokensListDtoWithDefaults() *UserTokensListDto {
	this := UserTokensListDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserTokensListDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserTokensListDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserTokensListDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserTokensListDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserTokensListDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserTokensListDto) SetName(v string) {
	o.Name = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UserTokensListDto) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UserTokensListDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *UserTokensListDto) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetIsReadonly returns the IsReadonly field value if set, zero value otherwise.
func (o *UserTokensListDto) GetIsReadonly() bool {
	if o == nil || IsNil(o.IsReadonly) {
		var ret bool
		return ret
	}
	return *o.IsReadonly
}

// GetIsReadonlyOk returns a tuple with the IsReadonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetIsReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadonly) {
		return nil, false
	}
	return o.IsReadonly, true
}

// HasIsReadonly returns a boolean if a field has been set.
func (o *UserTokensListDto) HasIsReadonly() bool {
	if o != nil && !IsNil(o.IsReadonly) {
		return true
	}

	return false
}

// SetIsReadonly gets a reference to the given bool and assigns it to the IsReadonly field.
func (o *UserTokensListDto) SetIsReadonly(v bool) {
	o.IsReadonly = &v
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise.
func (o *UserTokensListDto) GetExpireDate() string {
	if o == nil || IsNil(o.ExpireDate) {
		var ret string
		return ret
	}
	return *o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetExpireDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireDate) {
		return nil, false
	}
	return o.ExpireDate, true
}

// HasExpireDate returns a boolean if a field has been set.
func (o *UserTokensListDto) HasExpireDate() bool {
	if o != nil && !IsNil(o.ExpireDate) {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given string and assigns it to the ExpireDate field.
func (o *UserTokensListDto) SetExpireDate(v string) {
	o.ExpireDate = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *UserTokensListDto) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokensListDto) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *UserTokensListDto) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *UserTokensListDto) SetAccessKey(v string) {
	o.AccessKey = &v
}

func (o UserTokensListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTokensListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.IsReadonly) {
		toSerialize["isReadonly"] = o.IsReadonly
	}
	if !IsNil(o.ExpireDate) {
		toSerialize["expireDate"] = o.ExpireDate
	}
	if !IsNil(o.AccessKey) {
		toSerialize["accessKey"] = o.AccessKey
	}
	return toSerialize, nil
}

type NullableUserTokensListDto struct {
	value *UserTokensListDto
	isSet bool
}

func (v NullableUserTokensListDto) Get() *UserTokensListDto {
	return v.value
}

func (v *NullableUserTokensListDto) Set(val *UserTokensListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTokensListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTokensListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTokensListDto(val *UserTokensListDto) *NullableUserTokensListDto {
	return &NullableUserTokensListDto{value: val, isSet: true}
}

func (v NullableUserTokensListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTokensListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


