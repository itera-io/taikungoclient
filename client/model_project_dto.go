/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectDto{}

// ProjectDto struct for ProjectDto
type ProjectDto struct {
	ProjectId int32 `json:"projectId"`
	ProjectName NullableString `json:"projectName"`
}

type _ProjectDto ProjectDto

// NewProjectDto instantiates a new ProjectDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectDto(projectId int32, projectName NullableString) *ProjectDto {
	this := ProjectDto{}
	this.ProjectId = projectId
	this.ProjectName = projectName
	return &this
}

// NewProjectDtoWithDefaults instantiates a new ProjectDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectDtoWithDefaults() *ProjectDto {
	this := ProjectDto{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *ProjectDto) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ProjectDto) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ProjectDto) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectDto) GetProjectName() string {
	if o == nil || o.ProjectName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProjectName.Get()
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectDto) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectName.Get(), o.ProjectName.IsSet()
}

// SetProjectName sets field value
func (o *ProjectDto) SetProjectName(v string) {
	o.ProjectName.Set(&v)
}

func (o ProjectDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["projectName"] = o.ProjectName.Get()
	return toSerialize, nil
}

func (o *ProjectDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"projectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectDto := _ProjectDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectDto)

	if err != nil {
		return err
	}

	*o = ProjectDto(varProjectDto)

	return err
}

type NullableProjectDto struct {
	value *ProjectDto
	isSet bool
}

func (v NullableProjectDto) Get() *ProjectDto {
	return v.value
}

func (v *NullableProjectDto) Set(val *ProjectDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectDto(val *ProjectDto) *NullableProjectDto {
	return &NullableProjectDto{value: val, isSet: true}
}

func (v NullableProjectDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


