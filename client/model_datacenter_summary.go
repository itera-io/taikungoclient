/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the DatacenterSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatacenterSummary{}

// DatacenterSummary struct for DatacenterSummary
type DatacenterSummary struct {
	Datacenter *string `json:"datacenter,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewDatacenterSummary instantiates a new DatacenterSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatacenterSummary() *DatacenterSummary {
	this := DatacenterSummary{}
	return &this
}

// NewDatacenterSummaryWithDefaults instantiates a new DatacenterSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatacenterSummaryWithDefaults() *DatacenterSummary {
	this := DatacenterSummary{}
	return &this
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *DatacenterSummary) GetDatacenter() string {
	if o == nil || IsNil(o.Datacenter) {
		var ret string
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterSummary) GetDatacenterOk() (*string, bool) {
	if o == nil || IsNil(o.Datacenter) {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *DatacenterSummary) HasDatacenter() bool {
	if o != nil && !IsNil(o.Datacenter) {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given string and assigns it to the Datacenter field.
func (o *DatacenterSummary) SetDatacenter(v string) {
	o.Datacenter = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatacenterSummary) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterSummary) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatacenterSummary) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatacenterSummary) SetName(v string) {
	o.Name = &v
}

func (o DatacenterSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatacenterSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datacenter) {
		toSerialize["datacenter"] = o.Datacenter
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDatacenterSummary struct {
	value *DatacenterSummary
	isSet bool
}

func (v NullableDatacenterSummary) Get() *DatacenterSummary {
	return v.value
}

func (v *NullableDatacenterSummary) Set(val *DatacenterSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDatacenterSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDatacenterSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatacenterSummary(val *DatacenterSummary) *NullableDatacenterSummary {
	return &NullableDatacenterSummary{value: val, isSet: true}
}

func (v NullableDatacenterSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatacenterSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


