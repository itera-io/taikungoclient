/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PartnerRecordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerRecordDto{}

// PartnerRecordDto struct for PartnerRecordDto
type PartnerRecordDto struct {
	Id int32 `json:"id"`
	LogoUrl NullableString `json:"logoUrl"`
	BackgroundImageUrl NullableString `json:"backgroundImageUrl"`
	PaymentEnabled bool `json:"paymentEnabled"`
	AllowRegistration bool `json:"allowRegistration"`
	PartnerColorSettings *PartnerColorSettingsDto `json:"partnerColorSettings,omitempty"`
	PartnerImageSettings *PartnerImageSettingsDto `json:"partnerImageSettings,omitempty"`
}

type _PartnerRecordDto PartnerRecordDto

// NewPartnerRecordDto instantiates a new PartnerRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerRecordDto(id int32, logoUrl NullableString, backgroundImageUrl NullableString, paymentEnabled bool, allowRegistration bool) *PartnerRecordDto {
	this := PartnerRecordDto{}
	this.Id = id
	this.LogoUrl = logoUrl
	this.BackgroundImageUrl = backgroundImageUrl
	this.PaymentEnabled = paymentEnabled
	this.AllowRegistration = allowRegistration
	return &this
}

// NewPartnerRecordDtoWithDefaults instantiates a new PartnerRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerRecordDtoWithDefaults() *PartnerRecordDto {
	this := PartnerRecordDto{}
	return &this
}

// GetId returns the Id field value
func (o *PartnerRecordDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PartnerRecordDto) SetId(v int32) {
	o.Id = v
}

// GetLogoUrl returns the LogoUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PartnerRecordDto) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerRecordDto) GetLogoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// SetLogoUrl sets field value
func (o *PartnerRecordDto) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}

// GetBackgroundImageUrl returns the BackgroundImageUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PartnerRecordDto) GetBackgroundImageUrl() string {
	if o == nil || o.BackgroundImageUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.BackgroundImageUrl.Get()
}

// GetBackgroundImageUrlOk returns a tuple with the BackgroundImageUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerRecordDto) GetBackgroundImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackgroundImageUrl.Get(), o.BackgroundImageUrl.IsSet()
}

// SetBackgroundImageUrl sets field value
func (o *PartnerRecordDto) SetBackgroundImageUrl(v string) {
	o.BackgroundImageUrl.Set(&v)
}

// GetPaymentEnabled returns the PaymentEnabled field value
func (o *PartnerRecordDto) GetPaymentEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PaymentEnabled
}

// GetPaymentEnabledOk returns a tuple with the PaymentEnabled field value
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPaymentEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentEnabled, true
}

// SetPaymentEnabled sets field value
func (o *PartnerRecordDto) SetPaymentEnabled(v bool) {
	o.PaymentEnabled = v
}

// GetAllowRegistration returns the AllowRegistration field value
func (o *PartnerRecordDto) GetAllowRegistration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowRegistration
}

// GetAllowRegistrationOk returns a tuple with the AllowRegistration field value
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetAllowRegistrationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowRegistration, true
}

// SetAllowRegistration sets field value
func (o *PartnerRecordDto) SetAllowRegistration(v bool) {
	o.AllowRegistration = v
}

// GetPartnerColorSettings returns the PartnerColorSettings field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetPartnerColorSettings() PartnerColorSettingsDto {
	if o == nil || IsNil(o.PartnerColorSettings) {
		var ret PartnerColorSettingsDto
		return ret
	}
	return *o.PartnerColorSettings
}

// GetPartnerColorSettingsOk returns a tuple with the PartnerColorSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPartnerColorSettingsOk() (*PartnerColorSettingsDto, bool) {
	if o == nil || IsNil(o.PartnerColorSettings) {
		return nil, false
	}
	return o.PartnerColorSettings, true
}

// HasPartnerColorSettings returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasPartnerColorSettings() bool {
	if o != nil && !IsNil(o.PartnerColorSettings) {
		return true
	}

	return false
}

// SetPartnerColorSettings gets a reference to the given PartnerColorSettingsDto and assigns it to the PartnerColorSettings field.
func (o *PartnerRecordDto) SetPartnerColorSettings(v PartnerColorSettingsDto) {
	o.PartnerColorSettings = &v
}

// GetPartnerImageSettings returns the PartnerImageSettings field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetPartnerImageSettings() PartnerImageSettingsDto {
	if o == nil || IsNil(o.PartnerImageSettings) {
		var ret PartnerImageSettingsDto
		return ret
	}
	return *o.PartnerImageSettings
}

// GetPartnerImageSettingsOk returns a tuple with the PartnerImageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPartnerImageSettingsOk() (*PartnerImageSettingsDto, bool) {
	if o == nil || IsNil(o.PartnerImageSettings) {
		return nil, false
	}
	return o.PartnerImageSettings, true
}

// HasPartnerImageSettings returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasPartnerImageSettings() bool {
	if o != nil && !IsNil(o.PartnerImageSettings) {
		return true
	}

	return false
}

// SetPartnerImageSettings gets a reference to the given PartnerImageSettingsDto and assigns it to the PartnerImageSettings field.
func (o *PartnerRecordDto) SetPartnerImageSettings(v PartnerImageSettingsDto) {
	o.PartnerImageSettings = &v
}

func (o PartnerRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerRecordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["logoUrl"] = o.LogoUrl.Get()
	toSerialize["backgroundImageUrl"] = o.BackgroundImageUrl.Get()
	toSerialize["paymentEnabled"] = o.PaymentEnabled
	toSerialize["allowRegistration"] = o.AllowRegistration
	if !IsNil(o.PartnerColorSettings) {
		toSerialize["partnerColorSettings"] = o.PartnerColorSettings
	}
	if !IsNil(o.PartnerImageSettings) {
		toSerialize["partnerImageSettings"] = o.PartnerImageSettings
	}
	return toSerialize, nil
}

func (o *PartnerRecordDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"logoUrl",
		"backgroundImageUrl",
		"paymentEnabled",
		"allowRegistration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartnerRecordDto := _PartnerRecordDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartnerRecordDto)

	if err != nil {
		return err
	}

	*o = PartnerRecordDto(varPartnerRecordDto)

	return err
}

type NullablePartnerRecordDto struct {
	value *PartnerRecordDto
	isSet bool
}

func (v NullablePartnerRecordDto) Get() *PartnerRecordDto {
	return v.value
}

func (v *NullablePartnerRecordDto) Set(val *PartnerRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerRecordDto(val *PartnerRecordDto) *NullablePartnerRecordDto {
	return &NullablePartnerRecordDto{value: val, isSet: true}
}

func (v NullablePartnerRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


