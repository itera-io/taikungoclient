/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the PartnerRecordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerRecordDto{}

// PartnerRecordDto struct for PartnerRecordDto
type PartnerRecordDto struct {
	Id *int32 `json:"id,omitempty"`
	BackgroundImageUrl NullableString `json:"backgroundImageUrl,omitempty"`
	PaymentEnabled *bool `json:"paymentEnabled,omitempty"`
	AllowRegistration *bool `json:"allowRegistration,omitempty"`
	PartnerColorSettings *PartnerColorSettingsDto `json:"partnerColorSettings,omitempty"`
	PartnerImageSettings *PartnerImageSettingsDto `json:"partnerImageSettings,omitempty"`
}

// NewPartnerRecordDto instantiates a new PartnerRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerRecordDto() *PartnerRecordDto {
	this := PartnerRecordDto{}
	return &this
}

// NewPartnerRecordDtoWithDefaults instantiates a new PartnerRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerRecordDtoWithDefaults() *PartnerRecordDto {
	this := PartnerRecordDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PartnerRecordDto) SetId(v int32) {
	o.Id = &v
}

// GetBackgroundImageUrl returns the BackgroundImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PartnerRecordDto) GetBackgroundImageUrl() string {
	if o == nil || IsNil(o.BackgroundImageUrl.Get()) {
		var ret string
		return ret
	}
	return *o.BackgroundImageUrl.Get()
}

// GetBackgroundImageUrlOk returns a tuple with the BackgroundImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PartnerRecordDto) GetBackgroundImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackgroundImageUrl.Get(), o.BackgroundImageUrl.IsSet()
}

// HasBackgroundImageUrl returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasBackgroundImageUrl() bool {
	if o != nil && o.BackgroundImageUrl.IsSet() {
		return true
	}

	return false
}

// SetBackgroundImageUrl gets a reference to the given NullableString and assigns it to the BackgroundImageUrl field.
func (o *PartnerRecordDto) SetBackgroundImageUrl(v string) {
	o.BackgroundImageUrl.Set(&v)
}
// SetBackgroundImageUrlNil sets the value for BackgroundImageUrl to be an explicit nil
func (o *PartnerRecordDto) SetBackgroundImageUrlNil() {
	o.BackgroundImageUrl.Set(nil)
}

// UnsetBackgroundImageUrl ensures that no value is present for BackgroundImageUrl, not even an explicit nil
func (o *PartnerRecordDto) UnsetBackgroundImageUrl() {
	o.BackgroundImageUrl.Unset()
}

// GetPaymentEnabled returns the PaymentEnabled field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetPaymentEnabled() bool {
	if o == nil || IsNil(o.PaymentEnabled) {
		var ret bool
		return ret
	}
	return *o.PaymentEnabled
}

// GetPaymentEnabledOk returns a tuple with the PaymentEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPaymentEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PaymentEnabled) {
		return nil, false
	}
	return o.PaymentEnabled, true
}

// HasPaymentEnabled returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasPaymentEnabled() bool {
	if o != nil && !IsNil(o.PaymentEnabled) {
		return true
	}

	return false
}

// SetPaymentEnabled gets a reference to the given bool and assigns it to the PaymentEnabled field.
func (o *PartnerRecordDto) SetPaymentEnabled(v bool) {
	o.PaymentEnabled = &v
}

// GetAllowRegistration returns the AllowRegistration field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetAllowRegistration() bool {
	if o == nil || IsNil(o.AllowRegistration) {
		var ret bool
		return ret
	}
	return *o.AllowRegistration
}

// GetAllowRegistrationOk returns a tuple with the AllowRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetAllowRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRegistration) {
		return nil, false
	}
	return o.AllowRegistration, true
}

// HasAllowRegistration returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasAllowRegistration() bool {
	if o != nil && !IsNil(o.AllowRegistration) {
		return true
	}

	return false
}

// SetAllowRegistration gets a reference to the given bool and assigns it to the AllowRegistration field.
func (o *PartnerRecordDto) SetAllowRegistration(v bool) {
	o.AllowRegistration = &v
}

// GetPartnerColorSettings returns the PartnerColorSettings field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetPartnerColorSettings() PartnerColorSettingsDto {
	if o == nil || IsNil(o.PartnerColorSettings) {
		var ret PartnerColorSettingsDto
		return ret
	}
	return *o.PartnerColorSettings
}

// GetPartnerColorSettingsOk returns a tuple with the PartnerColorSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPartnerColorSettingsOk() (*PartnerColorSettingsDto, bool) {
	if o == nil || IsNil(o.PartnerColorSettings) {
		return nil, false
	}
	return o.PartnerColorSettings, true
}

// HasPartnerColorSettings returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasPartnerColorSettings() bool {
	if o != nil && !IsNil(o.PartnerColorSettings) {
		return true
	}

	return false
}

// SetPartnerColorSettings gets a reference to the given PartnerColorSettingsDto and assigns it to the PartnerColorSettings field.
func (o *PartnerRecordDto) SetPartnerColorSettings(v PartnerColorSettingsDto) {
	o.PartnerColorSettings = &v
}

// GetPartnerImageSettings returns the PartnerImageSettings field value if set, zero value otherwise.
func (o *PartnerRecordDto) GetPartnerImageSettings() PartnerImageSettingsDto {
	if o == nil || IsNil(o.PartnerImageSettings) {
		var ret PartnerImageSettingsDto
		return ret
	}
	return *o.PartnerImageSettings
}

// GetPartnerImageSettingsOk returns a tuple with the PartnerImageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerRecordDto) GetPartnerImageSettingsOk() (*PartnerImageSettingsDto, bool) {
	if o == nil || IsNil(o.PartnerImageSettings) {
		return nil, false
	}
	return o.PartnerImageSettings, true
}

// HasPartnerImageSettings returns a boolean if a field has been set.
func (o *PartnerRecordDto) HasPartnerImageSettings() bool {
	if o != nil && !IsNil(o.PartnerImageSettings) {
		return true
	}

	return false
}

// SetPartnerImageSettings gets a reference to the given PartnerImageSettingsDto and assigns it to the PartnerImageSettings field.
func (o *PartnerRecordDto) SetPartnerImageSettings(v PartnerImageSettingsDto) {
	o.PartnerImageSettings = &v
}

func (o PartnerRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerRecordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.BackgroundImageUrl.IsSet() {
		toSerialize["backgroundImageUrl"] = o.BackgroundImageUrl.Get()
	}
	if !IsNil(o.PaymentEnabled) {
		toSerialize["paymentEnabled"] = o.PaymentEnabled
	}
	if !IsNil(o.AllowRegistration) {
		toSerialize["allowRegistration"] = o.AllowRegistration
	}
	if !IsNil(o.PartnerColorSettings) {
		toSerialize["partnerColorSettings"] = o.PartnerColorSettings
	}
	if !IsNil(o.PartnerImageSettings) {
		toSerialize["partnerImageSettings"] = o.PartnerImageSettings
	}
	return toSerialize, nil
}

type NullablePartnerRecordDto struct {
	value *PartnerRecordDto
	isSet bool
}

func (v NullablePartnerRecordDto) Get() *PartnerRecordDto {
	return v.value
}

func (v *NullablePartnerRecordDto) Set(val *PartnerRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerRecordDto(val *PartnerRecordDto) *NullablePartnerRecordDto {
	return &NullablePartnerRecordDto{value: val, isSet: true}
}

func (v NullablePartnerRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


