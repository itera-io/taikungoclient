/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupDto{}

// BackupDto struct for BackupDto
type BackupDto struct {
	IncludedNamespace []string `json:"includedNamespace"`
	ExcludedNamespace []string `json:"excludedNamespace"`
}

type _BackupDto BackupDto

// NewBackupDto instantiates a new BackupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupDto(includedNamespace []string, excludedNamespace []string) *BackupDto {
	this := BackupDto{}
	this.IncludedNamespace = includedNamespace
	this.ExcludedNamespace = excludedNamespace
	return &this
}

// NewBackupDtoWithDefaults instantiates a new BackupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupDtoWithDefaults() *BackupDto {
	this := BackupDto{}
	return &this
}

// GetIncludedNamespace returns the IncludedNamespace field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *BackupDto) GetIncludedNamespace() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedNamespace
}

// GetIncludedNamespaceOk returns a tuple with the IncludedNamespace field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupDto) GetIncludedNamespaceOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedNamespace) {
		return nil, false
	}
	return o.IncludedNamespace, true
}

// SetIncludedNamespace sets field value
func (o *BackupDto) SetIncludedNamespace(v []string) {
	o.IncludedNamespace = v
}

// GetExcludedNamespace returns the ExcludedNamespace field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *BackupDto) GetExcludedNamespace() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedNamespace
}

// GetExcludedNamespaceOk returns a tuple with the ExcludedNamespace field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupDto) GetExcludedNamespaceOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedNamespace) {
		return nil, false
	}
	return o.ExcludedNamespace, true
}

// SetExcludedNamespace sets field value
func (o *BackupDto) SetExcludedNamespace(v []string) {
	o.ExcludedNamespace = v
}

func (o BackupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludedNamespace != nil {
		toSerialize["includedNamespace"] = o.IncludedNamespace
	}
	if o.ExcludedNamespace != nil {
		toSerialize["excludedNamespace"] = o.ExcludedNamespace
	}
	return toSerialize, nil
}

func (o *BackupDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includedNamespace",
		"excludedNamespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupDto := _BackupDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupDto)

	if err != nil {
		return err
	}

	*o = BackupDto(varBackupDto)

	return err
}

type NullableBackupDto struct {
	value *BackupDto
	isSet bool
}

func (v NullableBackupDto) Get() *BackupDto {
	return v.value
}

func (v *NullableBackupDto) Set(val *BackupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupDto(val *BackupDto) *NullableBackupDto {
	return &NullableBackupDto{value: val, isSet: true}
}

func (v NullableBackupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


