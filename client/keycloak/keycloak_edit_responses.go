// Code generated by go-swagger; DO NOT EDIT.

package keycloak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeycloakEditReader is a Reader for the KeycloakEdit structure.
type KeycloakEditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeycloakEditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKeycloakEditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeycloakEditBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewKeycloakEditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewKeycloakEditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewKeycloakEditNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKeycloakEditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKeycloakEditOK creates a KeycloakEditOK with default headers values
func NewKeycloakEditOK() *KeycloakEditOK {
	return &KeycloakEditOK{}
}

/*
KeycloakEditOK describes a response with status code 200, with default header values.

Success
*/
type KeycloakEditOK struct {
	Payload interface{}
}

// IsSuccess returns true when this keycloak edit o k response has a 2xx status code
func (o *KeycloakEditOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this keycloak edit o k response has a 3xx status code
func (o *KeycloakEditOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit o k response has a 4xx status code
func (o *KeycloakEditOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this keycloak edit o k response has a 5xx status code
func (o *KeycloakEditOK) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak edit o k response a status code equal to that given
func (o *KeycloakEditOK) IsCode(code int) bool {
	return code == 200
}

func (o *KeycloakEditOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditOK  %+v", 200, o.Payload)
}

func (o *KeycloakEditOK) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditOK  %+v", 200, o.Payload)
}

func (o *KeycloakEditOK) GetPayload() interface{} {
	return o.Payload
}

func (o *KeycloakEditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakEditBadRequest creates a KeycloakEditBadRequest with default headers values
func NewKeycloakEditBadRequest() *KeycloakEditBadRequest {
	return &KeycloakEditBadRequest{}
}

/*
KeycloakEditBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type KeycloakEditBadRequest struct {
	Payload []*KeycloakEditBadRequestBodyItems0
}

// IsSuccess returns true when this keycloak edit bad request response has a 2xx status code
func (o *KeycloakEditBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak edit bad request response has a 3xx status code
func (o *KeycloakEditBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit bad request response has a 4xx status code
func (o *KeycloakEditBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak edit bad request response has a 5xx status code
func (o *KeycloakEditBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak edit bad request response a status code equal to that given
func (o *KeycloakEditBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KeycloakEditBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditBadRequest  %+v", 400, o.Payload)
}

func (o *KeycloakEditBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditBadRequest  %+v", 400, o.Payload)
}

func (o *KeycloakEditBadRequest) GetPayload() []*KeycloakEditBadRequestBodyItems0 {
	return o.Payload
}

func (o *KeycloakEditBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakEditUnauthorized creates a KeycloakEditUnauthorized with default headers values
func NewKeycloakEditUnauthorized() *KeycloakEditUnauthorized {
	return &KeycloakEditUnauthorized{}
}

/*
KeycloakEditUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type KeycloakEditUnauthorized struct {
	Payload *KeycloakEditUnauthorizedBody
}

// IsSuccess returns true when this keycloak edit unauthorized response has a 2xx status code
func (o *KeycloakEditUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak edit unauthorized response has a 3xx status code
func (o *KeycloakEditUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit unauthorized response has a 4xx status code
func (o *KeycloakEditUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak edit unauthorized response has a 5xx status code
func (o *KeycloakEditUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak edit unauthorized response a status code equal to that given
func (o *KeycloakEditUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *KeycloakEditUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditUnauthorized  %+v", 401, o.Payload)
}

func (o *KeycloakEditUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditUnauthorized  %+v", 401, o.Payload)
}

func (o *KeycloakEditUnauthorized) GetPayload() *KeycloakEditUnauthorizedBody {
	return o.Payload
}

func (o *KeycloakEditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakEditUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakEditForbidden creates a KeycloakEditForbidden with default headers values
func NewKeycloakEditForbidden() *KeycloakEditForbidden {
	return &KeycloakEditForbidden{}
}

/*
KeycloakEditForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type KeycloakEditForbidden struct {
	Payload *KeycloakEditForbiddenBody
}

// IsSuccess returns true when this keycloak edit forbidden response has a 2xx status code
func (o *KeycloakEditForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak edit forbidden response has a 3xx status code
func (o *KeycloakEditForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit forbidden response has a 4xx status code
func (o *KeycloakEditForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak edit forbidden response has a 5xx status code
func (o *KeycloakEditForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak edit forbidden response a status code equal to that given
func (o *KeycloakEditForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *KeycloakEditForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditForbidden  %+v", 403, o.Payload)
}

func (o *KeycloakEditForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditForbidden  %+v", 403, o.Payload)
}

func (o *KeycloakEditForbidden) GetPayload() *KeycloakEditForbiddenBody {
	return o.Payload
}

func (o *KeycloakEditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakEditForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakEditNotFound creates a KeycloakEditNotFound with default headers values
func NewKeycloakEditNotFound() *KeycloakEditNotFound {
	return &KeycloakEditNotFound{}
}

/*
KeycloakEditNotFound describes a response with status code 404, with default header values.

Not Found
*/
type KeycloakEditNotFound struct {
	Payload *KeycloakEditNotFoundBody
}

// IsSuccess returns true when this keycloak edit not found response has a 2xx status code
func (o *KeycloakEditNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak edit not found response has a 3xx status code
func (o *KeycloakEditNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit not found response has a 4xx status code
func (o *KeycloakEditNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak edit not found response has a 5xx status code
func (o *KeycloakEditNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak edit not found response a status code equal to that given
func (o *KeycloakEditNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *KeycloakEditNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditNotFound  %+v", 404, o.Payload)
}

func (o *KeycloakEditNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditNotFound  %+v", 404, o.Payload)
}

func (o *KeycloakEditNotFound) GetPayload() *KeycloakEditNotFoundBody {
	return o.Payload
}

func (o *KeycloakEditNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakEditNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakEditInternalServerError creates a KeycloakEditInternalServerError with default headers values
func NewKeycloakEditInternalServerError() *KeycloakEditInternalServerError {
	return &KeycloakEditInternalServerError{}
}

/*
KeycloakEditInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type KeycloakEditInternalServerError struct {
}

// IsSuccess returns true when this keycloak edit internal server error response has a 2xx status code
func (o *KeycloakEditInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak edit internal server error response has a 3xx status code
func (o *KeycloakEditInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak edit internal server error response has a 4xx status code
func (o *KeycloakEditInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this keycloak edit internal server error response has a 5xx status code
func (o *KeycloakEditInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this keycloak edit internal server error response a status code equal to that given
func (o *KeycloakEditInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *KeycloakEditInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditInternalServerError ", 500)
}

func (o *KeycloakEditInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Keycloak/edit][%d] keycloakEditInternalServerError ", 500)
}

func (o *KeycloakEditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
KeycloakEditBadRequestBodyItems0 keycloak edit bad request body items0
swagger:model KeycloakEditBadRequestBodyItems0
*/
type KeycloakEditBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this keycloak edit bad request body items0
func (o *KeycloakEditBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak edit bad request body items0 based on context it is used
func (o *KeycloakEditBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakEditBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakEditBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res KeycloakEditBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakEditBody keycloak edit body
swagger:model KeycloakEditBody
*/
type KeycloakEditBody struct {

	// client Id
	ClientID string `json:"clientId,omitempty"`

	// client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// realms name
	RealmsName string `json:"realmsName,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this keycloak edit body
func (o *KeycloakEditBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak edit body based on context it is used
func (o *KeycloakEditBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakEditBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakEditBody) UnmarshalBinary(b []byte) error {
	var res KeycloakEditBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakEditForbiddenBody keycloak edit forbidden body
swagger:model KeycloakEditForbiddenBody
*/
type KeycloakEditForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak edit forbidden body
func (o *KeycloakEditForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak edit forbidden body based on context it is used
func (o *KeycloakEditForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakEditForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakEditForbiddenBody) UnmarshalBinary(b []byte) error {
	var res KeycloakEditForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakEditNotFoundBody keycloak edit not found body
swagger:model KeycloakEditNotFoundBody
*/
type KeycloakEditNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak edit not found body
func (o *KeycloakEditNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak edit not found body based on context it is used
func (o *KeycloakEditNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakEditNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakEditNotFoundBody) UnmarshalBinary(b []byte) error {
	var res KeycloakEditNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakEditUnauthorizedBody keycloak edit unauthorized body
swagger:model KeycloakEditUnauthorizedBody
*/
type KeycloakEditUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak edit unauthorized body
func (o *KeycloakEditUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak edit unauthorized body based on context it is used
func (o *KeycloakEditUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakEditUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakEditUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res KeycloakEditUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
