// Code generated by go-swagger; DO NOT EDIT.

package keycloak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeycloakGetReader is a Reader for the KeycloakGet structure.
type KeycloakGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeycloakGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKeycloakGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeycloakGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewKeycloakGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewKeycloakGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewKeycloakGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKeycloakGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKeycloakGetOK creates a KeycloakGetOK with default headers values
func NewKeycloakGetOK() *KeycloakGetOK {
	return &KeycloakGetOK{}
}

/*
KeycloakGetOK describes a response with status code 200, with default header values.

Success
*/
type KeycloakGetOK struct {
	Payload *KeycloakGetOKBody
}

// IsSuccess returns true when this keycloak get o k response has a 2xx status code
func (o *KeycloakGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this keycloak get o k response has a 3xx status code
func (o *KeycloakGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get o k response has a 4xx status code
func (o *KeycloakGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this keycloak get o k response has a 5xx status code
func (o *KeycloakGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak get o k response a status code equal to that given
func (o *KeycloakGetOK) IsCode(code int) bool {
	return code == 200
}

func (o *KeycloakGetOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetOK  %+v", 200, o.Payload)
}

func (o *KeycloakGetOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetOK  %+v", 200, o.Payload)
}

func (o *KeycloakGetOK) GetPayload() *KeycloakGetOKBody {
	return o.Payload
}

func (o *KeycloakGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakGetOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakGetBadRequest creates a KeycloakGetBadRequest with default headers values
func NewKeycloakGetBadRequest() *KeycloakGetBadRequest {
	return &KeycloakGetBadRequest{}
}

/*
KeycloakGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type KeycloakGetBadRequest struct {
	Payload []*KeycloakGetBadRequestBodyItems0
}

// IsSuccess returns true when this keycloak get bad request response has a 2xx status code
func (o *KeycloakGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak get bad request response has a 3xx status code
func (o *KeycloakGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get bad request response has a 4xx status code
func (o *KeycloakGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak get bad request response has a 5xx status code
func (o *KeycloakGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak get bad request response a status code equal to that given
func (o *KeycloakGetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KeycloakGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetBadRequest  %+v", 400, o.Payload)
}

func (o *KeycloakGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetBadRequest  %+v", 400, o.Payload)
}

func (o *KeycloakGetBadRequest) GetPayload() []*KeycloakGetBadRequestBodyItems0 {
	return o.Payload
}

func (o *KeycloakGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakGetUnauthorized creates a KeycloakGetUnauthorized with default headers values
func NewKeycloakGetUnauthorized() *KeycloakGetUnauthorized {
	return &KeycloakGetUnauthorized{}
}

/*
KeycloakGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type KeycloakGetUnauthorized struct {
	Payload *KeycloakGetUnauthorizedBody
}

// IsSuccess returns true when this keycloak get unauthorized response has a 2xx status code
func (o *KeycloakGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak get unauthorized response has a 3xx status code
func (o *KeycloakGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get unauthorized response has a 4xx status code
func (o *KeycloakGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak get unauthorized response has a 5xx status code
func (o *KeycloakGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak get unauthorized response a status code equal to that given
func (o *KeycloakGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *KeycloakGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetUnauthorized  %+v", 401, o.Payload)
}

func (o *KeycloakGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetUnauthorized  %+v", 401, o.Payload)
}

func (o *KeycloakGetUnauthorized) GetPayload() *KeycloakGetUnauthorizedBody {
	return o.Payload
}

func (o *KeycloakGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakGetUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakGetForbidden creates a KeycloakGetForbidden with default headers values
func NewKeycloakGetForbidden() *KeycloakGetForbidden {
	return &KeycloakGetForbidden{}
}

/*
KeycloakGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type KeycloakGetForbidden struct {
	Payload *KeycloakGetForbiddenBody
}

// IsSuccess returns true when this keycloak get forbidden response has a 2xx status code
func (o *KeycloakGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak get forbidden response has a 3xx status code
func (o *KeycloakGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get forbidden response has a 4xx status code
func (o *KeycloakGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak get forbidden response has a 5xx status code
func (o *KeycloakGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak get forbidden response a status code equal to that given
func (o *KeycloakGetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *KeycloakGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetForbidden  %+v", 403, o.Payload)
}

func (o *KeycloakGetForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetForbidden  %+v", 403, o.Payload)
}

func (o *KeycloakGetForbidden) GetPayload() *KeycloakGetForbiddenBody {
	return o.Payload
}

func (o *KeycloakGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakGetForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakGetNotFound creates a KeycloakGetNotFound with default headers values
func NewKeycloakGetNotFound() *KeycloakGetNotFound {
	return &KeycloakGetNotFound{}
}

/*
KeycloakGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type KeycloakGetNotFound struct {
	Payload *KeycloakGetNotFoundBody
}

// IsSuccess returns true when this keycloak get not found response has a 2xx status code
func (o *KeycloakGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak get not found response has a 3xx status code
func (o *KeycloakGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get not found response has a 4xx status code
func (o *KeycloakGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this keycloak get not found response has a 5xx status code
func (o *KeycloakGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this keycloak get not found response a status code equal to that given
func (o *KeycloakGetNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *KeycloakGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetNotFound  %+v", 404, o.Payload)
}

func (o *KeycloakGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetNotFound  %+v", 404, o.Payload)
}

func (o *KeycloakGetNotFound) GetPayload() *KeycloakGetNotFoundBody {
	return o.Payload
}

func (o *KeycloakGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KeycloakGetNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeycloakGetInternalServerError creates a KeycloakGetInternalServerError with default headers values
func NewKeycloakGetInternalServerError() *KeycloakGetInternalServerError {
	return &KeycloakGetInternalServerError{}
}

/*
KeycloakGetInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type KeycloakGetInternalServerError struct {
}

// IsSuccess returns true when this keycloak get internal server error response has a 2xx status code
func (o *KeycloakGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this keycloak get internal server error response has a 3xx status code
func (o *KeycloakGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this keycloak get internal server error response has a 4xx status code
func (o *KeycloakGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this keycloak get internal server error response has a 5xx status code
func (o *KeycloakGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this keycloak get internal server error response a status code equal to that given
func (o *KeycloakGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *KeycloakGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetInternalServerError ", 500)
}

func (o *KeycloakGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Keycloak][%d] keycloakGetInternalServerError ", 500)
}

func (o *KeycloakGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
KeycloakGetBadRequestBodyItems0 keycloak get bad request body items0
swagger:model KeycloakGetBadRequestBodyItems0
*/
type KeycloakGetBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this keycloak get bad request body items0
func (o *KeycloakGetBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak get bad request body items0 based on context it is used
func (o *KeycloakGetBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakGetBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakGetBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res KeycloakGetBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakGetForbiddenBody keycloak get forbidden body
swagger:model KeycloakGetForbiddenBody
*/
type KeycloakGetForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak get forbidden body
func (o *KeycloakGetForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak get forbidden body based on context it is used
func (o *KeycloakGetForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakGetForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakGetForbiddenBody) UnmarshalBinary(b []byte) error {
	var res KeycloakGetForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakGetNotFoundBody keycloak get not found body
swagger:model KeycloakGetNotFoundBody
*/
type KeycloakGetNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak get not found body
func (o *KeycloakGetNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak get not found body based on context it is used
func (o *KeycloakGetNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakGetNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakGetNotFoundBody) UnmarshalBinary(b []byte) error {
	var res KeycloakGetNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakGetOKBody keycloak get o k body
swagger:model KeycloakGetOKBody
*/
type KeycloakGetOKBody struct {

	// client Id
	ClientID string `json:"clientId,omitempty"`

	// client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// enabled
	Enabled bool `json:"enabled"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// partner logo
	PartnerLogo string `json:"partnerLogo,omitempty"`

	// realms name
	RealmsName string `json:"realmsName,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this keycloak get o k body
func (o *KeycloakGetOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak get o k body based on context it is used
func (o *KeycloakGetOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakGetOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakGetOKBody) UnmarshalBinary(b []byte) error {
	var res KeycloakGetOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
KeycloakGetUnauthorizedBody keycloak get unauthorized body
swagger:model KeycloakGetUnauthorizedBody
*/
type KeycloakGetUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this keycloak get unauthorized body
func (o *KeycloakGetUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this keycloak get unauthorized body based on context it is used
func (o *KeycloakGetUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeycloakGetUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeycloakGetUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res KeycloakGetUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
