// Code generated by go-swagger; DO NOT EDIT.

package showback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new showback API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for showback API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ShowbackCreateCredential(params *ShowbackCreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateCredentialOK, error)

	ShowbackCreateRule(params *ShowbackCreateRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateRuleOK, error)

	ShowbackCreateShowbackSummary(params *ShowbackCreateShowbackSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateShowbackSummaryOK, error)

	ShowbackCredentialsList(params *ShowbackCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsListOK, error)

	ShowbackDeleteRule(params *ShowbackDeleteRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackDeleteRuleOK, error)

	ShowbackDeleteShowbackCredential(params *ShowbackDeleteShowbackCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackDeleteShowbackCredentialOK, error)

	ShowbackExportCsv(params *ShowbackExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackExportCsvOK, error)

	ShowbackGroupedList(params *ShowbackGroupedListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackGroupedListOK, error)

	ShowbackGroupedShowbackSummaryList(params *ShowbackGroupedShowbackSummaryListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackGroupedShowbackSummaryListOK, error)

	ShowbackLockManager(params *ShowbackLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackLockManagerOK, error)

	ShowbackRulesList(params *ShowbackRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesListOK, error)

	ShowbackShowbackCredentialsDropdown(params *ShowbackShowbackCredentialsDropdownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackShowbackCredentialsDropdownOK, error)

	ShowbackUpdateRule(params *ShowbackUpdateRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackUpdateRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ShowbackCreateCredential creates showback credential
*/
func (a *Client) ShowbackCreateCredential(params *ShowbackCreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCreateCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_CreateCredential",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/credential/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackCreateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCreateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_CreateCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCreateRule creates showback rule
*/
func (a *Client) ShowbackCreateRule(params *ShowbackCreateRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCreateRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_CreateRule",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/rule/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackCreateRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCreateRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_CreateRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCreateShowbackSummary creates showback summary
*/
func (a *Client) ShowbackCreateShowbackSummary(params *ShowbackCreateShowbackSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCreateShowbackSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCreateShowbackSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_CreateShowbackSummary",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/summary/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackCreateShowbackSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCreateShowbackSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_CreateShowbackSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackCredentialsList retrieves all showback credentials
*/
func (a *Client) ShowbackCredentialsList(params *ShowbackCredentialsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackCredentialsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackCredentialsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_CredentialsList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/credentials",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackCredentialsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackCredentialsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_CredentialsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackDeleteRule deletes showback rule
*/
func (a *Client) ShowbackDeleteRule(params *ShowbackDeleteRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackDeleteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackDeleteRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_DeleteRule",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/rule/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackDeleteRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackDeleteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_DeleteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackDeleteShowbackCredential deletes showback credential
*/
func (a *Client) ShowbackDeleteShowbackCredential(params *ShowbackDeleteShowbackCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackDeleteShowbackCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackDeleteShowbackCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_DeleteShowbackCredential",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/credential/delete",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackDeleteShowbackCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackDeleteShowbackCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_DeleteShowbackCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackExportCsv exports csv
*/
func (a *Client) ShowbackExportCsv(params *ShowbackExportCsvParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackExportCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackExportCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_ExportCsv",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/export",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackExportCsvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackExportCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_ExportCsv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackGroupedList retrieves a grouped list of showback summaries
*/
func (a *Client) ShowbackGroupedList(params *ShowbackGroupedListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackGroupedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackGroupedListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_GroupedList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/grouped",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackGroupedListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackGroupedListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_GroupedList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackGroupedShowbackSummaryList retrieves grouped showback summary
*/
func (a *Client) ShowbackGroupedShowbackSummaryList(params *ShowbackGroupedShowbackSummaryListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackGroupedShowbackSummaryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackGroupedShowbackSummaryListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_GroupedShowbackSummaryList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/grouped/summary/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackGroupedShowbackSummaryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackGroupedShowbackSummaryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_GroupedShowbackSummaryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackLockManager locks unlock showback credential
*/
func (a *Client) ShowbackLockManager(params *ShowbackLockManagerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackLockManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackLockManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_LockManager",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/credential/lockmanager",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackLockManagerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackLockManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_LockManager: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackRulesList retrieves all showback rules
*/
func (a *Client) ShowbackRulesList(params *ShowbackRulesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackRulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackRulesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_RulesList",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/rules",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackRulesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackRulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_RulesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackShowbackCredentialsDropdown retrieves showback credentials by organization Id
*/
func (a *Client) ShowbackShowbackCredentialsDropdown(params *ShowbackShowbackCredentialsDropdownParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackShowbackCredentialsDropdownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackShowbackCredentialsDropdownParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_ShowbackCredentialsDropdown",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Showback/credentials/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackShowbackCredentialsDropdownReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackShowbackCredentialsDropdownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_ShowbackCredentialsDropdown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowbackUpdateRule updates showback rule
*/
func (a *Client) ShowbackUpdateRule(params *ShowbackUpdateRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShowbackUpdateRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowbackUpdateRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Showback_UpdateRule",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Showback/rule/update",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowbackUpdateRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowbackUpdateRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Showback_UpdateRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
