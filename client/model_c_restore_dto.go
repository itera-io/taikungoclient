/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CRestoreDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CRestoreDto{}

// CRestoreDto struct for CRestoreDto
type CRestoreDto struct {
	MetadataName string `json:"metadataName"`
	BackupName string `json:"backupName"`
	ScheduleName string `json:"scheduleName"`
	Namespace string `json:"namespace"`
	ExcludeNamespaces []string `json:"excludeNamespaces"`
	IncludeNamespaces []string `json:"includeNamespaces"`
	CompletionDateTime time.Time `json:"completionDateTime"`
	StartTimeStamp time.Time `json:"startTimeStamp"`
	CreatedAt NullableTime `json:"createdAt"`
	Warnings int64 `json:"warnings"`
	Phase NullableString `json:"phase"`
}

type _CRestoreDto CRestoreDto

// NewCRestoreDto instantiates a new CRestoreDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCRestoreDto(metadataName string, backupName string, scheduleName string, namespace string, excludeNamespaces []string, includeNamespaces []string, completionDateTime time.Time, startTimeStamp time.Time, createdAt NullableTime, warnings int64, phase NullableString) *CRestoreDto {
	this := CRestoreDto{}
	this.MetadataName = metadataName
	this.BackupName = backupName
	this.ScheduleName = scheduleName
	this.Namespace = namespace
	this.ExcludeNamespaces = excludeNamespaces
	this.IncludeNamespaces = includeNamespaces
	this.CompletionDateTime = completionDateTime
	this.StartTimeStamp = startTimeStamp
	this.CreatedAt = createdAt
	this.Warnings = warnings
	this.Phase = phase
	return &this
}

// NewCRestoreDtoWithDefaults instantiates a new CRestoreDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCRestoreDtoWithDefaults() *CRestoreDto {
	this := CRestoreDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value
func (o *CRestoreDto) GetMetadataName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetMetadataNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataName, true
}

// SetMetadataName sets field value
func (o *CRestoreDto) SetMetadataName(v string) {
	o.MetadataName = v
}

// GetBackupName returns the BackupName field value
func (o *CRestoreDto) GetBackupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupName
}

// GetBackupNameOk returns a tuple with the BackupName field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetBackupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupName, true
}

// SetBackupName sets field value
func (o *CRestoreDto) SetBackupName(v string) {
	o.BackupName = v
}

// GetScheduleName returns the ScheduleName field value
func (o *CRestoreDto) GetScheduleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleName
}

// GetScheduleNameOk returns a tuple with the ScheduleName field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetScheduleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleName, true
}

// SetScheduleName sets field value
func (o *CRestoreDto) SetScheduleName(v string) {
	o.ScheduleName = v
}

// GetNamespace returns the Namespace field value
func (o *CRestoreDto) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *CRestoreDto) SetNamespace(v string) {
	o.Namespace = v
}

// GetExcludeNamespaces returns the ExcludeNamespaces field value
func (o *CRestoreDto) GetExcludeNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludeNamespaces
}

// GetExcludeNamespacesOk returns a tuple with the ExcludeNamespaces field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetExcludeNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludeNamespaces, true
}

// SetExcludeNamespaces sets field value
func (o *CRestoreDto) SetExcludeNamespaces(v []string) {
	o.ExcludeNamespaces = v
}

// GetIncludeNamespaces returns the IncludeNamespaces field value
func (o *CRestoreDto) GetIncludeNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludeNamespaces
}

// GetIncludeNamespacesOk returns a tuple with the IncludeNamespaces field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetIncludeNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeNamespaces, true
}

// SetIncludeNamespaces sets field value
func (o *CRestoreDto) SetIncludeNamespaces(v []string) {
	o.IncludeNamespaces = v
}

// GetCompletionDateTime returns the CompletionDateTime field value
func (o *CRestoreDto) GetCompletionDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CompletionDateTime
}

// GetCompletionDateTimeOk returns a tuple with the CompletionDateTime field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetCompletionDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionDateTime, true
}

// SetCompletionDateTime sets field value
func (o *CRestoreDto) SetCompletionDateTime(v time.Time) {
	o.CompletionDateTime = v
}

// GetStartTimeStamp returns the StartTimeStamp field value
func (o *CRestoreDto) GetStartTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTimeStamp
}

// GetStartTimeStampOk returns a tuple with the StartTimeStamp field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetStartTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimeStamp, true
}

// SetStartTimeStamp sets field value
func (o *CRestoreDto) SetStartTimeStamp(v time.Time) {
	o.StartTimeStamp = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CRestoreDto) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRestoreDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *CRestoreDto) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetWarnings returns the Warnings field value
func (o *CRestoreDto) GetWarnings() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *CRestoreDto) GetWarningsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *CRestoreDto) SetWarnings(v int64) {
	o.Warnings = v
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CRestoreDto) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRestoreDto) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *CRestoreDto) SetPhase(v string) {
	o.Phase.Set(&v)
}

func (o CRestoreDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CRestoreDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataName"] = o.MetadataName
	toSerialize["backupName"] = o.BackupName
	toSerialize["scheduleName"] = o.ScheduleName
	toSerialize["namespace"] = o.Namespace
	toSerialize["excludeNamespaces"] = o.ExcludeNamespaces
	toSerialize["includeNamespaces"] = o.IncludeNamespaces
	toSerialize["completionDateTime"] = o.CompletionDateTime
	toSerialize["startTimeStamp"] = o.StartTimeStamp
	toSerialize["createdAt"] = o.CreatedAt.Get()
	toSerialize["warnings"] = o.Warnings
	toSerialize["phase"] = o.Phase.Get()
	return toSerialize, nil
}

func (o *CRestoreDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataName",
		"backupName",
		"scheduleName",
		"namespace",
		"excludeNamespaces",
		"includeNamespaces",
		"completionDateTime",
		"startTimeStamp",
		"createdAt",
		"warnings",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCRestoreDto := _CRestoreDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCRestoreDto)

	if err != nil {
		return err
	}

	*o = CRestoreDto(varCRestoreDto)

	return err
}

type NullableCRestoreDto struct {
	value *CRestoreDto
	isSet bool
}

func (v NullableCRestoreDto) Get() *CRestoreDto {
	return v.value
}

func (v *NullableCRestoreDto) Set(val *CRestoreDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCRestoreDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCRestoreDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCRestoreDto(val *CRestoreDto) *NullableCRestoreDto {
	return &NullableCRestoreDto{value: val, isSet: true}
}

func (v NullableCRestoreDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCRestoreDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


