/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the EstimatedInfracost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedInfracost{}

// EstimatedInfracost struct for EstimatedInfracost
type EstimatedInfracost struct {
	Version NullableString `json:"version,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Currency NullableString `json:"currency,omitempty"`
	Projects []ProjectInfracost `json:"projects,omitempty"`
	TotalHourlyCost NullableString `json:"totalHourlyCost,omitempty"`
	TotalMonthlyCost NullableString `json:"totalMonthlyCost,omitempty"`
	TotalMonthlyUsageCost NullableString `json:"totalMonthlyUsageCost,omitempty"`
	PastTotalHourlyCost NullableString `json:"pastTotalHourlyCost,omitempty"`
	PastTotalMonthlyCost NullableString `json:"pastTotalMonthlyCost,omitempty"`
	PastTotalMonthlyUsageCost NullableString `json:"pastTotalMonthlyUsageCost,omitempty"`
	DiffTotalHourlyCost NullableString `json:"diffTotalHourlyCost,omitempty"`
	DiffTotalMonthlyCost NullableString `json:"diffTotalMonthlyCost,omitempty"`
	DiffTotalMonthlyUsageCost NullableString `json:"diffTotalMonthlyUsageCost,omitempty"`
	TimeGenerated NullableString `json:"timeGenerated,omitempty"`
	Summary *Summary `json:"summary,omitempty"`
}

// NewEstimatedInfracost instantiates a new EstimatedInfracost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedInfracost() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// NewEstimatedInfracostWithDefaults instantiates a new EstimatedInfracost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedInfracostWithDefaults() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *EstimatedInfracost) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *EstimatedInfracost) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *EstimatedInfracost) UnsetVersion() {
	o.Version.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *EstimatedInfracost) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetCurrency() string {
	if o == nil || IsNil(o.Currency.Get()) {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *EstimatedInfracost) SetCurrency(v string) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *EstimatedInfracost) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *EstimatedInfracost) UnsetCurrency() {
	o.Currency.Unset()
}

// GetProjects returns the Projects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetProjects() []ProjectInfracost {
	if o == nil {
		var ret []ProjectInfracost
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetProjectsOk() ([]ProjectInfracost, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectInfracost and assigns it to the Projects field.
func (o *EstimatedInfracost) SetProjects(v []ProjectInfracost) {
	o.Projects = v
}

// GetTotalHourlyCost returns the TotalHourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTotalHourlyCost() string {
	if o == nil || IsNil(o.TotalHourlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.TotalHourlyCost.Get()
}

// GetTotalHourlyCostOk returns a tuple with the TotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTotalHourlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalHourlyCost.Get(), o.TotalHourlyCost.IsSet()
}

// HasTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalHourlyCost() bool {
	if o != nil && o.TotalHourlyCost.IsSet() {
		return true
	}

	return false
}

// SetTotalHourlyCost gets a reference to the given NullableString and assigns it to the TotalHourlyCost field.
func (o *EstimatedInfracost) SetTotalHourlyCost(v string) {
	o.TotalHourlyCost.Set(&v)
}
// SetTotalHourlyCostNil sets the value for TotalHourlyCost to be an explicit nil
func (o *EstimatedInfracost) SetTotalHourlyCostNil() {
	o.TotalHourlyCost.Set(nil)
}

// UnsetTotalHourlyCost ensures that no value is present for TotalHourlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetTotalHourlyCost() {
	o.TotalHourlyCost.Unset()
}

// GetTotalMonthlyCost returns the TotalMonthlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTotalMonthlyCost() string {
	if o == nil || IsNil(o.TotalMonthlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.TotalMonthlyCost.Get()
}

// GetTotalMonthlyCostOk returns a tuple with the TotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTotalMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalMonthlyCost.Get(), o.TotalMonthlyCost.IsSet()
}

// HasTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalMonthlyCost() bool {
	if o != nil && o.TotalMonthlyCost.IsSet() {
		return true
	}

	return false
}

// SetTotalMonthlyCost gets a reference to the given NullableString and assigns it to the TotalMonthlyCost field.
func (o *EstimatedInfracost) SetTotalMonthlyCost(v string) {
	o.TotalMonthlyCost.Set(&v)
}
// SetTotalMonthlyCostNil sets the value for TotalMonthlyCost to be an explicit nil
func (o *EstimatedInfracost) SetTotalMonthlyCostNil() {
	o.TotalMonthlyCost.Set(nil)
}

// UnsetTotalMonthlyCost ensures that no value is present for TotalMonthlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetTotalMonthlyCost() {
	o.TotalMonthlyCost.Unset()
}

// GetTotalMonthlyUsageCost returns the TotalMonthlyUsageCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.TotalMonthlyUsageCost.Get()) {
		var ret string
		return ret
	}
	return *o.TotalMonthlyUsageCost.Get()
}

// GetTotalMonthlyUsageCostOk returns a tuple with the TotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalMonthlyUsageCost.Get(), o.TotalMonthlyUsageCost.IsSet()
}

// HasTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalMonthlyUsageCost() bool {
	if o != nil && o.TotalMonthlyUsageCost.IsSet() {
		return true
	}

	return false
}

// SetTotalMonthlyUsageCost gets a reference to the given NullableString and assigns it to the TotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetTotalMonthlyUsageCost(v string) {
	o.TotalMonthlyUsageCost.Set(&v)
}
// SetTotalMonthlyUsageCostNil sets the value for TotalMonthlyUsageCost to be an explicit nil
func (o *EstimatedInfracost) SetTotalMonthlyUsageCostNil() {
	o.TotalMonthlyUsageCost.Set(nil)
}

// UnsetTotalMonthlyUsageCost ensures that no value is present for TotalMonthlyUsageCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetTotalMonthlyUsageCost() {
	o.TotalMonthlyUsageCost.Unset()
}

// GetPastTotalHourlyCost returns the PastTotalHourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetPastTotalHourlyCost() string {
	if o == nil || IsNil(o.PastTotalHourlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.PastTotalHourlyCost.Get()
}

// GetPastTotalHourlyCostOk returns a tuple with the PastTotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetPastTotalHourlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PastTotalHourlyCost.Get(), o.PastTotalHourlyCost.IsSet()
}

// HasPastTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalHourlyCost() bool {
	if o != nil && o.PastTotalHourlyCost.IsSet() {
		return true
	}

	return false
}

// SetPastTotalHourlyCost gets a reference to the given NullableString and assigns it to the PastTotalHourlyCost field.
func (o *EstimatedInfracost) SetPastTotalHourlyCost(v string) {
	o.PastTotalHourlyCost.Set(&v)
}
// SetPastTotalHourlyCostNil sets the value for PastTotalHourlyCost to be an explicit nil
func (o *EstimatedInfracost) SetPastTotalHourlyCostNil() {
	o.PastTotalHourlyCost.Set(nil)
}

// UnsetPastTotalHourlyCost ensures that no value is present for PastTotalHourlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetPastTotalHourlyCost() {
	o.PastTotalHourlyCost.Unset()
}

// GetPastTotalMonthlyCost returns the PastTotalMonthlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetPastTotalMonthlyCost() string {
	if o == nil || IsNil(o.PastTotalMonthlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.PastTotalMonthlyCost.Get()
}

// GetPastTotalMonthlyCostOk returns a tuple with the PastTotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetPastTotalMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PastTotalMonthlyCost.Get(), o.PastTotalMonthlyCost.IsSet()
}

// HasPastTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalMonthlyCost() bool {
	if o != nil && o.PastTotalMonthlyCost.IsSet() {
		return true
	}

	return false
}

// SetPastTotalMonthlyCost gets a reference to the given NullableString and assigns it to the PastTotalMonthlyCost field.
func (o *EstimatedInfracost) SetPastTotalMonthlyCost(v string) {
	o.PastTotalMonthlyCost.Set(&v)
}
// SetPastTotalMonthlyCostNil sets the value for PastTotalMonthlyCost to be an explicit nil
func (o *EstimatedInfracost) SetPastTotalMonthlyCostNil() {
	o.PastTotalMonthlyCost.Set(nil)
}

// UnsetPastTotalMonthlyCost ensures that no value is present for PastTotalMonthlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetPastTotalMonthlyCost() {
	o.PastTotalMonthlyCost.Unset()
}

// GetPastTotalMonthlyUsageCost returns the PastTotalMonthlyUsageCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetPastTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.PastTotalMonthlyUsageCost.Get()) {
		var ret string
		return ret
	}
	return *o.PastTotalMonthlyUsageCost.Get()
}

// GetPastTotalMonthlyUsageCostOk returns a tuple with the PastTotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetPastTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PastTotalMonthlyUsageCost.Get(), o.PastTotalMonthlyUsageCost.IsSet()
}

// HasPastTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalMonthlyUsageCost() bool {
	if o != nil && o.PastTotalMonthlyUsageCost.IsSet() {
		return true
	}

	return false
}

// SetPastTotalMonthlyUsageCost gets a reference to the given NullableString and assigns it to the PastTotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetPastTotalMonthlyUsageCost(v string) {
	o.PastTotalMonthlyUsageCost.Set(&v)
}
// SetPastTotalMonthlyUsageCostNil sets the value for PastTotalMonthlyUsageCost to be an explicit nil
func (o *EstimatedInfracost) SetPastTotalMonthlyUsageCostNil() {
	o.PastTotalMonthlyUsageCost.Set(nil)
}

// UnsetPastTotalMonthlyUsageCost ensures that no value is present for PastTotalMonthlyUsageCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetPastTotalMonthlyUsageCost() {
	o.PastTotalMonthlyUsageCost.Unset()
}

// GetDiffTotalHourlyCost returns the DiffTotalHourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetDiffTotalHourlyCost() string {
	if o == nil || IsNil(o.DiffTotalHourlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.DiffTotalHourlyCost.Get()
}

// GetDiffTotalHourlyCostOk returns a tuple with the DiffTotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetDiffTotalHourlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffTotalHourlyCost.Get(), o.DiffTotalHourlyCost.IsSet()
}

// HasDiffTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalHourlyCost() bool {
	if o != nil && o.DiffTotalHourlyCost.IsSet() {
		return true
	}

	return false
}

// SetDiffTotalHourlyCost gets a reference to the given NullableString and assigns it to the DiffTotalHourlyCost field.
func (o *EstimatedInfracost) SetDiffTotalHourlyCost(v string) {
	o.DiffTotalHourlyCost.Set(&v)
}
// SetDiffTotalHourlyCostNil sets the value for DiffTotalHourlyCost to be an explicit nil
func (o *EstimatedInfracost) SetDiffTotalHourlyCostNil() {
	o.DiffTotalHourlyCost.Set(nil)
}

// UnsetDiffTotalHourlyCost ensures that no value is present for DiffTotalHourlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetDiffTotalHourlyCost() {
	o.DiffTotalHourlyCost.Unset()
}

// GetDiffTotalMonthlyCost returns the DiffTotalMonthlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetDiffTotalMonthlyCost() string {
	if o == nil || IsNil(o.DiffTotalMonthlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.DiffTotalMonthlyCost.Get()
}

// GetDiffTotalMonthlyCostOk returns a tuple with the DiffTotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetDiffTotalMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffTotalMonthlyCost.Get(), o.DiffTotalMonthlyCost.IsSet()
}

// HasDiffTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalMonthlyCost() bool {
	if o != nil && o.DiffTotalMonthlyCost.IsSet() {
		return true
	}

	return false
}

// SetDiffTotalMonthlyCost gets a reference to the given NullableString and assigns it to the DiffTotalMonthlyCost field.
func (o *EstimatedInfracost) SetDiffTotalMonthlyCost(v string) {
	o.DiffTotalMonthlyCost.Set(&v)
}
// SetDiffTotalMonthlyCostNil sets the value for DiffTotalMonthlyCost to be an explicit nil
func (o *EstimatedInfracost) SetDiffTotalMonthlyCostNil() {
	o.DiffTotalMonthlyCost.Set(nil)
}

// UnsetDiffTotalMonthlyCost ensures that no value is present for DiffTotalMonthlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetDiffTotalMonthlyCost() {
	o.DiffTotalMonthlyCost.Unset()
}

// GetDiffTotalMonthlyUsageCost returns the DiffTotalMonthlyUsageCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetDiffTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.DiffTotalMonthlyUsageCost.Get()) {
		var ret string
		return ret
	}
	return *o.DiffTotalMonthlyUsageCost.Get()
}

// GetDiffTotalMonthlyUsageCostOk returns a tuple with the DiffTotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetDiffTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffTotalMonthlyUsageCost.Get(), o.DiffTotalMonthlyUsageCost.IsSet()
}

// HasDiffTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalMonthlyUsageCost() bool {
	if o != nil && o.DiffTotalMonthlyUsageCost.IsSet() {
		return true
	}

	return false
}

// SetDiffTotalMonthlyUsageCost gets a reference to the given NullableString and assigns it to the DiffTotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetDiffTotalMonthlyUsageCost(v string) {
	o.DiffTotalMonthlyUsageCost.Set(&v)
}
// SetDiffTotalMonthlyUsageCostNil sets the value for DiffTotalMonthlyUsageCost to be an explicit nil
func (o *EstimatedInfracost) SetDiffTotalMonthlyUsageCostNil() {
	o.DiffTotalMonthlyUsageCost.Set(nil)
}

// UnsetDiffTotalMonthlyUsageCost ensures that no value is present for DiffTotalMonthlyUsageCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetDiffTotalMonthlyUsageCost() {
	o.DiffTotalMonthlyUsageCost.Unset()
}

// GetTimeGenerated returns the TimeGenerated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTimeGenerated() string {
	if o == nil || IsNil(o.TimeGenerated.Get()) {
		var ret string
		return ret
	}
	return *o.TimeGenerated.Get()
}

// GetTimeGeneratedOk returns a tuple with the TimeGenerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTimeGeneratedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeGenerated.Get(), o.TimeGenerated.IsSet()
}

// HasTimeGenerated returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTimeGenerated() bool {
	if o != nil && o.TimeGenerated.IsSet() {
		return true
	}

	return false
}

// SetTimeGenerated gets a reference to the given NullableString and assigns it to the TimeGenerated field.
func (o *EstimatedInfracost) SetTimeGenerated(v string) {
	o.TimeGenerated.Set(&v)
}
// SetTimeGeneratedNil sets the value for TimeGenerated to be an explicit nil
func (o *EstimatedInfracost) SetTimeGeneratedNil() {
	o.TimeGenerated.Set(nil)
}

// UnsetTimeGenerated ensures that no value is present for TimeGenerated, not even an explicit nil
func (o *EstimatedInfracost) UnsetTimeGenerated() {
	o.TimeGenerated.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetSummary() Summary {
	if o == nil || IsNil(o.Summary) {
		var ret Summary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetSummaryOk() (*Summary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given Summary and assigns it to the Summary field.
func (o *EstimatedInfracost) SetSummary(v Summary) {
	o.Summary = &v
}

func (o EstimatedInfracost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedInfracost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.TotalHourlyCost.IsSet() {
		toSerialize["totalHourlyCost"] = o.TotalHourlyCost.Get()
	}
	if o.TotalMonthlyCost.IsSet() {
		toSerialize["totalMonthlyCost"] = o.TotalMonthlyCost.Get()
	}
	if o.TotalMonthlyUsageCost.IsSet() {
		toSerialize["totalMonthlyUsageCost"] = o.TotalMonthlyUsageCost.Get()
	}
	if o.PastTotalHourlyCost.IsSet() {
		toSerialize["pastTotalHourlyCost"] = o.PastTotalHourlyCost.Get()
	}
	if o.PastTotalMonthlyCost.IsSet() {
		toSerialize["pastTotalMonthlyCost"] = o.PastTotalMonthlyCost.Get()
	}
	if o.PastTotalMonthlyUsageCost.IsSet() {
		toSerialize["pastTotalMonthlyUsageCost"] = o.PastTotalMonthlyUsageCost.Get()
	}
	if o.DiffTotalHourlyCost.IsSet() {
		toSerialize["diffTotalHourlyCost"] = o.DiffTotalHourlyCost.Get()
	}
	if o.DiffTotalMonthlyCost.IsSet() {
		toSerialize["diffTotalMonthlyCost"] = o.DiffTotalMonthlyCost.Get()
	}
	if o.DiffTotalMonthlyUsageCost.IsSet() {
		toSerialize["diffTotalMonthlyUsageCost"] = o.DiffTotalMonthlyUsageCost.Get()
	}
	if o.TimeGenerated.IsSet() {
		toSerialize["timeGenerated"] = o.TimeGenerated.Get()
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

type NullableEstimatedInfracost struct {
	value *EstimatedInfracost
	isSet bool
}

func (v NullableEstimatedInfracost) Get() *EstimatedInfracost {
	return v.value
}

func (v *NullableEstimatedInfracost) Set(val *EstimatedInfracost) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedInfracost) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedInfracost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedInfracost(val *EstimatedInfracost) *NullableEstimatedInfracost {
	return &NullableEstimatedInfracost{value: val, isSet: true}
}

func (v NullableEstimatedInfracost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedInfracost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


