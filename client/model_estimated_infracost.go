/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the EstimatedInfracost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedInfracost{}

// EstimatedInfracost struct for EstimatedInfracost
type EstimatedInfracost struct {
	Version *string `json:"version,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Projects []ProjectInfracost `json:"projects,omitempty"`
	TotalHourlyCost *string `json:"totalHourlyCost,omitempty"`
	TotalMonthlyCost *string `json:"totalMonthlyCost,omitempty"`
	TotalMonthlyUsageCost *string `json:"totalMonthlyUsageCost,omitempty"`
	PastTotalHourlyCost *string `json:"pastTotalHourlyCost,omitempty"`
	PastTotalMonthlyCost *string `json:"pastTotalMonthlyCost,omitempty"`
	PastTotalMonthlyUsageCost *string `json:"pastTotalMonthlyUsageCost,omitempty"`
	DiffTotalHourlyCost *string `json:"diffTotalHourlyCost,omitempty"`
	DiffTotalMonthlyCost *string `json:"diffTotalMonthlyCost,omitempty"`
	DiffTotalMonthlyUsageCost *string `json:"diffTotalMonthlyUsageCost,omitempty"`
	TimeGenerated *string `json:"timeGenerated,omitempty"`
	Summary *Summary `json:"summary,omitempty"`
}

// NewEstimatedInfracost instantiates a new EstimatedInfracost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedInfracost() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// NewEstimatedInfracostWithDefaults instantiates a new EstimatedInfracost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedInfracostWithDefaults() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *EstimatedInfracost) SetVersion(v string) {
	o.Version = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *EstimatedInfracost) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *EstimatedInfracost) SetCurrency(v string) {
	o.Currency = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetProjects() []ProjectInfracost {
	if o == nil || IsNil(o.Projects) {
		var ret []ProjectInfracost
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetProjectsOk() ([]ProjectInfracost, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectInfracost and assigns it to the Projects field.
func (o *EstimatedInfracost) SetProjects(v []ProjectInfracost) {
	o.Projects = v
}

// GetTotalHourlyCost returns the TotalHourlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetTotalHourlyCost() string {
	if o == nil || IsNil(o.TotalHourlyCost) {
		var ret string
		return ret
	}
	return *o.TotalHourlyCost
}

// GetTotalHourlyCostOk returns a tuple with the TotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetTotalHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.TotalHourlyCost) {
		return nil, false
	}
	return o.TotalHourlyCost, true
}

// HasTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalHourlyCost() bool {
	if o != nil && !IsNil(o.TotalHourlyCost) {
		return true
	}

	return false
}

// SetTotalHourlyCost gets a reference to the given string and assigns it to the TotalHourlyCost field.
func (o *EstimatedInfracost) SetTotalHourlyCost(v string) {
	o.TotalHourlyCost = &v
}

// GetTotalMonthlyCost returns the TotalMonthlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetTotalMonthlyCost() string {
	if o == nil || IsNil(o.TotalMonthlyCost) {
		var ret string
		return ret
	}
	return *o.TotalMonthlyCost
}

// GetTotalMonthlyCostOk returns a tuple with the TotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetTotalMonthlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.TotalMonthlyCost) {
		return nil, false
	}
	return o.TotalMonthlyCost, true
}

// HasTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalMonthlyCost() bool {
	if o != nil && !IsNil(o.TotalMonthlyCost) {
		return true
	}

	return false
}

// SetTotalMonthlyCost gets a reference to the given string and assigns it to the TotalMonthlyCost field.
func (o *EstimatedInfracost) SetTotalMonthlyCost(v string) {
	o.TotalMonthlyCost = &v
}

// GetTotalMonthlyUsageCost returns the TotalMonthlyUsageCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.TotalMonthlyUsageCost) {
		var ret string
		return ret
	}
	return *o.TotalMonthlyUsageCost
}

// GetTotalMonthlyUsageCostOk returns a tuple with the TotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil || IsNil(o.TotalMonthlyUsageCost) {
		return nil, false
	}
	return o.TotalMonthlyUsageCost, true
}

// HasTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalMonthlyUsageCost() bool {
	if o != nil && !IsNil(o.TotalMonthlyUsageCost) {
		return true
	}

	return false
}

// SetTotalMonthlyUsageCost gets a reference to the given string and assigns it to the TotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetTotalMonthlyUsageCost(v string) {
	o.TotalMonthlyUsageCost = &v
}

// GetPastTotalHourlyCost returns the PastTotalHourlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetPastTotalHourlyCost() string {
	if o == nil || IsNil(o.PastTotalHourlyCost) {
		var ret string
		return ret
	}
	return *o.PastTotalHourlyCost
}

// GetPastTotalHourlyCostOk returns a tuple with the PastTotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetPastTotalHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.PastTotalHourlyCost) {
		return nil, false
	}
	return o.PastTotalHourlyCost, true
}

// HasPastTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalHourlyCost() bool {
	if o != nil && !IsNil(o.PastTotalHourlyCost) {
		return true
	}

	return false
}

// SetPastTotalHourlyCost gets a reference to the given string and assigns it to the PastTotalHourlyCost field.
func (o *EstimatedInfracost) SetPastTotalHourlyCost(v string) {
	o.PastTotalHourlyCost = &v
}

// GetPastTotalMonthlyCost returns the PastTotalMonthlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetPastTotalMonthlyCost() string {
	if o == nil || IsNil(o.PastTotalMonthlyCost) {
		var ret string
		return ret
	}
	return *o.PastTotalMonthlyCost
}

// GetPastTotalMonthlyCostOk returns a tuple with the PastTotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetPastTotalMonthlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.PastTotalMonthlyCost) {
		return nil, false
	}
	return o.PastTotalMonthlyCost, true
}

// HasPastTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalMonthlyCost() bool {
	if o != nil && !IsNil(o.PastTotalMonthlyCost) {
		return true
	}

	return false
}

// SetPastTotalMonthlyCost gets a reference to the given string and assigns it to the PastTotalMonthlyCost field.
func (o *EstimatedInfracost) SetPastTotalMonthlyCost(v string) {
	o.PastTotalMonthlyCost = &v
}

// GetPastTotalMonthlyUsageCost returns the PastTotalMonthlyUsageCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetPastTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.PastTotalMonthlyUsageCost) {
		var ret string
		return ret
	}
	return *o.PastTotalMonthlyUsageCost
}

// GetPastTotalMonthlyUsageCostOk returns a tuple with the PastTotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetPastTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil || IsNil(o.PastTotalMonthlyUsageCost) {
		return nil, false
	}
	return o.PastTotalMonthlyUsageCost, true
}

// HasPastTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasPastTotalMonthlyUsageCost() bool {
	if o != nil && !IsNil(o.PastTotalMonthlyUsageCost) {
		return true
	}

	return false
}

// SetPastTotalMonthlyUsageCost gets a reference to the given string and assigns it to the PastTotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetPastTotalMonthlyUsageCost(v string) {
	o.PastTotalMonthlyUsageCost = &v
}

// GetDiffTotalHourlyCost returns the DiffTotalHourlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetDiffTotalHourlyCost() string {
	if o == nil || IsNil(o.DiffTotalHourlyCost) {
		var ret string
		return ret
	}
	return *o.DiffTotalHourlyCost
}

// GetDiffTotalHourlyCostOk returns a tuple with the DiffTotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetDiffTotalHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.DiffTotalHourlyCost) {
		return nil, false
	}
	return o.DiffTotalHourlyCost, true
}

// HasDiffTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalHourlyCost() bool {
	if o != nil && !IsNil(o.DiffTotalHourlyCost) {
		return true
	}

	return false
}

// SetDiffTotalHourlyCost gets a reference to the given string and assigns it to the DiffTotalHourlyCost field.
func (o *EstimatedInfracost) SetDiffTotalHourlyCost(v string) {
	o.DiffTotalHourlyCost = &v
}

// GetDiffTotalMonthlyCost returns the DiffTotalMonthlyCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetDiffTotalMonthlyCost() string {
	if o == nil || IsNil(o.DiffTotalMonthlyCost) {
		var ret string
		return ret
	}
	return *o.DiffTotalMonthlyCost
}

// GetDiffTotalMonthlyCostOk returns a tuple with the DiffTotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetDiffTotalMonthlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.DiffTotalMonthlyCost) {
		return nil, false
	}
	return o.DiffTotalMonthlyCost, true
}

// HasDiffTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalMonthlyCost() bool {
	if o != nil && !IsNil(o.DiffTotalMonthlyCost) {
		return true
	}

	return false
}

// SetDiffTotalMonthlyCost gets a reference to the given string and assigns it to the DiffTotalMonthlyCost field.
func (o *EstimatedInfracost) SetDiffTotalMonthlyCost(v string) {
	o.DiffTotalMonthlyCost = &v
}

// GetDiffTotalMonthlyUsageCost returns the DiffTotalMonthlyUsageCost field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetDiffTotalMonthlyUsageCost() string {
	if o == nil || IsNil(o.DiffTotalMonthlyUsageCost) {
		var ret string
		return ret
	}
	return *o.DiffTotalMonthlyUsageCost
}

// GetDiffTotalMonthlyUsageCostOk returns a tuple with the DiffTotalMonthlyUsageCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetDiffTotalMonthlyUsageCostOk() (*string, bool) {
	if o == nil || IsNil(o.DiffTotalMonthlyUsageCost) {
		return nil, false
	}
	return o.DiffTotalMonthlyUsageCost, true
}

// HasDiffTotalMonthlyUsageCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasDiffTotalMonthlyUsageCost() bool {
	if o != nil && !IsNil(o.DiffTotalMonthlyUsageCost) {
		return true
	}

	return false
}

// SetDiffTotalMonthlyUsageCost gets a reference to the given string and assigns it to the DiffTotalMonthlyUsageCost field.
func (o *EstimatedInfracost) SetDiffTotalMonthlyUsageCost(v string) {
	o.DiffTotalMonthlyUsageCost = &v
}

// GetTimeGenerated returns the TimeGenerated field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetTimeGenerated() string {
	if o == nil || IsNil(o.TimeGenerated) {
		var ret string
		return ret
	}
	return *o.TimeGenerated
}

// GetTimeGeneratedOk returns a tuple with the TimeGenerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetTimeGeneratedOk() (*string, bool) {
	if o == nil || IsNil(o.TimeGenerated) {
		return nil, false
	}
	return o.TimeGenerated, true
}

// HasTimeGenerated returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTimeGenerated() bool {
	if o != nil && !IsNil(o.TimeGenerated) {
		return true
	}

	return false
}

// SetTimeGenerated gets a reference to the given string and assigns it to the TimeGenerated field.
func (o *EstimatedInfracost) SetTimeGenerated(v string) {
	o.TimeGenerated = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *EstimatedInfracost) GetSummary() Summary {
	if o == nil || IsNil(o.Summary) {
		var ret Summary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedInfracost) GetSummaryOk() (*Summary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given Summary and assigns it to the Summary field.
func (o *EstimatedInfracost) SetSummary(v Summary) {
	o.Summary = &v
}

func (o EstimatedInfracost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedInfracost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.TotalHourlyCost) {
		toSerialize["totalHourlyCost"] = o.TotalHourlyCost
	}
	if !IsNil(o.TotalMonthlyCost) {
		toSerialize["totalMonthlyCost"] = o.TotalMonthlyCost
	}
	if !IsNil(o.TotalMonthlyUsageCost) {
		toSerialize["totalMonthlyUsageCost"] = o.TotalMonthlyUsageCost
	}
	if !IsNil(o.PastTotalHourlyCost) {
		toSerialize["pastTotalHourlyCost"] = o.PastTotalHourlyCost
	}
	if !IsNil(o.PastTotalMonthlyCost) {
		toSerialize["pastTotalMonthlyCost"] = o.PastTotalMonthlyCost
	}
	if !IsNil(o.PastTotalMonthlyUsageCost) {
		toSerialize["pastTotalMonthlyUsageCost"] = o.PastTotalMonthlyUsageCost
	}
	if !IsNil(o.DiffTotalHourlyCost) {
		toSerialize["diffTotalHourlyCost"] = o.DiffTotalHourlyCost
	}
	if !IsNil(o.DiffTotalMonthlyCost) {
		toSerialize["diffTotalMonthlyCost"] = o.DiffTotalMonthlyCost
	}
	if !IsNil(o.DiffTotalMonthlyUsageCost) {
		toSerialize["diffTotalMonthlyUsageCost"] = o.DiffTotalMonthlyUsageCost
	}
	if !IsNil(o.TimeGenerated) {
		toSerialize["timeGenerated"] = o.TimeGenerated
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

type NullableEstimatedInfracost struct {
	value *EstimatedInfracost
	isSet bool
}

func (v NullableEstimatedInfracost) Get() *EstimatedInfracost {
	return v.value
}

func (v *NullableEstimatedInfracost) Set(val *EstimatedInfracost) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedInfracost) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedInfracost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedInfracost(val *EstimatedInfracost) *NullableEstimatedInfracost {
	return &NullableEstimatedInfracost{value: val, isSet: true}
}

func (v NullableEstimatedInfracost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedInfracost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


