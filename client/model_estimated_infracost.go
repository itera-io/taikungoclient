/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the EstimatedInfracost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedInfracost{}

// EstimatedInfracost struct for EstimatedInfracost
type EstimatedInfracost struct {
	Resources        []Resource     `json:"resources,omitempty"`
	TotalHourlyCost  NullableString `json:"totalHourlyCost,omitempty"`
	TotalMonthlyCost NullableString `json:"totalMonthlyCost,omitempty"`
}

// NewEstimatedInfracost instantiates a new EstimatedInfracost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedInfracost() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// NewEstimatedInfracostWithDefaults instantiates a new EstimatedInfracost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedInfracostWithDefaults() *EstimatedInfracost {
	this := EstimatedInfracost{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetResources() []Resource {
	if o == nil {
		var ret []Resource
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetResourcesOk() ([]Resource, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasResources() bool {
	if o != nil && IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []Resource and assigns it to the Resources field.
func (o *EstimatedInfracost) SetResources(v []Resource) {
	o.Resources = v
}

// GetTotalHourlyCost returns the TotalHourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTotalHourlyCost() string {
	if o == nil || IsNil(o.TotalHourlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.TotalHourlyCost.Get()
}

// GetTotalHourlyCostOk returns a tuple with the TotalHourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTotalHourlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalHourlyCost.Get(), o.TotalHourlyCost.IsSet()
}

// HasTotalHourlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalHourlyCost() bool {
	if o != nil && o.TotalHourlyCost.IsSet() {
		return true
	}

	return false
}

// SetTotalHourlyCost gets a reference to the given NullableString and assigns it to the TotalHourlyCost field.
func (o *EstimatedInfracost) SetTotalHourlyCost(v string) {
	o.TotalHourlyCost.Set(&v)
}

// SetTotalHourlyCostNil sets the value for TotalHourlyCost to be an explicit nil
func (o *EstimatedInfracost) SetTotalHourlyCostNil() {
	o.TotalHourlyCost.Set(nil)
}

// UnsetTotalHourlyCost ensures that no value is present for TotalHourlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetTotalHourlyCost() {
	o.TotalHourlyCost.Unset()
}

// GetTotalMonthlyCost returns the TotalMonthlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EstimatedInfracost) GetTotalMonthlyCost() string {
	if o == nil || IsNil(o.TotalMonthlyCost.Get()) {
		var ret string
		return ret
	}
	return *o.TotalMonthlyCost.Get()
}

// GetTotalMonthlyCostOk returns a tuple with the TotalMonthlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EstimatedInfracost) GetTotalMonthlyCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalMonthlyCost.Get(), o.TotalMonthlyCost.IsSet()
}

// HasTotalMonthlyCost returns a boolean if a field has been set.
func (o *EstimatedInfracost) HasTotalMonthlyCost() bool {
	if o != nil && o.TotalMonthlyCost.IsSet() {
		return true
	}

	return false
}

// SetTotalMonthlyCost gets a reference to the given NullableString and assigns it to the TotalMonthlyCost field.
func (o *EstimatedInfracost) SetTotalMonthlyCost(v string) {
	o.TotalMonthlyCost.Set(&v)
}

// SetTotalMonthlyCostNil sets the value for TotalMonthlyCost to be an explicit nil
func (o *EstimatedInfracost) SetTotalMonthlyCostNil() {
	o.TotalMonthlyCost.Set(nil)
}

// UnsetTotalMonthlyCost ensures that no value is present for TotalMonthlyCost, not even an explicit nil
func (o *EstimatedInfracost) UnsetTotalMonthlyCost() {
	o.TotalMonthlyCost.Unset()
}

func (o EstimatedInfracost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedInfracost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if o.TotalHourlyCost.IsSet() {
		toSerialize["totalHourlyCost"] = o.TotalHourlyCost.Get()
	}
	if o.TotalMonthlyCost.IsSet() {
		toSerialize["totalMonthlyCost"] = o.TotalMonthlyCost.Get()
	}
	return toSerialize, nil
}

type NullableEstimatedInfracost struct {
	value *EstimatedInfracost
	isSet bool
}

func (v NullableEstimatedInfracost) Get() *EstimatedInfracost {
	return v.value
}

func (v *NullableEstimatedInfracost) Set(val *EstimatedInfracost) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedInfracost) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedInfracost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedInfracost(val *EstimatedInfracost) *NullableEstimatedInfracost {
	return &NullableEstimatedInfracost{value: val, isSet: true}
}

func (v NullableEstimatedInfracost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedInfracost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
