// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoicesEditReader is a Reader for the InvoicesEdit structure.
type InvoicesEditReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InvoicesEditReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInvoicesEditOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInvoicesEditBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInvoicesEditUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInvoicesEditForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInvoicesEditNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInvoicesEditInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInvoicesEditOK creates a InvoicesEditOK with default headers values
func NewInvoicesEditOK() *InvoicesEditOK {
	return &InvoicesEditOK{}
}

/*
InvoicesEditOK describes a response with status code 200, with default header values.

Success
*/
type InvoicesEditOK struct {
	Payload interface{}
}

// IsSuccess returns true when this invoices edit o k response has a 2xx status code
func (o *InvoicesEditOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invoices edit o k response has a 3xx status code
func (o *InvoicesEditOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit o k response has a 4xx status code
func (o *InvoicesEditOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this invoices edit o k response has a 5xx status code
func (o *InvoicesEditOK) IsServerError() bool {
	return false
}

// IsCode returns true when this invoices edit o k response a status code equal to that given
func (o *InvoicesEditOK) IsCode(code int) bool {
	return code == 200
}

func (o *InvoicesEditOK) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditOK  %+v", 200, o.Payload)
}

func (o *InvoicesEditOK) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditOK  %+v", 200, o.Payload)
}

func (o *InvoicesEditOK) GetPayload() interface{} {
	return o.Payload
}

func (o *InvoicesEditOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvoicesEditBadRequest creates a InvoicesEditBadRequest with default headers values
func NewInvoicesEditBadRequest() *InvoicesEditBadRequest {
	return &InvoicesEditBadRequest{}
}

/*
InvoicesEditBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InvoicesEditBadRequest struct {
	Payload []*InvoicesEditBadRequestBodyItems0
}

// IsSuccess returns true when this invoices edit bad request response has a 2xx status code
func (o *InvoicesEditBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoices edit bad request response has a 3xx status code
func (o *InvoicesEditBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit bad request response has a 4xx status code
func (o *InvoicesEditBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this invoices edit bad request response has a 5xx status code
func (o *InvoicesEditBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this invoices edit bad request response a status code equal to that given
func (o *InvoicesEditBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *InvoicesEditBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditBadRequest  %+v", 400, o.Payload)
}

func (o *InvoicesEditBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditBadRequest  %+v", 400, o.Payload)
}

func (o *InvoicesEditBadRequest) GetPayload() []*InvoicesEditBadRequestBodyItems0 {
	return o.Payload
}

func (o *InvoicesEditBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvoicesEditUnauthorized creates a InvoicesEditUnauthorized with default headers values
func NewInvoicesEditUnauthorized() *InvoicesEditUnauthorized {
	return &InvoicesEditUnauthorized{}
}

/*
InvoicesEditUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InvoicesEditUnauthorized struct {
	Payload *InvoicesEditUnauthorizedBody
}

// IsSuccess returns true when this invoices edit unauthorized response has a 2xx status code
func (o *InvoicesEditUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoices edit unauthorized response has a 3xx status code
func (o *InvoicesEditUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit unauthorized response has a 4xx status code
func (o *InvoicesEditUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this invoices edit unauthorized response has a 5xx status code
func (o *InvoicesEditUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this invoices edit unauthorized response a status code equal to that given
func (o *InvoicesEditUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *InvoicesEditUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditUnauthorized  %+v", 401, o.Payload)
}

func (o *InvoicesEditUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditUnauthorized  %+v", 401, o.Payload)
}

func (o *InvoicesEditUnauthorized) GetPayload() *InvoicesEditUnauthorizedBody {
	return o.Payload
}

func (o *InvoicesEditUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InvoicesEditUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvoicesEditForbidden creates a InvoicesEditForbidden with default headers values
func NewInvoicesEditForbidden() *InvoicesEditForbidden {
	return &InvoicesEditForbidden{}
}

/*
InvoicesEditForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InvoicesEditForbidden struct {
	Payload *InvoicesEditForbiddenBody
}

// IsSuccess returns true when this invoices edit forbidden response has a 2xx status code
func (o *InvoicesEditForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoices edit forbidden response has a 3xx status code
func (o *InvoicesEditForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit forbidden response has a 4xx status code
func (o *InvoicesEditForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this invoices edit forbidden response has a 5xx status code
func (o *InvoicesEditForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this invoices edit forbidden response a status code equal to that given
func (o *InvoicesEditForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *InvoicesEditForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditForbidden  %+v", 403, o.Payload)
}

func (o *InvoicesEditForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditForbidden  %+v", 403, o.Payload)
}

func (o *InvoicesEditForbidden) GetPayload() *InvoicesEditForbiddenBody {
	return o.Payload
}

func (o *InvoicesEditForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InvoicesEditForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvoicesEditNotFound creates a InvoicesEditNotFound with default headers values
func NewInvoicesEditNotFound() *InvoicesEditNotFound {
	return &InvoicesEditNotFound{}
}

/*
InvoicesEditNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InvoicesEditNotFound struct {
	Payload *InvoicesEditNotFoundBody
}

// IsSuccess returns true when this invoices edit not found response has a 2xx status code
func (o *InvoicesEditNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoices edit not found response has a 3xx status code
func (o *InvoicesEditNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit not found response has a 4xx status code
func (o *InvoicesEditNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this invoices edit not found response has a 5xx status code
func (o *InvoicesEditNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this invoices edit not found response a status code equal to that given
func (o *InvoicesEditNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *InvoicesEditNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditNotFound  %+v", 404, o.Payload)
}

func (o *InvoicesEditNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditNotFound  %+v", 404, o.Payload)
}

func (o *InvoicesEditNotFound) GetPayload() *InvoicesEditNotFoundBody {
	return o.Payload
}

func (o *InvoicesEditNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InvoicesEditNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInvoicesEditInternalServerError creates a InvoicesEditInternalServerError with default headers values
func NewInvoicesEditInternalServerError() *InvoicesEditInternalServerError {
	return &InvoicesEditInternalServerError{}
}

/*
InvoicesEditInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type InvoicesEditInternalServerError struct {
}

// IsSuccess returns true when this invoices edit internal server error response has a 2xx status code
func (o *InvoicesEditInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoices edit internal server error response has a 3xx status code
func (o *InvoicesEditInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoices edit internal server error response has a 4xx status code
func (o *InvoicesEditInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this invoices edit internal server error response has a 5xx status code
func (o *InvoicesEditInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this invoices edit internal server error response a status code equal to that given
func (o *InvoicesEditInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *InvoicesEditInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditInternalServerError ", 500)
}

func (o *InvoicesEditInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v{v}/Invoices/update/{invoiceId}][%d] invoicesEditInternalServerError ", 500)
}

func (o *InvoicesEditInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
InvoicesEditBadRequestBodyItems0 invoices edit bad request body items0
swagger:model InvoicesEditBadRequestBodyItems0
*/
type InvoicesEditBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this invoices edit bad request body items0
func (o *InvoicesEditBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invoices edit bad request body items0 based on context it is used
func (o *InvoicesEditBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InvoicesEditBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InvoicesEditBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res InvoicesEditBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
InvoicesEditBody invoices edit body
swagger:model InvoicesEditBody
*/
type InvoicesEditBody struct {

	// due date
	// Format: date-time
	DueDate *strfmt.DateTime `json:"dueDate,omitempty"`

	// end date
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate,omitempty"`

	// is paid
	IsPaid bool `json:"isPaid"`

	// name
	Name string `json:"name,omitempty"`

	// organization subscription Id
	OrganizationSubscriptionID int32 `json:"organizationSubscriptionId,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// required payment action
	RequiredPaymentAction bool `json:"requiredPaymentAction"`

	// start date
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate,omitempty"`

	// stripe invoice Id
	StripeInvoiceID string `json:"stripeInvoiceId,omitempty"`
}

// Validate validates this invoices edit body
func (o *InvoicesEditBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InvoicesEditBody) validateDueDate(formats strfmt.Registry) error {
	if swag.IsZero(o.DueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"dueDate", "body", "date-time", o.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *InvoicesEditBody) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(o.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"endDate", "body", "date-time", o.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *InvoicesEditBody) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(o.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"startDate", "body", "date-time", o.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this invoices edit body based on context it is used
func (o *InvoicesEditBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InvoicesEditBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InvoicesEditBody) UnmarshalBinary(b []byte) error {
	var res InvoicesEditBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
InvoicesEditForbiddenBody invoices edit forbidden body
swagger:model InvoicesEditForbiddenBody
*/
type InvoicesEditForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this invoices edit forbidden body
func (o *InvoicesEditForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invoices edit forbidden body based on context it is used
func (o *InvoicesEditForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InvoicesEditForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InvoicesEditForbiddenBody) UnmarshalBinary(b []byte) error {
	var res InvoicesEditForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
InvoicesEditNotFoundBody invoices edit not found body
swagger:model InvoicesEditNotFoundBody
*/
type InvoicesEditNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this invoices edit not found body
func (o *InvoicesEditNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invoices edit not found body based on context it is used
func (o *InvoicesEditNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InvoicesEditNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InvoicesEditNotFoundBody) UnmarshalBinary(b []byte) error {
	var res InvoicesEditNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
InvoicesEditUnauthorizedBody invoices edit unauthorized body
swagger:model InvoicesEditUnauthorizedBody
*/
type InvoicesEditUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this invoices edit unauthorized body
func (o *InvoicesEditUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invoices edit unauthorized body based on context it is used
func (o *InvoicesEditUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InvoicesEditUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InvoicesEditUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res InvoicesEditUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
