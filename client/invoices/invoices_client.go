// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invoices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invoices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	InvoicesCreate(params *InvoicesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesCreateOK, error)

	InvoicesDownload(params *InvoicesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesDownloadOK, error)

	InvoicesEdit(params *InvoicesEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesEditOK, error)

	InvoicesInvoices(params *InvoicesInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesInvoicesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
InvoicesCreate creates invoice
*/
func (a *Client) InvoicesCreate(params *InvoicesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Invoices_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Invoices/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Invoices_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesDownload downloads invoice
*/
func (a *Client) InvoicesDownload(params *InvoicesDownloadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesDownloadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Invoices_Download",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Invoices/download",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Invoices_Download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesEdit updates invoice
*/
func (a *Client) InvoicesEdit(params *InvoicesEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Invoices_Edit",
		Method:             "PUT",
		PathPattern:        "/api/v{v}/Invoices/update/{invoiceId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Invoices_Edit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesInvoices gets invoices list
*/
func (a *Client) InvoicesInvoices(params *InvoicesInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvoicesInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Invoices_Invoices",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Invoices/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Invoices_Invoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
