/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the RuleCreateCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleCreateCommand{}

// RuleCreateCommand struct for RuleCreateCommand
type RuleCreateCommand struct {
	Name                  NullableString           `json:"name,omitempty"`
	MetricName            NullableString           `json:"metricName,omitempty"`
	Labels                []PrometheusLabelListDto `json:"labels,omitempty"`
	Type                  *PrometheusType          `json:"type,omitempty"`
	Price                 *float64                 `json:"price,omitempty"`
	PartnerId             NullableInt32            `json:"partnerId,omitempty"`
	OperationCredentialId *int32                   `json:"operationCredentialId,omitempty"`
	OrganizationId        []int32                  `json:"organizationId,omitempty"`
	RuleDiscountRate      NullableInt32            `json:"ruleDiscountRate,omitempty"`
}

// NewRuleCreateCommand instantiates a new RuleCreateCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleCreateCommand() *RuleCreateCommand {
	this := RuleCreateCommand{}
	return &this
}

// NewRuleCreateCommandWithDefaults instantiates a new RuleCreateCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleCreateCommandWithDefaults() *RuleCreateCommand {
	this := RuleCreateCommand{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RuleCreateCommand) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *RuleCreateCommand) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RuleCreateCommand) UnsetName() {
	o.Name.Unset()
}

// GetMetricName returns the MetricName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetMetricName() string {
	if o == nil || IsNil(o.MetricName.Get()) {
		var ret string
		return ret
	}
	return *o.MetricName.Get()
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricName.Get(), o.MetricName.IsSet()
}

// HasMetricName returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasMetricName() bool {
	if o != nil && o.MetricName.IsSet() {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given NullableString and assigns it to the MetricName field.
func (o *RuleCreateCommand) SetMetricName(v string) {
	o.MetricName.Set(&v)
}

// SetMetricNameNil sets the value for MetricName to be an explicit nil
func (o *RuleCreateCommand) SetMetricNameNil() {
	o.MetricName.Set(nil)
}

// UnsetMetricName ensures that no value is present for MetricName, not even an explicit nil
func (o *RuleCreateCommand) UnsetMetricName() {
	o.MetricName.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetLabels() []PrometheusLabelListDto {
	if o == nil {
		var ret []PrometheusLabelListDto
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetLabelsOk() ([]PrometheusLabelListDto, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasLabels() bool {
	if o != nil && IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []PrometheusLabelListDto and assigns it to the Labels field.
func (o *RuleCreateCommand) SetLabels(v []PrometheusLabelListDto) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RuleCreateCommand) GetType() PrometheusType {
	if o == nil || IsNil(o.Type) {
		var ret PrometheusType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCreateCommand) GetTypeOk() (*PrometheusType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PrometheusType and assigns it to the Type field.
func (o *RuleCreateCommand) SetType(v PrometheusType) {
	o.Type = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *RuleCreateCommand) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCreateCommand) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *RuleCreateCommand) SetPrice(v float64) {
	o.Price = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetPartnerId() int32 {
	if o == nil || IsNil(o.PartnerId.Get()) {
		var ret int32
		return ret
	}
	return *o.PartnerId.Get()
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetPartnerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartnerId.Get(), o.PartnerId.IsSet()
}

// HasPartnerId returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasPartnerId() bool {
	if o != nil && o.PartnerId.IsSet() {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given NullableInt32 and assigns it to the PartnerId field.
func (o *RuleCreateCommand) SetPartnerId(v int32) {
	o.PartnerId.Set(&v)
}

// SetPartnerIdNil sets the value for PartnerId to be an explicit nil
func (o *RuleCreateCommand) SetPartnerIdNil() {
	o.PartnerId.Set(nil)
}

// UnsetPartnerId ensures that no value is present for PartnerId, not even an explicit nil
func (o *RuleCreateCommand) UnsetPartnerId() {
	o.PartnerId.Unset()
}

// GetOperationCredentialId returns the OperationCredentialId field value if set, zero value otherwise.
func (o *RuleCreateCommand) GetOperationCredentialId() int32 {
	if o == nil || IsNil(o.OperationCredentialId) {
		var ret int32
		return ret
	}
	return *o.OperationCredentialId
}

// GetOperationCredentialIdOk returns a tuple with the OperationCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCreateCommand) GetOperationCredentialIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OperationCredentialId) {
		return nil, false
	}
	return o.OperationCredentialId, true
}

// HasOperationCredentialId returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasOperationCredentialId() bool {
	if o != nil && !IsNil(o.OperationCredentialId) {
		return true
	}

	return false
}

// SetOperationCredentialId gets a reference to the given int32 and assigns it to the OperationCredentialId field.
func (o *RuleCreateCommand) SetOperationCredentialId(v int32) {
	o.OperationCredentialId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetOrganizationId() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetOrganizationIdOk() ([]int32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasOrganizationId() bool {
	if o != nil && IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given []int32 and assigns it to the OrganizationId field.
func (o *RuleCreateCommand) SetOrganizationId(v []int32) {
	o.OrganizationId = v
}

// GetRuleDiscountRate returns the RuleDiscountRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleCreateCommand) GetRuleDiscountRate() int32 {
	if o == nil || IsNil(o.RuleDiscountRate.Get()) {
		var ret int32
		return ret
	}
	return *o.RuleDiscountRate.Get()
}

// GetRuleDiscountRateOk returns a tuple with the RuleDiscountRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleCreateCommand) GetRuleDiscountRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleDiscountRate.Get(), o.RuleDiscountRate.IsSet()
}

// HasRuleDiscountRate returns a boolean if a field has been set.
func (o *RuleCreateCommand) HasRuleDiscountRate() bool {
	if o != nil && o.RuleDiscountRate.IsSet() {
		return true
	}

	return false
}

// SetRuleDiscountRate gets a reference to the given NullableInt32 and assigns it to the RuleDiscountRate field.
func (o *RuleCreateCommand) SetRuleDiscountRate(v int32) {
	o.RuleDiscountRate.Set(&v)
}

// SetRuleDiscountRateNil sets the value for RuleDiscountRate to be an explicit nil
func (o *RuleCreateCommand) SetRuleDiscountRateNil() {
	o.RuleDiscountRate.Set(nil)
}

// UnsetRuleDiscountRate ensures that no value is present for RuleDiscountRate, not even an explicit nil
func (o *RuleCreateCommand) UnsetRuleDiscountRate() {
	o.RuleDiscountRate.Unset()
}

func (o RuleCreateCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleCreateCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.MetricName.IsSet() {
		toSerialize["metricName"] = o.MetricName.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.PartnerId.IsSet() {
		toSerialize["partnerId"] = o.PartnerId.Get()
	}
	if !IsNil(o.OperationCredentialId) {
		toSerialize["operationCredentialId"] = o.OperationCredentialId
	}
	if o.OrganizationId != nil {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if o.RuleDiscountRate.IsSet() {
		toSerialize["ruleDiscountRate"] = o.RuleDiscountRate.Get()
	}
	return toSerialize, nil
}

type NullableRuleCreateCommand struct {
	value *RuleCreateCommand
	isSet bool
}

func (v NullableRuleCreateCommand) Get() *RuleCreateCommand {
	return v.value
}

func (v *NullableRuleCreateCommand) Set(val *RuleCreateCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleCreateCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleCreateCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleCreateCommand(val *RuleCreateCommand) *NullableRuleCreateCommand {
	return &NullableRuleCreateCommand{value: val, isSet: true}
}

func (v NullableRuleCreateCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleCreateCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
