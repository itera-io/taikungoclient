/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlavorsListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorsListDto{}

// FlavorsListDto struct for FlavorsListDto
type FlavorsListDto struct {
	Ram float64 `json:"ram"`
	Cpu int32 `json:"cpu"`
	Name string `json:"name"`
	Description interface{} `json:"description"`
	MaxDataDiskCount NullableFloat64 `json:"maxDataDiskCount"`
}

type _FlavorsListDto FlavorsListDto

// NewFlavorsListDto instantiates a new FlavorsListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorsListDto(ram float64, cpu int32, name string, description interface{}, maxDataDiskCount NullableFloat64) *FlavorsListDto {
	this := FlavorsListDto{}
	this.Ram = ram
	this.Cpu = cpu
	this.Name = name
	this.Description = description
	this.MaxDataDiskCount = maxDataDiskCount
	return &this
}

// NewFlavorsListDtoWithDefaults instantiates a new FlavorsListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorsListDtoWithDefaults() *FlavorsListDto {
	this := FlavorsListDto{}
	return &this
}

// GetRam returns the Ram field value
func (o *FlavorsListDto) GetRam() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *FlavorsListDto) GetRamOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *FlavorsListDto) SetRam(v float64) {
	o.Ram = v
}

// GetCpu returns the Cpu field value
func (o *FlavorsListDto) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *FlavorsListDto) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *FlavorsListDto) SetCpu(v int32) {
	o.Cpu = v
}

// GetName returns the Name field value
func (o *FlavorsListDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlavorsListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FlavorsListDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *FlavorsListDto) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlavorsListDto) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FlavorsListDto) SetDescription(v interface{}) {
	o.Description = v
}

// GetMaxDataDiskCount returns the MaxDataDiskCount field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *FlavorsListDto) GetMaxDataDiskCount() float64 {
	if o == nil || o.MaxDataDiskCount.Get() == nil {
		var ret float64
		return ret
	}

	return *o.MaxDataDiskCount.Get()
}

// GetMaxDataDiskCountOk returns a tuple with the MaxDataDiskCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlavorsListDto) GetMaxDataDiskCountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDataDiskCount.Get(), o.MaxDataDiskCount.IsSet()
}

// SetMaxDataDiskCount sets field value
func (o *FlavorsListDto) SetMaxDataDiskCount(v float64) {
	o.MaxDataDiskCount.Set(&v)
}

func (o FlavorsListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorsListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ram"] = o.Ram
	toSerialize["cpu"] = o.Cpu
	toSerialize["name"] = o.Name
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	toSerialize["maxDataDiskCount"] = o.MaxDataDiskCount.Get()
	return toSerialize, nil
}

func (o *FlavorsListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ram",
		"cpu",
		"name",
		"description",
		"maxDataDiskCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlavorsListDto := _FlavorsListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlavorsListDto)

	if err != nil {
		return err
	}

	*o = FlavorsListDto(varFlavorsListDto)

	return err
}

type NullableFlavorsListDto struct {
	value *FlavorsListDto
	isSet bool
}

func (v NullableFlavorsListDto) Get() *FlavorsListDto {
	return v.value
}

func (v *NullableFlavorsListDto) Set(val *FlavorsListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorsListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorsListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorsListDto(val *FlavorsListDto) *NullableFlavorsListDto {
	return &NullableFlavorsListDto{value: val, isSet: true}
}

func (v NullableFlavorsListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorsListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


