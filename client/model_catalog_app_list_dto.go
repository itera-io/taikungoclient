/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the CatalogAppListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogAppListDto{}

// CatalogAppListDto struct for CatalogAppListDto
type CatalogAppListDto struct {
	Id *int32 `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	RepoId *int32 `json:"repoId,omitempty"`
	RepoName NullableString `json:"repoName,omitempty"`
	CatalogId *int32 `json:"catalogId,omitempty"`
	CatalogName NullableString `json:"catalogName,omitempty"`
	PackageId NullableString `json:"packageId,omitempty"`
	Version NullableString `json:"version,omitempty"`
	Logo NullableString `json:"logo,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
}

// NewCatalogAppListDto instantiates a new CatalogAppListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogAppListDto() *CatalogAppListDto {
	this := CatalogAppListDto{}
	return &this
}

// NewCatalogAppListDtoWithDefaults instantiates a new CatalogAppListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogAppListDtoWithDefaults() *CatalogAppListDto {
	this := CatalogAppListDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogAppListDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppListDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogAppListDto) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CatalogAppListDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CatalogAppListDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CatalogAppListDto) UnsetName() {
	o.Name.Unset()
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *CatalogAppListDto) GetRepoId() int32 {
	if o == nil || IsNil(o.RepoId) {
		var ret int32
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppListDto) GetRepoIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RepoId) {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasRepoId() bool {
	if o != nil && !IsNil(o.RepoId) {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given int32 and assigns it to the RepoId field.
func (o *CatalogAppListDto) SetRepoId(v int32) {
	o.RepoId = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetRepoName() string {
	if o == nil || IsNil(o.RepoName.Get()) {
		var ret string
		return ret
	}
	return *o.RepoName.Get()
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetRepoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepoName.Get(), o.RepoName.IsSet()
}

// HasRepoName returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasRepoName() bool {
	if o != nil && o.RepoName.IsSet() {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given NullableString and assigns it to the RepoName field.
func (o *CatalogAppListDto) SetRepoName(v string) {
	o.RepoName.Set(&v)
}
// SetRepoNameNil sets the value for RepoName to be an explicit nil
func (o *CatalogAppListDto) SetRepoNameNil() {
	o.RepoName.Set(nil)
}

// UnsetRepoName ensures that no value is present for RepoName, not even an explicit nil
func (o *CatalogAppListDto) UnsetRepoName() {
	o.RepoName.Unset()
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *CatalogAppListDto) GetCatalogId() int32 {
	if o == nil || IsNil(o.CatalogId) {
		var ret int32
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppListDto) GetCatalogIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given int32 and assigns it to the CatalogId field.
func (o *CatalogAppListDto) SetCatalogId(v int32) {
	o.CatalogId = &v
}

// GetCatalogName returns the CatalogName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetCatalogName() string {
	if o == nil || IsNil(o.CatalogName.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogName.Get()
}

// GetCatalogNameOk returns a tuple with the CatalogName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetCatalogNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogName.Get(), o.CatalogName.IsSet()
}

// HasCatalogName returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasCatalogName() bool {
	if o != nil && o.CatalogName.IsSet() {
		return true
	}

	return false
}

// SetCatalogName gets a reference to the given NullableString and assigns it to the CatalogName field.
func (o *CatalogAppListDto) SetCatalogName(v string) {
	o.CatalogName.Set(&v)
}
// SetCatalogNameNil sets the value for CatalogName to be an explicit nil
func (o *CatalogAppListDto) SetCatalogNameNil() {
	o.CatalogName.Set(nil)
}

// UnsetCatalogName ensures that no value is present for CatalogName, not even an explicit nil
func (o *CatalogAppListDto) UnsetCatalogName() {
	o.CatalogName.Unset()
}

// GetPackageId returns the PackageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetPackageId() string {
	if o == nil || IsNil(o.PackageId.Get()) {
		var ret string
		return ret
	}
	return *o.PackageId.Get()
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageId.Get(), o.PackageId.IsSet()
}

// HasPackageId returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasPackageId() bool {
	if o != nil && o.PackageId.IsSet() {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given NullableString and assigns it to the PackageId field.
func (o *CatalogAppListDto) SetPackageId(v string) {
	o.PackageId.Set(&v)
}
// SetPackageIdNil sets the value for PackageId to be an explicit nil
func (o *CatalogAppListDto) SetPackageIdNil() {
	o.PackageId.Set(nil)
}

// UnsetPackageId ensures that no value is present for PackageId, not even an explicit nil
func (o *CatalogAppListDto) UnsetPackageId() {
	o.PackageId.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *CatalogAppListDto) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *CatalogAppListDto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *CatalogAppListDto) UnsetVersion() {
	o.Version.Unset()
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogAppListDto) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogAppListDto) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *CatalogAppListDto) SetLogo(v string) {
	o.Logo.Set(&v)
}
// SetLogoNil sets the value for Logo to be an explicit nil
func (o *CatalogAppListDto) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *CatalogAppListDto) UnsetLogo() {
	o.Logo.Unset()
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *CatalogAppListDto) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogAppListDto) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *CatalogAppListDto) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *CatalogAppListDto) SetIsLocked(v bool) {
	o.IsLocked = &v
}

func (o CatalogAppListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogAppListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.RepoId) {
		toSerialize["repoId"] = o.RepoId
	}
	if o.RepoName.IsSet() {
		toSerialize["repoName"] = o.RepoName.Get()
	}
	if !IsNil(o.CatalogId) {
		toSerialize["catalogId"] = o.CatalogId
	}
	if o.CatalogName.IsSet() {
		toSerialize["catalogName"] = o.CatalogName.Get()
	}
	if o.PackageId.IsSet() {
		toSerialize["packageId"] = o.PackageId.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	return toSerialize, nil
}

type NullableCatalogAppListDto struct {
	value *CatalogAppListDto
	isSet bool
}

func (v NullableCatalogAppListDto) Get() *CatalogAppListDto {
	return v.value
}

func (v *NullableCatalogAppListDto) Set(val *CatalogAppListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAppListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAppListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAppListDto(val *CatalogAppListDto) *NullableCatalogAppListDto {
	return &NullableCatalogAppListDto{value: val, isSet: true}
}

func (v NullableCatalogAppListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAppListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


