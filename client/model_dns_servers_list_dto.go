/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnsServersListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsServersListDto{}

// DnsServersListDto struct for DnsServersListDto
type DnsServersListDto struct {
	Id int32 `json:"id"`
	Address string `json:"address"`
	AccessProfileName string `json:"accessProfileName"`
}

type _DnsServersListDto DnsServersListDto

// NewDnsServersListDto instantiates a new DnsServersListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsServersListDto(id int32, address string, accessProfileName string) *DnsServersListDto {
	this := DnsServersListDto{}
	this.Id = id
	this.Address = address
	this.AccessProfileName = accessProfileName
	return &this
}

// NewDnsServersListDtoWithDefaults instantiates a new DnsServersListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsServersListDtoWithDefaults() *DnsServersListDto {
	this := DnsServersListDto{}
	return &this
}

// GetId returns the Id field value
func (o *DnsServersListDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DnsServersListDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DnsServersListDto) SetId(v int32) {
	o.Id = v
}

// GetAddress returns the Address field value
func (o *DnsServersListDto) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *DnsServersListDto) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *DnsServersListDto) SetAddress(v string) {
	o.Address = v
}

// GetAccessProfileName returns the AccessProfileName field value
func (o *DnsServersListDto) GetAccessProfileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessProfileName
}

// GetAccessProfileNameOk returns a tuple with the AccessProfileName field value
// and a boolean to check if the value has been set.
func (o *DnsServersListDto) GetAccessProfileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessProfileName, true
}

// SetAccessProfileName sets field value
func (o *DnsServersListDto) SetAccessProfileName(v string) {
	o.AccessProfileName = v
}

func (o DnsServersListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsServersListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["address"] = o.Address
	toSerialize["accessProfileName"] = o.AccessProfileName
	return toSerialize, nil
}

func (o *DnsServersListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"address",
		"accessProfileName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsServersListDto := _DnsServersListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnsServersListDto)

	if err != nil {
		return err
	}

	*o = DnsServersListDto(varDnsServersListDto)

	return err
}

type NullableDnsServersListDto struct {
	value *DnsServersListDto
	isSet bool
}

func (v NullableDnsServersListDto) Get() *DnsServersListDto {
	return v.value
}

func (v *NullableDnsServersListDto) Set(val *DnsServersListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsServersListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsServersListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsServersListDto(val *DnsServersListDto) *NullableDnsServersListDto {
	return &NullableDnsServersListDto{value: val, isSet: true}
}

func (v NullableDnsServersListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsServersListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


