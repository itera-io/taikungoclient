/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the LokiLogsQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LokiLogsQuery{}

// LokiLogsQuery struct for LokiLogsQuery
type LokiLogsQuery struct {
	ProjectId *int32 `json:"projectId,omitempty"`
	Parameters NullableString `json:"parameters,omitempty"`
	Filters []Filter `json:"filters,omitempty"`
	StartDate NullableTime `json:"startDate,omitempty"`
	EndDate NullableTime `json:"endDate,omitempty"`
	Limit NullableInt32 `json:"limit,omitempty"`
	Direction NullableString `json:"direction,omitempty"`
}

// NewLokiLogsQuery instantiates a new LokiLogsQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLokiLogsQuery() *LokiLogsQuery {
	this := LokiLogsQuery{}
	return &this
}

// NewLokiLogsQueryWithDefaults instantiates a new LokiLogsQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLokiLogsQueryWithDefaults() *LokiLogsQuery {
	this := LokiLogsQuery{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *LokiLogsQuery) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LokiLogsQuery) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *LokiLogsQuery) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetParameters() string {
	if o == nil || IsNil(o.Parameters.Get()) {
		var ret string
		return ret
	}
	return *o.Parameters.Get()
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetParametersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters.Get(), o.Parameters.IsSet()
}

// HasParameters returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasParameters() bool {
	if o != nil && o.Parameters.IsSet() {
		return true
	}

	return false
}

// SetParameters gets a reference to the given NullableString and assigns it to the Parameters field.
func (o *LokiLogsQuery) SetParameters(v string) {
	o.Parameters.Set(&v)
}
// SetParametersNil sets the value for Parameters to be an explicit nil
func (o *LokiLogsQuery) SetParametersNil() {
	o.Parameters.Set(nil)
}

// UnsetParameters ensures that no value is present for Parameters, not even an explicit nil
func (o *LokiLogsQuery) UnsetParameters() {
	o.Parameters.Unset()
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetFilters() []Filter {
	if o == nil {
		var ret []Filter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []Filter and assigns it to the Filters field.
func (o *LokiLogsQuery) SetFilters(v []Filter) {
	o.Filters = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *LokiLogsQuery) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *LokiLogsQuery) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *LokiLogsQuery) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *LokiLogsQuery) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *LokiLogsQuery) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *LokiLogsQuery) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *LokiLogsQuery) SetLimit(v int32) {
	o.Limit.Set(&v)
}
// SetLimitNil sets the value for Limit to be an explicit nil
func (o *LokiLogsQuery) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *LokiLogsQuery) UnsetLimit() {
	o.Limit.Unset()
}

// GetDirection returns the Direction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LokiLogsQuery) GetDirection() string {
	if o == nil || IsNil(o.Direction.Get()) {
		var ret string
		return ret
	}
	return *o.Direction.Get()
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LokiLogsQuery) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Direction.Get(), o.Direction.IsSet()
}

// HasDirection returns a boolean if a field has been set.
func (o *LokiLogsQuery) HasDirection() bool {
	if o != nil && o.Direction.IsSet() {
		return true
	}

	return false
}

// SetDirection gets a reference to the given NullableString and assigns it to the Direction field.
func (o *LokiLogsQuery) SetDirection(v string) {
	o.Direction.Set(&v)
}
// SetDirectionNil sets the value for Direction to be an explicit nil
func (o *LokiLogsQuery) SetDirectionNil() {
	o.Direction.Set(nil)
}

// UnsetDirection ensures that no value is present for Direction, not even an explicit nil
func (o *LokiLogsQuery) UnsetDirection() {
	o.Direction.Unset()
}

func (o LokiLogsQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LokiLogsQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Parameters.IsSet() {
		toSerialize["parameters"] = o.Parameters.Get()
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.StartDate.IsSet() {
		toSerialize["startDate"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.Direction.IsSet() {
		toSerialize["direction"] = o.Direction.Get()
	}
	return toSerialize, nil
}

type NullableLokiLogsQuery struct {
	value *LokiLogsQuery
	isSet bool
}

func (v NullableLokiLogsQuery) Get() *LokiLogsQuery {
	return v.value
}

func (v *NullableLokiLogsQuery) Set(val *LokiLogsQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLokiLogsQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLokiLogsQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLokiLogsQuery(val *LokiLogsQuery) *NullableLokiLogsQuery {
	return &NullableLokiLogsQuery{value: val, isSet: true}
}

func (v NullableLokiLogsQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLokiLogsQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


