// Code generated by go-swagger; DO NOT EDIT.

package proxmox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proxmox API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxmox API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProxmoxBridgeList(params *ProxmoxBridgeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxBridgeListOK, error)

	ProxmoxCreate(params *ProxmoxCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxCreateOK, error)

	ProxmoxHypervisorList(params *ProxmoxHypervisorListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxHypervisorListOK, error)

	ProxmoxList(params *ProxmoxListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxListOK, error)

	ProxmoxStorageList(params *ProxmoxStorageListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxStorageListOK, error)

	ProxmoxVMTemplateList(params *ProxmoxVMTemplateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxVMTemplateListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProxmoxBridgeList fetches proxmox bridge list
*/
func (a *Client) ProxmoxBridgeList(params *ProxmoxBridgeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxBridgeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxBridgeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_BridgeList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Proxmox/bridge-list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxBridgeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxBridgeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_BridgeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProxmoxCreate adds proxmox credentials
*/
func (a *Client) ProxmoxCreate(params *ProxmoxCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_Create",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Proxmox/create",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProxmoxHypervisorList fetches proxmox hypervisor list
*/
func (a *Client) ProxmoxHypervisorList(params *ProxmoxHypervisorListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxHypervisorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxHypervisorListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_HypervisorList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Proxmox/hypervisor-list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxHypervisorListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxHypervisorListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_HypervisorList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProxmoxList retrieves list of proxmox cloud credentials
*/
func (a *Client) ProxmoxList(params *ProxmoxListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_List",
		Method:             "GET",
		PathPattern:        "/api/v{v}/Proxmox/list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProxmoxStorageList fetches proxmox storage list
*/
func (a *Client) ProxmoxStorageList(params *ProxmoxStorageListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxStorageListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxStorageListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_StorageList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Proxmox/storage-list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxStorageListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxStorageListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_StorageList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProxmoxVMTemplateList fetches proxmox vm tempalte list
*/
func (a *Client) ProxmoxVMTemplateList(params *ProxmoxVMTemplateListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProxmoxVMTemplateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProxmoxVMTemplateListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proxmox_VmTemplateList",
		Method:             "POST",
		PathPattern:        "/api/v{v}/Proxmox/vm-template-list",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProxmoxVMTemplateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProxmoxVMTemplateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Proxmox_VmTemplateList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
