// Code generated by go-swagger; DO NOT EDIT.

package proxmox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/itera-io/taikungoclient/models"
)

// ProxmoxListReader is a Reader for the ProxmoxList structure.
type ProxmoxListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProxmoxListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProxmoxListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProxmoxListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProxmoxListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProxmoxListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProxmoxListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProxmoxListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProxmoxListOK creates a ProxmoxListOK with default headers values
func NewProxmoxListOK() *ProxmoxListOK {
	return &ProxmoxListOK{}
}

/*
ProxmoxListOK describes a response with status code 200, with default header values.

Success
*/
type ProxmoxListOK struct {
	Payload *models.ProxmoxList
}

// IsSuccess returns true when this proxmox list o k response has a 2xx status code
func (o *ProxmoxListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this proxmox list o k response has a 3xx status code
func (o *ProxmoxListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list o k response has a 4xx status code
func (o *ProxmoxListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this proxmox list o k response has a 5xx status code
func (o *ProxmoxListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox list o k response a status code equal to that given
func (o *ProxmoxListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the proxmox list o k response
func (o *ProxmoxListOK) Code() int {
	return 200
}

func (o *ProxmoxListOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListOK  %+v", 200, o.Payload)
}

func (o *ProxmoxListOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListOK  %+v", 200, o.Payload)
}

func (o *ProxmoxListOK) GetPayload() *models.ProxmoxList {
	return o.Payload
}

func (o *ProxmoxListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxmoxList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxListBadRequest creates a ProxmoxListBadRequest with default headers values
func NewProxmoxListBadRequest() *ProxmoxListBadRequest {
	return &ProxmoxListBadRequest{}
}

/*
ProxmoxListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProxmoxListBadRequest struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this proxmox list bad request response has a 2xx status code
func (o *ProxmoxListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox list bad request response has a 3xx status code
func (o *ProxmoxListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list bad request response has a 4xx status code
func (o *ProxmoxListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox list bad request response has a 5xx status code
func (o *ProxmoxListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox list bad request response a status code equal to that given
func (o *ProxmoxListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the proxmox list bad request response
func (o *ProxmoxListBadRequest) Code() int {
	return 400
}

func (o *ProxmoxListBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListBadRequest  %+v", 400, o.Payload)
}

func (o *ProxmoxListBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListBadRequest  %+v", 400, o.Payload)
}

func (o *ProxmoxListBadRequest) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProxmoxListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxListUnauthorized creates a ProxmoxListUnauthorized with default headers values
func NewProxmoxListUnauthorized() *ProxmoxListUnauthorized {
	return &ProxmoxListUnauthorized{}
}

/*
ProxmoxListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProxmoxListUnauthorized struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this proxmox list unauthorized response has a 2xx status code
func (o *ProxmoxListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox list unauthorized response has a 3xx status code
func (o *ProxmoxListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list unauthorized response has a 4xx status code
func (o *ProxmoxListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox list unauthorized response has a 5xx status code
func (o *ProxmoxListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox list unauthorized response a status code equal to that given
func (o *ProxmoxListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the proxmox list unauthorized response
func (o *ProxmoxListUnauthorized) Code() int {
	return 401
}

func (o *ProxmoxListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProxmoxListUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListUnauthorized  %+v", 401, o.Payload)
}

func (o *ProxmoxListUnauthorized) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProxmoxListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxListForbidden creates a ProxmoxListForbidden with default headers values
func NewProxmoxListForbidden() *ProxmoxListForbidden {
	return &ProxmoxListForbidden{}
}

/*
ProxmoxListForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProxmoxListForbidden struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this proxmox list forbidden response has a 2xx status code
func (o *ProxmoxListForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox list forbidden response has a 3xx status code
func (o *ProxmoxListForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list forbidden response has a 4xx status code
func (o *ProxmoxListForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox list forbidden response has a 5xx status code
func (o *ProxmoxListForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox list forbidden response a status code equal to that given
func (o *ProxmoxListForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the proxmox list forbidden response
func (o *ProxmoxListForbidden) Code() int {
	return 403
}

func (o *ProxmoxListForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListForbidden  %+v", 403, o.Payload)
}

func (o *ProxmoxListForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListForbidden  %+v", 403, o.Payload)
}

func (o *ProxmoxListForbidden) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProxmoxListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxListNotFound creates a ProxmoxListNotFound with default headers values
func NewProxmoxListNotFound() *ProxmoxListNotFound {
	return &ProxmoxListNotFound{}
}

/*
ProxmoxListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProxmoxListNotFound struct {
	Payload *models.ProblemDetails
}

// IsSuccess returns true when this proxmox list not found response has a 2xx status code
func (o *ProxmoxListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox list not found response has a 3xx status code
func (o *ProxmoxListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list not found response has a 4xx status code
func (o *ProxmoxListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox list not found response has a 5xx status code
func (o *ProxmoxListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox list not found response a status code equal to that given
func (o *ProxmoxListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the proxmox list not found response
func (o *ProxmoxListNotFound) Code() int {
	return 404
}

func (o *ProxmoxListNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListNotFound  %+v", 404, o.Payload)
}

func (o *ProxmoxListNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListNotFound  %+v", 404, o.Payload)
}

func (o *ProxmoxListNotFound) GetPayload() *models.ProblemDetails {
	return o.Payload
}

func (o *ProxmoxListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProblemDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxListInternalServerError creates a ProxmoxListInternalServerError with default headers values
func NewProxmoxListInternalServerError() *ProxmoxListInternalServerError {
	return &ProxmoxListInternalServerError{}
}

/*
ProxmoxListInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProxmoxListInternalServerError struct {
}

// IsSuccess returns true when this proxmox list internal server error response has a 2xx status code
func (o *ProxmoxListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox list internal server error response has a 3xx status code
func (o *ProxmoxListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox list internal server error response has a 4xx status code
func (o *ProxmoxListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this proxmox list internal server error response has a 5xx status code
func (o *ProxmoxListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this proxmox list internal server error response a status code equal to that given
func (o *ProxmoxListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the proxmox list internal server error response
func (o *ProxmoxListInternalServerError) Code() int {
	return 500
}

func (o *ProxmoxListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListInternalServerError ", 500)
}

func (o *ProxmoxListInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/Proxmox/list][%d] proxmoxListInternalServerError ", 500)
}

func (o *ProxmoxListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
