// Code generated by go-swagger; DO NOT EDIT.

package proxmox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ProxmoxUpdateReader is a Reader for the ProxmoxUpdate structure.
type ProxmoxUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProxmoxUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProxmoxUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProxmoxUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProxmoxUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProxmoxUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProxmoxUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProxmoxUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProxmoxUpdateOK creates a ProxmoxUpdateOK with default headers values
func NewProxmoxUpdateOK() *ProxmoxUpdateOK {
	return &ProxmoxUpdateOK{}
}

/*
ProxmoxUpdateOK describes a response with status code 200, with default header values.

Success
*/
type ProxmoxUpdateOK struct {
}

// IsSuccess returns true when this proxmox update o k response has a 2xx status code
func (o *ProxmoxUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this proxmox update o k response has a 3xx status code
func (o *ProxmoxUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update o k response has a 4xx status code
func (o *ProxmoxUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this proxmox update o k response has a 5xx status code
func (o *ProxmoxUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox update o k response a status code equal to that given
func (o *ProxmoxUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the proxmox update o k response
func (o *ProxmoxUpdateOK) Code() int {
	return 200
}

func (o *ProxmoxUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateOK ", 200)
}

func (o *ProxmoxUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateOK ", 200)
}

func (o *ProxmoxUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProxmoxUpdateBadRequest creates a ProxmoxUpdateBadRequest with default headers values
func NewProxmoxUpdateBadRequest() *ProxmoxUpdateBadRequest {
	return &ProxmoxUpdateBadRequest{}
}

/*
ProxmoxUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProxmoxUpdateBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this proxmox update bad request response has a 2xx status code
func (o *ProxmoxUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox update bad request response has a 3xx status code
func (o *ProxmoxUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update bad request response has a 4xx status code
func (o *ProxmoxUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox update bad request response has a 5xx status code
func (o *ProxmoxUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox update bad request response a status code equal to that given
func (o *ProxmoxUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the proxmox update bad request response
func (o *ProxmoxUpdateBadRequest) Code() int {
	return 400
}

func (o *ProxmoxUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProxmoxUpdateBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProxmoxUpdateBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *ProxmoxUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxUpdateUnauthorized creates a ProxmoxUpdateUnauthorized with default headers values
func NewProxmoxUpdateUnauthorized() *ProxmoxUpdateUnauthorized {
	return &ProxmoxUpdateUnauthorized{}
}

/*
ProxmoxUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProxmoxUpdateUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this proxmox update unauthorized response has a 2xx status code
func (o *ProxmoxUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox update unauthorized response has a 3xx status code
func (o *ProxmoxUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update unauthorized response has a 4xx status code
func (o *ProxmoxUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox update unauthorized response has a 5xx status code
func (o *ProxmoxUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox update unauthorized response a status code equal to that given
func (o *ProxmoxUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the proxmox update unauthorized response
func (o *ProxmoxUpdateUnauthorized) Code() int {
	return 401
}

func (o *ProxmoxUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProxmoxUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProxmoxUpdateUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ProxmoxUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxUpdateForbidden creates a ProxmoxUpdateForbidden with default headers values
func NewProxmoxUpdateForbidden() *ProxmoxUpdateForbidden {
	return &ProxmoxUpdateForbidden{}
}

/*
ProxmoxUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProxmoxUpdateForbidden struct {
	Payload interface{}
}

// IsSuccess returns true when this proxmox update forbidden response has a 2xx status code
func (o *ProxmoxUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox update forbidden response has a 3xx status code
func (o *ProxmoxUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update forbidden response has a 4xx status code
func (o *ProxmoxUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox update forbidden response has a 5xx status code
func (o *ProxmoxUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox update forbidden response a status code equal to that given
func (o *ProxmoxUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the proxmox update forbidden response
func (o *ProxmoxUpdateForbidden) Code() int {
	return 403
}

func (o *ProxmoxUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProxmoxUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProxmoxUpdateForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProxmoxUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxUpdateNotFound creates a ProxmoxUpdateNotFound with default headers values
func NewProxmoxUpdateNotFound() *ProxmoxUpdateNotFound {
	return &ProxmoxUpdateNotFound{}
}

/*
ProxmoxUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProxmoxUpdateNotFound struct {
	Payload interface{}
}

// IsSuccess returns true when this proxmox update not found response has a 2xx status code
func (o *ProxmoxUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox update not found response has a 3xx status code
func (o *ProxmoxUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update not found response has a 4xx status code
func (o *ProxmoxUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this proxmox update not found response has a 5xx status code
func (o *ProxmoxUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this proxmox update not found response a status code equal to that given
func (o *ProxmoxUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the proxmox update not found response
func (o *ProxmoxUpdateNotFound) Code() int {
	return 404
}

func (o *ProxmoxUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProxmoxUpdateNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProxmoxUpdateNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProxmoxUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProxmoxUpdateInternalServerError creates a ProxmoxUpdateInternalServerError with default headers values
func NewProxmoxUpdateInternalServerError() *ProxmoxUpdateInternalServerError {
	return &ProxmoxUpdateInternalServerError{}
}

/*
ProxmoxUpdateInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProxmoxUpdateInternalServerError struct {
}

// IsSuccess returns true when this proxmox update internal server error response has a 2xx status code
func (o *ProxmoxUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this proxmox update internal server error response has a 3xx status code
func (o *ProxmoxUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this proxmox update internal server error response has a 4xx status code
func (o *ProxmoxUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this proxmox update internal server error response has a 5xx status code
func (o *ProxmoxUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this proxmox update internal server error response a status code equal to that given
func (o *ProxmoxUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the proxmox update internal server error response
func (o *ProxmoxUpdateInternalServerError) Code() int {
	return 500
}

func (o *ProxmoxUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateInternalServerError ", 500)
}

func (o *ProxmoxUpdateInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/Proxmox/update][%d] proxmoxUpdateInternalServerError ", 500)
}

func (o *ProxmoxUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
