// Code generated by go-swagger; DO NOT EDIT.

package project_infracosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectInfracostsDetailsReader is a Reader for the ProjectInfracostsDetails structure.
type ProjectInfracostsDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectInfracostsDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectInfracostsDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProjectInfracostsDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProjectInfracostsDetailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectInfracostsDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectInfracostsDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectInfracostsDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProjectInfracostsDetailsOK creates a ProjectInfracostsDetailsOK with default headers values
func NewProjectInfracostsDetailsOK() *ProjectInfracostsDetailsOK {
	return &ProjectInfracostsDetailsOK{}
}

/*
ProjectInfracostsDetailsOK describes a response with status code 200, with default header values.

Success
*/
type ProjectInfracostsDetailsOK struct {
	Payload *ProjectInfracostsDetailsOKBody
}

// IsSuccess returns true when this project infracosts details o k response has a 2xx status code
func (o *ProjectInfracostsDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this project infracosts details o k response has a 3xx status code
func (o *ProjectInfracostsDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details o k response has a 4xx status code
func (o *ProjectInfracostsDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this project infracosts details o k response has a 5xx status code
func (o *ProjectInfracostsDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this project infracosts details o k response a status code equal to that given
func (o *ProjectInfracostsDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectInfracostsDetailsOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsOK  %+v", 200, o.Payload)
}

func (o *ProjectInfracostsDetailsOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsOK  %+v", 200, o.Payload)
}

func (o *ProjectInfracostsDetailsOK) GetPayload() *ProjectInfracostsDetailsOKBody {
	return o.Payload
}

func (o *ProjectInfracostsDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectInfracostsDetailsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectInfracostsDetailsBadRequest creates a ProjectInfracostsDetailsBadRequest with default headers values
func NewProjectInfracostsDetailsBadRequest() *ProjectInfracostsDetailsBadRequest {
	return &ProjectInfracostsDetailsBadRequest{}
}

/*
ProjectInfracostsDetailsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProjectInfracostsDetailsBadRequest struct {
	Payload []*ProjectInfracostsDetailsBadRequestBodyItems0
}

// IsSuccess returns true when this project infracosts details bad request response has a 2xx status code
func (o *ProjectInfracostsDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project infracosts details bad request response has a 3xx status code
func (o *ProjectInfracostsDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details bad request response has a 4xx status code
func (o *ProjectInfracostsDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this project infracosts details bad request response has a 5xx status code
func (o *ProjectInfracostsDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this project infracosts details bad request response a status code equal to that given
func (o *ProjectInfracostsDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ProjectInfracostsDetailsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectInfracostsDetailsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectInfracostsDetailsBadRequest) GetPayload() []*ProjectInfracostsDetailsBadRequestBodyItems0 {
	return o.Payload
}

func (o *ProjectInfracostsDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectInfracostsDetailsUnauthorized creates a ProjectInfracostsDetailsUnauthorized with default headers values
func NewProjectInfracostsDetailsUnauthorized() *ProjectInfracostsDetailsUnauthorized {
	return &ProjectInfracostsDetailsUnauthorized{}
}

/*
ProjectInfracostsDetailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ProjectInfracostsDetailsUnauthorized struct {
	Payload *ProjectInfracostsDetailsUnauthorizedBody
}

// IsSuccess returns true when this project infracosts details unauthorized response has a 2xx status code
func (o *ProjectInfracostsDetailsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project infracosts details unauthorized response has a 3xx status code
func (o *ProjectInfracostsDetailsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details unauthorized response has a 4xx status code
func (o *ProjectInfracostsDetailsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this project infracosts details unauthorized response has a 5xx status code
func (o *ProjectInfracostsDetailsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this project infracosts details unauthorized response a status code equal to that given
func (o *ProjectInfracostsDetailsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectInfracostsDetailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectInfracostsDetailsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectInfracostsDetailsUnauthorized) GetPayload() *ProjectInfracostsDetailsUnauthorizedBody {
	return o.Payload
}

func (o *ProjectInfracostsDetailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectInfracostsDetailsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectInfracostsDetailsForbidden creates a ProjectInfracostsDetailsForbidden with default headers values
func NewProjectInfracostsDetailsForbidden() *ProjectInfracostsDetailsForbidden {
	return &ProjectInfracostsDetailsForbidden{}
}

/*
ProjectInfracostsDetailsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProjectInfracostsDetailsForbidden struct {
	Payload *ProjectInfracostsDetailsForbiddenBody
}

// IsSuccess returns true when this project infracosts details forbidden response has a 2xx status code
func (o *ProjectInfracostsDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project infracosts details forbidden response has a 3xx status code
func (o *ProjectInfracostsDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details forbidden response has a 4xx status code
func (o *ProjectInfracostsDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this project infracosts details forbidden response has a 5xx status code
func (o *ProjectInfracostsDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this project infracosts details forbidden response a status code equal to that given
func (o *ProjectInfracostsDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectInfracostsDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectInfracostsDetailsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectInfracostsDetailsForbidden) GetPayload() *ProjectInfracostsDetailsForbiddenBody {
	return o.Payload
}

func (o *ProjectInfracostsDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectInfracostsDetailsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectInfracostsDetailsNotFound creates a ProjectInfracostsDetailsNotFound with default headers values
func NewProjectInfracostsDetailsNotFound() *ProjectInfracostsDetailsNotFound {
	return &ProjectInfracostsDetailsNotFound{}
}

/*
ProjectInfracostsDetailsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProjectInfracostsDetailsNotFound struct {
	Payload *ProjectInfracostsDetailsNotFoundBody
}

// IsSuccess returns true when this project infracosts details not found response has a 2xx status code
func (o *ProjectInfracostsDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project infracosts details not found response has a 3xx status code
func (o *ProjectInfracostsDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details not found response has a 4xx status code
func (o *ProjectInfracostsDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this project infracosts details not found response has a 5xx status code
func (o *ProjectInfracostsDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this project infracosts details not found response a status code equal to that given
func (o *ProjectInfracostsDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectInfracostsDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectInfracostsDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectInfracostsDetailsNotFound) GetPayload() *ProjectInfracostsDetailsNotFoundBody {
	return o.Payload
}

func (o *ProjectInfracostsDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProjectInfracostsDetailsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectInfracostsDetailsInternalServerError creates a ProjectInfracostsDetailsInternalServerError with default headers values
func NewProjectInfracostsDetailsInternalServerError() *ProjectInfracostsDetailsInternalServerError {
	return &ProjectInfracostsDetailsInternalServerError{}
}

/*
ProjectInfracostsDetailsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ProjectInfracostsDetailsInternalServerError struct {
}

// IsSuccess returns true when this project infracosts details internal server error response has a 2xx status code
func (o *ProjectInfracostsDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this project infracosts details internal server error response has a 3xx status code
func (o *ProjectInfracostsDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this project infracosts details internal server error response has a 4xx status code
func (o *ProjectInfracostsDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this project infracosts details internal server error response has a 5xx status code
func (o *ProjectInfracostsDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this project infracosts details internal server error response a status code equal to that given
func (o *ProjectInfracostsDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectInfracostsDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsInternalServerError ", 500)
}

func (o *ProjectInfracostsDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/ProjectInfracosts/{id}][%d] projectInfracostsDetailsInternalServerError ", 500)
}

func (o *ProjectInfracostsDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
ProjectInfracostsDetailsBadRequestBodyItems0 project infracosts details bad request body items0
swagger:model ProjectInfracostsDetailsBadRequestBodyItems0
*/
type ProjectInfracostsDetailsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this project infracosts details bad request body items0
func (o *ProjectInfracostsDetailsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details bad request body items0 based on context it is used
func (o *ProjectInfracostsDetailsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsForbiddenBody project infracosts details forbidden body
swagger:model ProjectInfracostsDetailsForbiddenBody
*/
type ProjectInfracostsDetailsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project infracosts details forbidden body
func (o *ProjectInfracostsDetailsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details forbidden body based on context it is used
func (o *ProjectInfracostsDetailsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsNotFoundBody project infracosts details not found body
swagger:model ProjectInfracostsDetailsNotFoundBody
*/
type ProjectInfracostsDetailsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project infracosts details not found body
func (o *ProjectInfracostsDetailsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details not found body based on context it is used
func (o *ProjectInfracostsDetailsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBody project infracosts details o k body
swagger:model ProjectInfracostsDetailsOKBody
*/
type ProjectInfracostsDetailsOKBody struct {

	// resources
	Resources []*ProjectInfracostsDetailsOKBodyResourcesItems0 `json:"resources"`

	// total hourly cost
	TotalHourlyCost string `json:"totalHourlyCost,omitempty"`

	// total monthly cost
	TotalMonthlyCost string `json:"totalMonthlyCost,omitempty"`
}

// Validate validates this project infracosts details o k body
func (o *ProjectInfracostsDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBody) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(o.Resources) { // not required
		return nil
	}

	for i := 0; i < len(o.Resources); i++ {
		if swag.IsZero(o.Resources[i]) { // not required
			continue
		}

		if o.Resources[i] != nil {
			if err := o.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectInfracostsDetailsOK" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectInfracostsDetailsOK" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project infracosts details o k body based on the context it is used
func (o *ProjectInfracostsDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBody) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Resources); i++ {

		if o.Resources[i] != nil {
			if err := o.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectInfracostsDetailsOK" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectInfracostsDetailsOK" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0 project infracosts details o k body resources items0
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0 struct {

	// cost components
	CostComponents []*ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0 `json:"costComponents"`

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// metadata
	Metadata *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata `json:"metadata,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// subresources
	Subresources []*ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0 `json:"subresources"`
}

// Validate validates this project infracosts details o k body resources items0
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCostComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubresources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) validateCostComponents(formats strfmt.Registry) error {
	if swag.IsZero(o.CostComponents) { // not required
		return nil
	}

	for i := 0; i < len(o.CostComponents); i++ {
		if swag.IsZero(o.CostComponents[i]) { // not required
			continue
		}

		if o.CostComponents[i] != nil {
			if err := o.CostComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) validateSubresources(formats strfmt.Registry) error {
	if swag.IsZero(o.Subresources) { // not required
		return nil
	}

	for i := 0; i < len(o.Subresources); i++ {
		if swag.IsZero(o.Subresources[i]) { // not required
			continue
		}

		if o.Subresources[i] != nil {
			if err := o.Subresources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subresources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subresources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project infracosts details o k body resources items0 based on the context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCostComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSubresources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) contextValidateCostComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CostComponents); i++ {

		if o.CostComponents[i] != nil {
			if err := o.CostComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {
		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) contextValidateSubresources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Subresources); i++ {

		if o.Subresources[i] != nil {
			if err := o.Subresources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subresources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subresources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0 project infracosts details o k body resources items0 cost components items0
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0 struct {

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// hourly quantity
	HourlyQuantity string `json:"hourlyQuantity,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// monthly quantity
	MonthlyQuantity string `json:"monthlyQuantity,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this project infracosts details o k body resources items0 cost components items0
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details o k body resources items0 cost components items0 based on context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0CostComponentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0Metadata project infracosts details o k body resources items0 metadata
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0Metadata
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0Metadata struct {

	// infracost command
	InfracostCommand string `json:"infracostCommand,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vcs branch
	VcsBranch string `json:"vcsBranch,omitempty"`

	// vcs commit author email
	VcsCommitAuthorEmail string `json:"vcsCommitAuthorEmail,omitempty"`

	// vcs commit author name
	VcsCommitAuthorName string `json:"vcsCommitAuthorName,omitempty"`

	// vcs commit message
	VcsCommitMessage string `json:"vcsCommitMessage,omitempty"`

	// vcs commit sha
	VcsCommitSha string `json:"vcsCommitSha,omitempty"`

	// vcs commit timestamp
	// Format: date-time
	VcsCommitTimestamp *strfmt.DateTime `json:"vcsCommitTimestamp,omitempty"`

	// vcs repository Url
	VcsRepositoryURL string `json:"vcsRepositoryUrl,omitempty"`

	// vcs sub path
	VcsSubPath string `json:"vcsSubPath,omitempty"`
}

// Validate validates this project infracosts details o k body resources items0 metadata
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVcsCommitTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata) validateVcsCommitTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.VcsCommitTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("metadata"+"."+"vcsCommitTimestamp", "body", "date-time", o.VcsCommitTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project infracosts details o k body resources items0 metadata based on context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0Metadata) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0 project infracosts details o k body resources items0 subresources items0
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0 struct {

	// cost components
	CostComponents []*ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0 `json:"costComponents"`

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// metadata
	Metadata *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata `json:"metadata,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project infracosts details o k body resources items0 subresources items0
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCostComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) validateCostComponents(formats strfmt.Registry) error {
	if swag.IsZero(o.CostComponents) { // not required
		return nil
	}

	for i := 0; i < len(o.CostComponents); i++ {
		if swag.IsZero(o.CostComponents[i]) { // not required
			continue
		}

		if o.CostComponents[i] != nil {
			if err := o.CostComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project infracosts details o k body resources items0 subresources items0 based on the context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCostComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) contextValidateCostComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CostComponents); i++ {

		if o.CostComponents[i] != nil {
			if err := o.CostComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {
		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0 project infracosts details o k body resources items0 subresources items0 cost components items0
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0 struct {

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// hourly quantity
	HourlyQuantity string `json:"hourlyQuantity,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// monthly quantity
	MonthlyQuantity string `json:"monthlyQuantity,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this project infracosts details o k body resources items0 subresources items0 cost components items0
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details o k body resources items0 subresources items0 cost components items0 based on context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0CostComponentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata project infracosts details o k body resources items0 subresources items0 metadata
swagger:model ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata
*/
type ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata struct {

	// infracost command
	InfracostCommand string `json:"infracostCommand,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vcs branch
	VcsBranch string `json:"vcsBranch,omitempty"`

	// vcs commit author email
	VcsCommitAuthorEmail string `json:"vcsCommitAuthorEmail,omitempty"`

	// vcs commit author name
	VcsCommitAuthorName string `json:"vcsCommitAuthorName,omitempty"`

	// vcs commit message
	VcsCommitMessage string `json:"vcsCommitMessage,omitempty"`

	// vcs commit sha
	VcsCommitSha string `json:"vcsCommitSha,omitempty"`

	// vcs commit timestamp
	// Format: date-time
	VcsCommitTimestamp *strfmt.DateTime `json:"vcsCommitTimestamp,omitempty"`

	// vcs repository Url
	VcsRepositoryURL string `json:"vcsRepositoryUrl,omitempty"`

	// vcs sub path
	VcsSubPath string `json:"vcsSubPath,omitempty"`
}

// Validate validates this project infracosts details o k body resources items0 subresources items0 metadata
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVcsCommitTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata) validateVcsCommitTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.VcsCommitTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("metadata"+"."+"vcsCommitTimestamp", "body", "date-time", o.VcsCommitTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project infracosts details o k body resources items0 subresources items0 metadata based on context it is used
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsOKBodyResourcesItems0SubresourcesItems0Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ProjectInfracostsDetailsUnauthorizedBody project infracosts details unauthorized body
swagger:model ProjectInfracostsDetailsUnauthorizedBody
*/
type ProjectInfracostsDetailsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project infracosts details unauthorized body
func (o *ProjectInfracostsDetailsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project infracosts details unauthorized body based on context it is used
func (o *ProjectInfracostsDetailsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProjectInfracostsDetailsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectInfracostsDetailsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ProjectInfracostsDetailsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
