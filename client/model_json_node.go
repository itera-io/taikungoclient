/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the JsonNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonNode{}

// JsonNode struct for JsonNode
type JsonNode struct {
	Options *JsonNodeOptions `json:"options,omitempty"`
	Parent  *JsonNode        `json:"parent,omitempty"`
	Root    *JsonNode        `json:"root,omitempty"`
}

// NewJsonNode instantiates a new JsonNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonNode() *JsonNode {
	this := JsonNode{}
	return &this
}

// NewJsonNodeWithDefaults instantiates a new JsonNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonNodeWithDefaults() *JsonNode {
	this := JsonNode{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *JsonNode) GetOptions() JsonNodeOptions {
	if o == nil || IsNil(o.Options) {
		var ret JsonNodeOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetOptionsOk() (*JsonNodeOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *JsonNode) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given JsonNodeOptions and assigns it to the Options field.
func (o *JsonNode) SetOptions(v JsonNodeOptions) {
	o.Options = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *JsonNode) GetParent() JsonNode {
	if o == nil || IsNil(o.Parent) {
		var ret JsonNode
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetParentOk() (*JsonNode, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *JsonNode) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given JsonNode and assigns it to the Parent field.
func (o *JsonNode) SetParent(v JsonNode) {
	o.Parent = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *JsonNode) GetRoot() JsonNode {
	if o == nil || IsNil(o.Root) {
		var ret JsonNode
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonNode) GetRootOk() (*JsonNode, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *JsonNode) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given JsonNode and assigns it to the Root field.
func (o *JsonNode) SetRoot(v JsonNode) {
	o.Root = &v
}

func (o JsonNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	return toSerialize, nil
}

type NullableJsonNode struct {
	value *JsonNode
	isSet bool
}

func (v NullableJsonNode) Get() *JsonNode {
	return v.value
}

func (v *NullableJsonNode) Set(val *JsonNode) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonNode) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonNode(val *JsonNode) *NullableJsonNode {
	return &NullableJsonNode{value: val, isSet: true}
}

func (v NullableJsonNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
