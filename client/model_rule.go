/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule struct for Rule
type Rule struct {
	State NullableString `json:"state,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Query NullableString `json:"query,omitempty"`
	Duration *int64 `json:"duration,omitempty"`
	Labels *RuleLabels `json:"labels,omitempty"`
	Annotations *Annotations `json:"annotations,omitempty"`
	Alerts []Alert `json:"alerts,omitempty"`
	Health NullableString `json:"health,omitempty"`
	EvaluationTime *float64 `json:"evaluationTime,omitempty"`
	LastEvaluation *time.Time `json:"lastEvaluation,omitempty"`
	Type NullableString `json:"type,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *Rule) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *Rule) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *Rule) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *Rule) UnsetState() {
	o.State.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Rule) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Rule) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Rule) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Rule) UnsetName() {
	o.Name.Unset()
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetQuery() string {
	if o == nil || IsNil(o.Query.Get()) {
		var ret string
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field has been set.
func (o *Rule) HasQuery() bool {
	if o != nil && o.Query.IsSet() {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableString and assigns it to the Query field.
func (o *Rule) SetQuery(v string) {
	o.Query.Set(&v)
}
// SetQueryNil sets the value for Query to be an explicit nil
func (o *Rule) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *Rule) UnsetQuery() {
	o.Query.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Rule) GetDuration() int64 {
	if o == nil || IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Rule) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *Rule) SetDuration(v int64) {
	o.Duration = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Rule) GetLabels() RuleLabels {
	if o == nil || IsNil(o.Labels) {
		var ret RuleLabels
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetLabelsOk() (*RuleLabels, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Rule) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given RuleLabels and assigns it to the Labels field.
func (o *Rule) SetLabels(v RuleLabels) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *Rule) GetAnnotations() Annotations {
	if o == nil || IsNil(o.Annotations) {
		var ret Annotations
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetAnnotationsOk() (*Annotations, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *Rule) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given Annotations and assigns it to the Annotations field.
func (o *Rule) SetAnnotations(v Annotations) {
	o.Annotations = &v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetAlerts() []Alert {
	if o == nil {
		var ret []Alert
		return ret
	}
	return o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetAlertsOk() ([]Alert, bool) {
	if o == nil || IsNil(o.Alerts) {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *Rule) HasAlerts() bool {
	if o != nil && !IsNil(o.Alerts) {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []Alert and assigns it to the Alerts field.
func (o *Rule) SetAlerts(v []Alert) {
	o.Alerts = v
}

// GetHealth returns the Health field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetHealth() string {
	if o == nil || IsNil(o.Health.Get()) {
		var ret string
		return ret
	}
	return *o.Health.Get()
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetHealthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Health.Get(), o.Health.IsSet()
}

// HasHealth returns a boolean if a field has been set.
func (o *Rule) HasHealth() bool {
	if o != nil && o.Health.IsSet() {
		return true
	}

	return false
}

// SetHealth gets a reference to the given NullableString and assigns it to the Health field.
func (o *Rule) SetHealth(v string) {
	o.Health.Set(&v)
}
// SetHealthNil sets the value for Health to be an explicit nil
func (o *Rule) SetHealthNil() {
	o.Health.Set(nil)
}

// UnsetHealth ensures that no value is present for Health, not even an explicit nil
func (o *Rule) UnsetHealth() {
	o.Health.Unset()
}

// GetEvaluationTime returns the EvaluationTime field value if set, zero value otherwise.
func (o *Rule) GetEvaluationTime() float64 {
	if o == nil || IsNil(o.EvaluationTime) {
		var ret float64
		return ret
	}
	return *o.EvaluationTime
}

// GetEvaluationTimeOk returns a tuple with the EvaluationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetEvaluationTimeOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluationTime) {
		return nil, false
	}
	return o.EvaluationTime, true
}

// HasEvaluationTime returns a boolean if a field has been set.
func (o *Rule) HasEvaluationTime() bool {
	if o != nil && !IsNil(o.EvaluationTime) {
		return true
	}

	return false
}

// SetEvaluationTime gets a reference to the given float64 and assigns it to the EvaluationTime field.
func (o *Rule) SetEvaluationTime(v float64) {
	o.EvaluationTime = &v
}

// GetLastEvaluation returns the LastEvaluation field value if set, zero value otherwise.
func (o *Rule) GetLastEvaluation() time.Time {
	if o == nil || IsNil(o.LastEvaluation) {
		var ret time.Time
		return ret
	}
	return *o.LastEvaluation
}

// GetLastEvaluationOk returns a tuple with the LastEvaluation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetLastEvaluationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastEvaluation) {
		return nil, false
	}
	return o.LastEvaluation, true
}

// HasLastEvaluation returns a boolean if a field has been set.
func (o *Rule) HasLastEvaluation() bool {
	if o != nil && !IsNil(o.LastEvaluation) {
		return true
	}

	return false
}

// SetLastEvaluation gets a reference to the given time.Time and assigns it to the LastEvaluation field.
func (o *Rule) SetLastEvaluation(v time.Time) {
	o.LastEvaluation = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Rule) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Rule) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Rule) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Rule) UnsetType() {
	o.Type.Unset()
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if o.Alerts != nil {
		toSerialize["alerts"] = o.Alerts
	}
	if o.Health.IsSet() {
		toSerialize["health"] = o.Health.Get()
	}
	if !IsNil(o.EvaluationTime) {
		toSerialize["evaluationTime"] = o.EvaluationTime
	}
	if !IsNil(o.LastEvaluation) {
		toSerialize["lastEvaluation"] = o.LastEvaluation
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


