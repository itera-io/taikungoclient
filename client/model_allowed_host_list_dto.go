/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AllowedHostListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedHostListDto{}

// AllowedHostListDto struct for AllowedHostListDto
type AllowedHostListDto struct {
	Id int32 `json:"id"`
	Description NullableString `json:"description"`
	IpAddress string `json:"ipAddress"`
	MaskBits int32 `json:"maskBits"`
	AccessProfileId int32 `json:"accessProfileId"`
	AccessProfileName string `json:"accessProfileName"`
}

type _AllowedHostListDto AllowedHostListDto

// NewAllowedHostListDto instantiates a new AllowedHostListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedHostListDto(id int32, description NullableString, ipAddress string, maskBits int32, accessProfileId int32, accessProfileName string) *AllowedHostListDto {
	this := AllowedHostListDto{}
	this.Id = id
	this.Description = description
	this.IpAddress = ipAddress
	this.MaskBits = maskBits
	this.AccessProfileId = accessProfileId
	this.AccessProfileName = accessProfileName
	return &this
}

// NewAllowedHostListDtoWithDefaults instantiates a new AllowedHostListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedHostListDtoWithDefaults() *AllowedHostListDto {
	this := AllowedHostListDto{}
	return &this
}

// GetId returns the Id field value
func (o *AllowedHostListDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AllowedHostListDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AllowedHostListDto) SetId(v int32) {
	o.Id = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AllowedHostListDto) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllowedHostListDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *AllowedHostListDto) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetIpAddress returns the IpAddress field value
func (o *AllowedHostListDto) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *AllowedHostListDto) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *AllowedHostListDto) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetMaskBits returns the MaskBits field value
func (o *AllowedHostListDto) GetMaskBits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaskBits
}

// GetMaskBitsOk returns a tuple with the MaskBits field value
// and a boolean to check if the value has been set.
func (o *AllowedHostListDto) GetMaskBitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskBits, true
}

// SetMaskBits sets field value
func (o *AllowedHostListDto) SetMaskBits(v int32) {
	o.MaskBits = v
}

// GetAccessProfileId returns the AccessProfileId field value
func (o *AllowedHostListDto) GetAccessProfileId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccessProfileId
}

// GetAccessProfileIdOk returns a tuple with the AccessProfileId field value
// and a boolean to check if the value has been set.
func (o *AllowedHostListDto) GetAccessProfileIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessProfileId, true
}

// SetAccessProfileId sets field value
func (o *AllowedHostListDto) SetAccessProfileId(v int32) {
	o.AccessProfileId = v
}

// GetAccessProfileName returns the AccessProfileName field value
func (o *AllowedHostListDto) GetAccessProfileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessProfileName
}

// GetAccessProfileNameOk returns a tuple with the AccessProfileName field value
// and a boolean to check if the value has been set.
func (o *AllowedHostListDto) GetAccessProfileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessProfileName, true
}

// SetAccessProfileName sets field value
func (o *AllowedHostListDto) SetAccessProfileName(v string) {
	o.AccessProfileName = v
}

func (o AllowedHostListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedHostListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["description"] = o.Description.Get()
	toSerialize["ipAddress"] = o.IpAddress
	toSerialize["maskBits"] = o.MaskBits
	toSerialize["accessProfileId"] = o.AccessProfileId
	toSerialize["accessProfileName"] = o.AccessProfileName
	return toSerialize, nil
}

func (o *AllowedHostListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"description",
		"ipAddress",
		"maskBits",
		"accessProfileId",
		"accessProfileName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllowedHostListDto := _AllowedHostListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllowedHostListDto)

	if err != nil {
		return err
	}

	*o = AllowedHostListDto(varAllowedHostListDto)

	return err
}

type NullableAllowedHostListDto struct {
	value *AllowedHostListDto
	isSet bool
}

func (v NullableAllowedHostListDto) Get() *AllowedHostListDto {
	return v.value
}

func (v *NullableAllowedHostListDto) Set(val *AllowedHostListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedHostListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedHostListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedHostListDto(val *AllowedHostListDto) *NullableAllowedHostListDto {
	return &NullableAllowedHostListDto{value: val, isSet: true}
}

func (v NullableAllowedHostListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedHostListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


