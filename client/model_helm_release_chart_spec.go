/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@taikun.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the HelmReleaseChartSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmReleaseChartSpec{}

// HelmReleaseChartSpec struct for HelmReleaseChartSpec
type HelmReleaseChartSpec struct {
	Chart NullableString `json:"chart,omitempty"`
	Version NullableString `json:"version,omitempty"`
	SourceRef *HelmReleaseSourceRef `json:"sourceRef,omitempty"`
}

// NewHelmReleaseChartSpec instantiates a new HelmReleaseChartSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmReleaseChartSpec() *HelmReleaseChartSpec {
	this := HelmReleaseChartSpec{}
	return &this
}

// NewHelmReleaseChartSpecWithDefaults instantiates a new HelmReleaseChartSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmReleaseChartSpecWithDefaults() *HelmReleaseChartSpec {
	this := HelmReleaseChartSpec{}
	return &this
}

// GetChart returns the Chart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmReleaseChartSpec) GetChart() string {
	if o == nil || IsNil(o.Chart.Get()) {
		var ret string
		return ret
	}
	return *o.Chart.Get()
}

// GetChartOk returns a tuple with the Chart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmReleaseChartSpec) GetChartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Chart.Get(), o.Chart.IsSet()
}

// HasChart returns a boolean if a field has been set.
func (o *HelmReleaseChartSpec) HasChart() bool {
	if o != nil && o.Chart.IsSet() {
		return true
	}

	return false
}

// SetChart gets a reference to the given NullableString and assigns it to the Chart field.
func (o *HelmReleaseChartSpec) SetChart(v string) {
	o.Chart.Set(&v)
}
// SetChartNil sets the value for Chart to be an explicit nil
func (o *HelmReleaseChartSpec) SetChartNil() {
	o.Chart.Set(nil)
}

// UnsetChart ensures that no value is present for Chart, not even an explicit nil
func (o *HelmReleaseChartSpec) UnsetChart() {
	o.Chart.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HelmReleaseChartSpec) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HelmReleaseChartSpec) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *HelmReleaseChartSpec) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *HelmReleaseChartSpec) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *HelmReleaseChartSpec) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *HelmReleaseChartSpec) UnsetVersion() {
	o.Version.Unset()
}

// GetSourceRef returns the SourceRef field value if set, zero value otherwise.
func (o *HelmReleaseChartSpec) GetSourceRef() HelmReleaseSourceRef {
	if o == nil || IsNil(o.SourceRef) {
		var ret HelmReleaseSourceRef
		return ret
	}
	return *o.SourceRef
}

// GetSourceRefOk returns a tuple with the SourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmReleaseChartSpec) GetSourceRefOk() (*HelmReleaseSourceRef, bool) {
	if o == nil || IsNil(o.SourceRef) {
		return nil, false
	}
	return o.SourceRef, true
}

// HasSourceRef returns a boolean if a field has been set.
func (o *HelmReleaseChartSpec) HasSourceRef() bool {
	if o != nil && !IsNil(o.SourceRef) {
		return true
	}

	return false
}

// SetSourceRef gets a reference to the given HelmReleaseSourceRef and assigns it to the SourceRef field.
func (o *HelmReleaseChartSpec) SetSourceRef(v HelmReleaseSourceRef) {
	o.SourceRef = &v
}

func (o HelmReleaseChartSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmReleaseChartSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Chart.IsSet() {
		toSerialize["chart"] = o.Chart.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.SourceRef) {
		toSerialize["sourceRef"] = o.SourceRef
	}
	return toSerialize, nil
}

type NullableHelmReleaseChartSpec struct {
	value *HelmReleaseChartSpec
	isSet bool
}

func (v NullableHelmReleaseChartSpec) Get() *HelmReleaseChartSpec {
	return v.value
}

func (v *NullableHelmReleaseChartSpec) Set(val *HelmReleaseChartSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmReleaseChartSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmReleaseChartSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmReleaseChartSpec(val *HelmReleaseChartSpec) *NullableHelmReleaseChartSpec {
	return &NullableHelmReleaseChartSpec{value: val, isSet: true}
}

func (v NullableHelmReleaseChartSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmReleaseChartSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


