// Code generated by go-swagger; DO NOT EDIT.

package user_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserProjectsBindProjectsReader is a Reader for the UserProjectsBindProjects structure.
type UserProjectsBindProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserProjectsBindProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserProjectsBindProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserProjectsBindProjectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserProjectsBindProjectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserProjectsBindProjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserProjectsBindProjectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserProjectsBindProjectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserProjectsBindProjectsOK creates a UserProjectsBindProjectsOK with default headers values
func NewUserProjectsBindProjectsOK() *UserProjectsBindProjectsOK {
	return &UserProjectsBindProjectsOK{}
}

/*
UserProjectsBindProjectsOK describes a response with status code 200, with default header values.

Success
*/
type UserProjectsBindProjectsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this user projects bind projects o k response has a 2xx status code
func (o *UserProjectsBindProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user projects bind projects o k response has a 3xx status code
func (o *UserProjectsBindProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects o k response has a 4xx status code
func (o *UserProjectsBindProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects bind projects o k response has a 5xx status code
func (o *UserProjectsBindProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind projects o k response a status code equal to that given
func (o *UserProjectsBindProjectsOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserProjectsBindProjectsOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsOK  %+v", 200, o.Payload)
}

func (o *UserProjectsBindProjectsOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsOK  %+v", 200, o.Payload)
}

func (o *UserProjectsBindProjectsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UserProjectsBindProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindProjectsBadRequest creates a UserProjectsBindProjectsBadRequest with default headers values
func NewUserProjectsBindProjectsBadRequest() *UserProjectsBindProjectsBadRequest {
	return &UserProjectsBindProjectsBadRequest{}
}

/*
UserProjectsBindProjectsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserProjectsBindProjectsBadRequest struct {
	Payload []*UserProjectsBindProjectsBadRequestBodyItems0
}

// IsSuccess returns true when this user projects bind projects bad request response has a 2xx status code
func (o *UserProjectsBindProjectsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind projects bad request response has a 3xx status code
func (o *UserProjectsBindProjectsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects bad request response has a 4xx status code
func (o *UserProjectsBindProjectsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind projects bad request response has a 5xx status code
func (o *UserProjectsBindProjectsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind projects bad request response a status code equal to that given
func (o *UserProjectsBindProjectsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserProjectsBindProjectsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsBindProjectsBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsBindProjectsBadRequest) GetPayload() []*UserProjectsBindProjectsBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserProjectsBindProjectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindProjectsUnauthorized creates a UserProjectsBindProjectsUnauthorized with default headers values
func NewUserProjectsBindProjectsUnauthorized() *UserProjectsBindProjectsUnauthorized {
	return &UserProjectsBindProjectsUnauthorized{}
}

/*
UserProjectsBindProjectsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserProjectsBindProjectsUnauthorized struct {
	Payload *UserProjectsBindProjectsUnauthorizedBody
}

// IsSuccess returns true when this user projects bind projects unauthorized response has a 2xx status code
func (o *UserProjectsBindProjectsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind projects unauthorized response has a 3xx status code
func (o *UserProjectsBindProjectsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects unauthorized response has a 4xx status code
func (o *UserProjectsBindProjectsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind projects unauthorized response has a 5xx status code
func (o *UserProjectsBindProjectsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind projects unauthorized response a status code equal to that given
func (o *UserProjectsBindProjectsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserProjectsBindProjectsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsBindProjectsUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsBindProjectsUnauthorized) GetPayload() *UserProjectsBindProjectsUnauthorizedBody {
	return o.Payload
}

func (o *UserProjectsBindProjectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindProjectsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindProjectsForbidden creates a UserProjectsBindProjectsForbidden with default headers values
func NewUserProjectsBindProjectsForbidden() *UserProjectsBindProjectsForbidden {
	return &UserProjectsBindProjectsForbidden{}
}

/*
UserProjectsBindProjectsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserProjectsBindProjectsForbidden struct {
	Payload *UserProjectsBindProjectsForbiddenBody
}

// IsSuccess returns true when this user projects bind projects forbidden response has a 2xx status code
func (o *UserProjectsBindProjectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind projects forbidden response has a 3xx status code
func (o *UserProjectsBindProjectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects forbidden response has a 4xx status code
func (o *UserProjectsBindProjectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind projects forbidden response has a 5xx status code
func (o *UserProjectsBindProjectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind projects forbidden response a status code equal to that given
func (o *UserProjectsBindProjectsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserProjectsBindProjectsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsBindProjectsForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsBindProjectsForbidden) GetPayload() *UserProjectsBindProjectsForbiddenBody {
	return o.Payload
}

func (o *UserProjectsBindProjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindProjectsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindProjectsNotFound creates a UserProjectsBindProjectsNotFound with default headers values
func NewUserProjectsBindProjectsNotFound() *UserProjectsBindProjectsNotFound {
	return &UserProjectsBindProjectsNotFound{}
}

/*
UserProjectsBindProjectsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserProjectsBindProjectsNotFound struct {
	Payload *UserProjectsBindProjectsNotFoundBody
}

// IsSuccess returns true when this user projects bind projects not found response has a 2xx status code
func (o *UserProjectsBindProjectsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind projects not found response has a 3xx status code
func (o *UserProjectsBindProjectsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects not found response has a 4xx status code
func (o *UserProjectsBindProjectsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind projects not found response has a 5xx status code
func (o *UserProjectsBindProjectsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind projects not found response a status code equal to that given
func (o *UserProjectsBindProjectsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserProjectsBindProjectsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsBindProjectsNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsBindProjectsNotFound) GetPayload() *UserProjectsBindProjectsNotFoundBody {
	return o.Payload
}

func (o *UserProjectsBindProjectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindProjectsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindProjectsInternalServerError creates a UserProjectsBindProjectsInternalServerError with default headers values
func NewUserProjectsBindProjectsInternalServerError() *UserProjectsBindProjectsInternalServerError {
	return &UserProjectsBindProjectsInternalServerError{}
}

/*
UserProjectsBindProjectsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserProjectsBindProjectsInternalServerError struct {
}

// IsSuccess returns true when this user projects bind projects internal server error response has a 2xx status code
func (o *UserProjectsBindProjectsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind projects internal server error response has a 3xx status code
func (o *UserProjectsBindProjectsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind projects internal server error response has a 4xx status code
func (o *UserProjectsBindProjectsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects bind projects internal server error response has a 5xx status code
func (o *UserProjectsBindProjectsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user projects bind projects internal server error response a status code equal to that given
func (o *UserProjectsBindProjectsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserProjectsBindProjectsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsInternalServerError ", 500)
}

func (o *UserProjectsBindProjectsInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindprojects][%d] userProjectsBindProjectsInternalServerError ", 500)
}

func (o *UserProjectsBindProjectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserProjectsBindProjectsBadRequestBodyItems0 user projects bind projects bad request body items0
swagger:model UserProjectsBindProjectsBadRequestBodyItems0
*/
type UserProjectsBindProjectsBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user projects bind projects bad request body items0
func (o *UserProjectsBindProjectsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind projects bad request body items0 based on context it is used
func (o *UserProjectsBindProjectsBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindProjectsBody user projects bind projects body
swagger:model UserProjectsBindProjectsBody
*/
type UserProjectsBindProjectsBody struct {

	// projects
	Projects []*UserProjectsBindProjectsParamsBodyProjectsItems0 `json:"projects"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this user projects bind projects body
func (o *UserProjectsBindProjectsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserProjectsBindProjectsBody) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Projects) { // not required
		return nil
	}

	for i := 0; i < len(o.Projects); i++ {
		if swag.IsZero(o.Projects[i]) { // not required
			continue
		}

		if o.Projects[i] != nil {
			if err := o.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user projects bind projects body based on the context it is used
func (o *UserProjectsBindProjectsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserProjectsBindProjectsBody) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Projects); i++ {

		if o.Projects[i] != nil {
			if err := o.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindProjectsForbiddenBody user projects bind projects forbidden body
swagger:model UserProjectsBindProjectsForbiddenBody
*/
type UserProjectsBindProjectsForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind projects forbidden body
func (o *UserProjectsBindProjectsForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind projects forbidden body based on context it is used
func (o *UserProjectsBindProjectsForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindProjectsNotFoundBody user projects bind projects not found body
swagger:model UserProjectsBindProjectsNotFoundBody
*/
type UserProjectsBindProjectsNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind projects not found body
func (o *UserProjectsBindProjectsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind projects not found body based on context it is used
func (o *UserProjectsBindProjectsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindProjectsParamsBodyProjectsItems0 user projects bind projects params body projects items0
swagger:model UserProjectsBindProjectsParamsBodyProjectsItems0
*/
type UserProjectsBindProjectsParamsBodyProjectsItems0 struct {

	// is bound
	IsBound bool `json:"isBound"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this user projects bind projects params body projects items0
func (o *UserProjectsBindProjectsParamsBodyProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind projects params body projects items0 based on context it is used
func (o *UserProjectsBindProjectsParamsBodyProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsParamsBodyProjectsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsParamsBodyProjectsItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsParamsBodyProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindProjectsUnauthorizedBody user projects bind projects unauthorized body
swagger:model UserProjectsBindProjectsUnauthorizedBody
*/
type UserProjectsBindProjectsUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind projects unauthorized body
func (o *UserProjectsBindProjectsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind projects unauthorized body based on context it is used
func (o *UserProjectsBindProjectsUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindProjectsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindProjectsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindProjectsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
