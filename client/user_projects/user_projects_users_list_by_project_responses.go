// Code generated by go-swagger; DO NOT EDIT.

package user_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserProjectsUsersListByProjectReader is a Reader for the UserProjectsUsersListByProject structure.
type UserProjectsUsersListByProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserProjectsUsersListByProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserProjectsUsersListByProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserProjectsUsersListByProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserProjectsUsersListByProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserProjectsUsersListByProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserProjectsUsersListByProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserProjectsUsersListByProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserProjectsUsersListByProjectOK creates a UserProjectsUsersListByProjectOK with default headers values
func NewUserProjectsUsersListByProjectOK() *UserProjectsUsersListByProjectOK {
	return &UserProjectsUsersListByProjectOK{}
}

/*
UserProjectsUsersListByProjectOK describes a response with status code 200, with default header values.

Success
*/
type UserProjectsUsersListByProjectOK struct {
	Payload []*UserProjectsUsersListByProjectOKBodyItems0
}

// IsSuccess returns true when this user projects users list by project o k response has a 2xx status code
func (o *UserProjectsUsersListByProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user projects users list by project o k response has a 3xx status code
func (o *UserProjectsUsersListByProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project o k response has a 4xx status code
func (o *UserProjectsUsersListByProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects users list by project o k response has a 5xx status code
func (o *UserProjectsUsersListByProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects users list by project o k response a status code equal to that given
func (o *UserProjectsUsersListByProjectOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserProjectsUsersListByProjectOK) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectOK  %+v", 200, o.Payload)
}

func (o *UserProjectsUsersListByProjectOK) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectOK  %+v", 200, o.Payload)
}

func (o *UserProjectsUsersListByProjectOK) GetPayload() []*UserProjectsUsersListByProjectOKBodyItems0 {
	return o.Payload
}

func (o *UserProjectsUsersListByProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsUsersListByProjectBadRequest creates a UserProjectsUsersListByProjectBadRequest with default headers values
func NewUserProjectsUsersListByProjectBadRequest() *UserProjectsUsersListByProjectBadRequest {
	return &UserProjectsUsersListByProjectBadRequest{}
}

/*
UserProjectsUsersListByProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserProjectsUsersListByProjectBadRequest struct {
	Payload []*UserProjectsUsersListByProjectBadRequestBodyItems0
}

// IsSuccess returns true when this user projects users list by project bad request response has a 2xx status code
func (o *UserProjectsUsersListByProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects users list by project bad request response has a 3xx status code
func (o *UserProjectsUsersListByProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project bad request response has a 4xx status code
func (o *UserProjectsUsersListByProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects users list by project bad request response has a 5xx status code
func (o *UserProjectsUsersListByProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects users list by project bad request response a status code equal to that given
func (o *UserProjectsUsersListByProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserProjectsUsersListByProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsUsersListByProjectBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsUsersListByProjectBadRequest) GetPayload() []*UserProjectsUsersListByProjectBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserProjectsUsersListByProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsUsersListByProjectUnauthorized creates a UserProjectsUsersListByProjectUnauthorized with default headers values
func NewUserProjectsUsersListByProjectUnauthorized() *UserProjectsUsersListByProjectUnauthorized {
	return &UserProjectsUsersListByProjectUnauthorized{}
}

/*
UserProjectsUsersListByProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserProjectsUsersListByProjectUnauthorized struct {
	Payload *UserProjectsUsersListByProjectUnauthorizedBody
}

// IsSuccess returns true when this user projects users list by project unauthorized response has a 2xx status code
func (o *UserProjectsUsersListByProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects users list by project unauthorized response has a 3xx status code
func (o *UserProjectsUsersListByProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project unauthorized response has a 4xx status code
func (o *UserProjectsUsersListByProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects users list by project unauthorized response has a 5xx status code
func (o *UserProjectsUsersListByProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects users list by project unauthorized response a status code equal to that given
func (o *UserProjectsUsersListByProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserProjectsUsersListByProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsUsersListByProjectUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsUsersListByProjectUnauthorized) GetPayload() *UserProjectsUsersListByProjectUnauthorizedBody {
	return o.Payload
}

func (o *UserProjectsUsersListByProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsUsersListByProjectUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsUsersListByProjectForbidden creates a UserProjectsUsersListByProjectForbidden with default headers values
func NewUserProjectsUsersListByProjectForbidden() *UserProjectsUsersListByProjectForbidden {
	return &UserProjectsUsersListByProjectForbidden{}
}

/*
UserProjectsUsersListByProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserProjectsUsersListByProjectForbidden struct {
	Payload *UserProjectsUsersListByProjectForbiddenBody
}

// IsSuccess returns true when this user projects users list by project forbidden response has a 2xx status code
func (o *UserProjectsUsersListByProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects users list by project forbidden response has a 3xx status code
func (o *UserProjectsUsersListByProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project forbidden response has a 4xx status code
func (o *UserProjectsUsersListByProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects users list by project forbidden response has a 5xx status code
func (o *UserProjectsUsersListByProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects users list by project forbidden response a status code equal to that given
func (o *UserProjectsUsersListByProjectForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserProjectsUsersListByProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsUsersListByProjectForbidden) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsUsersListByProjectForbidden) GetPayload() *UserProjectsUsersListByProjectForbiddenBody {
	return o.Payload
}

func (o *UserProjectsUsersListByProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsUsersListByProjectForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsUsersListByProjectNotFound creates a UserProjectsUsersListByProjectNotFound with default headers values
func NewUserProjectsUsersListByProjectNotFound() *UserProjectsUsersListByProjectNotFound {
	return &UserProjectsUsersListByProjectNotFound{}
}

/*
UserProjectsUsersListByProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserProjectsUsersListByProjectNotFound struct {
	Payload *UserProjectsUsersListByProjectNotFoundBody
}

// IsSuccess returns true when this user projects users list by project not found response has a 2xx status code
func (o *UserProjectsUsersListByProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects users list by project not found response has a 3xx status code
func (o *UserProjectsUsersListByProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project not found response has a 4xx status code
func (o *UserProjectsUsersListByProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects users list by project not found response has a 5xx status code
func (o *UserProjectsUsersListByProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects users list by project not found response a status code equal to that given
func (o *UserProjectsUsersListByProjectNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserProjectsUsersListByProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsUsersListByProjectNotFound) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsUsersListByProjectNotFound) GetPayload() *UserProjectsUsersListByProjectNotFoundBody {
	return o.Payload
}

func (o *UserProjectsUsersListByProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsUsersListByProjectNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsUsersListByProjectInternalServerError creates a UserProjectsUsersListByProjectInternalServerError with default headers values
func NewUserProjectsUsersListByProjectInternalServerError() *UserProjectsUsersListByProjectInternalServerError {
	return &UserProjectsUsersListByProjectInternalServerError{}
}

/*
UserProjectsUsersListByProjectInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserProjectsUsersListByProjectInternalServerError struct {
}

// IsSuccess returns true when this user projects users list by project internal server error response has a 2xx status code
func (o *UserProjectsUsersListByProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects users list by project internal server error response has a 3xx status code
func (o *UserProjectsUsersListByProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects users list by project internal server error response has a 4xx status code
func (o *UserProjectsUsersListByProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects users list by project internal server error response has a 5xx status code
func (o *UserProjectsUsersListByProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user projects users list by project internal server error response a status code equal to that given
func (o *UserProjectsUsersListByProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserProjectsUsersListByProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectInternalServerError ", 500)
}

func (o *UserProjectsUsersListByProjectInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v{v}/UserProjects/users/list/{projectId}][%d] userProjectsUsersListByProjectInternalServerError ", 500)
}

func (o *UserProjectsUsersListByProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserProjectsUsersListByProjectBadRequestBodyItems0 user projects users list by project bad request body items0
swagger:model UserProjectsUsersListByProjectBadRequestBodyItems0
*/
type UserProjectsUsersListByProjectBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user projects users list by project bad request body items0
func (o *UserProjectsUsersListByProjectBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects users list by project bad request body items0 based on context it is used
func (o *UserProjectsUsersListByProjectBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsUsersListByProjectBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsUsersListByProjectForbiddenBody user projects users list by project forbidden body
swagger:model UserProjectsUsersListByProjectForbiddenBody
*/
type UserProjectsUsersListByProjectForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects users list by project forbidden body
func (o *UserProjectsUsersListByProjectForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects users list by project forbidden body based on context it is used
func (o *UserProjectsUsersListByProjectForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsUsersListByProjectForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsUsersListByProjectNotFoundBody user projects users list by project not found body
swagger:model UserProjectsUsersListByProjectNotFoundBody
*/
type UserProjectsUsersListByProjectNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects users list by project not found body
func (o *UserProjectsUsersListByProjectNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects users list by project not found body based on context it is used
func (o *UserProjectsUsersListByProjectNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsUsersListByProjectNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsUsersListByProjectOKBodyItems0 user projects users list by project o k body items0
swagger:model UserProjectsUsersListByProjectOKBodyItems0
*/
type UserProjectsUsersListByProjectOKBodyItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this user projects users list by project o k body items0
func (o *UserProjectsUsersListByProjectOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects users list by project o k body items0 based on context it is used
func (o *UserProjectsUsersListByProjectOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsUsersListByProjectOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsUsersListByProjectUnauthorizedBody user projects users list by project unauthorized body
swagger:model UserProjectsUsersListByProjectUnauthorizedBody
*/
type UserProjectsUsersListByProjectUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects users list by project unauthorized body
func (o *UserProjectsUsersListByProjectUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects users list by project unauthorized body based on context it is used
func (o *UserProjectsUsersListByProjectUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsUsersListByProjectUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsUsersListByProjectUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
