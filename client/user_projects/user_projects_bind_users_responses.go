// Code generated by go-swagger; DO NOT EDIT.

package user_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserProjectsBindUsersReader is a Reader for the UserProjectsBindUsers structure.
type UserProjectsBindUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserProjectsBindUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserProjectsBindUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserProjectsBindUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserProjectsBindUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserProjectsBindUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserProjectsBindUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserProjectsBindUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserProjectsBindUsersOK creates a UserProjectsBindUsersOK with default headers values
func NewUserProjectsBindUsersOK() *UserProjectsBindUsersOK {
	return &UserProjectsBindUsersOK{}
}

/*
UserProjectsBindUsersOK describes a response with status code 200, with default header values.

Success
*/
type UserProjectsBindUsersOK struct {
	Payload interface{}
}

// IsSuccess returns true when this user projects bind users o k response has a 2xx status code
func (o *UserProjectsBindUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user projects bind users o k response has a 3xx status code
func (o *UserProjectsBindUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users o k response has a 4xx status code
func (o *UserProjectsBindUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects bind users o k response has a 5xx status code
func (o *UserProjectsBindUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind users o k response a status code equal to that given
func (o *UserProjectsBindUsersOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserProjectsBindUsersOK) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersOK  %+v", 200, o.Payload)
}

func (o *UserProjectsBindUsersOK) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersOK  %+v", 200, o.Payload)
}

func (o *UserProjectsBindUsersOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UserProjectsBindUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindUsersBadRequest creates a UserProjectsBindUsersBadRequest with default headers values
func NewUserProjectsBindUsersBadRequest() *UserProjectsBindUsersBadRequest {
	return &UserProjectsBindUsersBadRequest{}
}

/*
UserProjectsBindUsersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserProjectsBindUsersBadRequest struct {
	Payload []*UserProjectsBindUsersBadRequestBodyItems0
}

// IsSuccess returns true when this user projects bind users bad request response has a 2xx status code
func (o *UserProjectsBindUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind users bad request response has a 3xx status code
func (o *UserProjectsBindUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users bad request response has a 4xx status code
func (o *UserProjectsBindUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind users bad request response has a 5xx status code
func (o *UserProjectsBindUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind users bad request response a status code equal to that given
func (o *UserProjectsBindUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserProjectsBindUsersBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsBindUsersBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersBadRequest  %+v", 400, o.Payload)
}

func (o *UserProjectsBindUsersBadRequest) GetPayload() []*UserProjectsBindUsersBadRequestBodyItems0 {
	return o.Payload
}

func (o *UserProjectsBindUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindUsersUnauthorized creates a UserProjectsBindUsersUnauthorized with default headers values
func NewUserProjectsBindUsersUnauthorized() *UserProjectsBindUsersUnauthorized {
	return &UserProjectsBindUsersUnauthorized{}
}

/*
UserProjectsBindUsersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserProjectsBindUsersUnauthorized struct {
	Payload *UserProjectsBindUsersUnauthorizedBody
}

// IsSuccess returns true when this user projects bind users unauthorized response has a 2xx status code
func (o *UserProjectsBindUsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind users unauthorized response has a 3xx status code
func (o *UserProjectsBindUsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users unauthorized response has a 4xx status code
func (o *UserProjectsBindUsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind users unauthorized response has a 5xx status code
func (o *UserProjectsBindUsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind users unauthorized response a status code equal to that given
func (o *UserProjectsBindUsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserProjectsBindUsersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsBindUsersUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *UserProjectsBindUsersUnauthorized) GetPayload() *UserProjectsBindUsersUnauthorizedBody {
	return o.Payload
}

func (o *UserProjectsBindUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindUsersUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindUsersForbidden creates a UserProjectsBindUsersForbidden with default headers values
func NewUserProjectsBindUsersForbidden() *UserProjectsBindUsersForbidden {
	return &UserProjectsBindUsersForbidden{}
}

/*
UserProjectsBindUsersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UserProjectsBindUsersForbidden struct {
	Payload *UserProjectsBindUsersForbiddenBody
}

// IsSuccess returns true when this user projects bind users forbidden response has a 2xx status code
func (o *UserProjectsBindUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind users forbidden response has a 3xx status code
func (o *UserProjectsBindUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users forbidden response has a 4xx status code
func (o *UserProjectsBindUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind users forbidden response has a 5xx status code
func (o *UserProjectsBindUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind users forbidden response a status code equal to that given
func (o *UserProjectsBindUsersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UserProjectsBindUsersForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsBindUsersForbidden) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersForbidden  %+v", 403, o.Payload)
}

func (o *UserProjectsBindUsersForbidden) GetPayload() *UserProjectsBindUsersForbiddenBody {
	return o.Payload
}

func (o *UserProjectsBindUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindUsersForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindUsersNotFound creates a UserProjectsBindUsersNotFound with default headers values
func NewUserProjectsBindUsersNotFound() *UserProjectsBindUsersNotFound {
	return &UserProjectsBindUsersNotFound{}
}

/*
UserProjectsBindUsersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserProjectsBindUsersNotFound struct {
	Payload *UserProjectsBindUsersNotFoundBody
}

// IsSuccess returns true when this user projects bind users not found response has a 2xx status code
func (o *UserProjectsBindUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind users not found response has a 3xx status code
func (o *UserProjectsBindUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users not found response has a 4xx status code
func (o *UserProjectsBindUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user projects bind users not found response has a 5xx status code
func (o *UserProjectsBindUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user projects bind users not found response a status code equal to that given
func (o *UserProjectsBindUsersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserProjectsBindUsersNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsBindUsersNotFound) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersNotFound  %+v", 404, o.Payload)
}

func (o *UserProjectsBindUsersNotFound) GetPayload() *UserProjectsBindUsersNotFoundBody {
	return o.Payload
}

func (o *UserProjectsBindUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserProjectsBindUsersNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserProjectsBindUsersInternalServerError creates a UserProjectsBindUsersInternalServerError with default headers values
func NewUserProjectsBindUsersInternalServerError() *UserProjectsBindUsersInternalServerError {
	return &UserProjectsBindUsersInternalServerError{}
}

/*
UserProjectsBindUsersInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UserProjectsBindUsersInternalServerError struct {
}

// IsSuccess returns true when this user projects bind users internal server error response has a 2xx status code
func (o *UserProjectsBindUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user projects bind users internal server error response has a 3xx status code
func (o *UserProjectsBindUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user projects bind users internal server error response has a 4xx status code
func (o *UserProjectsBindUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user projects bind users internal server error response has a 5xx status code
func (o *UserProjectsBindUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user projects bind users internal server error response a status code equal to that given
func (o *UserProjectsBindUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserProjectsBindUsersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersInternalServerError ", 500)
}

func (o *UserProjectsBindUsersInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v{v}/UserProjects/bindusers][%d] userProjectsBindUsersInternalServerError ", 500)
}

func (o *UserProjectsBindUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
UserProjectsBindUsersBadRequestBodyItems0 user projects bind users bad request body items0
swagger:model UserProjectsBindUsersBadRequestBodyItems0
*/
type UserProjectsBindUsersBadRequestBodyItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// description
	Description string `json:"description,omitempty"`
}

// Validate validates this user projects bind users bad request body items0
func (o *UserProjectsBindUsersBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind users bad request body items0 based on context it is used
func (o *UserProjectsBindUsersBadRequestBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindUsersBody user projects bind users body
swagger:model UserProjectsBindUsersBody
*/
type UserProjectsBindUsersBody struct {

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// users
	Users []*UserProjectsBindUsersParamsBodyUsersItems0 `json:"users"`
}

// Validate validates this user projects bind users body
func (o *UserProjectsBindUsersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserProjectsBindUsersBody) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(o.Users) { // not required
		return nil
	}

	for i := 0; i < len(o.Users); i++ {
		if swag.IsZero(o.Users[i]) { // not required
			continue
		}

		if o.Users[i] != nil {
			if err := o.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user projects bind users body based on the context it is used
func (o *UserProjectsBindUsersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserProjectsBindUsersBody) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Users); i++ {

		if o.Users[i] != nil {
			if err := o.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindUsersForbiddenBody user projects bind users forbidden body
swagger:model UserProjectsBindUsersForbiddenBody
*/
type UserProjectsBindUsersForbiddenBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind users forbidden body
func (o *UserProjectsBindUsersForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind users forbidden body based on context it is used
func (o *UserProjectsBindUsersForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindUsersNotFoundBody user projects bind users not found body
swagger:model UserProjectsBindUsersNotFoundBody
*/
type UserProjectsBindUsersNotFoundBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind users not found body
func (o *UserProjectsBindUsersNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind users not found body based on context it is used
func (o *UserProjectsBindUsersNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindUsersParamsBodyUsersItems0 user projects bind users params body users items0
swagger:model UserProjectsBindUsersParamsBodyUsersItems0
*/
type UserProjectsBindUsersParamsBodyUsersItems0 struct {

	// is bound
	IsBound bool `json:"isBound"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this user projects bind users params body users items0
func (o *UserProjectsBindUsersParamsBodyUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind users params body users items0 based on context it is used
func (o *UserProjectsBindUsersParamsBodyUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersParamsBodyUsersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersParamsBodyUsersItems0) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersParamsBodyUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UserProjectsBindUsersUnauthorizedBody user projects bind users unauthorized body
swagger:model UserProjectsBindUsersUnauthorizedBody
*/
type UserProjectsBindUsersUnauthorizedBody struct {

	// detail
	Detail string `json:"detail,omitempty"`

	// instance
	Instance string `json:"instance,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this user projects bind users unauthorized body
func (o *UserProjectsBindUsersUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user projects bind users unauthorized body based on context it is used
func (o *UserProjectsBindUsersUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UserProjectsBindUsersUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserProjectsBindUsersUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UserProjectsBindUsersUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
