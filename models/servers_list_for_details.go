// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServersListForDetails servers list for details
//
// swagger:model ServersListForDetails
type ServersListForDetails struct {

	// data
	Data []*ServersListForDetailsDataItems0 `json:"data"`

	// project
	Project *ServersListForDetailsProject `json:"project,omitempty"`
}

// Validate validates this servers list for details
func (m *ServersListForDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServersListForDetails) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServersListForDetails) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this servers list for details based on the context it is used
func (m *ServersListForDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServersListForDetails) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServersListForDetails) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if m.Project != nil {
		if err := m.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServersListForDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServersListForDetails) UnmarshalBinary(b []byte) error {
	var res ServersListForDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServersListForDetailsDataItems0 servers list for details data items0
//
// swagger:model ServersListForDetailsDataItems0
type ServersListForDetailsDataItems0 struct {

	// autoscaling group
	AutoscalingGroup string `json:"autoscalingGroup,omitempty"`

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// aws host name
	AwsHostName string `json:"awsHostName,omitempty"`

	// aws instance type
	AwsInstanceType string `json:"awsInstanceType,omitempty"`

	// azure Vm size
	AzureVMSize string `json:"azureVmSize,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// disk size
	DiskSize int64 `json:"diskSize,omitempty"`

	// google machine type
	GoogleMachineType string `json:"googleMachineType,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// kubernetes health
	KubernetesHealth string `json:"kubernetesHealth,omitempty"`

	// kubernetes node labels
	KubernetesNodeLabels []*ServersListForDetailsDataItems0KubernetesNodeLabelsItems0 `json:"kubernetesNodeLabels"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// openstack flavor
	OpenstackFlavor string `json:"openstackFlavor,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// provider ID
	ProviderID string `json:"providerID,omitempty"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// shut off
	ShutOff bool `json:"shutOff"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice string `json:"spotPrice,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this servers list for details data items0
func (m *ServersListForDetailsDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesNodeLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServersListForDetailsDataItems0) validateKubernetesNodeLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesNodeLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.KubernetesNodeLabels); i++ {
		if swag.IsZero(m.KubernetesNodeLabels[i]) { // not required
			continue
		}

		if m.KubernetesNodeLabels[i] != nil {
			if err := m.KubernetesNodeLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this servers list for details data items0 based on the context it is used
func (m *ServersListForDetailsDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubernetesNodeLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServersListForDetailsDataItems0) contextValidateKubernetesNodeLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KubernetesNodeLabels); i++ {

		if m.KubernetesNodeLabels[i] != nil {
			if err := m.KubernetesNodeLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServersListForDetailsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServersListForDetailsDataItems0) UnmarshalBinary(b []byte) error {
	var res ServersListForDetailsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServersListForDetailsDataItems0KubernetesNodeLabelsItems0 servers list for details data items0 kubernetes node labels items0
//
// swagger:model ServersListForDetailsDataItems0KubernetesNodeLabelsItems0
type ServersListForDetailsDataItems0KubernetesNodeLabelsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this servers list for details data items0 kubernetes node labels items0
func (m *ServersListForDetailsDataItems0KubernetesNodeLabelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers list for details data items0 kubernetes node labels items0 based on context it is used
func (m *ServersListForDetailsDataItems0KubernetesNodeLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServersListForDetailsDataItems0KubernetesNodeLabelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServersListForDetailsDataItems0KubernetesNodeLabelsItems0) UnmarshalBinary(b []byte) error {
	var res ServersListForDetailsDataItems0KubernetesNodeLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServersListForDetailsProject servers list for details project
//
// swagger:model ServersListForDetailsProject
type ServersListForDetailsProject struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// access profile Id
	AccessProfileID int32 `json:"accessProfileId,omitempty"`

	// access profile name
	AccessProfileName string `json:"accessProfileName,omitempty"`

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// alerting profile Id
	AlertingProfileID int32 `json:"alertingProfileId,omitempty"`

	// alerting profile name
	AlertingProfileName string `json:"alertingProfileName,omitempty"`

	// alerts total count
	AlertsTotalCount int32 `json:"alertsTotalCount,omitempty"`

	// allow full spot kubernetes
	AllowFullSpotKubernetes bool `json:"allowFullSpotKubernetes"`

	// allow spot v ms
	AllowSpotVMs bool `json:"allowSpotVMs"`

	// allow spot workers
	AllowSpotWorkers bool `json:"allowSpotWorkers"`

	// bastion
	Bastion int32 `json:"bastion,omitempty"`

	// certification expired at
	CertificationExpiredAt string `json:"certificationExpiredAt,omitempty"`

	// cloud credential revision
	CloudCredentialRevision int32 `json:"cloudCredentialRevision,omitempty"`

	// cloud Id
	CloudID int32 `json:"cloudId,omitempty"`

	// cloud name
	CloudName string `json:"cloudName,omitempty"`

	// cloud provider message
	CloudProviderMessage string `json:"cloudProviderMessage,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cpu limit
	CPULimit int64 `json:"cpuLimit,omitempty"`

	// delete on expiration
	DeleteOnExpiration bool `json:"deleteOnExpiration"`

	// disk size limit
	DiskSizeLimit int64 `json:"diskSizeLimit,omitempty"`

	// expired at
	ExpiredAt string `json:"expiredAt,omitempty"`

	// failure reason
	FailureReason string `json:"failureReason,omitempty"`

	// has alerting profile
	HasAlertingProfile bool `json:"hasAlertingProfile"`

	// has kube config file
	HasKubeConfigFile bool `json:"hasKubeConfigFile"`

	// has next version
	HasNextVersion bool `json:"hasNextVersion"`

	// has selected flavors
	HasSelectedFlavors bool `json:"hasSelectedFlavors"`

	// is all failed upgrade
	IsAllFailedUpgrade bool `json:"isAllFailedUpgrade"`

	// is all ready
	IsAllReady bool `json:"isAllReady"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled"`

	// is deprecated
	IsDeprecated bool `json:"isDeprecated"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes"`

	// is kubernetes current version kubevap enabled
	IsKubernetesCurrentVersionKubevapEnabled bool `json:"isKubernetesCurrentVersionKubevapEnabled"`

	// is kubevap enabled
	IsKubevapEnabled bool `json:"isKubevapEnabled"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is maintenance mode enabled
	IsMaintenanceModeEnabled bool `json:"isMaintenanceModeEnabled"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// is opa enabled
	IsOpaEnabled bool `json:"isOpaEnabled"`

	// kube current version
	KubeCurrentVersion string `json:"kubeCurrentVersion,omitempty"`

	// kubernetes current version
	KubernetesCurrentVersion string `json:"kubernetesCurrentVersion,omitempty"`

	// kubernetes profile Id
	KubernetesProfileID int32 `json:"kubernetesProfileId,omitempty"`

	// kubernetes profile name
	KubernetesProfileName string `json:"kubernetesProfileName,omitempty"`

	// master
	Master int32 `json:"master,omitempty"`

	// master ready
	MasterReady int32 `json:"masterReady,omitempty"`

	// max spot price
	MaxSpotPrice float64 `json:"maxSpotPrice,omitempty"`

	// opa profile Id
	OpaProfileID int32 `json:"opaProfileId,omitempty"`

	// opa profile name
	OpaProfileName string `json:"opaProfileName,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project cloud revision
	ProjectCloudRevision int32 `json:"projectCloudRevision,omitempty"`

	// project health
	ProjectHealth string `json:"projectHealth,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project revision
	ProjectRevision int32 `json:"projectRevision,omitempty"`

	// project status
	ProjectStatus string `json:"projectStatus,omitempty"`

	// quota Id
	QuotaID int32 `json:"quotaId,omitempty"`

	// quota message
	QuotaMessage string `json:"quotaMessage,omitempty"`

	// ram limit
	RAMLimit int64 `json:"ramLimit,omitempty"`

	// s3 credential Id
	S3CredentialID int32 `json:"s3CredentialId,omitempty"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`

	// total hourly cost
	TotalHourlyCost float64 `json:"totalHourlyCost,omitempty"`

	// used Cpu
	UsedCPU int64 `json:"usedCpu,omitempty"`

	// used disk size
	UsedDiskSize int64 `json:"usedDiskSize,omitempty"`

	// used Ram
	UsedRAM int64 `json:"usedRam,omitempty"`

	// vm Cpu limit
	VMCPULimit int64 `json:"vmCpuLimit,omitempty"`

	// vm Ram limit
	VMRAMLimit int64 `json:"vmRamLimit,omitempty"`

	// vm used Cpu
	VMUsedCPU int64 `json:"vmUsedCpu,omitempty"`

	// vm used Ram
	VMUsedRAM int64 `json:"vmUsedRam,omitempty"`

	// vm used volume size
	VMUsedVolumeSize int64 `json:"vmUsedVolumeSize,omitempty"`

	// vm volume size limit
	VMVolumeSizeLimit int64 `json:"vmVolumeSizeLimit,omitempty"`

	// warning message
	WarningMessage string `json:"warningMessage,omitempty"`

	// worker
	Worker int32 `json:"worker,omitempty"`
}

// Validate validates this servers list for details project
func (m *ServersListForDetailsProject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this servers list for details project based on context it is used
func (m *ServersListForDetailsProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServersListForDetailsProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServersListForDetailsProject) UnmarshalBinary(b []byte) error {
	var res ServersListForDetailsProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
