// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateAwsCloudCommand create aws cloud command
//
// swagger:model CreateAwsCloudCommand
type CreateAwsCloudCommand struct {

	// aws access key Id
	AwsAccessKeyID string `json:"awsAccessKeyId,omitempty"`

	// aws availability zone
	AwsAvailabilityZone string `json:"awsAvailabilityZone,omitempty"`

	// aws region
	AwsRegion AwsRegion `json:"awsRegion,omitempty"`

	// aws secret access key
	AwsSecretAccessKey string `json:"awsSecretAccessKey,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`
}

// Validate validates this create aws cloud command
func (m *CreateAwsCloudCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAwsCloudCommand) validateAwsRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsRegion) { // not required
		return nil
	}

	if err := m.AwsRegion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("awsRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("awsRegion")
		}
		return err
	}

	return nil
}

// ContextValidate validate this create aws cloud command based on the context it is used
func (m *CreateAwsCloudCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAwsCloudCommand) contextValidateAwsRegion(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AwsRegion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("awsRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("awsRegion")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAwsCloudCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAwsCloudCommand) UnmarshalBinary(b []byte) error {
	var res CreateAwsCloudCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
