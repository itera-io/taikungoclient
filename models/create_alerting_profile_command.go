// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateAlertingProfileCommand create alerting profile command
//
// swagger:model CreateAlertingProfileCommand
type CreateAlertingProfileCommand struct {

	// alerting integrations
	AlertingIntegrations []*AlertingIntegrationDto `json:"alertingIntegrations"`

	// emails
	Emails []*AlertingEmailDto `json:"emails"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// reminder
	Reminder AlertingReminder `json:"reminder,omitempty"`

	// slack configuration Id
	SlackConfigurationID int32 `json:"slackConfigurationId,omitempty"`

	// webhooks
	Webhooks []*AlertingWebhookDto `json:"webhooks"`
}

// Validate validates this create alerting profile command
func (m *CreateAlertingProfileCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertingIntegrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReminder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhooks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAlertingProfileCommand) validateAlertingIntegrations(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertingIntegrations) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertingIntegrations); i++ {
		if swag.IsZero(m.AlertingIntegrations[i]) { // not required
			continue
		}

		if m.AlertingIntegrations[i] != nil {
			if err := m.AlertingIntegrations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertingIntegrations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertingIntegrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAlertingProfileCommand) validateEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAlertingProfileCommand) validateReminder(formats strfmt.Registry) error {
	if swag.IsZero(m.Reminder) { // not required
		return nil
	}

	if err := m.Reminder.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reminder")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reminder")
		}
		return err
	}

	return nil
}

func (m *CreateAlertingProfileCommand) validateWebhooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Webhooks) { // not required
		return nil
	}

	for i := 0; i < len(m.Webhooks); i++ {
		if swag.IsZero(m.Webhooks[i]) { // not required
			continue
		}

		if m.Webhooks[i] != nil {
			if err := m.Webhooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create alerting profile command based on the context it is used
func (m *CreateAlertingProfileCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertingIntegrations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReminder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAlertingProfileCommand) contextValidateAlertingIntegrations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertingIntegrations); i++ {

		if m.AlertingIntegrations[i] != nil {
			if err := m.AlertingIntegrations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertingIntegrations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertingIntegrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAlertingProfileCommand) contextValidateEmails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Emails); i++ {

		if m.Emails[i] != nil {
			if err := m.Emails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAlertingProfileCommand) contextValidateReminder(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Reminder.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reminder")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reminder")
		}
		return err
	}

	return nil
}

func (m *CreateAlertingProfileCommand) contextValidateWebhooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Webhooks); i++ {

		if m.Webhooks[i] != nil {
			if err := m.Webhooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("webhooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("webhooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAlertingProfileCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAlertingProfileCommand) UnmarshalBinary(b []byte) error {
	var res CreateAlertingProfileCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
