// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAzureCommand update azure command
//
// swagger:model UpdateAzureCommand
type UpdateAzureCommand struct {

	// azure client Id
	// Required: true
	// Min Length: 1
	AzureClientID *string `json:"azureClientId"`

	// azure client secret
	// Required: true
	// Min Length: 1
	AzureClientSecret *string `json:"azureClientSecret"`

	// id
	// Required: true
	// Minimum: > 0
	ID *int32 `json:"id"`

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`
}

// Validate validates this update azure command
func (m *UpdateAzureCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureCommand) validateAzureClientID(formats strfmt.Registry) error {

	if err := validate.Required("azureClientId", "body", m.AzureClientID); err != nil {
		return err
	}

	if err := validate.MinLength("azureClientId", "body", *m.AzureClientID, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCommand) validateAzureClientSecret(formats strfmt.Registry) error {

	if err := validate.Required("azureClientSecret", "body", m.AzureClientSecret); err != nil {
		return err
	}

	if err := validate.MinLength("azureClientSecret", "body", *m.AzureClientSecret, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCommand) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update azure command based on context it is used
func (m *UpdateAzureCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAzureCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAzureCommand) UnmarshalBinary(b []byte) error {
	var res UpdateAzureCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
