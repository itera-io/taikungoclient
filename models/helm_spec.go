// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HelmSpec helm spec
//
// swagger:model HelmSpec
type HelmSpec struct {

	// chart
	Chart *HelmSpecChart `json:"chart,omitempty"`

	// interval
	Interval string `json:"interval,omitempty"`

	// release name
	ReleaseName string `json:"releaseName,omitempty"`

	// storage namespace
	StorageNamespace string `json:"storageNamespace,omitempty"`

	// target namespace
	TargetNamespace string `json:"targetNamespace,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// values
	Values *JSONNode `json:"values,omitempty"`
}

// Validate validates this helm spec
func (m *HelmSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpec) validateChart(formats strfmt.Registry) error {
	if swag.IsZero(m.Chart) { // not required
		return nil
	}

	if m.Chart != nil {
		if err := m.Chart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart")
			}
			return err
		}
	}

	return nil
}

func (m *HelmSpec) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm spec based on the context it is used
func (m *HelmSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpec) contextValidateChart(ctx context.Context, formats strfmt.Registry) error {

	if m.Chart != nil {
		if err := m.Chart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart")
			}
			return err
		}
	}

	return nil
}

func (m *HelmSpec) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	if m.Values != nil {
		if err := m.Values.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmSpec) UnmarshalBinary(b []byte) error {
	var res HelmSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmSpecChart helm spec chart
//
// swagger:model HelmSpecChart
type HelmSpecChart struct {

	// spec
	Spec *HelmSpecChartSpec `json:"spec,omitempty"`
}

// Validate validates this helm spec chart
func (m *HelmSpecChart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpecChart) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart" + "." + "spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart" + "." + "spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm spec chart based on the context it is used
func (m *HelmSpecChart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpecChart) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart" + "." + "spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart" + "." + "spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmSpecChart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmSpecChart) UnmarshalBinary(b []byte) error {
	var res HelmSpecChart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmSpecChartSpec helm spec chart spec
//
// swagger:model HelmSpecChartSpec
type HelmSpecChartSpec struct {

	// chart
	Chart string `json:"chart,omitempty"`

	// interval
	Interval string `json:"interval,omitempty"`

	// source ref
	SourceRef *HelmSpecChartSpecSourceRef `json:"sourceRef,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this helm spec chart spec
func (m *HelmSpecChartSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpecChartSpec) validateSourceRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceRef) { // not required
		return nil
	}

	if m.SourceRef != nil {
		if err := m.SourceRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart" + "." + "spec" + "." + "sourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart" + "." + "spec" + "." + "sourceRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm spec chart spec based on the context it is used
func (m *HelmSpecChartSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmSpecChartSpec) contextValidateSourceRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceRef != nil {
		if err := m.SourceRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart" + "." + "spec" + "." + "sourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart" + "." + "spec" + "." + "sourceRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmSpecChartSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmSpecChartSpec) UnmarshalBinary(b []byte) error {
	var res HelmSpecChartSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmSpecChartSpecSourceRef helm spec chart spec source ref
//
// swagger:model HelmSpecChartSpecSourceRef
type HelmSpecChartSpecSourceRef struct {

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this helm spec chart spec source ref
func (m *HelmSpecChartSpecSourceRef) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this helm spec chart spec source ref based on context it is used
func (m *HelmSpecChartSpecSourceRef) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HelmSpecChartSpecSourceRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmSpecChartSpecSourceRef) UnmarshalBinary(b []byte) error {
	var res HelmSpecChartSpecSourceRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
