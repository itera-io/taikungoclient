// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EditAutoscalingCommand edit autoscaling command
//
// swagger:model EditAutoscalingCommand
type EditAutoscalingCommand struct {

	// max size
	// Maximum: 100
	// Minimum: 0
	MaxSize *int32 `json:"maxSize,omitempty"`

	// min size
	// Maximum: 100
	// Minimum: 0
	MinSize *int32 `json:"minSize,omitempty"`

	// project Id
	// Required: true
	// Minimum: > 0
	ProjectID *int32 `json:"projectId"`
}

// Validate validates this edit autoscaling command
func (m *EditAutoscalingCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditAutoscalingCommand) validateMaxSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxSize", "body", int64(*m.MaxSize), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxSize", "body", int64(*m.MaxSize), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *EditAutoscalingCommand) validateMinSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MinSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("minSize", "body", int64(*m.MinSize), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("minSize", "body", int64(*m.MinSize), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *EditAutoscalingCommand) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MinimumInt("projectId", "body", int64(*m.ProjectID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this edit autoscaling command based on context it is used
func (m *EditAutoscalingCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EditAutoscalingCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EditAutoscalingCommand) UnmarshalBinary(b []byte) error {
	var res EditAutoscalingCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
