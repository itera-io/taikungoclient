// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSSHUserCommand create Ssh user command
//
// swagger:model CreateSshUserCommand
type CreateSSHUserCommand struct {

	// access profile Id
	// Required: true
	// Minimum: > 0
	AccessProfileID *int32 `json:"accessProfileId"`

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// ssh public key
	// Required: true
	// Min Length: 1
	SSHPublicKey *string `json:"sshPublicKey"`
}

// Validate validates this create Ssh user command
func (m *CreateSSHUserCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSSHUserCommand) validateAccessProfileID(formats strfmt.Registry) error {

	if err := validate.Required("accessProfileId", "body", m.AccessProfileID); err != nil {
		return err
	}

	if err := validate.MinimumInt("accessProfileId", "body", int64(*m.AccessProfileID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *CreateSSHUserCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *CreateSSHUserCommand) validateSSHPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("sshPublicKey", "body", m.SSHPublicKey); err != nil {
		return err
	}

	if err := validate.MinLength("sshPublicKey", "body", *m.SSHPublicKey, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create Ssh user command based on context it is used
func (m *CreateSSHUserCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSSHUserCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSSHUserCommand) UnmarshalBinary(b []byte) error {
	var res CreateSSHUserCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
