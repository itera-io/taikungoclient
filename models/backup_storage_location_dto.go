// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupStorageLocationDto backup storage location dto
//
// swagger:model BackupStorageLocationDto
type BackupStorageLocationDto struct {

	// access mode
	AccessMode string `json:"accessMode,omitempty"`

	// backup credential Id
	BackupCredentialID int32 `json:"backupCredentialId,omitempty"`

	// created at
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt,omitempty"`

	// last validated
	// Format: date-time
	LastValidated *strfmt.DateTime `json:"lastValidated,omitempty"`

	// metadata name
	MetadataName string `json:"metadataName,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`
}

// Validate validates this backup storage location dto
func (m *BackupStorageLocationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastValidated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageLocationDto) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupStorageLocationDto) validateLastValidated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastValidated) { // not required
		return nil
	}

	if err := validate.FormatOf("lastValidated", "body", "date-time", m.LastValidated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this backup storage location dto based on context it is used
func (m *BackupStorageLocationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageLocationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageLocationDto) UnmarshalBinary(b []byte) error {
	var res BackupStorageLocationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
