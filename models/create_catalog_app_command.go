// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCatalogAppCommand create catalog app command
//
// swagger:model CreateCatalogAppCommand
type CreateCatalogAppCommand struct {

	// catalog Id
	// Required: true
	// Minimum: > 0
	CatalogID *int32 `json:"catalogId"`

	// package name
	// Required: true
	// Min Length: 1
	PackageName *string `json:"packageName"`

	// parameters
	Parameters []*CatalogAppParamsDto `json:"parameters"`

	// repo name
	// Required: true
	// Min Length: 1
	RepoName *string `json:"repoName"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this create catalog app command
func (m *CreateCatalogAppCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCatalogAppCommand) validateCatalogID(formats strfmt.Registry) error {

	if err := validate.Required("catalogId", "body", m.CatalogID); err != nil {
		return err
	}

	if err := validate.MinimumInt("catalogId", "body", int64(*m.CatalogID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *CreateCatalogAppCommand) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	if err := validate.MinLength("packageName", "body", *m.PackageName, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateCatalogAppCommand) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateCatalogAppCommand) validateRepoName(formats strfmt.Registry) error {

	if err := validate.Required("repoName", "body", m.RepoName); err != nil {
		return err
	}

	if err := validate.MinLength("repoName", "body", *m.RepoName, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create catalog app command based on the context it is used
func (m *CreateCatalogAppCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCatalogAppCommand) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCatalogAppCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCatalogAppCommand) UnmarshalBinary(b []byte) error {
	var res CreateCatalogAppCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
