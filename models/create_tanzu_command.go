// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTanzuCommand create tanzu command
//
// swagger:model CreateTanzuCommand
type CreateTanzuCommand struct {

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// namespace
	// Required: true
	// Max Length: 63
	// Min Length: 3
	Namespace *string `json:"namespace"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// password
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Password *string `json:"password"`

	// port
	Port int32 `json:"port,omitempty"`

	// tanzu continent
	TanzuContinent string `json:"tanzuContinent,omitempty"`

	// url
	// Required: true
	// Max Length: 150
	// Min Length: 3
	URL *string `json:"url"`

	// username
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Username *string `json:"username"`

	// volume type
	// Required: true
	// Max Length: 30
	// Min Length: 3
	VolumeType *string `json:"volumeType"`
}

// Validate validates this create tanzu command
func (m *CreateTanzuCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTanzuCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *CreateTanzuCommand) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	if err := validate.MinLength("namespace", "body", *m.Namespace, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("namespace", "body", *m.Namespace, 63); err != nil {
		return err
	}

	return nil
}

func (m *CreateTanzuCommand) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateTanzuCommand) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", *m.URL, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("url", "body", *m.URL, 150); err != nil {
		return err
	}

	return nil
}

func (m *CreateTanzuCommand) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 100); err != nil {
		return err
	}

	return nil
}

func (m *CreateTanzuCommand) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	if err := validate.MinLength("volumeType", "body", *m.VolumeType, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeType", "body", *m.VolumeType, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create tanzu command based on context it is used
func (m *CreateTanzuCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTanzuCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTanzuCommand) UnmarshalBinary(b []byte) error {
	var res CreateTanzuCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
