// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrometheusRuleListDto prometheus rule list dto
//
// swagger:model PrometheusRuleListDto
type PrometheusRuleListDto struct {

	// billing start date
	BillingStartDate string `json:"billingStartDate,omitempty"`

	// bound organizations
	BoundOrganizations []*OrganizationForPrometheus `json:"boundOrganizations"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is all
	IsAll bool `json:"isAll,omitempty"`

	// labels
	Labels []*PrometheusLabelUpdateDto `json:"labels"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// metric name
	MetricName string `json:"metricName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operation credential
	OperationCredential *OperationCredentialsForOrganizationEntity `json:"operationCredential,omitempty"`

	// partner
	Partner *PartnerDetailsDto `json:"partner,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this prometheus rule list dto
func (m *PrometheusRuleListDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoundOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusRuleListDto) validateBoundOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(m.BoundOrganizations) { // not required
		return nil
	}

	for i := 0; i < len(m.BoundOrganizations); i++ {
		if swag.IsZero(m.BoundOrganizations[i]) { // not required
			continue
		}

		if m.BoundOrganizations[i] != nil {
			if err := m.BoundOrganizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundOrganizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundOrganizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrometheusRuleListDto) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrometheusRuleListDto) validateOperationCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationCredential) { // not required
		return nil
	}

	if m.OperationCredential != nil {
		if err := m.OperationCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationCredential")
			}
			return err
		}
	}

	return nil
}

func (m *PrometheusRuleListDto) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(m.Partner) { // not required
		return nil
	}

	if m.Partner != nil {
		if err := m.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this prometheus rule list dto based on the context it is used
func (m *PrometheusRuleListDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoundOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusRuleListDto) contextValidateBoundOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BoundOrganizations); i++ {

		if m.BoundOrganizations[i] != nil {
			if err := m.BoundOrganizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundOrganizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundOrganizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrometheusRuleListDto) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrometheusRuleListDto) contextValidateOperationCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationCredential != nil {
		if err := m.OperationCredential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationCredential")
			}
			return err
		}
	}

	return nil
}

func (m *PrometheusRuleListDto) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if m.Partner != nil {
		if err := m.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusRuleListDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusRuleListDto) UnmarshalBinary(b []byte) error {
	var res PrometheusRuleListDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
