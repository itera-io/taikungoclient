// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectForUpdateDto project for update dto
//
// swagger:model ProjectForUpdateDto
type ProjectForUpdateDto struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// app enabled
	AppEnabled bool `json:"appEnabled"`

	// failure reason
	FailureReason string `json:"failureReason,omitempty"`

	// health
	// Enum: [100 150 200 300 400]
	Health int32 `json:"health,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled"`

	// is kubevap enabled
	IsKubevapEnabled bool `json:"isKubevapEnabled"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// is opa enabled
	IsOpaEnabled bool `json:"isOpaEnabled"`

	// kube config
	KubeConfig string `json:"kubeConfig,omitempty"`

	// kubernetes current version
	KubernetesCurrentVersion string `json:"kubernetesCurrentVersion,omitempty"`

	// kubespray current version
	KubesprayCurrentVersion string `json:"kubesprayCurrentVersion,omitempty"`

	// status
	// Enum: [100 145 150 154 155 156 160 165 200 250 300 400 500 550 600 700 800 900 1000 1100]
	Status int32 `json:"status,omitempty"`
}

// Validate validates this project for update dto
func (m *ProjectForUpdateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectForUpdateDtoTypeHealthPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,150,200,300,400]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectForUpdateDtoTypeHealthPropEnum = append(projectForUpdateDtoTypeHealthPropEnum, v)
	}
}

// prop value enum
func (m *ProjectForUpdateDto) validateHealthEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, projectForUpdateDtoTypeHealthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectForUpdateDto) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthEnum("health", "body", m.Health); err != nil {
		return err
	}

	return nil
}

var projectForUpdateDtoTypeStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,145,150,154,155,156,160,165,200,250,300,400,500,550,600,700,800,900,1000,1100]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectForUpdateDtoTypeStatusPropEnum = append(projectForUpdateDtoTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *ProjectForUpdateDto) validateStatusEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, projectForUpdateDtoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectForUpdateDto) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project for update dto based on context it is used
func (m *ProjectForUpdateDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectForUpdateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectForUpdateDto) UnmarshalBinary(b []byte) error {
	var res ProjectForUpdateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
