// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfirmEmailCommand confirm email command
//
// swagger:model ConfirmEmailCommand
type ConfirmEmailCommand struct {

	// mode
	// Required: true
	// Min Length: 1
	Mode *string `json:"mode"`

	// new email
	// Required: true
	// Min Length: 1
	// Format: email
	NewEmail *strfmt.Email `json:"newEmail"`
}

// Validate validates this confirm email command
func (m *ConfirmEmailCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfirmEmailCommand) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	if err := validate.MinLength("mode", "body", *m.Mode, 1); err != nil {
		return err
	}

	return nil
}

func (m *ConfirmEmailCommand) validateNewEmail(formats strfmt.Registry) error {

	if err := validate.Required("newEmail", "body", m.NewEmail); err != nil {
		return err
	}

	if err := validate.MinLength("newEmail", "body", m.NewEmail.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("newEmail", "body", "email", m.NewEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this confirm email command based on context it is used
func (m *ConfirmEmailCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfirmEmailCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfirmEmailCommand) UnmarshalBinary(b []byte) error {
	var res ConfirmEmailCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
