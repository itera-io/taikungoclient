// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticRequest elastic request
//
// swagger:model ElasticRequest
type ElasticRequest struct {

	// alerts
	Alerts string `json:"alerts,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// details
	Details string `json:"details,omitempty"`

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// overviews
	Overviews string `json:"overviews,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// request type
	RequestType string `json:"requestType,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`

	// user role
	UserRole string `json:"userRole,omitempty"`
}

// Validate validates this elastic request
func (m *ElasticRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticRequest) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this elastic request based on context it is used
func (m *ElasticRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ElasticRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticRequest) UnmarshalBinary(b []byte) error {
	var res ElasticRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
