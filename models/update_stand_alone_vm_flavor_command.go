// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateStandAloneVMFlavorCommand update stand alone Vm flavor command
//
// swagger:model UpdateStandAloneVmFlavorCommand
type UpdateStandAloneVMFlavorCommand struct {

	// flavor
	// Required: true
	// Min Length: 1
	Flavor *string `json:"flavor"`

	// id
	// Required: true
	// Minimum: > 0
	ID *int32 `json:"id"`
}

// Validate validates this update stand alone Vm flavor command
func (m *UpdateStandAloneVMFlavorCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlavor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStandAloneVMFlavorCommand) validateFlavor(formats strfmt.Registry) error {

	if err := validate.Required("flavor", "body", m.Flavor); err != nil {
		return err
	}

	if err := validate.MinLength("flavor", "body", *m.Flavor, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateStandAloneVMFlavorCommand) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update stand alone Vm flavor command based on context it is used
func (m *UpdateStandAloneVMFlavorCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStandAloneVMFlavorCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStandAloneVMFlavorCommand) UnmarshalBinary(b []byte) error {
	var res UpdateStandAloneVMFlavorCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
