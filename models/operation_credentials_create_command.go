// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationCredentialsCreateCommand operation credentials create command
//
// swagger:model OperationCredentialsCreateCommand
type OperationCredentialsCreateCommand struct {

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// prometheus password
	// Required: true
	// Min Length: 1
	PrometheusPassword *string `json:"prometheusPassword"`

	// prometheus Url
	// Required: true
	// Min Length: 1
	PrometheusURL *string `json:"prometheusUrl"`

	// prometheus username
	// Required: true
	// Min Length: 1
	PrometheusUsername *string `json:"prometheusUsername"`
}

// Validate validates this operation credentials create command
func (m *OperationCredentialsCreateCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationCredentialsCreateCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *OperationCredentialsCreateCommand) validatePrometheusPassword(formats strfmt.Registry) error {

	if err := validate.Required("prometheusPassword", "body", m.PrometheusPassword); err != nil {
		return err
	}

	if err := validate.MinLength("prometheusPassword", "body", *m.PrometheusPassword, 1); err != nil {
		return err
	}

	return nil
}

func (m *OperationCredentialsCreateCommand) validatePrometheusURL(formats strfmt.Registry) error {

	if err := validate.Required("prometheusUrl", "body", m.PrometheusURL); err != nil {
		return err
	}

	if err := validate.MinLength("prometheusUrl", "body", *m.PrometheusURL, 1); err != nil {
		return err
	}

	return nil
}

func (m *OperationCredentialsCreateCommand) validatePrometheusUsername(formats strfmt.Registry) error {

	if err := validate.Required("prometheusUsername", "body", m.PrometheusUsername); err != nil {
		return err
	}

	if err := validate.MinLength("prometheusUsername", "body", *m.PrometheusUsername, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this operation credentials create command based on context it is used
func (m *OperationCredentialsCreateCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationCredentialsCreateCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationCredentialsCreateCommand) UnmarshalBinary(b []byte) error {
	var res OperationCredentialsCreateCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
