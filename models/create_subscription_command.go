// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSubscriptionCommand create subscription command
//
// swagger:model CreateSubscriptionCommand
type CreateSubscriptionCommand struct {

	// cloud credential limit
	// Maximum: 10000
	// Minimum: -1
	CloudCredentialLimit *int32 `json:"cloudCredentialLimit,omitempty"`

	// monthly price
	MonthlyPrice float64 `json:"monthlyPrice,omitempty"`

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// project limit
	// Maximum: 10000
	// Minimum: -1
	ProjectLimit *int32 `json:"projectLimit,omitempty"`

	// server limit
	// Maximum: 10000
	// Minimum: -1
	ServerLimit *int32 `json:"serverLimit,omitempty"`

	// tcu price
	TcuPrice float64 `json:"tcuPrice,omitempty"`

	// trial days
	TrialDays int32 `json:"trialDays,omitempty"`

	// user limit
	// Maximum: 10000
	// Minimum: -1
	UserLimit *int32 `json:"userLimit,omitempty"`

	// yearly price
	YearlyPrice float64 `json:"yearlyPrice,omitempty"`
}

// Validate validates this create subscription command
func (m *CreateSubscriptionCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudCredentialLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSubscriptionCommand) validateCloudCredentialLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentialLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("cloudCredentialLimit", "body", int64(*m.CloudCredentialLimit), -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cloudCredentialLimit", "body", int64(*m.CloudCredentialLimit), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubscriptionCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubscriptionCommand) validateProjectLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("projectLimit", "body", int64(*m.ProjectLimit), -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("projectLimit", "body", int64(*m.ProjectLimit), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubscriptionCommand) validateServerLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("serverLimit", "body", int64(*m.ServerLimit), -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("serverLimit", "body", int64(*m.ServerLimit), 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubscriptionCommand) validateUserLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.UserLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("userLimit", "body", int64(*m.UserLimit), -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("userLimit", "body", int64(*m.UserLimit), 10000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create subscription command based on context it is used
func (m *CreateSubscriptionCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSubscriptionCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSubscriptionCommand) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
