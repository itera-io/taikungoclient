// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateSubscriptionList private subscription list
//
// swagger:model PrivateSubscriptionList
type PrivateSubscriptionList struct {

	// active subscription status
	ActiveSubscriptionStatus string `json:"activeSubscriptionStatus,omitempty"`

	// data
	Data []*PrivateSubscriptionListDataItems0 `json:"data"`

	// is eligible to switch
	IsEligibleToSwitch bool `json:"isEligibleToSwitch"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this private subscription list
func (m *PrivateSubscriptionList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSubscriptionList) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this private subscription list based on the context it is used
func (m *PrivateSubscriptionList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSubscriptionList) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateSubscriptionList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateSubscriptionList) UnmarshalBinary(b []byte) error {
	var res PrivateSubscriptionList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrivateSubscriptionListDataItems0 private subscription list data items0
//
// swagger:model PrivateSubscriptionListDataItems0
type PrivateSubscriptionListDataItems0 struct {

	// cloud credential limit
	CloudCredentialLimit int32 `json:"cloudCredentialLimit,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exceeded cloud credential
	ExceededCloudCredential bool `json:"exceededCloudCredential"`

	// exceeded project
	ExceededProject bool `json:"exceededProject"`

	// exceeded servers
	ExceededServers bool `json:"exceededServers"`

	// exceeded user
	ExceededUser bool `json:"exceededUser"`

	// id
	ID int32 `json:"id,omitempty"`

	// is active
	IsActive bool `json:"isActive"`

	// is demo
	IsDemo bool `json:"isDemo"`

	// is deprecated
	IsDeprecated bool `json:"isDeprecated"`

	// is yearly
	IsYearly bool `json:"isYearly"`

	// monthly price
	MonthlyPrice float64 `json:"monthlyPrice,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// partner
	Partner *PrivateSubscriptionListDataItems0Partner `json:"partner,omitempty"`

	// project limit
	ProjectLimit int32 `json:"projectLimit,omitempty"`

	// server limit
	ServerLimit int32 `json:"serverLimit,omitempty"`

	// tcu price
	TcuPrice float64 `json:"tcuPrice,omitempty"`

	// trial days
	TrialDays int32 `json:"trialDays,omitempty"`

	// user limit
	UserLimit int32 `json:"userLimit,omitempty"`

	// yearly price
	YearlyPrice float64 `json:"yearlyPrice,omitempty"`
}

// Validate validates this private subscription list data items0
func (m *PrivateSubscriptionListDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSubscriptionListDataItems0) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(m.Partner) { // not required
		return nil
	}

	if m.Partner != nil {
		if err := m.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this private subscription list data items0 based on the context it is used
func (m *PrivateSubscriptionListDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateSubscriptionListDataItems0) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if m.Partner != nil {
		if err := m.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateSubscriptionListDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateSubscriptionListDataItems0) UnmarshalBinary(b []byte) error {
	var res PrivateSubscriptionListDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrivateSubscriptionListDataItems0Partner private subscription list data items0 partner
//
// swagger:model PrivateSubscriptionListDataItems0Partner
type PrivateSubscriptionListDataItems0Partner struct {

	// id
	ID int32 `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this private subscription list data items0 partner
func (m *PrivateSubscriptionListDataItems0Partner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this private subscription list data items0 partner based on context it is used
func (m *PrivateSubscriptionListDataItems0Partner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrivateSubscriptionListDataItems0Partner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateSubscriptionListDataItems0Partner) UnmarshalBinary(b []byte) error {
	var res PrivateSubscriptionListDataItems0Partner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
