// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectAppDetailsDto project app details dto
//
// swagger:model ProjectAppDetailsDto
type ProjectAppDetailsDto struct {

	// app repo name
	AppRepoName string `json:"appRepoName,omitempty"`

	// catalog app name
	CatalogAppName string `json:"catalogAppName,omitempty"`

	// catalog Id
	CatalogID int32 `json:"catalogId,omitempty"`

	// catalog name
	CatalogName string `json:"catalogName,omitempty"`

	// created
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last modified
	// Format: date-time
	LastModified *strfmt.DateTime `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project app params
	ProjectAppParams []*ProjectAppParamDto `json:"projectAppParams"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// release notes
	ReleaseNotes string `json:"releaseNotes,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// values
	Values string `json:"values,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this project app details dto
func (m *ProjectAppDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectAppParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectAppDetailsDto) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectAppDetailsDto) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectAppDetailsDto) validateProjectAppParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectAppParams) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectAppParams); i++ {
		if swag.IsZero(m.ProjectAppParams[i]) { // not required
			continue
		}

		if m.ProjectAppParams[i] != nil {
			if err := m.ProjectAppParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectAppParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectAppParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project app details dto based on the context it is used
func (m *ProjectAppDetailsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectAppParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectAppDetailsDto) contextValidateProjectAppParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProjectAppParams); i++ {

		if m.ProjectAppParams[i] != nil {
			if err := m.ProjectAppParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectAppParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectAppParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectAppDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectAppDetailsDto) UnmarshalBinary(b []byte) error {
	var res ProjectAppDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
