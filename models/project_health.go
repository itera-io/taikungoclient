// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProjectHealth project health
//
// swagger:model ProjectHealth
type ProjectHealth int32

// for schema
var projectHealthEnum []interface{}

func init() {
	var res []ProjectHealth
	if err := json.Unmarshal([]byte(`[100,150,200,300,400]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectHealthEnum = append(projectHealthEnum, v)
	}
}

func (m ProjectHealth) validateProjectHealthEnum(path, location string, value ProjectHealth) error {
	if err := validate.EnumCase(path, location, value, projectHealthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this project health
func (m ProjectHealth) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProjectHealthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this project health based on context it is used
func (m ProjectHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
