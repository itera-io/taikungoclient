// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerTemplateDto server template dto
//
// swagger:model ServerTemplateDto
type ServerTemplateDto struct {

	// count
	Count int32 `json:"count,omitempty"`

	// disk size
	// Maximum: 8.796093022208e+12
	// Minimum: 3.221225472e+10
	DiskSize float64 `json:"diskSize,omitempty"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// role
	Role CloudRole `json:"role,omitempty"`
}

// Validate validates this server template dto
func (m *ServerTemplateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerTemplateDto) validateDiskSize(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskSize) { // not required
		return nil
	}

	if err := validate.Minimum("diskSize", "body", m.DiskSize, 3.221225472e+10, false); err != nil {
		return err
	}

	if err := validate.Maximum("diskSize", "body", m.DiskSize, 8.796093022208e+12, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplateDto) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

// ContextValidate validate this server template dto based on the context it is used
func (m *ServerTemplateDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerTemplateDto) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerTemplateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerTemplateDto) UnmarshalBinary(b []byte) error {
	var res ServerTemplateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
