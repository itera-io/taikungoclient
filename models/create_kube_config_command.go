// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateKubeConfigCommand create kube config command
//
// swagger:model CreateKubeConfigCommand
type CreateKubeConfigCommand struct {

	// is accessible for all
	IsAccessibleForAll bool `json:"isAccessibleForAll"`

	// is accessible for manager
	IsAccessibleForManager bool `json:"isAccessibleForManager"`

	// kube config role Id
	KubeConfigRoleID int32 `json:"kubeConfigRoleId,omitempty"`

	// name
	// Required: true
	// Max Length: 230
	// Min Length: 3
	Name *string `json:"name"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project Id
	// Required: true
	// Minimum: > 0
	ProjectID *int32 `json:"projectId"`

	// ttl
	TTL int32 `json:"ttl,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this create kube config command
func (m *CreateKubeConfigCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateKubeConfigCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 230); err != nil {
		return err
	}

	return nil
}

func (m *CreateKubeConfigCommand) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MinimumInt("projectId", "body", int64(*m.ProjectID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create kube config command based on context it is used
func (m *CreateKubeConfigCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateKubeConfigCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateKubeConfigCommand) UnmarshalBinary(b []byte) error {
	var res CreateKubeConfigCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
