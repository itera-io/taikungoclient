// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateProxmoxCommand create proxmox command
//
// swagger:model CreateProxmoxCommand
type CreateProxmoxCommand struct {

	// continent
	Continent string `json:"continent,omitempty"`

	// hypervisors
	Hypervisors []string `json:"hypervisors"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// private network
	PrivateNetwork *CreateProxmoxNetworkDto `json:"privateNetwork,omitempty"`

	// public network
	PublicNetwork *CreateProxmoxNetworkDto `json:"publicNetwork,omitempty"`

	// storage
	Storage string `json:"storage,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// vm template name
	VMTemplateName string `json:"vmTemplateName,omitempty"`
}

// Validate validates this create proxmox command
func (m *CreateProxmoxCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProxmoxCommand) validatePrivateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateNetwork) { // not required
		return nil
	}

	if m.PrivateNetwork != nil {
		if err := m.PrivateNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privateNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privateNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProxmoxCommand) validatePublicNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicNetwork) { // not required
		return nil
	}

	if m.PublicNetwork != nil {
		if err := m.PublicNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicNetwork")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create proxmox command based on the context it is used
func (m *CreateProxmoxCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrivateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProxmoxCommand) contextValidatePrivateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.PrivateNetwork != nil {
		if err := m.PrivateNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privateNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privateNetwork")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProxmoxCommand) contextValidatePublicNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicNetwork != nil {
		if err := m.PublicNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicNetwork")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProxmoxCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProxmoxCommand) UnmarshalBinary(b []byte) error {
	var res CreateProxmoxCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
