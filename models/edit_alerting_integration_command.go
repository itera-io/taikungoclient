// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EditAlertingIntegrationCommand edit alerting integration command
//
// swagger:model EditAlertingIntegrationCommand
type EditAlertingIntegrationCommand struct {

	// alerting integration type
	// Required: true
	AlertingIntegrationType *AlertingIntegrationType `json:"alertingIntegrationType"`

	// alerting profile Id
	// Required: true
	// Minimum: > 0
	AlertingProfileID *int32 `json:"alertingProfileId"`

	// id
	// Required: true
	// Minimum: > 0
	ID *int32 `json:"id"`

	// token
	Token string `json:"token,omitempty"`

	// url
	// Required: true
	// Min Length: 1
	URL *string `json:"url"`
}

// Validate validates this edit alerting integration command
func (m *EditAlertingIntegrationCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertingIntegrationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditAlertingIntegrationCommand) validateAlertingIntegrationType(formats strfmt.Registry) error {

	if err := validate.Required("alertingIntegrationType", "body", m.AlertingIntegrationType); err != nil {
		return err
	}

	if err := validate.Required("alertingIntegrationType", "body", m.AlertingIntegrationType); err != nil {
		return err
	}

	if m.AlertingIntegrationType != nil {
		if err := m.AlertingIntegrationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingIntegrationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingIntegrationType")
			}
			return err
		}
	}

	return nil
}

func (m *EditAlertingIntegrationCommand) validateAlertingProfileID(formats strfmt.Registry) error {

	if err := validate.Required("alertingProfileId", "body", m.AlertingProfileID); err != nil {
		return err
	}

	if err := validate.MinimumInt("alertingProfileId", "body", int64(*m.AlertingProfileID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *EditAlertingIntegrationCommand) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *EditAlertingIntegrationCommand) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", *m.URL, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this edit alerting integration command based on the context it is used
func (m *EditAlertingIntegrationCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertingIntegrationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EditAlertingIntegrationCommand) contextValidateAlertingIntegrationType(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertingIntegrationType != nil {
		if err := m.AlertingIntegrationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertingIntegrationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertingIntegrationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EditAlertingIntegrationCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EditAlertingIntegrationCommand) UnmarshalBinary(b []byte) error {
	var res EditAlertingIntegrationCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
