// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CredentialsForProjectDto credentials for project dto
//
// swagger:model CredentialsForProjectDto
type CredentialsForProjectDto struct {

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// aws access key Id
	AwsAccessKeyID string `json:"awsAccessKeyId,omitempty"`

	// aws availability zone
	AwsAvailabilityZone string `json:"awsAvailabilityZone,omitempty"`

	// aws region
	AwsRegion string `json:"awsRegion,omitempty"`

	// aws secret access key
	AwsSecretAccessKey string `json:"awsSecretAccessKey,omitempty"`

	// azure availability zone
	AzureAvailabilityZone string `json:"azureAvailabilityZone,omitempty"`

	// azure client Id
	AzureClientID string `json:"azureClientId,omitempty"`

	// azure client secret
	AzureClientSecret string `json:"azureClientSecret,omitempty"`

	// azure location
	AzureLocation string `json:"azureLocation,omitempty"`

	// azure subscription Id
	AzureSubscriptionID string `json:"azureSubscriptionId,omitempty"`

	// azure tenant Id
	AzureTenantID string `json:"azureTenantId,omitempty"`

	// cloud credential name
	CloudCredentialName string `json:"cloudCredentialName,omitempty"`

	// cloud credential revision
	CloudCredentialRevision int32 `json:"cloudCredentialRevision,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is aws
	IsAws bool `json:"isAws"`

	// is azure
	IsAzure bool `json:"isAzure"`

	// is default
	IsDefault bool `json:"isDefault"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is openstack
	IsOpenstack bool `json:"isOpenstack"`

	// libvirt bridge
	LibvirtBridge string `json:"libvirtBridge,omitempty"`

	// libvirt gateway
	LibvirtGateway string `json:"libvirtGateway,omitempty"`

	// libvirt net mask
	LibvirtNetMask int32 `json:"libvirtNetMask,omitempty"`

	// open stack availability zone
	OpenStackAvailabilityZone string `json:"openStackAvailabilityZone,omitempty"`

	// open stack domain
	OpenStackDomain string `json:"openStackDomain,omitempty"`

	// open stack import network
	OpenStackImportNetwork bool `json:"openStackImportNetwork"`

	// open stack internal subnet Id
	OpenStackInternalSubnetID string `json:"openStackInternalSubnetId,omitempty"`

	// open stack password
	OpenStackPassword string `json:"openStackPassword,omitempty"`

	// open stack project
	OpenStackProject string `json:"openStackProject,omitempty"`

	// open stack public network
	OpenStackPublicNetwork string `json:"openStackPublicNetwork,omitempty"`

	// open stack region
	OpenStackRegion string `json:"openStackRegion,omitempty"`

	// open stack tenant Id
	OpenStackTenantID string `json:"openStackTenantId,omitempty"`

	// open stack Url
	OpenStackURL string `json:"openStackUrl,omitempty"`

	// open stack user
	OpenStackUser string `json:"openStackUser,omitempty"`

	// open stack volume type
	OpenStackVolumeType string `json:"openStackVolumeType,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// taikun private SSH key
	TaikunPrivateSSHKey string `json:"taikunPrivateSSHKey,omitempty"`

	// taikun public SSH key
	TaikunPublicSSHKey string `json:"taikunPublicSSHKey,omitempty"`
}

// Validate validates this credentials for project dto
func (m *CredentialsForProjectDto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this credentials for project dto based on context it is used
func (m *CredentialsForProjectDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsForProjectDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsForProjectDto) UnmarshalBinary(b []byte) error {
	var res CredentialsForProjectDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
