// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subresource subresource
//
// swagger:model Subresource
type Subresource struct {

	// cost components
	CostComponents []*SubresourceCostComponentsItems0 `json:"costComponents"`

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// metadata
	Metadata *SubresourceMetadata `json:"metadata,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this subresource
func (m *Subresource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subresource) validateCostComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.CostComponents) { // not required
		return nil
	}

	for i := 0; i < len(m.CostComponents); i++ {
		if swag.IsZero(m.CostComponents[i]) { // not required
			continue
		}

		if m.CostComponents[i] != nil {
			if err := m.CostComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subresource) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subresource based on the context it is used
func (m *Subresource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subresource) contextValidateCostComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CostComponents); i++ {

		if m.CostComponents[i] != nil {
			if err := m.CostComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subresource) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subresource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subresource) UnmarshalBinary(b []byte) error {
	var res Subresource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SubresourceCostComponentsItems0 subresource cost components items0
//
// swagger:model SubresourceCostComponentsItems0
type SubresourceCostComponentsItems0 struct {

	// hourly cost
	HourlyCost string `json:"hourlyCost,omitempty"`

	// hourly quantity
	HourlyQuantity string `json:"hourlyQuantity,omitempty"`

	// monthly cost
	MonthlyCost string `json:"monthlyCost,omitempty"`

	// monthly quantity
	MonthlyQuantity string `json:"monthlyQuantity,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// price
	Price string `json:"price,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this subresource cost components items0
func (m *SubresourceCostComponentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this subresource cost components items0 based on context it is used
func (m *SubresourceCostComponentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubresourceCostComponentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubresourceCostComponentsItems0) UnmarshalBinary(b []byte) error {
	var res SubresourceCostComponentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SubresourceMetadata subresource metadata
//
// swagger:model SubresourceMetadata
type SubresourceMetadata struct {

	// infracost command
	InfracostCommand string `json:"infracostCommand,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vcs branch
	VcsBranch string `json:"vcsBranch,omitempty"`

	// vcs commit author email
	VcsCommitAuthorEmail string `json:"vcsCommitAuthorEmail,omitempty"`

	// vcs commit author name
	VcsCommitAuthorName string `json:"vcsCommitAuthorName,omitempty"`

	// vcs commit message
	VcsCommitMessage string `json:"vcsCommitMessage,omitempty"`

	// vcs commit sha
	VcsCommitSha string `json:"vcsCommitSha,omitempty"`

	// vcs commit timestamp
	// Format: date-time
	VcsCommitTimestamp *strfmt.DateTime `json:"vcsCommitTimestamp,omitempty"`

	// vcs repository Url
	VcsRepositoryURL string `json:"vcsRepositoryUrl,omitempty"`

	// vcs sub path
	VcsSubPath string `json:"vcsSubPath,omitempty"`
}

// Validate validates this subresource metadata
func (m *SubresourceMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVcsCommitTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubresourceMetadata) validateVcsCommitTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsCommitTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("metadata"+"."+"vcsCommitTimestamp", "body", "date-time", m.VcsCommitTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subresource metadata based on context it is used
func (m *SubresourceMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubresourceMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubresourceMetadata) UnmarshalBinary(b []byte) error {
	var res SubresourceMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
