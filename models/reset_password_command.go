// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResetPasswordCommand reset password command
//
// swagger:model ResetPasswordCommand
type ResetPasswordCommand struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// new password
	// Required: true
	// Min Length: 6
	NewPassword struct {
		ResetPasswordCommandNewPasswordAllOf0

		ResetPasswordCommandNewPasswordAllOf1

		ResetPasswordCommandNewPasswordAllOf2

		ResetPasswordCommandNewPasswordAllOf3
	} `json:"newPassword"`

	// token
	// Required: true
	// Min Length: 1
	Token *string `json:"token"`
}

// Validate validates this reset password command
func (m *ResetPasswordCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResetPasswordCommand) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResetPasswordCommand) validateNewPassword(formats strfmt.Registry) error {

	if err := validate.Required("newPassword", "body", m.NewPassword); err != nil {
		return err
	}

	if err := validate.MinLength("newPassword", "body", *m.NewPassword, 6); err != nil {
		return err
	}

	return nil
}

func (m *ResetPasswordCommand) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if err := validate.MinLength("token", "body", *m.Token, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this reset password command based on context it is used
func (m *ResetPasswordCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResetPasswordCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResetPasswordCommand) UnmarshalBinary(b []byte) error {
	var res ResetPasswordCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResetPasswordCommandNewPasswordAllOf0 reset password command new password all of0
//
// swagger:model ResetPasswordCommandNewPasswordAllOf0
type ResetPasswordCommandNewPasswordAllOf0 interface{}

// ResetPasswordCommandNewPasswordAllOf1 reset password command new password all of1
//
// swagger:model ResetPasswordCommandNewPasswordAllOf1
type ResetPasswordCommandNewPasswordAllOf1 interface{}

// ResetPasswordCommandNewPasswordAllOf2 reset password command new password all of2
//
// swagger:model ResetPasswordCommandNewPasswordAllOf2
type ResetPasswordCommandNewPasswordAllOf2 interface{}

// ResetPasswordCommandNewPasswordAllOf3 reset password command new password all of3
//
// swagger:model ResetPasswordCommandNewPasswordAllOf3
type ResetPasswordCommandNewPasswordAllOf3 interface{}
