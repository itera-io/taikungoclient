// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CatalogAppDetailsDto catalog app details dto
//
// swagger:model CatalogAppDetailsDto
type CatalogAppDetailsDto struct {

	// app repo Id
	AppRepoID int32 `json:"appRepoId,omitempty"`

	// app repo name
	AppRepoName string `json:"appRepoName,omitempty"`

	// app repo organization name
	AppRepoOrganizationName string `json:"appRepoOrganizationName,omitempty"`

	// app version
	AppVersion string `json:"appVersion,omitempty"`

	// catalog Id
	CatalogID int32 `json:"catalogId,omitempty"`

	// catalog name
	CatalogName string `json:"catalogName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// logo Id
	LogoID string `json:"logoId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// official
	Official bool `json:"official"`

	// package Id
	PackageID string `json:"packageId,omitempty"`

	// project apps
	ProjectApps []*CatalogAppDetailsDtoProjectAppsItems0 `json:"projectApps"`

	// readme
	Readme string `json:"readme,omitempty"`

	// security report
	SecurityReport *CatalogAppDetailsDtoSecurityReport `json:"securityReport,omitempty"`

	// stars
	Stars int32 `json:"stars,omitempty"`

	// verified publisher
	VerifiedPublisher bool `json:"verifiedPublisher"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this catalog app details dto
func (m *CatalogAppDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityReport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogAppDetailsDto) validateProjectApps(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectApps) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectApps); i++ {
		if swag.IsZero(m.ProjectApps[i]) { // not required
			continue
		}

		if m.ProjectApps[i] != nil {
			if err := m.ProjectApps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectApps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectApps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogAppDetailsDto) validateSecurityReport(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityReport) { // not required
		return nil
	}

	if m.SecurityReport != nil {
		if err := m.SecurityReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReport")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this catalog app details dto based on the context it is used
func (m *CatalogAppDetailsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectApps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogAppDetailsDto) contextValidateProjectApps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProjectApps); i++ {

		if m.ProjectApps[i] != nil {
			if err := m.ProjectApps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectApps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectApps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogAppDetailsDto) contextValidateSecurityReport(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityReport != nil {
		if err := m.SecurityReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogAppDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogAppDetailsDto) UnmarshalBinary(b []byte) error {
	var res CatalogAppDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CatalogAppDetailsDtoProjectAppsItems0 catalog app details dto project apps items0
//
// swagger:model CatalogAppDetailsDtoProjectAppsItems0
type CatalogAppDetailsDtoProjectAppsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this catalog app details dto project apps items0
func (m *CatalogAppDetailsDtoProjectAppsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog app details dto project apps items0 based on context it is used
func (m *CatalogAppDetailsDtoProjectAppsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogAppDetailsDtoProjectAppsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogAppDetailsDtoProjectAppsItems0) UnmarshalBinary(b []byte) error {
	var res CatalogAppDetailsDtoProjectAppsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CatalogAppDetailsDtoSecurityReport catalog app details dto security report
//
// swagger:model CatalogAppDetailsDtoSecurityReport
type CatalogAppDetailsDtoSecurityReport struct {

	// critical
	Critical int64 `json:"critical,omitempty"`

	// high
	High int64 `json:"high,omitempty"`

	// low
	Low int64 `json:"low,omitempty"`

	// medium
	Medium int64 `json:"medium,omitempty"`

	// unknown
	Unknown int64 `json:"unknown,omitempty"`
}

// Validate validates this catalog app details dto security report
func (m *CatalogAppDetailsDtoSecurityReport) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this catalog app details dto security report based on context it is used
func (m *CatalogAppDetailsDtoSecurityReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogAppDetailsDtoSecurityReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogAppDetailsDtoSecurityReport) UnmarshalBinary(b []byte) error {
	var res CatalogAppDetailsDtoSecurityReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
