// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HelmReleasesList helm releases list
//
// swagger:model HelmReleasesList
type HelmReleasesList struct {

	// data
	Data []*HelmReleasesListDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this helm releases list
func (m *HelmReleasesList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesList) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this helm releases list based on the context it is used
func (m *HelmReleasesList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesList) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesList) UnmarshalBinary(b []byte) error {
	var res HelmReleasesList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0 helm releases list data items0
//
// swagger:model HelmReleasesListDataItems0
type HelmReleasesListDataItems0 struct {

	// api version
	APIVersion string `json:"apiVersion,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// metadata
	Metadata *HelmReleasesListDataItems0Metadata `json:"metadata,omitempty"`

	// spec
	Spec *HelmReleasesListDataItems0Spec `json:"spec,omitempty"`

	// status
	Status *HelmReleasesListDataItems0Status `json:"status,omitempty"`
}

// Validate validates this helm releases list data items0
func (m *HelmReleasesListDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm releases list data items0 based on the context it is used
func (m *HelmReleasesListDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0Metadata helm releases list data items0 metadata
//
// swagger:model HelmReleasesListDataItems0Metadata
type HelmReleasesListDataItems0Metadata struct {

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`
}

// Validate validates this helm releases list data items0 metadata
func (m *HelmReleasesListDataItems0Metadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this helm releases list data items0 metadata based on context it is used
func (m *HelmReleasesListDataItems0Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Metadata) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0Spec helm releases list data items0 spec
//
// swagger:model HelmReleasesListDataItems0Spec
type HelmReleasesListDataItems0Spec struct {

	// chart
	Chart *HelmReleasesListDataItems0SpecChart `json:"chart,omitempty"`

	// interval
	Interval string `json:"interval,omitempty"`

	// release name
	ReleaseName string `json:"releaseName,omitempty"`

	// storage namespace
	StorageNamespace string `json:"storageNamespace,omitempty"`

	// target namespace
	TargetNamespace string `json:"targetNamespace,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// values
	Values *HelmReleasesListDataItems0SpecValues `json:"values,omitempty"`
}

// Validate validates this helm releases list data items0 spec
func (m *HelmReleasesListDataItems0Spec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0Spec) validateChart(formats strfmt.Registry) error {
	if swag.IsZero(m.Chart) { // not required
		return nil
	}

	if m.Chart != nil {
		if err := m.Chart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0Spec) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm releases list data items0 spec based on the context it is used
func (m *HelmReleasesListDataItems0Spec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0Spec) contextValidateChart(ctx context.Context, formats strfmt.Registry) error {

	if m.Chart != nil {
		if err := m.Chart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0Spec) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	if m.Values != nil {
		if err := m.Values.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Spec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Spec) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0Spec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0SpecChart helm releases list data items0 spec chart
//
// swagger:model HelmReleasesListDataItems0SpecChart
type HelmReleasesListDataItems0SpecChart struct {

	// spec
	Spec *HelmReleasesListDataItems0SpecChartSpec `json:"spec,omitempty"`
}

// Validate validates this helm releases list data items0 spec chart
func (m *HelmReleasesListDataItems0SpecChart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecChart) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart" + "." + "spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart" + "." + "spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm releases list data items0 spec chart based on the context it is used
func (m *HelmReleasesListDataItems0SpecChart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecChart) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart" + "." + "spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart" + "." + "spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChart) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0SpecChart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0SpecChartSpec helm releases list data items0 spec chart spec
//
// swagger:model HelmReleasesListDataItems0SpecChartSpec
type HelmReleasesListDataItems0SpecChartSpec struct {

	// chart
	Chart string `json:"chart,omitempty"`

	// interval
	Interval string `json:"interval,omitempty"`

	// source ref
	SourceRef *HelmReleasesListDataItems0SpecChartSpecSourceRef `json:"sourceRef,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this helm releases list data items0 spec chart spec
func (m *HelmReleasesListDataItems0SpecChartSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecChartSpec) validateSourceRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceRef) { // not required
		return nil
	}

	if m.SourceRef != nil {
		if err := m.SourceRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart" + "." + "spec" + "." + "sourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart" + "." + "spec" + "." + "sourceRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm releases list data items0 spec chart spec based on the context it is used
func (m *HelmReleasesListDataItems0SpecChartSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecChartSpec) contextValidateSourceRef(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceRef != nil {
		if err := m.SourceRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "chart" + "." + "spec" + "." + "sourceRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "chart" + "." + "spec" + "." + "sourceRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChartSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChartSpec) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0SpecChartSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0SpecChartSpecSourceRef helm releases list data items0 spec chart spec source ref
//
// swagger:model HelmReleasesListDataItems0SpecChartSpecSourceRef
type HelmReleasesListDataItems0SpecChartSpecSourceRef struct {

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this helm releases list data items0 spec chart spec source ref
func (m *HelmReleasesListDataItems0SpecChartSpecSourceRef) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this helm releases list data items0 spec chart spec source ref based on context it is used
func (m *HelmReleasesListDataItems0SpecChartSpecSourceRef) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChartSpecSourceRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecChartSpecSourceRef) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0SpecChartSpecSourceRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0SpecValues helm releases list data items0 spec values
//
// swagger:model HelmReleasesListDataItems0SpecValues
type HelmReleasesListDataItems0SpecValues struct {

	// options
	Options *HelmReleasesListDataItems0SpecValuesOptions `json:"options,omitempty"`

	// parent
	Parent *JSONNode `json:"parent,omitempty"`

	// root
	Root *JSONNode `json:"root,omitempty"`
}

// Validate validates this helm releases list data items0 spec values
func (m *HelmReleasesListDataItems0SpecValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "options")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) validateRoot(formats strfmt.Registry) error {
	if swag.IsZero(m.Root) { // not required
		return nil
	}

	if m.Root != nil {
		if err := m.Root.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "root")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "root")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helm releases list data items0 spec values based on the context it is used
func (m *HelmReleasesListDataItems0SpecValues) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {
		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "options")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (m *HelmReleasesListDataItems0SpecValues) contextValidateRoot(ctx context.Context, formats strfmt.Registry) error {

	if m.Root != nil {
		if err := m.Root.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec" + "." + "values" + "." + "root")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec" + "." + "values" + "." + "root")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecValues) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0SpecValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0SpecValuesOptions helm releases list data items0 spec values options
//
// swagger:model HelmReleasesListDataItems0SpecValuesOptions
type HelmReleasesListDataItems0SpecValuesOptions struct {

	// property name case insensitive
	PropertyNameCaseInsensitive bool `json:"propertyNameCaseInsensitive"`
}

// Validate validates this helm releases list data items0 spec values options
func (m *HelmReleasesListDataItems0SpecValuesOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this helm releases list data items0 spec values options based on context it is used
func (m *HelmReleasesListDataItems0SpecValuesOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecValuesOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0SpecValuesOptions) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0SpecValuesOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0Status helm releases list data items0 status
//
// swagger:model HelmReleasesListDataItems0Status
type HelmReleasesListDataItems0Status struct {

	// conditions
	Conditions []*HelmReleasesListDataItems0StatusConditionsItems0 `json:"conditions"`

	// failures
	Failures int64 `json:"failures,omitempty"`

	// helm chart
	HelmChart string `json:"helmChart,omitempty"`

	// observed generation
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
}

// Validate validates this helm releases list data items0 status
func (m *HelmReleasesListDataItems0Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0Status) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this helm releases list data items0 status based on the context it is used
func (m *HelmReleasesListDataItems0Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0Status) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0Status) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HelmReleasesListDataItems0StatusConditionsItems0 helm releases list data items0 status conditions items0
//
// swagger:model HelmReleasesListDataItems0StatusConditionsItems0
type HelmReleasesListDataItems0StatusConditionsItems0 struct {

	// last transition time
	// Format: date-time
	LastTransitionTime *strfmt.DateTime `json:"lastTransitionTime,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this helm releases list data items0 status conditions items0
func (m *HelmReleasesListDataItems0StatusConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HelmReleasesListDataItems0StatusConditionsItems0) validateLastTransitionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransitionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lastTransitionTime", "body", "date-time", m.LastTransitionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this helm releases list data items0 status conditions items0 based on context it is used
func (m *HelmReleasesListDataItems0StatusConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HelmReleasesListDataItems0StatusConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HelmReleasesListDataItems0StatusConditionsItems0) UnmarshalBinary(b []byte) error {
	var res HelmReleasesListDataItems0StatusConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
