// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectActionVisibilityDto project action visibility dto
//
// swagger:model ProjectActionVisibilityDto
type ProjectActionVisibilityDto struct {

	// commit
	Commit *ProjectButtonStatusDto `json:"commit,omitempty"`

	// disable autoscaler
	DisableAutoscaler *ProjectButtonStatusDto `json:"disableAutoscaler,omitempty"`

	// disable backup
	DisableBackup *ProjectButtonStatusDto `json:"disableBackup,omitempty"`

	// disable full spot
	DisableFullSpot *ProjectButtonStatusDto `json:"disableFullSpot,omitempty"`

	// disable opa
	DisableOpa *ProjectButtonStatusDto `json:"disableOpa,omitempty"`

	// disable spot Vm
	DisableSpotVM *ProjectButtonStatusDto `json:"disableSpotVm,omitempty"`

	// disable spot worker
	DisableSpotWorker *ProjectButtonStatusDto `json:"disableSpotWorker,omitempty"`

	// enable autoscaler
	EnableAutoscaler *ProjectButtonStatusDto `json:"enableAutoscaler,omitempty"`

	// enable backup
	EnableBackup *ProjectButtonStatusDto `json:"enableBackup,omitempty"`

	// enable full spot
	EnableFullSpot *ProjectButtonStatusDto `json:"enableFullSpot,omitempty"`

	// enable opa
	EnableOpa *ProjectButtonStatusDto `json:"enableOpa,omitempty"`

	// enable spot Vm
	EnableSpotVM *ProjectButtonStatusDto `json:"enableSpotVm,omitempty"`

	// enable spot worker
	EnableSpotWorker *ProjectButtonStatusDto `json:"enableSpotWorker,omitempty"`

	// lock
	Lock *ProjectButtonStatusDto `json:"lock,omitempty"`

	// monitoring
	Monitoring *ProjectButtonStatusDto `json:"monitoring,omitempty"`

	// repair
	Repair *ProjectButtonStatusDto `json:"repair,omitempty"`

	// unlock
	Unlock *ProjectButtonStatusDto `json:"unlock,omitempty"`

	// upgrade
	Upgrade *ProjectButtonStatusDto `json:"upgrade,omitempty"`

	// vm commit
	VMCommit *ProjectButtonStatusDto `json:"vmCommit,omitempty"`

	// vm repair
	VMRepair *ProjectButtonStatusDto `json:"vmRepair,omitempty"`
}

// Validate validates this project action visibility dto
func (m *ProjectActionVisibilityDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableFullSpot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableOpa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableSpotVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableSpotWorker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableFullSpot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableOpa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableSpotVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableSpotWorker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoring(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMRepair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectActionVisibilityDto) validateCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {
		if err := m.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableAutoscaler(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableAutoscaler) { // not required
		return nil
	}

	if m.DisableAutoscaler != nil {
		if err := m.DisableAutoscaler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableBackup) { // not required
		return nil
	}

	if m.DisableBackup != nil {
		if err := m.DisableBackup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableFullSpot(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableFullSpot) { // not required
		return nil
	}

	if m.DisableFullSpot != nil {
		if err := m.DisableFullSpot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableFullSpot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableFullSpot")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableOpa(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableOpa) { // not required
		return nil
	}

	if m.DisableOpa != nil {
		if err := m.DisableOpa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableOpa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableOpa")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableSpotVM(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableSpotVM) { // not required
		return nil
	}

	if m.DisableSpotVM != nil {
		if err := m.DisableSpotVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableSpotVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableSpotVm")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateDisableSpotWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableSpotWorker) { // not required
		return nil
	}

	if m.DisableSpotWorker != nil {
		if err := m.DisableSpotWorker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableSpotWorker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableSpotWorker")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableAutoscaler(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableAutoscaler) { // not required
		return nil
	}

	if m.EnableAutoscaler != nil {
		if err := m.EnableAutoscaler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableBackup) { // not required
		return nil
	}

	if m.EnableBackup != nil {
		if err := m.EnableBackup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableFullSpot(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableFullSpot) { // not required
		return nil
	}

	if m.EnableFullSpot != nil {
		if err := m.EnableFullSpot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableFullSpot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableFullSpot")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableOpa(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableOpa) { // not required
		return nil
	}

	if m.EnableOpa != nil {
		if err := m.EnableOpa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableOpa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableOpa")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableSpotVM(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableSpotVM) { // not required
		return nil
	}

	if m.EnableSpotVM != nil {
		if err := m.EnableSpotVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSpotVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSpotVm")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateEnableSpotWorker(formats strfmt.Registry) error {
	if swag.IsZero(m.EnableSpotWorker) { // not required
		return nil
	}

	if m.EnableSpotWorker != nil {
		if err := m.EnableSpotWorker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSpotWorker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSpotWorker")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateLock(formats strfmt.Registry) error {
	if swag.IsZero(m.Lock) { // not required
		return nil
	}

	if m.Lock != nil {
		if err := m.Lock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateMonitoring(formats strfmt.Registry) error {
	if swag.IsZero(m.Monitoring) { // not required
		return nil
	}

	if m.Monitoring != nil {
		if err := m.Monitoring.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoring")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoring")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateRepair(formats strfmt.Registry) error {
	if swag.IsZero(m.Repair) { // not required
		return nil
	}

	if m.Repair != nil {
		if err := m.Repair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repair")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateUnlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Unlock) { // not required
		return nil
	}

	if m.Unlock != nil {
		if err := m.Unlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unlock")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Upgrade) { // not required
		return nil
	}

	if m.Upgrade != nil {
		if err := m.Upgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateVMCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.VMCommit) { // not required
		return nil
	}

	if m.VMCommit != nil {
		if err := m.VMCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmCommit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmCommit")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) validateVMRepair(formats strfmt.Registry) error {
	if swag.IsZero(m.VMRepair) { // not required
		return nil
	}

	if m.VMRepair != nil {
		if err := m.VMRepair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmRepair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmRepair")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project action visibility dto based on the context it is used
func (m *ProjectActionVisibilityDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableAutoscaler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableFullSpot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableOpa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableSpotVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisableSpotWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableAutoscaler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableFullSpot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableOpa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableSpotVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnableSpotWorker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitoring(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMRepair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.Commit != nil {
		if err := m.Commit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableAutoscaler(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableAutoscaler != nil {
		if err := m.DisableAutoscaler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableBackup(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableBackup != nil {
		if err := m.DisableBackup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableFullSpot(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableFullSpot != nil {
		if err := m.DisableFullSpot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableFullSpot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableFullSpot")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableOpa(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableOpa != nil {
		if err := m.DisableOpa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableOpa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableOpa")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableSpotVM(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableSpotVM != nil {
		if err := m.DisableSpotVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableSpotVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableSpotVm")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateDisableSpotWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.DisableSpotWorker != nil {
		if err := m.DisableSpotWorker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disableSpotWorker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disableSpotWorker")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableAutoscaler(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableAutoscaler != nil {
		if err := m.EnableAutoscaler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableAutoscaler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableAutoscaler")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableBackup(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableBackup != nil {
		if err := m.EnableBackup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableBackup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableBackup")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableFullSpot(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableFullSpot != nil {
		if err := m.EnableFullSpot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableFullSpot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableFullSpot")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableOpa(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableOpa != nil {
		if err := m.EnableOpa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableOpa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableOpa")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableSpotVM(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableSpotVM != nil {
		if err := m.EnableSpotVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSpotVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSpotVm")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateEnableSpotWorker(ctx context.Context, formats strfmt.Registry) error {

	if m.EnableSpotWorker != nil {
		if err := m.EnableSpotWorker.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enableSpotWorker")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enableSpotWorker")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateLock(ctx context.Context, formats strfmt.Registry) error {

	if m.Lock != nil {
		if err := m.Lock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateMonitoring(ctx context.Context, formats strfmt.Registry) error {

	if m.Monitoring != nil {
		if err := m.Monitoring.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoring")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoring")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateRepair(ctx context.Context, formats strfmt.Registry) error {

	if m.Repair != nil {
		if err := m.Repair.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repair")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateUnlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Unlock != nil {
		if err := m.Unlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unlock")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Upgrade != nil {
		if err := m.Upgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateVMCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.VMCommit != nil {
		if err := m.VMCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmCommit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmCommit")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectActionVisibilityDto) contextValidateVMRepair(ctx context.Context, formats strfmt.Registry) error {

	if m.VMRepair != nil {
		if err := m.VMRepair.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmRepair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmRepair")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectActionVisibilityDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectActionVisibilityDto) UnmarshalBinary(b []byte) error {
	var res ProjectActionVisibilityDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
