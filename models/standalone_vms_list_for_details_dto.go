// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandaloneVmsListForDetailsDto standalone vms list for details dto
//
// swagger:model StandaloneVmsListForDetailsDto
type StandaloneVmsListForDetailsDto struct {

	// cloud init
	CloudInit string `json:"cloudInit,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// current flavor
	CurrentFlavor string `json:"currentFlavor,omitempty"`

	// disks
	Disks []*StandAloneVMDiskForDetailsDto `json:"disks"`

	// id
	ID int32 `json:"id,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// is windows
	IsWindows bool `json:"isWindows"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// profile
	Profile *StandAloneProfileForDetailsDto `json:"profile,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`

	// stand alone meta datas
	StandAloneMetaDatas []*StandAloneMetaDataDtoForVM `json:"standAloneMetaDatas"`

	// status
	Status string `json:"status,omitempty"`

	// target flavor
	TargetFlavor string `json:"targetFlavor,omitempty"`

	// volume size
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this standalone vms list for details dto
func (m *StandaloneVmsListForDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandAloneMetaDatas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListForDetailsDto) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StandaloneVmsListForDetailsDto) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *StandaloneVmsListForDetailsDto) validateStandAloneMetaDatas(formats strfmt.Registry) error {
	if swag.IsZero(m.StandAloneMetaDatas) { // not required
		return nil
	}

	for i := 0; i < len(m.StandAloneMetaDatas); i++ {
		if swag.IsZero(m.StandAloneMetaDatas[i]) { // not required
			continue
		}

		if m.StandAloneMetaDatas[i] != nil {
			if err := m.StandAloneMetaDatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this standalone vms list for details dto based on the context it is used
func (m *StandaloneVmsListForDetailsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandAloneMetaDatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListForDetailsDto) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StandaloneVmsListForDetailsDto) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {
		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *StandaloneVmsListForDetailsDto) contextValidateStandAloneMetaDatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandAloneMetaDatas); i++ {

		if m.StandAloneMetaDatas[i] != nil {
			if err := m.StandAloneMetaDatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVmsListForDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVmsListForDetailsDto) UnmarshalBinary(b []byte) error {
	var res StandaloneVmsListForDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
