// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactUsCommand contact us command
//
// swagger:model ContactUsCommand
type ContactUsCommand struct {

	// business email
	// Required: true
	// Min Length: 1
	// Format: email
	BusinessEmail *strfmt.Email `json:"businessEmail"`

	// comment
	Comment string `json:"comment,omitempty"`

	// company name
	// Required: true
	// Max Length: 200
	// Min Length: 3
	CompanyName *string `json:"companyName"`

	// name
	// Required: true
	// Max Length: 200
	// Min Length: 3
	Name *string `json:"name"`
}

// Validate validates this contact us command
func (m *ContactUsCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactUsCommand) validateBusinessEmail(formats strfmt.Registry) error {

	if err := validate.Required("businessEmail", "body", m.BusinessEmail); err != nil {
		return err
	}

	if err := validate.MinLength("businessEmail", "body", m.BusinessEmail.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("businessEmail", "body", "email", m.BusinessEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContactUsCommand) validateCompanyName(formats strfmt.Registry) error {

	if err := validate.Required("companyName", "body", m.CompanyName); err != nil {
		return err
	}

	if err := validate.MinLength("companyName", "body", *m.CompanyName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("companyName", "body", *m.CompanyName, 200); err != nil {
		return err
	}

	return nil
}

func (m *ContactUsCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 200); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contact us command based on context it is used
func (m *ContactUsCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContactUsCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactUsCommand) UnmarshalBinary(b []byte) error {
	var res ContactUsCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
