// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckTanzuCommand check tanzu command
//
// swagger:model CheckTanzuCommand
type CheckTanzuCommand struct {

	// namespace
	// Required: true
	// Max Length: 63
	// Min Length: 3
	Namespace *string `json:"namespace"`

	// password
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Password *string `json:"password"`

	// port
	Port int32 `json:"port,omitempty"`

	// url
	// Required: true
	// Max Length: 150
	// Min Length: 3
	URL *string `json:"url"`

	// username
	// Required: true
	// Max Length: 100
	// Min Length: 3
	Username *string `json:"username"`

	// volume type
	// Required: true
	// Max Length: 100
	// Min Length: 1
	VolumeType *string `json:"volumeType"`
}

// Validate validates this check tanzu command
func (m *CheckTanzuCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckTanzuCommand) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	if err := validate.MinLength("namespace", "body", *m.Namespace, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("namespace", "body", *m.Namespace, 63); err != nil {
		return err
	}

	return nil
}

func (m *CheckTanzuCommand) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 100); err != nil {
		return err
	}

	return nil
}

func (m *CheckTanzuCommand) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", *m.URL, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("url", "body", *m.URL, 150); err != nil {
		return err
	}

	return nil
}

func (m *CheckTanzuCommand) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 100); err != nil {
		return err
	}

	return nil
}

func (m *CheckTanzuCommand) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	if err := validate.MinLength("volumeType", "body", *m.VolumeType, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeType", "body", *m.VolumeType, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this check tanzu command based on context it is used
func (m *CheckTanzuCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckTanzuCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckTanzuCommand) UnmarshalBinary(b []byte) error {
	var res CheckTanzuCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
