// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerForCreateDto server for create dto
//
// swagger:model ServerForCreateDto
type ServerForCreateDto struct {

	// autoscaling group
	AutoscalingGroup string `json:"autoscalingGroup,omitempty"`

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// count
	Count int32 `json:"count,omitempty"`

	// disk size
	DiskSize int64 `json:"diskSize,omitempty"`

	// flavor
	Flavor string `json:"flavor,omitempty"`

	// kubernetes node labels
	KubernetesNodeLabels []*ServerForCreateDtoKubernetesNodeLabelsItems0 `json:"kubernetesNodeLabels"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// role
	// Enum: [100 200 300 400]
	Role int32 `json:"role,omitempty"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice float64 `json:"spotPrice,omitempty"`
}

// Validate validates this server for create dto
func (m *ServerForCreateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesNodeLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerForCreateDto) validateKubernetesNodeLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesNodeLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.KubernetesNodeLabels); i++ {
		if swag.IsZero(m.KubernetesNodeLabels[i]) { // not required
			continue
		}

		if m.KubernetesNodeLabels[i] != nil {
			if err := m.KubernetesNodeLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serverForCreateDtoTypeRolePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,300,400]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverForCreateDtoTypeRolePropEnum = append(serverForCreateDtoTypeRolePropEnum, v)
	}
}

// prop value enum
func (m *ServerForCreateDto) validateRoleEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, serverForCreateDtoTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerForCreateDto) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server for create dto based on the context it is used
func (m *ServerForCreateDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubernetesNodeLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerForCreateDto) contextValidateKubernetesNodeLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KubernetesNodeLabels); i++ {

		if m.KubernetesNodeLabels[i] != nil {
			if err := m.KubernetesNodeLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesNodeLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerForCreateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerForCreateDto) UnmarshalBinary(b []byte) error {
	var res ServerForCreateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServerForCreateDtoKubernetesNodeLabelsItems0 server for create dto kubernetes node labels items0
//
// swagger:model ServerForCreateDtoKubernetesNodeLabelsItems0
type ServerForCreateDtoKubernetesNodeLabelsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this server for create dto kubernetes node labels items0
func (m *ServerForCreateDtoKubernetesNodeLabelsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this server for create dto kubernetes node labels items0 based on context it is used
func (m *ServerForCreateDtoKubernetesNodeLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerForCreateDtoKubernetesNodeLabelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerForCreateDtoKubernetesNodeLabelsItems0) UnmarshalBinary(b []byte) error {
	var res ServerForCreateDtoKubernetesNodeLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
