// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckAwsCommand check aws command
//
// swagger:model CheckAwsCommand
type CheckAwsCommand struct {

	// aws access key Id
	// Required: true
	// Min Length: 1
	AwsAccessKeyID *string `json:"awsAccessKeyId"`

	// aws secret access key
	// Required: true
	// Min Length: 1
	AwsSecretAccessKey *string `json:"awsSecretAccessKey"`

	// region
	// Required: true
	// Min Length: 1
	Region *string `json:"region"`
}

// Validate validates this check aws command
func (m *CheckAwsCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAccessKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSecretAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckAwsCommand) validateAwsAccessKeyID(formats strfmt.Registry) error {

	if err := validate.Required("awsAccessKeyId", "body", m.AwsAccessKeyID); err != nil {
		return err
	}

	if err := validate.MinLength("awsAccessKeyId", "body", *m.AwsAccessKeyID, 1); err != nil {
		return err
	}

	return nil
}

func (m *CheckAwsCommand) validateAwsSecretAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("awsSecretAccessKey", "body", m.AwsSecretAccessKey); err != nil {
		return err
	}

	if err := validate.MinLength("awsSecretAccessKey", "body", *m.AwsSecretAccessKey, 1); err != nil {
		return err
	}

	return nil
}

func (m *CheckAwsCommand) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if err := validate.MinLength("region", "body", *m.Region, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this check aws command based on context it is used
func (m *CheckAwsCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckAwsCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckAwsCommand) UnmarshalBinary(b []byte) error {
	var res CheckAwsCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
