// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchNodeLabelsDto patch node labels dto
//
// swagger:model PatchNodeLabelsDto
type PatchNodeLabelsDto struct {

	// key
	// Required: true
	// Max Length: 63
	// Min Length: 1
	Key *string `json:"key"`

	// mode
	// Required: true
	// Min Length: 1
	Mode *string `json:"mode"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this patch node labels dto
func (m *PatchNodeLabelsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchNodeLabelsDto) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	if err := validate.MinLength("key", "body", *m.Key, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("key", "body", *m.Key, 63); err != nil {
		return err
	}

	return nil
}

func (m *PatchNodeLabelsDto) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	if err := validate.MinLength("mode", "body", *m.Mode, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch node labels dto based on context it is used
func (m *PatchNodeLabelsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchNodeLabelsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchNodeLabelsDto) UnmarshalBinary(b []byte) error {
	var res PatchNodeLabelsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
