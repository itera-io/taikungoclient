// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdminAddBalanceCommand admin add balance command
//
// swagger:model AdminAddBalanceCommand
type AdminAddBalanceCommand struct {

	// balance
	// Maximum: 100000
	// Minimum: 1
	Balance int64 `json:"balance,omitempty"`

	// customer Id
	// Required: true
	// Min Length: 1
	CustomerID *string `json:"customerId"`
}

// Validate validates this admin add balance command
func (m *AdminAddBalanceCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdminAddBalanceCommand) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if err := validate.MinimumInt("balance", "body", m.Balance, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("balance", "body", m.Balance, 100000, false); err != nil {
		return err
	}

	return nil
}

func (m *AdminAddBalanceCommand) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customerId", "body", m.CustomerID); err != nil {
		return err
	}

	if err := validate.MinLength("customerId", "body", *m.CustomerID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this admin add balance command based on context it is used
func (m *AdminAddBalanceCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdminAddBalanceCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminAddBalanceCommand) UnmarshalBinary(b []byte) error {
	var res AdminAddBalanceCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
