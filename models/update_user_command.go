// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUserCommand update user command
//
// swagger:model UpdateUserCommand
type UpdateUserCommand struct {

	// disable
	Disable bool `json:"disable"`

	// display name
	DisplayName string `json:"displayName"`

	// email
	Email string `json:"email,omitempty"`

	// force to reset password
	ForceToResetPassword bool `json:"forceToResetPassword"`

	// id
	ID string `json:"id,omitempty"`

	// is approved by partner
	IsApprovedByPartner bool `json:"isApprovedByPartner"`

	// role
	// Enum: [100 200 250 400 6000]
	Role int32 `json:"role,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this update user command
func (m *UpdateUserCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateUserCommandTypeRolePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200,250,400,6000]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateUserCommandTypeRolePropEnum = append(updateUserCommandTypeRolePropEnum, v)
	}
}

// prop value enum
func (m *UpdateUserCommand) validateRoleEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, updateUserCommandTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateUserCommand) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update user command based on context it is used
func (m *UpdateUserCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUserCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUserCommand) UnmarshalBinary(b []byte) error {
	var res UpdateUserCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
