// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUserCommand update user command
//
// swagger:model UpdateUserCommand
type UpdateUserCommand struct {

	// disable
	Disable bool `json:"disable"`

	// display name
	DisplayName string `json:"displayName"`

	// email
	// Required: true
	// Max Length: 200
	// Min Length: 3
	// Format: email
	Email *strfmt.Email `json:"email"`

	// force to reset password
	ForceToResetPassword bool `json:"forceToResetPassword"`

	// id
	// Required: true
	// Max Length: 200
	// Min Length: 3
	ID *string `json:"id"`

	// is approved by partner
	IsApprovedByPartner bool `json:"isApprovedByPartner"`

	// role
	Role UserRole `json:"role,omitempty"`

	// username
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Username *string `json:"username"`
}

// Validate validates this update user command
func (m *UpdateUserCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserCommand) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MinLength("email", "body", m.Email.String(), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", m.Email.String(), 200); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserCommand) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID, 200); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserCommand) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *UpdateUserCommand) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 30); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update user command based on the context it is used
func (m *UpdateUserCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserCommand) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUserCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUserCommand) UnmarshalBinary(b []byte) error {
	var res UpdateUserCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
