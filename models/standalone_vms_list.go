// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandaloneVmsList standalone vms list
//
// swagger:model StandaloneVmsList
type StandaloneVmsList struct {

	// data
	Data []*StandaloneVmsListDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this standalone vms list
func (m *StandaloneVmsList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsList) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this standalone vms list based on the context it is used
func (m *StandaloneVmsList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsList) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVmsList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVmsList) UnmarshalBinary(b []byte) error {
	var res StandaloneVmsList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StandaloneVmsListDataItems0 standalone vms list data items0
//
// swagger:model StandaloneVmsListDataItems0
type StandaloneVmsListDataItems0 struct {

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// flavor Id
	FlavorID string `json:"flavorId,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// is windows
	IsWindows bool `json:"isWindows"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// ram
	RAM int64 `json:"ram,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// stand alone profile
	StandAloneProfile *StandaloneVmsListDataItems0StandAloneProfile `json:"standAloneProfile,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// volume size
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this standalone vms list data items0
func (m *StandaloneVmsListDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStandAloneProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListDataItems0) validateStandAloneProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.StandAloneProfile) { // not required
		return nil
	}

	if m.StandAloneProfile != nil {
		if err := m.StandAloneProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standalone vms list data items0 based on the context it is used
func (m *StandaloneVmsListDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandAloneProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListDataItems0) contextValidateStandAloneProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.StandAloneProfile != nil {
		if err := m.StandAloneProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standAloneProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standAloneProfile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0) UnmarshalBinary(b []byte) error {
	var res StandaloneVmsListDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StandaloneVmsListDataItems0StandAloneProfile standalone vms list data items0 stand alone profile
//
// swagger:model StandaloneVmsListDataItems0StandAloneProfile
type StandaloneVmsListDataItems0StandAloneProfile struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// stand alone profile security groups
	StandAloneProfileSecurityGroups []*StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 `json:"standAloneProfileSecurityGroups"`
}

// Validate validates this standalone vms list data items0 stand alone profile
func (m *StandaloneVmsListDataItems0StandAloneProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStandAloneProfileSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListDataItems0StandAloneProfile) validateStandAloneProfileSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.StandAloneProfileSecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.StandAloneProfileSecurityGroups); i++ {
		if swag.IsZero(m.StandAloneProfileSecurityGroups[i]) { // not required
			continue
		}

		if m.StandAloneProfileSecurityGroups[i] != nil {
			if err := m.StandAloneProfileSecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this standalone vms list data items0 stand alone profile based on the context it is used
func (m *StandaloneVmsListDataItems0StandAloneProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandAloneProfileSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandaloneVmsListDataItems0StandAloneProfile) contextValidateStandAloneProfileSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandAloneProfileSecurityGroups); i++ {

		if m.StandAloneProfileSecurityGroups[i] != nil {
			if err := m.StandAloneProfileSecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneProfile" + "." + "standAloneProfileSecurityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0StandAloneProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0StandAloneProfile) UnmarshalBinary(b []byte) error {
	var res StandaloneVmsListDataItems0StandAloneProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 standalone vms list data items0 stand alone profile stand alone profile security groups items0
//
// swagger:model StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
type StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port max range
	PortMaxRange int32 `json:"portMaxRange,omitempty"`

	// port min range
	PortMinRange int32 `json:"portMinRange,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// remote Ip prefix
	RemoteIPPrefix string `json:"remoteIpPrefix,omitempty"`
}

// Validate validates this standalone vms list data items0 stand alone profile stand alone profile security groups items0
func (m *StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this standalone vms list data items0 stand alone profile stand alone profile security groups items0 based on context it is used
func (m *StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res StandaloneVmsListDataItems0StandAloneProfileStandAloneProfileSecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
