// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageListCommand storage list command
//
// swagger:model StorageListCommand
type StorageListCommand struct {

	// token Id
	// Required: true
	// Min Length: 1
	TokenID *string `json:"tokenId"`

	// token secret
	// Required: true
	// Min Length: 1
	TokenSecret *string `json:"tokenSecret"`

	// url
	// Required: true
	// Min Length: 1
	URL *string `json:"url"`
}

// Validate validates this storage list command
func (m *StorageListCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageListCommand) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("tokenId", "body", m.TokenID); err != nil {
		return err
	}

	if err := validate.MinLength("tokenId", "body", *m.TokenID, 1); err != nil {
		return err
	}

	return nil
}

func (m *StorageListCommand) validateTokenSecret(formats strfmt.Registry) error {

	if err := validate.Required("tokenSecret", "body", m.TokenSecret); err != nil {
		return err
	}

	if err := validate.MinLength("tokenSecret", "body", *m.TokenSecret, 1); err != nil {
		return err
	}

	return nil
}

func (m *StorageListCommand) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", *m.URL, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage list command based on context it is used
func (m *StorageListCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageListCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageListCommand) UnmarshalBinary(b []byte) error {
	var res StorageListCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
