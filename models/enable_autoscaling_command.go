// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnableAutoscalingCommand enable autoscaling command
//
// swagger:model EnableAutoscalingCommand
type EnableAutoscalingCommand struct {

	// autoscaling group name
	// Required: true
	// Min Length: 1
	AutoscalingGroupName *string `json:"autoscalingGroupName"`

	// disk size
	// Maximum: 8.796093022209e+12
	// Minimum: 3.2212254719e+10
	DiskSize float64 `json:"diskSize,omitempty"`

	// flavor
	// Required: true
	// Min Length: 1
	Flavor *string `json:"flavor"`

	// id
	// Required: true
	// Minimum: > 0
	ID *int32 `json:"id"`

	// max size
	// Maximum: 100
	// Minimum: 0
	MaxSize *int32 `json:"maxSize,omitempty"`

	// min size
	// Maximum: 100
	// Minimum: 0
	MinSize *int32 `json:"minSize,omitempty"`

	// spot enabled
	SpotEnabled bool `json:"spotEnabled"`
}

// Validate validates this enable autoscaling command
func (m *EnableAutoscalingCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoscalingGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlavor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnableAutoscalingCommand) validateAutoscalingGroupName(formats strfmt.Registry) error {

	if err := validate.Required("autoscalingGroupName", "body", m.AutoscalingGroupName); err != nil {
		return err
	}

	if err := validate.MinLength("autoscalingGroupName", "body", *m.AutoscalingGroupName, 1); err != nil {
		return err
	}

	return nil
}

func (m *EnableAutoscalingCommand) validateDiskSize(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskSize) { // not required
		return nil
	}

	if err := validate.Minimum("diskSize", "body", m.DiskSize, 3.2212254719e+10, false); err != nil {
		return err
	}

	if err := validate.Maximum("diskSize", "body", m.DiskSize, 8.796093022209e+12, false); err != nil {
		return err
	}

	return nil
}

func (m *EnableAutoscalingCommand) validateFlavor(formats strfmt.Registry) error {

	if err := validate.Required("flavor", "body", m.Flavor); err != nil {
		return err
	}

	if err := validate.MinLength("flavor", "body", *m.Flavor, 1); err != nil {
		return err
	}

	return nil
}

func (m *EnableAutoscalingCommand) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *EnableAutoscalingCommand) validateMaxSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxSize", "body", int64(*m.MaxSize), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maxSize", "body", int64(*m.MaxSize), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *EnableAutoscalingCommand) validateMinSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MinSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("minSize", "body", int64(*m.MinSize), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("minSize", "body", int64(*m.MinSize), 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this enable autoscaling command based on context it is used
func (m *EnableAutoscalingCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnableAutoscalingCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnableAutoscalingCommand) UnmarshalBinary(b []byte) error {
	var res EnableAutoscalingCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
