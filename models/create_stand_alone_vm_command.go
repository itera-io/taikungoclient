// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateStandAloneVMCommand create stand alone Vm command
//
// swagger:model CreateStandAloneVmCommand
type CreateStandAloneVMCommand struct {

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// cloud init
	CloudInit string `json:"cloudInit,omitempty"`

	// count
	// Maximum: 50
	// Minimum: 1
	Count int32 `json:"count,omitempty"`

	// flavor name
	// Required: true
	// Min Length: 1
	FlavorName *string `json:"flavorName"`

	// hypervisor
	Hypervisor string `json:"hypervisor,omitempty"`

	// image
	// Required: true
	// Min Length: 1
	Image *string `json:"image"`

	// name
	// Required: true
	// Max Length: 52
	// Min Length: 1
	Name *string `json:"name"`

	// password
	Password string `json:"password,omitempty"`

	// project Id
	// Required: true
	// Minimum: > 0
	ProjectID *int32 `json:"projectId"`

	// public Ip enabled
	PublicIPEnabled bool `json:"publicIpEnabled"`

	// spot instance
	SpotInstance bool `json:"spotInstance"`

	// spot price
	SpotPrice float64 `json:"spotPrice,omitempty"`

	// stand alone meta datas
	StandAloneMetaDatas []*StandAloneMetaDataDto `json:"standAloneMetaDatas"`

	// stand alone profile Id
	// Required: true
	// Minimum: > 0
	StandAloneProfileID *int32 `json:"standAloneProfileId"`

	// stand alone Vm disks
	StandAloneVMDisks []*StandAloneVMDiskDto `json:"standAloneVmDisks"`

	// username
	Username string `json:"username,omitempty"`

	// volume size
	// Maximum: 8192
	// Minimum: 1
	VolumeSize int64 `json:"volumeSize,omitempty"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this create stand alone Vm command
func (m *CreateStandAloneVMCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlavorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandAloneMetaDatas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandAloneProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandAloneVMDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateStandAloneVMCommand) validateCount(formats strfmt.Registry) error {
	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("count", "body", int64(m.Count), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("count", "body", int64(m.Count), 50, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateFlavorName(formats strfmt.Registry) error {

	if err := validate.Required("flavorName", "body", m.FlavorName); err != nil {
		return err
	}

	if err := validate.MinLength("flavorName", "body", *m.FlavorName, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	if err := validate.MinLength("image", "body", *m.Image, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 52); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MinimumInt("projectId", "body", int64(*m.ProjectID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateStandAloneMetaDatas(formats strfmt.Registry) error {
	if swag.IsZero(m.StandAloneMetaDatas) { // not required
		return nil
	}

	for i := 0; i < len(m.StandAloneMetaDatas); i++ {
		if swag.IsZero(m.StandAloneMetaDatas[i]) { // not required
			continue
		}

		if m.StandAloneMetaDatas[i] != nil {
			if err := m.StandAloneMetaDatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateStandAloneProfileID(formats strfmt.Registry) error {

	if err := validate.Required("standAloneProfileId", "body", m.StandAloneProfileID); err != nil {
		return err
	}

	if err := validate.MinimumInt("standAloneProfileId", "body", int64(*m.StandAloneProfileID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateStandAloneVMDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.StandAloneVMDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.StandAloneVMDisks); i++ {
		if swag.IsZero(m.StandAloneVMDisks[i]) { // not required
			continue
		}

		if m.StandAloneVMDisks[i] != nil {
			if err := m.StandAloneVMDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateStandAloneVMCommand) validateVolumeSize(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("volumeSize", "body", m.VolumeSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("volumeSize", "body", m.VolumeSize, 8192, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create stand alone Vm command based on the context it is used
func (m *CreateStandAloneVMCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandAloneMetaDatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandAloneVMDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateStandAloneVMCommand) contextValidateStandAloneMetaDatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandAloneMetaDatas); i++ {

		if m.StandAloneMetaDatas[i] != nil {
			if err := m.StandAloneMetaDatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneMetaDatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateStandAloneVMCommand) contextValidateStandAloneVMDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandAloneVMDisks); i++ {

		if m.StandAloneVMDisks[i] != nil {
			if err := m.StandAloneVMDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standAloneVmDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateStandAloneVMCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateStandAloneVMCommand) UnmarshalBinary(b []byte) error {
	var res CreateStandAloneVMCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
