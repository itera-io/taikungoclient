// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectChartDto project chart dto
//
// swagger:model ProjectChartDto
type ProjectChartDto struct {

	// failed
	Failed []*ProjectCommonRecordDto `json:"failed"`

	// pending
	Pending []*ProjectCommonRecordDto `json:"pending"`

	// succeeded
	Succeeded []*ProjectCommonRecordDto `json:"succeeded"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`

	// updating
	Updating []*ProjectCommonRecordDto `json:"updating"`
}

// Validate validates this project chart dto
func (m *ProjectChartDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSucceeded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdating(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectChartDto) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	for i := 0; i < len(m.Failed); i++ {
		if swag.IsZero(m.Failed[i]) { // not required
			continue
		}

		if m.Failed[i] != nil {
			if err := m.Failed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) validatePending(formats strfmt.Registry) error {
	if swag.IsZero(m.Pending) { // not required
		return nil
	}

	for i := 0; i < len(m.Pending); i++ {
		if swag.IsZero(m.Pending[i]) { // not required
			continue
		}

		if m.Pending[i] != nil {
			if err := m.Pending[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) validateSucceeded(formats strfmt.Registry) error {
	if swag.IsZero(m.Succeeded) { // not required
		return nil
	}

	for i := 0; i < len(m.Succeeded); i++ {
		if swag.IsZero(m.Succeeded[i]) { // not required
			continue
		}

		if m.Succeeded[i] != nil {
			if err := m.Succeeded[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("succeeded" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("succeeded" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) validateUpdating(formats strfmt.Registry) error {
	if swag.IsZero(m.Updating) { // not required
		return nil
	}

	for i := 0; i < len(m.Updating); i++ {
		if swag.IsZero(m.Updating[i]) { // not required
			continue
		}

		if m.Updating[i] != nil {
			if err := m.Updating[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updating" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updating" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project chart dto based on the context it is used
func (m *ProjectChartDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSucceeded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdating(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectChartDto) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failed); i++ {

		if m.Failed[i] != nil {
			if err := m.Failed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) contextValidatePending(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pending); i++ {

		if m.Pending[i] != nil {
			if err := m.Pending[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pending" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) contextValidateSucceeded(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Succeeded); i++ {

		if m.Succeeded[i] != nil {
			if err := m.Succeeded[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("succeeded" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("succeeded" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectChartDto) contextValidateUpdating(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Updating); i++ {

		if m.Updating[i] != nil {
			if err := m.Updating[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updating" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updating" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectChartDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectChartDto) UnmarshalBinary(b []byte) error {
	var res ProjectChartDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
