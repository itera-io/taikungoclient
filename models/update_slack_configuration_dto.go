// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSlackConfigurationDto update slack configuration dto
//
// swagger:model UpdateSlackConfigurationDto
type UpdateSlackConfigurationDto struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// slack type
	// Enum: [100 200]
	SlackType int32 `json:"slackType,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this update slack configuration dto
func (m *UpdateSlackConfigurationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSlackType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateSlackConfigurationDtoTypeSlackTypePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[100,200]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSlackConfigurationDtoTypeSlackTypePropEnum = append(updateSlackConfigurationDtoTypeSlackTypePropEnum, v)
	}
}

// prop value enum
func (m *UpdateSlackConfigurationDto) validateSlackTypeEnum(path, location string, value int32) error {
	if err := validate.EnumCase(path, location, value, updateSlackConfigurationDtoTypeSlackTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateSlackConfigurationDto) validateSlackType(formats strfmt.Registry) error {
	if swag.IsZero(m.SlackType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSlackTypeEnum("slackType", "body", m.SlackType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update slack configuration dto based on context it is used
func (m *UpdateSlackConfigurationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSlackConfigurationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSlackConfigurationDto) UnmarshalBinary(b []byte) error {
	var res UpdateSlackConfigurationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
