// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectFullListDto project full list dto
//
// swagger:model ProjectFullListDto
type ProjectFullListDto struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// access profiles
	AccessProfiles *AccessProfilesForProjectListDto `json:"accessProfiles,omitempty"`

	// cloud credential name
	CloudCredentialName string `json:"cloudCredentialName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// health
	Health string `json:"health,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade,omitempty"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled,omitempty"`

	// is delete cluster
	IsDeleteCluster bool `json:"isDeleteCluster,omitempty"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked,omitempty"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled,omitempty"`

	// job Url
	JobURL string `json:"jobUrl,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// standalone vms
	StandaloneVms []*StandAloneVMFullDto `json:"standaloneVms"`

	// status
	Status string `json:"status,omitempty"`

	// taikun private SSH key
	TaikunPrivateSSHKey string `json:"taikunPrivateSSHKey,omitempty"`

	// taikun public SSH key
	TaikunPublicSSHKey string `json:"taikunPublicSSHKey,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this project full list dto
func (m *ProjectFullListDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFullListDto) validateAccessProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessProfiles) { // not required
		return nil
	}

	if m.AccessProfiles != nil {
		if err := m.AccessProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectFullListDto) validateStandaloneVms(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneVms) { // not required
		return nil
	}

	for i := 0; i < len(m.StandaloneVms); i++ {
		if swag.IsZero(m.StandaloneVms[i]) { // not required
			continue
		}

		if m.StandaloneVms[i] != nil {
			if err := m.StandaloneVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectFullListDto) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project full list dto based on the context it is used
func (m *ProjectFullListDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFullListDto) contextValidateAccessProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessProfiles != nil {
		if err := m.AccessProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectFullListDto) contextValidateStandaloneVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandaloneVms); i++ {

		if m.StandaloneVms[i] != nil {
			if err := m.StandaloneVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectFullListDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectFullListDto) UnmarshalBinary(b []byte) error {
	var res ProjectFullListDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
