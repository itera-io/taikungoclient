// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UsersList users list
//
// swagger:model UsersList
type UsersList struct {

	// data
	Data []*UsersListDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this users list
func (m *UsersList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsersList) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this users list based on the context it is used
func (m *UsersList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsersList) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UsersList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsersList) UnmarshalBinary(b []byte) error {
	var res UsersList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UsersListDataItems0 users list data items0
//
// swagger:model UsersListDataItems0
type UsersListDataItems0 struct {

	// bound projects
	BoundProjects []*UsersListDataItems0BoundProjectsItems0 `json:"boundProjects"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// customer Id
	CustomerID string `json:"customerId,omitempty"`

	// demo mode enabled
	DemoModeEnabled bool `json:"demoModeEnabled"`

	// display name
	DisplayName string `json:"displayName"`

	// email
	Email string `json:"email,omitempty"`

	// has repo
	HasRepo bool `json:"hasRepo"`

	// id
	ID string `json:"id,omitempty"`

	// is approved by partner
	IsApprovedByPartner bool `json:"isApprovedByPartner"`

	// is csm
	IsCsm bool `json:"isCsm"`

	// is eligible update subscription
	IsEligibleUpdateSubscription bool `json:"isEligibleUpdateSubscription"`

	// is email confirmed
	IsEmailConfirmed bool `json:"isEmailConfirmed"`

	// is email notification enabled
	IsEmailNotificationEnabled bool `json:"isEmailNotificationEnabled"`

	// is forced to reset password
	IsForcedToResetPassword bool `json:"isForcedToResetPassword"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is read only
	IsReadOnly bool `json:"isReadOnly"`

	// last login at
	LastLoginAt string `json:"lastLoginAt,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// owner
	Owner bool `json:"owner"`

	// partner
	Partner *UsersListDataItems0Partner `json:"partner,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this users list data items0
func (m *UsersListDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoundProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsersListDataItems0) validateBoundProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.BoundProjects) { // not required
		return nil
	}

	for i := 0; i < len(m.BoundProjects); i++ {
		if swag.IsZero(m.BoundProjects[i]) { // not required
			continue
		}

		if m.BoundProjects[i] != nil {
			if err := m.BoundProjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UsersListDataItems0) validatePartner(formats strfmt.Registry) error {
	if swag.IsZero(m.Partner) { // not required
		return nil
	}

	if m.Partner != nil {
		if err := m.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this users list data items0 based on the context it is used
func (m *UsersListDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoundProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UsersListDataItems0) contextValidateBoundProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BoundProjects); i++ {

		if m.BoundProjects[i] != nil {
			if err := m.BoundProjects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundProjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UsersListDataItems0) contextValidatePartner(ctx context.Context, formats strfmt.Registry) error {

	if m.Partner != nil {
		if err := m.Partner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UsersListDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsersListDataItems0) UnmarshalBinary(b []byte) error {
	var res UsersListDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UsersListDataItems0BoundProjectsItems0 users list data items0 bound projects items0
//
// swagger:model UsersListDataItems0BoundProjectsItems0
type UsersListDataItems0BoundProjectsItems0 struct {

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this users list data items0 bound projects items0
func (m *UsersListDataItems0BoundProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users list data items0 bound projects items0 based on context it is used
func (m *UsersListDataItems0BoundProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UsersListDataItems0BoundProjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsersListDataItems0BoundProjectsItems0) UnmarshalBinary(b []byte) error {
	var res UsersListDataItems0BoundProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UsersListDataItems0Partner users list data items0 partner
//
// swagger:model UsersListDataItems0Partner
type UsersListDataItems0Partner struct {

	// id
	ID int32 `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this users list data items0 partner
func (m *UsersListDataItems0Partner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this users list data items0 partner based on context it is used
func (m *UsersListDataItems0Partner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UsersListDataItems0Partner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UsersListDataItems0Partner) UnmarshalBinary(b []byte) error {
	var res UsersListDataItems0Partner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
