// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectListForAlert project list for alert
//
// swagger:model ProjectListForAlert
type ProjectListForAlert struct {

	// has kube config file
	HasKubeConfigFile bool `json:"hasKubeConfigFile"`

	// health
	Health string `json:"health,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// kubernetes alerts
	KubernetesAlerts []*KubernetesAlertDto `json:"kubernetesAlerts"`

	// monitoring credentials
	MonitoringCredentials []*MonitoringCredentialsListDto `json:"monitoringCredentials"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this project list for alert
func (m *ProjectListForAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForAlert) validateKubernetesAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesAlerts) { // not required
		return nil
	}

	for i := 0; i < len(m.KubernetesAlerts); i++ {
		if swag.IsZero(m.KubernetesAlerts[i]) { // not required
			continue
		}

		if m.KubernetesAlerts[i] != nil {
			if err := m.KubernetesAlerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForAlert) validateMonitoringCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitoringCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.MonitoringCredentials); i++ {
		if swag.IsZero(m.MonitoringCredentials[i]) { // not required
			continue
		}

		if m.MonitoringCredentials[i] != nil {
			if err := m.MonitoringCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("monitoringCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("monitoringCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project list for alert based on the context it is used
func (m *ProjectListForAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubernetesAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitoringCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForAlert) contextValidateKubernetesAlerts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KubernetesAlerts); i++ {

		if m.KubernetesAlerts[i] != nil {
			if err := m.KubernetesAlerts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForAlert) contextValidateMonitoringCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MonitoringCredentials); i++ {

		if m.MonitoringCredentials[i] != nil {
			if err := m.MonitoringCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("monitoringCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("monitoringCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForAlert) UnmarshalBinary(b []byte) error {
	var res ProjectListForAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
