// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AvailablePackagesDto available packages dto
//
// swagger:model AvailablePackagesDto
type AvailablePackagesDto struct {

	// app version
	AppVersion string `json:"appVersion,omitempty"`

	// catalog app Id
	CatalogAppID int32 `json:"catalogAppId,omitempty"`

	// deprecated
	Deprecated bool `json:"deprecated"`

	// description
	Description string `json:"description,omitempty"`

	// logo image Id
	LogoImageID string `json:"logoImageId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// normalized name
	NormalizedName string `json:"normalizedName,omitempty"`

	// package Id
	PackageID string `json:"packageId,omitempty"`

	// repository
	Repository *Repository `json:"repository,omitempty"`

	// security report summary
	SecurityReportSummary *SecurityReportSummary `json:"securityReportSummary,omitempty"`

	// signed
	Signed bool `json:"signed"`

	// stars
	Stars int64 `json:"stars,omitempty"`

	// ts
	Ts string `json:"ts,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this available packages dto
func (m *AvailablePackagesDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityReportSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailablePackagesDto) validateRepository(formats strfmt.Registry) error {
	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *AvailablePackagesDto) validateSecurityReportSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityReportSummary) { // not required
		return nil
	}

	if m.SecurityReportSummary != nil {
		if err := m.SecurityReportSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReportSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReportSummary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this available packages dto based on the context it is used
func (m *AvailablePackagesDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityReportSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailablePackagesDto) contextValidateRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.Repository != nil {
		if err := m.Repository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *AvailablePackagesDto) contextValidateSecurityReportSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityReportSummary != nil {
		if err := m.SecurityReportSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReportSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReportSummary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailablePackagesDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailablePackagesDto) UnmarshalBinary(b []byte) error {
	var res AvailablePackagesDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
