// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplyTicketCommand reply ticket command
//
// swagger:model ReplyTicketCommand
type ReplyTicketCommand struct {

	// body
	// Required: true
	// Max Length: 2000
	// Min Length: 3
	Body *string `json:"body"`

	// ticket Id
	// Required: true
	// Min Length: 1
	TicketID *string `json:"ticketId"`
}

// Validate validates this reply ticket command
func (m *ReplyTicketCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplyTicketCommand) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if err := validate.MinLength("body", "body", *m.Body, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body", "body", *m.Body, 2000); err != nil {
		return err
	}

	return nil
}

func (m *ReplyTicketCommand) validateTicketID(formats strfmt.Registry) error {

	if err := validate.Required("ticketId", "body", m.TicketID); err != nil {
		return err
	}

	if err := validate.MinLength("ticketId", "body", *m.TicketID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this reply ticket command based on context it is used
func (m *ReplyTicketCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReplyTicketCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplyTicketCommand) UnmarshalBinary(b []byte) error {
	var res ReplyTicketCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
