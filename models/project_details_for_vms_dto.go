// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectDetailsForVmsDto project details for vms dto
//
// swagger:model ProjectDetailsForVmsDto
type ProjectDetailsForVmsDto struct {

	// allow full spot kubernetes
	AllowFullSpotKubernetes bool `json:"allowFullSpotKubernetes"`

	// allow spot v ms
	AllowSpotVMs bool `json:"allowSpotVMs"`

	// allow spot workers
	AllowSpotWorkers bool `json:"allowSpotWorkers"`

	// availability zones
	AvailabilityZones []string `json:"availabilityZones"`

	// cloud credential revision
	CloudCredentialRevision int32 `json:"cloudCredentialRevision,omitempty"`

	// cloud Id
	CloudID int32 `json:"cloudId,omitempty"`

	// cloud name
	CloudName string `json:"cloudName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// has selected flavors
	HasSelectedFlavors bool `json:"hasSelectedFlavors"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is maintenance mode enabled
	IsMaintenanceModeEnabled bool `json:"isMaintenanceModeEnabled"`

	// max spot price
	MaxSpotPrice float64 `json:"maxSpotPrice,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// project cloud revision
	ProjectCloudRevision int32 `json:"projectCloudRevision,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project status
	ProjectStatus string `json:"projectStatus,omitempty"`

	// total hourly cost
	TotalHourlyCost float64 `json:"totalHourlyCost,omitempty"`
}

// Validate validates this project details for vms dto
func (m *ProjectDetailsForVmsDto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project details for vms dto based on context it is used
func (m *ProjectDetailsForVmsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectDetailsForVmsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectDetailsForVmsDto) UnmarshalBinary(b []byte) error {
	var res ProjectDetailsForVmsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
