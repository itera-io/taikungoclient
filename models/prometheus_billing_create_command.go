// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrometheusBillingCreateCommand prometheus billing create command
//
// swagger:model PrometheusBillingCreateCommand
type PrometheusBillingCreateCommand struct {

	// organization Id
	// Required: true
	// Minimum: > 0
	OrganizationID *int32 `json:"organizationId"`

	// price
	// Maximum: 3e+09
	// Minimum: 1e-12
	Price float64 `json:"price,omitempty"`

	// prometheus rule Id
	// Required: true
	// Minimum: > 0
	PrometheusRuleID *int32 `json:"prometheusRuleId"`

	// start date
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate,omitempty"`
}

// Validate validates this prometheus billing create command
func (m *PrometheusBillingCreateCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusBillingCreateCommand) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	if err := validate.MinimumInt("organizationId", "body", int64(*m.OrganizationID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusBillingCreateCommand) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := validate.Minimum("price", "body", m.Price, 1e-12, false); err != nil {
		return err
	}

	if err := validate.Maximum("price", "body", m.Price, 3e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusBillingCreateCommand) validatePrometheusRuleID(formats strfmt.Registry) error {

	if err := validate.Required("prometheusRuleId", "body", m.PrometheusRuleID); err != nil {
		return err
	}

	if err := validate.MinimumInt("prometheusRuleId", "body", int64(*m.PrometheusRuleID), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *PrometheusBillingCreateCommand) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this prometheus billing create command based on context it is used
func (m *PrometheusBillingCreateCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusBillingCreateCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusBillingCreateCommand) UnmarshalBinary(b []byte) error {
	var res PrometheusBillingCreateCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
