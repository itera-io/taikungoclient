// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateSlackConfigurationCommand create slack configuration command
//
// swagger:model CreateSlackConfigurationCommand
type CreateSlackConfigurationCommand struct {

	// channel
	Channel string `json:"channel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// slack type
	SlackType SlackType `json:"slackType,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create slack configuration command
func (m *CreateSlackConfigurationCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSlackType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSlackConfigurationCommand) validateSlackType(formats strfmt.Registry) error {
	if swag.IsZero(m.SlackType) { // not required
		return nil
	}

	if err := m.SlackType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("slackType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("slackType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this create slack configuration command based on the context it is used
func (m *CreateSlackConfigurationCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSlackType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSlackConfigurationCommand) contextValidateSlackType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SlackType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("slackType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("slackType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSlackConfigurationCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSlackConfigurationCommand) UnmarshalBinary(b []byte) error {
	var res CreateSlackConfigurationCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
