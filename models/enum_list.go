// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnumList enum list
//
// swagger:model EnumList
type EnumList struct {

	// alert types
	AlertTypes []*EnumListAlertTypesItems0 `json:"alertTypes"`

	// alerting integration types
	AlertingIntegrationTypes []*EnumListAlertingIntegrationTypesItems0 `json:"alertingIntegrationTypes"`

	// audit logs
	AuditLogs []*EnumListAuditLogsItems0 `json:"auditLogs"`

	// availability
	Availability []*EnumListAvailabilityItems0 `json:"availability"`

	// aws platforms
	AwsPlatforms []*EnumListAwsPlatformsItems0 `json:"awsPlatforms"`

	// azure quotas
	AzureQuotas []*EnumListAzureQuotasItems0 `json:"azureQuotas"`

	// cloud types
	CloudTypes []*EnumListCloudTypesItems0 `json:"cloudTypes"`

	// cron periods
	CronPeriods []*EnumListCronPeriodsItems0 `json:"cronPeriods"`

	// google image types
	GoogleImageTypes []*EnumListGoogleImageTypesItems0 `json:"googleImageTypes"`

	// openstack continents
	OpenstackContinents []*EnumListOpenstackContinentsItems0 `json:"openstackContinents"`

	// project statuses
	ProjectStatuses []*EnumListProjectStatusesItems0 `json:"projectStatuses"`

	// prometheus types
	PrometheusTypes []*EnumListPrometheusTypesItems0 `json:"prometheusTypes"`

	// reboot options
	RebootOptions []*EnumListRebootOptionsItems0 `json:"rebootOptions"`

	// reminder types
	ReminderTypes []*EnumListReminderTypesItems0 `json:"reminderTypes"`

	// request logs
	RequestLogs []*EnumListRequestLogsItems0 `json:"requestLogs"`

	// security group rules
	SecurityGroupRules []*EnumListSecurityGroupRulesItems0 `json:"securityGroupRules"`

	// server roles
	ServerRoles []*EnumListServerRolesItems0 `json:"serverRoles"`

	// server statuses
	ServerStatuses []*EnumListServerStatusesItems0 `json:"serverStatuses"`

	// showback kinds
	ShowbackKinds []*EnumListShowbackKindsItems0 `json:"showbackKinds"`

	// slack types
	SlackTypes []*EnumListSlackTypesItems0 `json:"slackTypes"`

	// standalone Vm statuses
	StandaloneVMStatuses []*EnumListStandaloneVMStatusesItems0 `json:"standaloneVmStatuses"`

	// user roles
	UserRoles []*EnumListUserRolesItems0 `json:"userRoles"`

	// validity periods
	ValidityPeriods []*EnumListValidityPeriodsItems0 `json:"validityPeriods"`
}

// Validate validates this enum list
func (m *EnumList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertingIntegrationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsPlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureQuotas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCronPeriods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogleImageTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenstackContinents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebootOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReminderTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShowbackKinds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlackTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneVMStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnumList) validateAlertTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertTypes); i++ {
		if swag.IsZero(m.AlertTypes[i]) { // not required
			continue
		}

		if m.AlertTypes[i] != nil {
			if err := m.AlertTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateAlertingIntegrationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertingIntegrationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertingIntegrationTypes); i++ {
		if swag.IsZero(m.AlertingIntegrationTypes[i]) { // not required
			continue
		}

		if m.AlertingIntegrationTypes[i] != nil {
			if err := m.AlertingIntegrationTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertingIntegrationTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertingIntegrationTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateAvailability(formats strfmt.Registry) error {
	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	for i := 0; i < len(m.Availability); i++ {
		if swag.IsZero(m.Availability[i]) { // not required
			continue
		}

		if m.Availability[i] != nil {
			if err := m.Availability[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateAwsPlatforms(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsPlatforms) { // not required
		return nil
	}

	for i := 0; i < len(m.AwsPlatforms); i++ {
		if swag.IsZero(m.AwsPlatforms[i]) { // not required
			continue
		}

		if m.AwsPlatforms[i] != nil {
			if err := m.AwsPlatforms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsPlatforms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsPlatforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateAzureQuotas(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureQuotas) { // not required
		return nil
	}

	for i := 0; i < len(m.AzureQuotas); i++ {
		if swag.IsZero(m.AzureQuotas[i]) { // not required
			continue
		}

		if m.AzureQuotas[i] != nil {
			if err := m.AzureQuotas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureQuotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureQuotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateCloudTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudTypes); i++ {
		if swag.IsZero(m.CloudTypes[i]) { // not required
			continue
		}

		if m.CloudTypes[i] != nil {
			if err := m.CloudTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateCronPeriods(formats strfmt.Registry) error {
	if swag.IsZero(m.CronPeriods) { // not required
		return nil
	}

	for i := 0; i < len(m.CronPeriods); i++ {
		if swag.IsZero(m.CronPeriods[i]) { // not required
			continue
		}

		if m.CronPeriods[i] != nil {
			if err := m.CronPeriods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cronPeriods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cronPeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateGoogleImageTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GoogleImageTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.GoogleImageTypes); i++ {
		if swag.IsZero(m.GoogleImageTypes[i]) { // not required
			continue
		}

		if m.GoogleImageTypes[i] != nil {
			if err := m.GoogleImageTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("googleImageTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("googleImageTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateOpenstackContinents(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenstackContinents) { // not required
		return nil
	}

	for i := 0; i < len(m.OpenstackContinents); i++ {
		if swag.IsZero(m.OpenstackContinents[i]) { // not required
			continue
		}

		if m.OpenstackContinents[i] != nil {
			if err := m.OpenstackContinents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openstackContinents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("openstackContinents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateProjectStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectStatuses); i++ {
		if swag.IsZero(m.ProjectStatuses[i]) { // not required
			continue
		}

		if m.ProjectStatuses[i] != nil {
			if err := m.ProjectStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validatePrometheusTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.PrometheusTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.PrometheusTypes); i++ {
		if swag.IsZero(m.PrometheusTypes[i]) { // not required
			continue
		}

		if m.PrometheusTypes[i] != nil {
			if err := m.PrometheusTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prometheusTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prometheusTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateRebootOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.RebootOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.RebootOptions); i++ {
		if swag.IsZero(m.RebootOptions[i]) { // not required
			continue
		}

		if m.RebootOptions[i] != nil {
			if err := m.RebootOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rebootOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rebootOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateReminderTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ReminderTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ReminderTypes); i++ {
		if swag.IsZero(m.ReminderTypes[i]) { // not required
			continue
		}

		if m.ReminderTypes[i] != nil {
			if err := m.ReminderTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reminderTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reminderTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateRequestLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestLogs); i++ {
		if swag.IsZero(m.RequestLogs[i]) { // not required
			continue
		}

		if m.RequestLogs[i] != nil {
			if err := m.RequestLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateSecurityGroupRules(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroupRules) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroupRules); i++ {
		if swag.IsZero(m.SecurityGroupRules[i]) { // not required
			continue
		}

		if m.SecurityGroupRules[i] != nil {
			if err := m.SecurityGroupRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityGroupRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityGroupRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateServerRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.ServerRoles); i++ {
		if swag.IsZero(m.ServerRoles[i]) { // not required
			continue
		}

		if m.ServerRoles[i] != nil {
			if err := m.ServerRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateServerStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.ServerStatuses); i++ {
		if swag.IsZero(m.ServerStatuses[i]) { // not required
			continue
		}

		if m.ServerStatuses[i] != nil {
			if err := m.ServerStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateShowbackKinds(formats strfmt.Registry) error {
	if swag.IsZero(m.ShowbackKinds) { // not required
		return nil
	}

	for i := 0; i < len(m.ShowbackKinds); i++ {
		if swag.IsZero(m.ShowbackKinds[i]) { // not required
			continue
		}

		if m.ShowbackKinds[i] != nil {
			if err := m.ShowbackKinds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("showbackKinds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("showbackKinds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateSlackTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.SlackTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SlackTypes); i++ {
		if swag.IsZero(m.SlackTypes[i]) { // not required
			continue
		}

		if m.SlackTypes[i] != nil {
			if err := m.SlackTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slackTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slackTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateStandaloneVMStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.StandaloneVMStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.StandaloneVMStatuses); i++ {
		if swag.IsZero(m.StandaloneVMStatuses[i]) { // not required
			continue
		}

		if m.StandaloneVMStatuses[i] != nil {
			if err := m.StandaloneVMStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVmStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneVmStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateUserRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.UserRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.UserRoles); i++ {
		if swag.IsZero(m.UserRoles[i]) { // not required
			continue
		}

		if m.UserRoles[i] != nil {
			if err := m.UserRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) validateValidityPeriods(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidityPeriods) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidityPeriods); i++ {
		if swag.IsZero(m.ValidityPeriods[i]) { // not required
			continue
		}

		if m.ValidityPeriods[i] != nil {
			if err := m.ValidityPeriods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validityPeriods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validityPeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this enum list based on the context it is used
func (m *EnumList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertingIntegrationTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsPlatforms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCronPeriods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGoogleImageTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenstackContinents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrometheusTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRebootOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReminderTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroupRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShowbackKinds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlackTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandaloneVMStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidityPeriods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnumList) contextValidateAlertTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertTypes); i++ {

		if m.AlertTypes[i] != nil {
			if err := m.AlertTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateAlertingIntegrationTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertingIntegrationTypes); i++ {

		if m.AlertingIntegrationTypes[i] != nil {
			if err := m.AlertingIntegrationTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertingIntegrationTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alertingIntegrationTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateAvailability(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Availability); i++ {

		if m.Availability[i] != nil {
			if err := m.Availability[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateAwsPlatforms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AwsPlatforms); i++ {

		if m.AwsPlatforms[i] != nil {
			if err := m.AwsPlatforms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsPlatforms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsPlatforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateAzureQuotas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AzureQuotas); i++ {

		if m.AzureQuotas[i] != nil {
			if err := m.AzureQuotas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureQuotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureQuotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateCloudTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudTypes); i++ {

		if m.CloudTypes[i] != nil {
			if err := m.CloudTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloudTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloudTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateCronPeriods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CronPeriods); i++ {

		if m.CronPeriods[i] != nil {
			if err := m.CronPeriods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cronPeriods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cronPeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateGoogleImageTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GoogleImageTypes); i++ {

		if m.GoogleImageTypes[i] != nil {
			if err := m.GoogleImageTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("googleImageTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("googleImageTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateOpenstackContinents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OpenstackContinents); i++ {

		if m.OpenstackContinents[i] != nil {
			if err := m.OpenstackContinents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openstackContinents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("openstackContinents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateProjectStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProjectStatuses); i++ {

		if m.ProjectStatuses[i] != nil {
			if err := m.ProjectStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projectStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidatePrometheusTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrometheusTypes); i++ {

		if m.PrometheusTypes[i] != nil {
			if err := m.PrometheusTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prometheusTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prometheusTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateRebootOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RebootOptions); i++ {

		if m.RebootOptions[i] != nil {
			if err := m.RebootOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rebootOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rebootOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateReminderTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReminderTypes); i++ {

		if m.ReminderTypes[i] != nil {
			if err := m.ReminderTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reminderTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reminderTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateRequestLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequestLogs); i++ {

		if m.RequestLogs[i] != nil {
			if err := m.RequestLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requestLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requestLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateSecurityGroupRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityGroupRules); i++ {

		if m.SecurityGroupRules[i] != nil {
			if err := m.SecurityGroupRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityGroupRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("securityGroupRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateServerRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServerRoles); i++ {

		if m.ServerRoles[i] != nil {
			if err := m.ServerRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateServerStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServerStatuses); i++ {

		if m.ServerStatuses[i] != nil {
			if err := m.ServerStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serverStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serverStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateShowbackKinds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShowbackKinds); i++ {

		if m.ShowbackKinds[i] != nil {
			if err := m.ShowbackKinds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("showbackKinds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("showbackKinds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateSlackTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SlackTypes); i++ {

		if m.SlackTypes[i] != nil {
			if err := m.SlackTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slackTypes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slackTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateStandaloneVMStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StandaloneVMStatuses); i++ {

		if m.StandaloneVMStatuses[i] != nil {
			if err := m.StandaloneVMStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standaloneVmStatuses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("standaloneVmStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateUserRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserRoles); i++ {

		if m.UserRoles[i] != nil {
			if err := m.UserRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EnumList) contextValidateValidityPeriods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ValidityPeriods); i++ {

		if m.ValidityPeriods[i] != nil {
			if err := m.ValidityPeriods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validityPeriods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validityPeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnumList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumList) UnmarshalBinary(b []byte) error {
	var res EnumList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAlertTypesItems0 enum list alert types items0
//
// swagger:model EnumListAlertTypesItems0
type EnumListAlertTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list alert types items0
func (m *EnumListAlertTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list alert types items0 based on context it is used
func (m *EnumListAlertTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAlertTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAlertTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAlertTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAlertingIntegrationTypesItems0 enum list alerting integration types items0
//
// swagger:model EnumListAlertingIntegrationTypesItems0
type EnumListAlertingIntegrationTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list alerting integration types items0
func (m *EnumListAlertingIntegrationTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list alerting integration types items0 based on context it is used
func (m *EnumListAlertingIntegrationTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAlertingIntegrationTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAlertingIntegrationTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAlertingIntegrationTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAuditLogsItems0 enum list audit logs items0
//
// swagger:model EnumListAuditLogsItems0
type EnumListAuditLogsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list audit logs items0
func (m *EnumListAuditLogsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list audit logs items0 based on context it is used
func (m *EnumListAuditLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAuditLogsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAuditLogsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAuditLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAvailabilityItems0 enum list availability items0
//
// swagger:model EnumListAvailabilityItems0
type EnumListAvailabilityItems0 struct {

	// id
	ID bool `json:"id"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list availability items0
func (m *EnumListAvailabilityItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list availability items0 based on context it is used
func (m *EnumListAvailabilityItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAvailabilityItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAvailabilityItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAvailabilityItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAwsPlatformsItems0 enum list aws platforms items0
//
// swagger:model EnumListAwsPlatformsItems0
type EnumListAwsPlatformsItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list aws platforms items0
func (m *EnumListAwsPlatformsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list aws platforms items0 based on context it is used
func (m *EnumListAwsPlatformsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAwsPlatformsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAwsPlatformsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAwsPlatformsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListAzureQuotasItems0 enum list azure quotas items0
//
// swagger:model EnumListAzureQuotasItems0
type EnumListAzureQuotasItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list azure quotas items0
func (m *EnumListAzureQuotasItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list azure quotas items0 based on context it is used
func (m *EnumListAzureQuotasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListAzureQuotasItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListAzureQuotasItems0) UnmarshalBinary(b []byte) error {
	var res EnumListAzureQuotasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListCloudTypesItems0 enum list cloud types items0
//
// swagger:model EnumListCloudTypesItems0
type EnumListCloudTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list cloud types items0
func (m *EnumListCloudTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list cloud types items0 based on context it is used
func (m *EnumListCloudTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListCloudTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListCloudTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListCloudTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListCronPeriodsItems0 enum list cron periods items0
//
// swagger:model EnumListCronPeriodsItems0
type EnumListCronPeriodsItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list cron periods items0
func (m *EnumListCronPeriodsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list cron periods items0 based on context it is used
func (m *EnumListCronPeriodsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListCronPeriodsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListCronPeriodsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListCronPeriodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListGoogleImageTypesItems0 enum list google image types items0
//
// swagger:model EnumListGoogleImageTypesItems0
type EnumListGoogleImageTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list google image types items0
func (m *EnumListGoogleImageTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list google image types items0 based on context it is used
func (m *EnumListGoogleImageTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListGoogleImageTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListGoogleImageTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListGoogleImageTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListOpenstackContinentsItems0 enum list openstack continents items0
//
// swagger:model EnumListOpenstackContinentsItems0
type EnumListOpenstackContinentsItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list openstack continents items0
func (m *EnumListOpenstackContinentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list openstack continents items0 based on context it is used
func (m *EnumListOpenstackContinentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListOpenstackContinentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListOpenstackContinentsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListOpenstackContinentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListProjectStatusesItems0 enum list project statuses items0
//
// swagger:model EnumListProjectStatusesItems0
type EnumListProjectStatusesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list project statuses items0
func (m *EnumListProjectStatusesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list project statuses items0 based on context it is used
func (m *EnumListProjectStatusesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListProjectStatusesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListProjectStatusesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListProjectStatusesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListPrometheusTypesItems0 enum list prometheus types items0
//
// swagger:model EnumListPrometheusTypesItems0
type EnumListPrometheusTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list prometheus types items0
func (m *EnumListPrometheusTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list prometheus types items0 based on context it is used
func (m *EnumListPrometheusTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListPrometheusTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListPrometheusTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListPrometheusTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListRebootOptionsItems0 enum list reboot options items0
//
// swagger:model EnumListRebootOptionsItems0
type EnumListRebootOptionsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list reboot options items0
func (m *EnumListRebootOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list reboot options items0 based on context it is used
func (m *EnumListRebootOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListRebootOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListRebootOptionsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListRebootOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListReminderTypesItems0 enum list reminder types items0
//
// swagger:model EnumListReminderTypesItems0
type EnumListReminderTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list reminder types items0
func (m *EnumListReminderTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list reminder types items0 based on context it is used
func (m *EnumListReminderTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListReminderTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListReminderTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListReminderTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListRequestLogsItems0 enum list request logs items0
//
// swagger:model EnumListRequestLogsItems0
type EnumListRequestLogsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list request logs items0
func (m *EnumListRequestLogsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list request logs items0 based on context it is used
func (m *EnumListRequestLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListRequestLogsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListRequestLogsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListRequestLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListSecurityGroupRulesItems0 enum list security group rules items0
//
// swagger:model EnumListSecurityGroupRulesItems0
type EnumListSecurityGroupRulesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list security group rules items0
func (m *EnumListSecurityGroupRulesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list security group rules items0 based on context it is used
func (m *EnumListSecurityGroupRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListSecurityGroupRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListSecurityGroupRulesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListSecurityGroupRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListServerRolesItems0 enum list server roles items0
//
// swagger:model EnumListServerRolesItems0
type EnumListServerRolesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list server roles items0
func (m *EnumListServerRolesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list server roles items0 based on context it is used
func (m *EnumListServerRolesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListServerRolesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListServerRolesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListServerRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListServerStatusesItems0 enum list server statuses items0
//
// swagger:model EnumListServerStatusesItems0
type EnumListServerStatusesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list server statuses items0
func (m *EnumListServerStatusesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list server statuses items0 based on context it is used
func (m *EnumListServerStatusesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListServerStatusesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListServerStatusesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListServerStatusesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListShowbackKindsItems0 enum list showback kinds items0
//
// swagger:model EnumListShowbackKindsItems0
type EnumListShowbackKindsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list showback kinds items0
func (m *EnumListShowbackKindsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list showback kinds items0 based on context it is used
func (m *EnumListShowbackKindsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListShowbackKindsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListShowbackKindsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListShowbackKindsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListSlackTypesItems0 enum list slack types items0
//
// swagger:model EnumListSlackTypesItems0
type EnumListSlackTypesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list slack types items0
func (m *EnumListSlackTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list slack types items0 based on context it is used
func (m *EnumListSlackTypesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListSlackTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListSlackTypesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListSlackTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListStandaloneVMStatusesItems0 enum list standalone VM statuses items0
//
// swagger:model EnumListStandaloneVMStatusesItems0
type EnumListStandaloneVMStatusesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list standalone VM statuses items0
func (m *EnumListStandaloneVMStatusesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list standalone VM statuses items0 based on context it is used
func (m *EnumListStandaloneVMStatusesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListStandaloneVMStatusesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListStandaloneVMStatusesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListStandaloneVMStatusesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListUserRolesItems0 enum list user roles items0
//
// swagger:model EnumListUserRolesItems0
type EnumListUserRolesItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list user roles items0
func (m *EnumListUserRolesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list user roles items0 based on context it is used
func (m *EnumListUserRolesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListUserRolesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListUserRolesItems0) UnmarshalBinary(b []byte) error {
	var res EnumListUserRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnumListValidityPeriodsItems0 enum list validity periods items0
//
// swagger:model EnumListValidityPeriodsItems0
type EnumListValidityPeriodsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this enum list validity periods items0
func (m *EnumListValidityPeriodsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this enum list validity periods items0 based on context it is used
func (m *EnumListValidityPeriodsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnumListValidityPeriodsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnumListValidityPeriodsItems0) UnmarshalBinary(b []byte) error {
	var res EnumListValidityPeriodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
