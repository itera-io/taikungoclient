// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBillingSummaryCommand create billing summary command
//
// swagger:model CreateBillingSummaryCommand
type CreateBillingSummaryCommand struct {

	// begin apply
	// Required: true
	// Min Length: 1
	// Format: date-time
	BeginApply *strfmt.DateTime `json:"beginApply"`

	// icu
	// Required: true
	// Minimum: > 0
	Icu *int32 `json:"icu"`

	// project Id
	// Required: true
	// Minimum: > 0
	ProjectID *int32 `json:"projectId"`
}

// Validate validates this create billing summary command
func (m *CreateBillingSummaryCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeginApply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingSummaryCommand) validateBeginApply(formats strfmt.Registry) error {

	if err := validate.Required("beginApply", "body", m.BeginApply); err != nil {
		return err
	}

	if err := validate.MinLength("beginApply", "body", m.BeginApply.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("beginApply", "body", "date-time", m.BeginApply.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateBillingSummaryCommand) validateIcu(formats strfmt.Registry) error {

	if err := validate.Required("icu", "body", m.Icu); err != nil {
		return err
	}

	if err := validate.MinimumInt("icu", "body", int64(*m.Icu), 0, true); err != nil {
		return err
	}

	return nil
}

func (m *CreateBillingSummaryCommand) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.MinimumInt("projectId", "body", int64(*m.ProjectID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create billing summary command based on context it is used
func (m *CreateBillingSummaryCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingSummaryCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingSummaryCommand) UnmarshalBinary(b []byte) error {
	var res CreateBillingSummaryCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
