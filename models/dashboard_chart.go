// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DashboardChart dashboard chart
//
// swagger:model DashboardChart
type DashboardChart struct {

	// cloud credentials
	CloudCredentials *CredentialChartDto `json:"cloudCredentials,omitempty"`

	// organization
	Organization *OrganizationEntityForDashboard `json:"organization,omitempty"`

	// projects
	Projects *ProjectChartDto `json:"projects,omitempty"`

	// servers
	Servers *ServerChartDto `json:"servers,omitempty"`
}

// Validate validates this dashboard chart
func (m *DashboardChart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardChart) validateCloudCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudCredentials) { // not required
		return nil
	}

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) validateServers(formats strfmt.Registry) error {
	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	if m.Servers != nil {
		if err := m.Servers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dashboard chart based on the context it is used
func (m *DashboardChart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardChart) contextValidateCloudCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudCredentials != nil {
		if err := m.CloudCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.Projects != nil {
		if err := m.Projects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardChart) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	if m.Servers != nil {
		if err := m.Servers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardChart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardChart) UnmarshalBinary(b []byte) error {
	var res DashboardChart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
