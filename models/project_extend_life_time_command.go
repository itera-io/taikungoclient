// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectExtendLifeTimeCommand project extend life time command
//
// swagger:model ProjectExtendLifeTimeCommand
type ProjectExtendLifeTimeCommand struct {

	// delete on expiration
	DeleteOnExpiration bool `json:"deleteOnExpiration"`

	// expire at
	// Format: date-time
	ExpireAt *strfmt.DateTime `json:"expireAt,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`
}

// Validate validates this project extend life time command
func (m *ProjectExtendLifeTimeCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpireAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectExtendLifeTimeCommand) validateExpireAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpireAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expireAt", "body", "date-time", m.ExpireAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project extend life time command based on context it is used
func (m *ProjectExtendLifeTimeCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectExtendLifeTimeCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectExtendLifeTimeCommand) UnmarshalBinary(b []byte) error {
	var res ProjectExtendLifeTimeCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
