// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AvailablePackageDetailsDto available package details dto
//
// swagger:model AvailablePackageDetailsDto
type AvailablePackageDetailsDto struct {

	// app repo Id
	AppRepoID string `json:"appRepoId,omitempty"`

	// app repo name
	AppRepoName string `json:"appRepoName,omitempty"`

	// app repo organization name
	AppRepoOrganizationName string `json:"appRepoOrganizationName,omitempty"`

	// app version
	AppVersion string `json:"appVersion,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// logo Id
	LogoID string `json:"logoId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// package Id
	PackageID string `json:"packageId,omitempty"`

	// readme
	Readme string `json:"readme,omitempty"`

	// security report
	SecurityReport *SecurityReportSummariesDto `json:"securityReport,omitempty"`

	// stars
	Stars int32 `json:"stars,omitempty"`
}

// Validate validates this available package details dto
func (m *AvailablePackageDetailsDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecurityReport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailablePackageDetailsDto) validateSecurityReport(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityReport) { // not required
		return nil
	}

	if m.SecurityReport != nil {
		if err := m.SecurityReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReport")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this available package details dto based on the context it is used
func (m *AvailablePackageDetailsDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailablePackageDetailsDto) contextValidateSecurityReport(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityReport != nil {
		if err := m.SecurityReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityReport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailablePackageDetailsDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailablePackageDetailsDto) UnmarshalBinary(b []byte) error {
	var res AvailablePackageDetailsDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
