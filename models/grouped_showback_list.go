// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GroupedShowbackList grouped showback list
//
// swagger:model GroupedShowbackList
type GroupedShowbackList struct {

	// by label values
	ByLabelValues []*GroupedShowbackListByLabelValuesItems0 `json:"byLabelValues"`

	// credentials
	Credentials []*GroupedShowbackListCredentialsItems0 `json:"credentials"`

	// projects
	Projects []*GroupedShowbackListProjectsItems0 `json:"projects"`
}

// Validate validates this grouped showback list
func (m *GroupedShowbackList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByLabelValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackList) validateByLabelValues(formats strfmt.Registry) error {
	if swag.IsZero(m.ByLabelValues) { // not required
		return nil
	}

	for i := 0; i < len(m.ByLabelValues); i++ {
		if swag.IsZero(m.ByLabelValues[i]) { // not required
			continue
		}

		if m.ByLabelValues[i] != nil {
			if err := m.ByLabelValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byLabelValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("byLabelValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupedShowbackList) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupedShowbackList) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this grouped showback list based on the context it is used
func (m *GroupedShowbackList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByLabelValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackList) contextValidateByLabelValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ByLabelValues); i++ {

		if m.ByLabelValues[i] != nil {
			if err := m.ByLabelValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byLabelValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("byLabelValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupedShowbackList) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GroupedShowbackList) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {
			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackList) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListByLabelValuesItems0 grouped showback list by label values items0
//
// swagger:model GroupedShowbackListByLabelValuesItems0
type GroupedShowbackListByLabelValuesItems0 struct {

	// data
	Data []*GroupedShowbackListByLabelValuesItems0DataItems0 `json:"data"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// total price
	TotalPrice float64 `json:"totalPrice,omitempty"`
}

// Validate validates this grouped showback list by label values items0
func (m *GroupedShowbackListByLabelValuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListByLabelValuesItems0) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this grouped showback list by label values items0 based on the context it is used
func (m *GroupedShowbackListByLabelValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListByLabelValuesItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListByLabelValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListByLabelValuesItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListByLabelValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListByLabelValuesItems0DataItems0 grouped showback list by label values items0 data items0
//
// swagger:model GroupedShowbackListByLabelValuesItems0DataItems0
type GroupedShowbackListByLabelValuesItems0DataItems0 struct {

	// price
	Price float64 `json:"price,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`
}

// Validate validates this grouped showback list by label values items0 data items0
func (m *GroupedShowbackListByLabelValuesItems0DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this grouped showback list by label values items0 data items0 based on context it is used
func (m *GroupedShowbackListByLabelValuesItems0DataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListByLabelValuesItems0DataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListByLabelValuesItems0DataItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListByLabelValuesItems0DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListCredentialsItems0 grouped showback list credentials items0
//
// swagger:model GroupedShowbackListCredentialsItems0
type GroupedShowbackListCredentialsItems0 struct {

	// data
	Data []*GroupedShowbackListCredentialsItems0DataItems0 `json:"data"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// total price
	TotalPrice float64 `json:"totalPrice,omitempty"`
}

// Validate validates this grouped showback list credentials items0
func (m *GroupedShowbackListCredentialsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListCredentialsItems0) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this grouped showback list credentials items0 based on the context it is used
func (m *GroupedShowbackListCredentialsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListCredentialsItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListCredentialsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListCredentialsItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListCredentialsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListCredentialsItems0DataItems0 grouped showback list credentials items0 data items0
//
// swagger:model GroupedShowbackListCredentialsItems0DataItems0
type GroupedShowbackListCredentialsItems0DataItems0 struct {

	// price
	Price float64 `json:"price,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`
}

// Validate validates this grouped showback list credentials items0 data items0
func (m *GroupedShowbackListCredentialsItems0DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this grouped showback list credentials items0 data items0 based on context it is used
func (m *GroupedShowbackListCredentialsItems0DataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListCredentialsItems0DataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListCredentialsItems0DataItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListCredentialsItems0DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListProjectsItems0 grouped showback list projects items0
//
// swagger:model GroupedShowbackListProjectsItems0
type GroupedShowbackListProjectsItems0 struct {

	// data
	Data []*GroupedShowbackListProjectsItems0DataItems0 `json:"data"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// total price
	TotalPrice float64 `json:"totalPrice,omitempty"`
}

// Validate validates this grouped showback list projects items0
func (m *GroupedShowbackListProjectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListProjectsItems0) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this grouped showback list projects items0 based on the context it is used
func (m *GroupedShowbackListProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupedShowbackListProjectsItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListProjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListProjectsItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupedShowbackListProjectsItems0DataItems0 grouped showback list projects items0 data items0
//
// swagger:model GroupedShowbackListProjectsItems0DataItems0
type GroupedShowbackListProjectsItems0DataItems0 struct {

	// price
	Price float64 `json:"price,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`
}

// Validate validates this grouped showback list projects items0 data items0
func (m *GroupedShowbackListProjectsItems0DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this grouped showback list projects items0 data items0 based on context it is used
func (m *GroupedShowbackListProjectsItems0DataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupedShowbackListProjectsItems0DataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupedShowbackListProjectsItems0DataItems0) UnmarshalBinary(b []byte) error {
	var res GroupedShowbackListProjectsItems0DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
