// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateAccessProfileCommand create access profile command
//
// swagger:model CreateAccessProfileCommand
type CreateAccessProfileCommand struct {

	// allowed hosts
	AllowedHosts []*CreateAccessProfileCommandAllowedHostsItems0 `json:"allowedHosts"`

	// dns servers
	DNSServers []*CreateAccessProfileCommandDNSServersItems0 `json:"dnsServers"`

	// http proxy
	HTTPProxy string `json:"httpProxy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ntp servers
	NtpServers []*CreateAccessProfileCommandNtpServersItems0 `json:"ntpServers"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// ssh users
	SSHUsers []*CreateAccessProfileCommandSSHUsersItems0 `json:"sshUsers"`
}

// Validate validates this create access profile command
func (m *CreateAccessProfileCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAccessProfileCommand) validateAllowedHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedHosts) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedHosts); i++ {
		if swag.IsZero(m.AllowedHosts[i]) { // not required
			continue
		}

		if m.AllowedHosts[i] != nil {
			if err := m.AllowedHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSServers); i++ {
		if swag.IsZero(m.DNSServers[i]) { // not required
			continue
		}

		if m.DNSServers[i] != nil {
			if err := m.DNSServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) validateNtpServers(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NtpServers); i++ {
		if swag.IsZero(m.NtpServers[i]) { // not required
			continue
		}

		if m.NtpServers[i] != nil {
			if err := m.NtpServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) validateSSHUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.SSHUsers); i++ {
		if swag.IsZero(m.SSHUsers[i]) { // not required
			continue
		}

		if m.SSHUsers[i] != nil {
			if err := m.SSHUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create access profile command based on the context it is used
func (m *CreateAccessProfileCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAccessProfileCommand) contextValidateAllowedHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllowedHosts); i++ {

		if m.AllowedHosts[i] != nil {
			if err := m.AllowedHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DNSServers); i++ {

		if m.DNSServers[i] != nil {
			if err := m.DNSServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) contextValidateNtpServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NtpServers); i++ {

		if m.NtpServers[i] != nil {
			if err := m.NtpServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateAccessProfileCommand) contextValidateSSHUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SSHUsers); i++ {

		if m.SSHUsers[i] != nil {
			if err := m.SSHUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccessProfileCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccessProfileCommand) UnmarshalBinary(b []byte) error {
	var res CreateAccessProfileCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateAccessProfileCommandAllowedHostsItems0 create access profile command allowed hosts items0
//
// swagger:model CreateAccessProfileCommandAllowedHostsItems0
type CreateAccessProfileCommandAllowedHostsItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mask bits
	MaskBits int32 `json:"maskBits,omitempty"`
}

// Validate validates this create access profile command allowed hosts items0
func (m *CreateAccessProfileCommandAllowedHostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create access profile command allowed hosts items0 based on context it is used
func (m *CreateAccessProfileCommandAllowedHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccessProfileCommandAllowedHostsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccessProfileCommandAllowedHostsItems0) UnmarshalBinary(b []byte) error {
	var res CreateAccessProfileCommandAllowedHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateAccessProfileCommandDNSServersItems0 create access profile command DNS servers items0
//
// swagger:model CreateAccessProfileCommandDNSServersItems0
type CreateAccessProfileCommandDNSServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`
}

// Validate validates this create access profile command DNS servers items0
func (m *CreateAccessProfileCommandDNSServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create access profile command DNS servers items0 based on context it is used
func (m *CreateAccessProfileCommandDNSServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccessProfileCommandDNSServersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccessProfileCommandDNSServersItems0) UnmarshalBinary(b []byte) error {
	var res CreateAccessProfileCommandDNSServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateAccessProfileCommandNtpServersItems0 create access profile command ntp servers items0
//
// swagger:model CreateAccessProfileCommandNtpServersItems0
type CreateAccessProfileCommandNtpServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`
}

// Validate validates this create access profile command ntp servers items0
func (m *CreateAccessProfileCommandNtpServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create access profile command ntp servers items0 based on context it is used
func (m *CreateAccessProfileCommandNtpServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccessProfileCommandNtpServersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccessProfileCommandNtpServersItems0) UnmarshalBinary(b []byte) error {
	var res CreateAccessProfileCommandNtpServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateAccessProfileCommandSSHUsersItems0 create access profile command SSH users items0
//
// swagger:model CreateAccessProfileCommandSSHUsersItems0
type CreateAccessProfileCommandSSHUsersItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this create access profile command SSH users items0
func (m *CreateAccessProfileCommandSSHUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create access profile command SSH users items0 based on context it is used
func (m *CreateAccessProfileCommandSSHUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccessProfileCommandSSHUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccessProfileCommandSSHUsersItems0) UnmarshalBinary(b []byte) error {
	var res CreateAccessProfileCommandSSHUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
