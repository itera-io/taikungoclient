// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateStandAloneDiskCommand create stand alone disk command
//
// swagger:model CreateStandAloneDiskCommand
type CreateStandAloneDiskCommand struct {

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// lun Id
	LunID int32 `json:"lunId,omitempty"`

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// size
	// Maximum: 10000
	// Minimum: 1
	Size int64 `json:"size,omitempty"`

	// standalone Vm Id
	// Required: true
	// Minimum: > 0
	StandaloneVMID *int32 `json:"standaloneVmId"`

	// volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this create stand alone disk command
func (m *CreateStandAloneDiskCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandaloneVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateStandAloneDiskCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneDiskCommand) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := validate.MinimumInt("size", "body", m.Size, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("size", "body", m.Size, 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateStandAloneDiskCommand) validateStandaloneVMID(formats strfmt.Registry) error {

	if err := validate.Required("standaloneVmId", "body", m.StandaloneVMID); err != nil {
		return err
	}

	if err := validate.MinimumInt("standaloneVmId", "body", int64(*m.StandaloneVMID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create stand alone disk command based on context it is used
func (m *CreateStandAloneDiskCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateStandAloneDiskCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateStandAloneDiskCommand) UnmarshalBinary(b []byte) error {
	var res CreateStandAloneDiskCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
