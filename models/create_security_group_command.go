// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSecurityGroupCommand create security group command
//
// swagger:model CreateSecurityGroupCommand
type CreateSecurityGroupCommand struct {

	// name
	// Required: true
	// Max Length: 30
	// Min Length: 3
	Name *string `json:"name"`

	// port max range
	PortMaxRange int32 `json:"portMaxRange,omitempty"`

	// port min range
	PortMinRange int32 `json:"portMinRange,omitempty"`

	// protocol
	Protocol SecurityGroupProtocol `json:"protocol,omitempty"`

	// remote Ip prefix
	// Required: true
	// Min Length: 1
	RemoteIPPrefix *string `json:"remoteIpPrefix"`

	// stand alone profile Id
	// Required: true
	// Minimum: > 0
	StandAloneProfileID *int32 `json:"standAloneProfileId"`
}

// Validate validates this create security group command
func (m *CreateSecurityGroupCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteIPPrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandAloneProfileID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSecurityGroupCommand) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 30); err != nil {
		return err
	}

	return nil
}

func (m *CreateSecurityGroupCommand) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *CreateSecurityGroupCommand) validateRemoteIPPrefix(formats strfmt.Registry) error {

	if err := validate.Required("remoteIpPrefix", "body", m.RemoteIPPrefix); err != nil {
		return err
	}

	if err := validate.MinLength("remoteIpPrefix", "body", *m.RemoteIPPrefix, 1); err != nil {
		return err
	}

	return nil
}

func (m *CreateSecurityGroupCommand) validateStandAloneProfileID(formats strfmt.Registry) error {

	if err := validate.Required("standAloneProfileId", "body", m.StandAloneProfileID); err != nil {
		return err
	}

	if err := validate.MinimumInt("standAloneProfileId", "body", int64(*m.StandAloneProfileID), 0, true); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create security group command based on the context it is used
func (m *CreateSecurityGroupCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSecurityGroupCommand) contextValidateProtocol(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Protocol.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSecurityGroupCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSecurityGroupCommand) UnmarshalBinary(b []byte) error {
	var res CreateSecurityGroupCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
