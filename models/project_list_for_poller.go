// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectListForPoller project list for poller
//
// swagger:model ProjectListForPoller
type ProjectListForPoller struct {

	// data
	Data []*ProjectListForPollerDataItems0 `json:"data"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`
}

// Validate validates this project list for poller
func (m *ProjectListForPoller) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPoller) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project list for poller based on the context it is used
func (m *ProjectListForPoller) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPoller) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPoller) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPoller) UnmarshalBinary(b []byte) error {
	var res ProjectListForPoller
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0 project list for poller data items0
//
// swagger:model ProjectListForPollerDataItems0
type ProjectListForPollerDataItems0 struct {

	// access Ip
	AccessIP string `json:"accessIp,omitempty"`

	// access profile revision
	AccessProfileRevision int32 `json:"accessProfileRevision,omitempty"`

	// access profiles
	AccessProfiles *ProjectListForPollerDataItems0AccessProfiles `json:"accessProfiles,omitempty"`

	// availability zones
	AvailabilityZones []string `json:"availabilityZones"`

	// aws project a z subnets
	AwsProjectAZSubnets []*ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0 `json:"awsProjectAZSubnets"`

	// bastion
	Bastion int32 `json:"bastion,omitempty"`

	// bound users
	BoundUsers []*ProjectListForPollerDataItems0BoundUsersItems0 `json:"boundUsers"`

	// cidr
	Cidr string `json:"cidr,omitempty"`

	// cloud credential Id
	CloudCredentialID int32 `json:"cloudCredentialId,omitempty"`

	// cloud credential name
	CloudCredentialName string `json:"cloudCredentialName,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// flavors
	Flavors []string `json:"flavors"`

	// google project Id
	GoogleProjectID string `json:"googleProjectId,omitempty"`

	// has kube config file
	HasKubeConfigFile bool `json:"hasKubeConfigFile"`

	// has selected flavors
	HasSelectedFlavors bool `json:"hasSelectedFlavors"`

	// health
	Health string `json:"health,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// is auto upgrade
	IsAutoUpgrade bool `json:"isAutoUpgrade"`

	// is autoscaling enabled
	IsAutoscalingEnabled bool `json:"isAutoscalingEnabled"`

	// is backup enabled
	IsBackupEnabled bool `json:"isBackupEnabled"`

	// is delete cluster
	IsDeleteCluster bool `json:"isDeleteCluster"`

	// is kubernetes
	IsKubernetes bool `json:"isKubernetes"`

	// is kubevap enabled
	IsKubevapEnabled bool `json:"isKubevapEnabled"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// is monitoring enabled
	IsMonitoringEnabled bool `json:"isMonitoringEnabled"`

	// is opa enabled
	IsOpaEnabled bool `json:"isOpaEnabled"`

	// job Url
	JobURL string `json:"jobUrl,omitempty"`

	// kubernetes alerts
	KubernetesAlerts []*ProjectListForPollerDataItems0KubernetesAlertsItems0 `json:"kubernetesAlerts"`

	// kubernetes current version
	KubernetesCurrentVersion string `json:"kubernetesCurrentVersion,omitempty"`

	// kubernetes profiles
	KubernetesProfiles *ProjectListForPollerDataItems0KubernetesProfiles `json:"kubernetesProfiles,omitempty"`

	// kubernetes target version
	KubernetesTargetVersion string `json:"kubernetesTargetVersion,omitempty"`

	// kubespray current version
	KubesprayCurrentVersion string `json:"kubesprayCurrentVersion,omitempty"`

	// kubespray target version
	KubesprayTargetVersion string `json:"kubesprayTargetVersion,omitempty"`

	// kubevap enabeled kubernetes versions
	KubevapEnabeledKubernetesVersions []string `json:"kubevapEnabeledKubernetesVersions"`

	// master
	Master int32 `json:"master,omitempty"`

	// master ready
	MasterReady int32 `json:"masterReady,omitempty"`

	// monitoring credential
	MonitoringCredential *ProjectListForPollerDataItems0MonitoringCredential `json:"monitoringCredential,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// net mask
	NetMask int32 `json:"netMask,omitempty"`

	// opa profile revision
	OpaProfileRevision int32 `json:"opaProfileRevision,omitempty"`

	// opa profiles
	OpaProfiles *ProjectListForPollerDataItems0OpaProfiles `json:"opaProfiles,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// partner Id
	PartnerID int32 `json:"partnerId,omitempty"`

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// quota Id
	QuotaID int32 `json:"quotaId,omitempty"`

	// router Id end range
	RouterIDEndRange int32 `json:"routerIdEndRange,omitempty"`

	// router Id start range
	RouterIDStartRange int32 `json:"routerIdStartRange,omitempty"`

	// s3 access key Id
	S3AccessKeyID string `json:"s3AccessKeyId,omitempty"`

	// s3 bucket name
	S3BucketName string `json:"s3BucketName,omitempty"`

	// s3 endpoint
	S3Endpoint string `json:"s3Endpoint,omitempty"`

	// s3 region
	S3Region string `json:"s3Region,omitempty"`

	// s3 secret key
	S3SecretKey string `json:"s3SecretKey,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// taikun l b flavor
	TaikunLBFlavor string `json:"taikunLBFlavor,omitempty"`

	// taikun l b private key
	TaikunLBPrivateKey string `json:"taikunLBPrivateKey,omitempty"`

	// taikun l b public key
	TaikunLBPublicKey string `json:"taikunLBPublicKey,omitempty"`

	// taikun private SSH key
	TaikunPrivateSSHKey string `json:"taikunPrivateSSHKey,omitempty"`

	// taikun public SSH key
	TaikunPublicSSHKey string `json:"taikunPublicSSHKey,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// topic name
	TopicName string `json:"topicName,omitempty"`

	// total servers count
	TotalServersCount int32 `json:"totalServersCount,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this project list for poller data items0
func (m *ProjectListForPollerDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsProjectAZSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoundUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpaProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0) validateAccessProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessProfiles) { // not required
		return nil
	}

	if m.AccessProfiles != nil {
		if err := m.AccessProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateAwsProjectAZSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsProjectAZSubnets) { // not required
		return nil
	}

	for i := 0; i < len(m.AwsProjectAZSubnets); i++ {
		if swag.IsZero(m.AwsProjectAZSubnets[i]) { // not required
			continue
		}

		if m.AwsProjectAZSubnets[i] != nil {
			if err := m.AwsProjectAZSubnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateBoundUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.BoundUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.BoundUsers); i++ {
		if swag.IsZero(m.BoundUsers[i]) { // not required
			continue
		}

		if m.BoundUsers[i] != nil {
			if err := m.BoundUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateKubernetesAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesAlerts) { // not required
		return nil
	}

	for i := 0; i < len(m.KubernetesAlerts); i++ {
		if swag.IsZero(m.KubernetesAlerts[i]) { // not required
			continue
		}

		if m.KubernetesAlerts[i] != nil {
			if err := m.KubernetesAlerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateKubernetesProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesProfiles) { // not required
		return nil
	}

	if m.KubernetesProfiles != nil {
		if err := m.KubernetesProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateMonitoringCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitoringCredential) { // not required
		return nil
	}

	if m.MonitoringCredential != nil {
		if err := m.MonitoringCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringCredential")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateOpaProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.OpaProfiles) { // not required
		return nil
	}

	if m.OpaProfiles != nil {
		if err := m.OpaProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opaProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opaProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project list for poller data items0 based on the context it is used
func (m *ProjectListForPollerDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsProjectAZSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoundUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitoringCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpaProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateAccessProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessProfiles != nil {
		if err := m.AccessProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateAwsProjectAZSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AwsProjectAZSubnets); i++ {

		if m.AwsProjectAZSubnets[i] != nil {
			if err := m.AwsProjectAZSubnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awsProjectAZSubnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateBoundUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BoundUsers); i++ {

		if m.BoundUsers[i] != nil {
			if err := m.BoundUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boundUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateKubernetesAlerts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KubernetesAlerts); i++ {

		if m.KubernetesAlerts[i] != nil {
			if err := m.KubernetesAlerts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesAlerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateKubernetesProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesProfiles != nil {
		if err := m.KubernetesProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateMonitoringCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitoringCredential != nil {
		if err := m.MonitoringCredential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringCredential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringCredential")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectListForPollerDataItems0) contextValidateOpaProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.OpaProfiles != nil {
		if err := m.OpaProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opaProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("opaProfiles")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AccessProfiles project list for poller data items0 access profiles
//
// swagger:model ProjectListForPollerDataItems0AccessProfiles
type ProjectListForPollerDataItems0AccessProfiles struct {

	// allowed hosts
	AllowedHosts []*ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0 `json:"allowedHosts"`

	// dns servers
	DNSServers []*ProjectListForPollerDataItems0AccessProfilesDNSServersItems0 `json:"dnsServers"`

	// http proxy
	HTTPProxy string `json:"httpProxy,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// ntp servers
	NtpServers []*ProjectListForPollerDataItems0AccessProfilesNtpServersItems0 `json:"ntpServers"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// ssh users
	SSHUsers []*ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0 `json:"sshUsers"`
}

// Validate validates this project list for poller data items0 access profiles
func (m *ProjectListForPollerDataItems0AccessProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) validateAllowedHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedHosts) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedHosts); i++ {
		if swag.IsZero(m.AllowedHosts[i]) { // not required
			continue
		}

		if m.AllowedHosts[i] != nil {
			if err := m.AllowedHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSServers); i++ {
		if swag.IsZero(m.DNSServers[i]) { // not required
			continue
		}

		if m.DNSServers[i] != nil {
			if err := m.DNSServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) validateNtpServers(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NtpServers); i++ {
		if swag.IsZero(m.NtpServers[i]) { // not required
			continue
		}

		if m.NtpServers[i] != nil {
			if err := m.NtpServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) validateSSHUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.SSHUsers); i++ {
		if swag.IsZero(m.SSHUsers[i]) { // not required
			continue
		}

		if m.SSHUsers[i] != nil {
			if err := m.SSHUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project list for poller data items0 access profiles based on the context it is used
func (m *ProjectListForPollerDataItems0AccessProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) contextValidateAllowedHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllowedHosts); i++ {

		if m.AllowedHosts[i] != nil {
			if err := m.AllowedHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "allowedHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DNSServers); i++ {

		if m.DNSServers[i] != nil {
			if err := m.DNSServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "dnsServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) contextValidateNtpServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NtpServers); i++ {

		if m.NtpServers[i] != nil {
			if err := m.NtpServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "ntpServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectListForPollerDataItems0AccessProfiles) contextValidateSSHUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SSHUsers); i++ {

		if m.SSHUsers[i] != nil {
			if err := m.SSHUsers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accessProfiles" + "." + "sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AccessProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0 project list for poller data items0 access profiles allowed hosts items0
//
// swagger:model ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0
type ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0 struct {

	// access profile Id
	AccessProfileID int32 `json:"accessProfileId,omitempty"`

	// access profile name
	AccessProfileName string `json:"accessProfileName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// mask bits
	MaskBits int32 `json:"maskBits,omitempty"`
}

// Validate validates this project list for poller data items0 access profiles allowed hosts items0
func (m *ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 access profiles allowed hosts items0 based on context it is used
func (m *ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AccessProfilesAllowedHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AccessProfilesDNSServersItems0 project list for poller data items0 access profiles DNS servers items0
//
// swagger:model ProjectListForPollerDataItems0AccessProfilesDNSServersItems0
type ProjectListForPollerDataItems0AccessProfilesDNSServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this project list for poller data items0 access profiles DNS servers items0
func (m *ProjectListForPollerDataItems0AccessProfilesDNSServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 access profiles DNS servers items0 based on context it is used
func (m *ProjectListForPollerDataItems0AccessProfilesDNSServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesDNSServersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesDNSServersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AccessProfilesDNSServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AccessProfilesNtpServersItems0 project list for poller data items0 access profiles ntp servers items0
//
// swagger:model ProjectListForPollerDataItems0AccessProfilesNtpServersItems0
type ProjectListForPollerDataItems0AccessProfilesNtpServersItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`
}

// Validate validates this project list for poller data items0 access profiles ntp servers items0
func (m *ProjectListForPollerDataItems0AccessProfilesNtpServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 access profiles ntp servers items0 based on context it is used
func (m *ProjectListForPollerDataItems0AccessProfilesNtpServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesNtpServersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesNtpServersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AccessProfilesNtpServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0 project list for poller data items0 access profiles SSH users items0
//
// swagger:model ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0
type ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"isDeleted"`

	// name
	Name string `json:"name,omitempty"`

	// ssh public key
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this project list for poller data items0 access profiles SSH users items0
func (m *ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 access profiles SSH users items0 based on context it is used
func (m *ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AccessProfilesSSHUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0 project list for poller data items0 aws project a z subnets items0
//
// swagger:model ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0
type ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0 struct {

	// private Ip
	PrivateIP string `json:"privateIp,omitempty"`

	// public Ip
	PublicIP string `json:"publicIp,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this project list for poller data items0 aws project a z subnets items0
func (m *ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 aws project a z subnets items0 based on context it is used
func (m *ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0AwsProjectAZSubnetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0BoundUsersItems0 project list for poller data items0 bound users items0
//
// swagger:model ProjectListForPollerDataItems0BoundUsersItems0
type ProjectListForPollerDataItems0BoundUsersItems0 struct {

	// user Id
	UserID string `json:"userId,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`
}

// Validate validates this project list for poller data items0 bound users items0
func (m *ProjectListForPollerDataItems0BoundUsersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 bound users items0 based on context it is used
func (m *ProjectListForPollerDataItems0BoundUsersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0BoundUsersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0BoundUsersItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0BoundUsersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0KubernetesAlertsItems0 project list for poller data items0 kubernetes alerts items0
//
// swagger:model ProjectListForPollerDataItems0KubernetesAlertsItems0
type ProjectListForPollerDataItems0KubernetesAlertsItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// end at
	EndAt string `json:"endAt,omitempty"`

	// fingerprint
	Fingerprint string `json:"fingerprint,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is silenced
	IsSilenced bool `json:"isSilenced"`

	// is solved
	IsSolved bool `json:"isSolved"`

	// labels
	Labels interface{} `json:"labels,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// project Id
	ProjectID int32 `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// silence reason
	SilenceReason string `json:"silenceReason,omitempty"`

	// starts at
	StartsAt string `json:"startsAt,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this project list for poller data items0 kubernetes alerts items0
func (m *ProjectListForPollerDataItems0KubernetesAlertsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 kubernetes alerts items0 based on context it is used
func (m *ProjectListForPollerDataItems0KubernetesAlertsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesAlertsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesAlertsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0KubernetesAlertsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0KubernetesProfiles project list for poller data items0 kubernetes profiles
//
// swagger:model ProjectListForPollerDataItems0KubernetesProfiles
type ProjectListForPollerDataItems0KubernetesProfiles struct {

	// allow scheduling on master
	AllowSchedulingOnMaster bool `json:"allowSchedulingOnMaster"`

	// cni
	Cni string `json:"cni,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// expose node port on bastion
	ExposeNodePortOnBastion bool `json:"exposeNodePortOnBastion"`

	// id
	ID int32 `json:"id,omitempty"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// last modified by
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// octavia enabled
	OctaviaEnabled bool `json:"octaviaEnabled"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// projects
	Projects []*ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0 `json:"projects"`

	// taikun l b enabled
	TaikunLBEnabled bool `json:"taikunLBEnabled"`

	// unique cluster name
	UniqueClusterName bool `json:"uniqueClusterName"`
}

// Validate validates this project list for poller data items0 kubernetes profiles
func (m *ProjectListForPollerDataItems0KubernetesProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0KubernetesProfiles) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project list for poller data items0 kubernetes profiles based on the context it is used
func (m *ProjectListForPollerDataItems0KubernetesProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0KubernetesProfiles) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {
			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetesProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesProfiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0KubernetesProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0 project list for poller data items0 kubernetes profiles projects items0
//
// swagger:model ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0
type ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project list for poller data items0 kubernetes profiles projects items0
func (m *ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 kubernetes profiles projects items0 based on context it is used
func (m *ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0KubernetesProfilesProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0MonitoringCredential project list for poller data items0 monitoring credential
//
// swagger:model ProjectListForPollerDataItems0MonitoringCredential
type ProjectListForPollerDataItems0MonitoringCredential struct {

	// alert manager Url
	AlertManagerURL string `json:"alertManagerUrl,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// loki Url
	LokiURL string `json:"lokiUrl,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// prometheus Url
	PrometheusURL string `json:"prometheusUrl,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this project list for poller data items0 monitoring credential
func (m *ProjectListForPollerDataItems0MonitoringCredential) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 monitoring credential based on context it is used
func (m *ProjectListForPollerDataItems0MonitoringCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0MonitoringCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0MonitoringCredential) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0MonitoringCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0OpaProfiles project list for poller data items0 opa profiles
//
// swagger:model ProjectListForPollerDataItems0OpaProfiles
type ProjectListForPollerDataItems0OpaProfiles struct {

	// allowed repo
	AllowedRepo []string `json:"allowedRepo"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// forbid Http ingress
	ForbidHTTPIngress bool `json:"forbidHttpIngress"`

	// forbid node port
	ForbidNodePort bool `json:"forbidNodePort"`

	// forbid specific tags
	ForbidSpecificTags []string `json:"forbidSpecificTags"`

	// id
	ID int32 `json:"id,omitempty"`

	// ingress whitelist
	IngressWhitelist []string `json:"ingressWhitelist"`

	// is default
	IsDefault bool `json:"isDefault"`

	// is locked
	IsLocked bool `json:"isLocked"`

	// name
	Name string `json:"name,omitempty"`

	// organization Id
	OrganizationID int32 `json:"organizationId,omitempty"`

	// organization name
	OrganizationName string `json:"organizationName,omitempty"`

	// projects
	Projects []*ProjectListForPollerDataItems0OpaProfilesProjectsItems0 `json:"projects"`

	// require probe
	RequireProbe bool `json:"requireProbe"`

	// revision
	Revision int32 `json:"revision,omitempty"`

	// unique ingresses
	UniqueIngresses bool `json:"uniqueIngresses"`

	// unique service selector
	UniqueServiceSelector bool `json:"uniqueServiceSelector"`
}

// Validate validates this project list for poller data items0 opa profiles
func (m *ProjectListForPollerDataItems0OpaProfiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0OpaProfiles) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this project list for poller data items0 opa profiles based on the context it is used
func (m *ProjectListForPollerDataItems0OpaProfiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectListForPollerDataItems0OpaProfiles) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {
			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("opaProfiles" + "." + "projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0OpaProfiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0OpaProfiles) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0OpaProfiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectListForPollerDataItems0OpaProfilesProjectsItems0 project list for poller data items0 opa profiles projects items0
//
// swagger:model ProjectListForPollerDataItems0OpaProfilesProjectsItems0
type ProjectListForPollerDataItems0OpaProfilesProjectsItems0 struct {

	// id
	ID int32 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this project list for poller data items0 opa profiles projects items0
func (m *ProjectListForPollerDataItems0OpaProfilesProjectsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project list for poller data items0 opa profiles projects items0 based on context it is used
func (m *ProjectListForPollerDataItems0OpaProfilesProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0OpaProfilesProjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectListForPollerDataItems0OpaProfilesProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ProjectListForPollerDataItems0OpaProfilesProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
