// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServerChartDto server chart dto
//
// swagger:model ServerChartDto
type ServerChartDto struct {

	// aws
	Aws []*ServerCommonRecordDto `json:"aws"`

	// azure
	Azure []*ServerCommonRecordDto `json:"azure"`

	// failed
	Failed []*ServerCommonRecordDto `json:"failed"`

	// openstack
	Openstack []*ServerCommonRecordDto `json:"openstack"`

	// pending
	Pending []interface{} `json:"pending"`

	// succeeded
	Succeeded []interface{} `json:"succeeded"`

	// total aws count
	TotalAwsCount int32 `json:"totalAwsCount,omitempty"`

	// total azure count
	TotalAzureCount int32 `json:"totalAzureCount,omitempty"`

	// total count
	TotalCount int32 `json:"totalCount,omitempty"`

	// total Cpu
	TotalCPU int32 `json:"totalCpu,omitempty"`

	// total disk size
	TotalDiskSize int64 `json:"totalDiskSize,omitempty"`

	// total failed count
	TotalFailedCount int32 `json:"totalFailedCount,omitempty"`

	// total openstack count
	TotalOpenstackCount int32 `json:"totalOpenstackCount,omitempty"`

	// total pending count
	TotalPendingCount int32 `json:"totalPendingCount,omitempty"`

	// total Ram
	TotalRAM int64 `json:"totalRam,omitempty"`

	// total succeeded count
	TotalSucceededCount int32 `json:"totalSucceededCount,omitempty"`

	// total updating count
	TotalUpdatingCount int32 `json:"totalUpdatingCount,omitempty"`

	// updating
	Updating []interface{} `json:"updating"`

	// used resources
	UsedResources []interface{} `json:"usedResources"`
}

// Validate validates this server chart dto
func (m *ServerChartDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenstack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerChartDto) validateAws(formats strfmt.Registry) error {
	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	for i := 0; i < len(m.Aws); i++ {
		if swag.IsZero(m.Aws[i]) { // not required
			continue
		}

		if m.Aws[i] != nil {
			if err := m.Aws[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aws" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aws" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) validateAzure(formats strfmt.Registry) error {
	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	for i := 0; i < len(m.Azure); i++ {
		if swag.IsZero(m.Azure[i]) { // not required
			continue
		}

		if m.Azure[i] != nil {
			if err := m.Azure[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azure" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azure" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) validateFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.Failed) { // not required
		return nil
	}

	for i := 0; i < len(m.Failed); i++ {
		if swag.IsZero(m.Failed[i]) { // not required
			continue
		}

		if m.Failed[i] != nil {
			if err := m.Failed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) validateOpenstack(formats strfmt.Registry) error {
	if swag.IsZero(m.Openstack) { // not required
		return nil
	}

	for i := 0; i < len(m.Openstack); i++ {
		if swag.IsZero(m.Openstack[i]) { // not required
			continue
		}

		if m.Openstack[i] != nil {
			if err := m.Openstack[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openstack" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("openstack" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this server chart dto based on the context it is used
func (m *ServerChartDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenstack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerChartDto) contextValidateAws(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aws); i++ {

		if m.Aws[i] != nil {
			if err := m.Aws[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aws" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aws" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) contextValidateAzure(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Azure); i++ {

		if m.Azure[i] != nil {
			if err := m.Azure[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azure" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azure" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) contextValidateFailed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failed); i++ {

		if m.Failed[i] != nil {
			if err := m.Failed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerChartDto) contextValidateOpenstack(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Openstack); i++ {

		if m.Openstack[i] != nil {
			if err := m.Openstack[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openstack" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("openstack" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerChartDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerChartDto) UnmarshalBinary(b []byte) error {
	var res ServerChartDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
